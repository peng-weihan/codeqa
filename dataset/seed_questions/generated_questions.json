[
{"question":"What are the expected input parameters and return values for the `_configure_connection` methods in the `DatabaseWrapper`?","answer":"","relative_code_list":[{"start_line":89,"end_line":547,"belongs_to":{"file_name":"base.py","upper_path":"../django/django/db/backends/postgresql","module":"postgresql","define_class":["DatabaseWrapper","CursorMixin","ServerBindingCursor","Cursor","ServerSideCursor","CursorDebugWrapper","CursorDebugWrapper"],"imports":["asyncio","threading","warnings","contextlib.contextmanager","django.conf.settings","django.core.exceptions.ImproperlyConfigured","django.db.DatabaseError","django.db.connections","django.db.backends.base.base.NO_DB_ALIAS","django.db.backends.base.base.BaseDatabaseWrapper","django.db.backends.utils.CursorDebugWrapper","django.utils.asyncio.async_unsafe","django.utils.functional.cached_property","django.utils.safestring.SafeString","django.utils.version.get_version_tuple","psycopg_any.IsolationLevel","psycopg_any.is_psycopg3","client.DatabaseClient","creation.DatabaseCreation","features.DatabaseFeatures","introspection.DatabaseIntrospection","operations.DatabaseOperations","schema.DatabaseSchemaEditor","psycopg.adapters","psycopg.sql","psycopg.pq.Format","psycopg_any.get_adapters_template","psycopg_any.register_tzloader","psycopg2.extensions","psycopg2.extras","psycopg","psycopg2","psycopg_pool.ConnectionPool"]},"relative_function":[],"code":"class DatabaseWrapper(BaseDatabaseWrapper):\n    vendor = \"postgresql\"\n    display_name = \"PostgreSQL\"\n    # This dictionary maps Field objects to their associated PostgreSQL column\n    # types, as strings. Column-type strings can contain format strings; they'll\n    # be interpolated against the values of Field.__dict__ before being output.\n    # If a column type is set to None, it won't be included in the output.\n    data_types = {\n        \"AutoField\": \"integer\",\n        \"BigAutoField\": \"bigint\",\n        \"BinaryField\": \"bytea\",\n        \"BooleanField\": \"boolean\",\n        \"CharField\": _get_varchar_column,\n        \"DateField\": \"date\",\n        \"DateTimeField\": \"timestamp with time zone\",\n        \"DecimalField\": \"numeric(%(max_digits)s, %(decimal_places)s)\",\n        \"DurationField\": \"interval\",\n        \"FileField\": \"varchar(%(max_length)s)\",\n        \"FilePathField\": \"varchar(%(max_length)s)\",\n        \"FloatField\": \"double precision\",\n        \"IntegerField\": \"integer\",\n        \"BigIntegerField\": \"bigint\",\n        \"IPAddressField\": \"inet\",\n        \"GenericIPAddressField\": \"inet\",\n        \"JSONField\": \"jsonb\",\n        \"OneToOneField\": \"integer\",\n        \"PositiveBigIntegerField\": \"bigint\",\n        \"PositiveIntegerField\": \"integer\",\n        \"PositiveSmallIntegerField\": \"smallint\",\n        \"SlugField\": \"varchar(%(max_length)s)\",\n        \"SmallAutoField\": \"smallint\",\n        \"SmallIntegerField\": \"smallint\",\n        \"TextField\": \"text\",\n        \"TimeField\": \"time\",\n        \"UUIDField\": \"uuid\",\n    }\n    data_type_check_constraints = {\n        \"PositiveBigIntegerField\": '\"%(column)s\" >= 0',\n        \"PositiveIntegerField\": '\"%(column)s\" >= 0',\n        \"PositiveSmallIntegerField\": '\"%(column)s\" >= 0',\n    }\n    data_types_suffix = {\n        \"AutoField\": \"GENERATED BY DEFAULT AS IDENTITY\",\n        \"BigAutoField\": \"GENERATED BY DEFAULT AS IDENTITY\",\n        \"SmallAutoField\": \"GENERATED BY DEFAULT AS IDENTITY\",\n    }\n    operators = {\n        \"exact\": \"= %s\",\n        \"iexact\": \"= UPPER(%s)\",\n        \"contains\": \"LIKE %s\",\n        \"icontains\": \"LIKE UPPER(%s)\",\n        \"regex\": \"~ %s\",\n        \"iregex\": \"~* %s\",\n        \"gt\": \"> %s\",\n        \"gte\": \">= %s\",\n        \"lt\": \"< %s\",\n        \"lte\": \"<= %s\",\n        \"startswith\": \"LIKE %s\",\n        \"endswith\": \"LIKE %s\",\n        \"istartswith\": \"LIKE UPPER(%s)\",\n        \"iendswith\": \"LIKE UPPER(%s)\",\n    }\n\n    # The patterns below are used to generate SQL pattern lookup clauses when\n    # the right-hand side of the lookup isn't a raw string (it might be an expression\n    # or the result of a bilateral transformation).\n    # In those cases, special characters for LIKE operators (e.g. \\, *, _) should be\n    # escaped on database side.\n    #\n    # Note: we use str.format() here for readability as '%' is used as a wildcard for\n    # the LIKE operator.\n    pattern_esc = (\n        r\"REPLACE(REPLACE(REPLACE({}, E'\\\\', E'\\\\\\\\'), E'%%', E'\\\\%%'), E'_', E'\\\\_')\"\n    )\n    pattern_ops = {\n        \"contains\": \"LIKE '%%' || {} || '%%'\",\n        \"icontains\": \"LIKE '%%' || UPPER({}) || '%%'\",\n        \"startswith\": \"LIKE {} || '%%'\",\n        \"istartswith\": \"LIKE UPPER({}) || '%%'\",\n        \"endswith\": \"LIKE '%%' || {}\",\n        \"iendswith\": \"LIKE '%%' || UPPER({})\",\n    }\n\n    Database = Database\n    SchemaEditorClass = DatabaseSchemaEditor\n    # Classes instantiated in __init__().\n    client_class = DatabaseClient\n    creation_class = DatabaseCreation\n    features_class = DatabaseFeatures\n    introspection_class = DatabaseIntrospection\n    ops_class = DatabaseOperations\n    # PostgreSQL backend-specific attributes.\n    _named_cursor_idx = 0\n    _connection_pools = {}\n\n    @property\n    def pool(self):\n        pool_options = self.settings_dict[\"OPTIONS\"].get(\"pool\")\n        if self.alias == NO_DB_ALIAS or not pool_options:\n            return None\n\n        if self.alias not in self._connection_pools:\n            if self.settings_dict.get(\"CONN_MAX_AGE\", 0) != 0:\n                raise ImproperlyConfigured(\n                    \"Pooling doesn't support persistent connections.\"\n                )\n            # Set the default options.\n            if pool_options is True:\n                pool_options = {}\n\n            try:\n                from psycopg_pool import ConnectionPool\n            except ImportError as err:\n                raise ImproperlyConfigured(\n                    \"Error loading psycopg_pool module.\\nDid you install psycopg[pool]?\"\n                ) from err\n\n            connect_kwargs = self.get_connection_params()\n            # Ensure we run in autocommit, Django properly sets it later on.\n            connect_kwargs[\"autocommit\"] = True\n            enable_checks = self.settings_dict[\"CONN_HEALTH_CHECKS\"]\n            pool = ConnectionPool(\n                kwargs=connect_kwargs,\n                open=False,  # Do not open the pool during startup.\n                configure=self._configure_connection,\n                check=ConnectionPool.check_connection if enable_checks else None,\n                **pool_options,\n            )\n            # setdefault() ensures that multiple threads don't set this in\n            # parallel. Since we do not open the pool during it's init above,\n            # this means that at worst during startup multiple threads generate\n            # pool objects and the first to set it wins.\n            self._connection_pools.setdefault(self.alias, pool)\n\n        return self._connection_pools[self.alias]\n\n    def close_pool(self):\n        if self.pool:\n            self.pool.close()\n            del self._connection_pools[self.alias]\n\n    def get_database_version(self):\n        \"\"\"\n        Return a tuple of the database's version.\n        E.g. for pg_version 120004, return (12, 4).\n        \"\"\"\n        return divmod(self.pg_version, 10000)\n\n    def get_connection_params(self):\n        settings_dict = self.settings_dict\n        # None may be used to connect to the default 'postgres' db\n        if settings_dict[\"NAME\"] == \"\" and not settings_dict[\"OPTIONS\"].get(\"service\"):\n            raise ImproperlyConfigured(\n                \"settings.DATABASES is improperly configured. \"\n                \"Please supply the NAME or OPTIONS['service'] value.\"\n            )\n        if len(settings_dict[\"NAME\"] or \"\") > self.ops.max_name_length():\n            raise ImproperlyConfigured(\n                \"The database name '%s' (%d characters) is longer than \"\n                \"PostgreSQL's limit of %d characters. Supply a shorter NAME \"\n                \"in settings.DATABASES.\"\n                % (\n                    settings_dict[\"NAME\"],\n                    len(settings_dict[\"NAME\"]),\n                    self.ops.max_name_length(),\n                )\n            )\n        if settings_dict[\"NAME\"]:\n            conn_params = {\n                \"dbname\": settings_dict[\"NAME\"],\n                **settings_dict[\"OPTIONS\"],\n            }\n        elif settings_dict[\"NAME\"] is None:\n            # Connect to the default 'postgres' db.\n            settings_dict[\"OPTIONS\"].pop(\"service\", None)\n            conn_params = {\"dbname\": \"postgres\", **settings_dict[\"OPTIONS\"]}\n        else:\n            conn_params = {**settings_dict[\"OPTIONS\"]}\n        conn_params[\"client_encoding\"] = \"UTF8\"\n\n        conn_params.pop(\"assume_role\", None)\n        conn_params.pop(\"isolation_level\", None)\n\n        pool_options = conn_params.pop(\"pool\", None)\n        if pool_options and not is_psycopg3:\n            raise ImproperlyConfigured(\"Database pooling requires psycopg >= 3\")\n\n        server_side_binding = conn_params.pop(\"server_side_binding\", None)\n        conn_params.setdefault(\n            \"cursor_factory\",\n            (\n                ServerBindingCursor\n                if is_psycopg3 and server_side_binding is True\n                else Cursor\n            ),\n        )\n        if settings_dict[\"USER\"]:\n            conn_params[\"user\"] = settings_dict[\"USER\"]\n        if settings_dict[\"PASSWORD\"]:\n            conn_params[\"password\"] = settings_dict[\"PASSWORD\"]\n        if settings_dict[\"HOST\"]:\n            conn_params[\"host\"] = settings_dict[\"HOST\"]\n        if settings_dict[\"PORT\"]:\n            conn_params[\"port\"] = settings_dict[\"PORT\"]\n        if is_psycopg3:\n            conn_params[\"context\"] = get_adapters_template(\n                settings.USE_TZ, self.timezone\n            )\n            # Disable prepared statements by default to keep connection poolers\n            # working. Can be reenabled via OPTIONS in the settings dict.\n            conn_params[\"prepare_threshold\"] = conn_params.pop(\n                \"prepare_threshold\", None\n            )\n        return conn_params\n\n    @async_unsafe\n    def get_new_connection(self, conn_params):\n        # self.isolation_level must be set:\n        # - after connecting to the database in order to obtain the database's\n        #   default when no value is explicitly specified in options.\n        # - before calling _set_autocommit() because if autocommit is on, that\n        #   will set connection.isolation_level to ISOLATION_LEVEL_AUTOCOMMIT.\n        options = self.settings_dict[\"OPTIONS\"]\n        set_isolation_level = False\n        try:\n            isolation_level_value = options[\"isolation_level\"]\n        except KeyError:\n            self.isolation_level = IsolationLevel.READ_COMMITTED\n        else:\n            # Set the isolation level to the value from OPTIONS.\n            try:\n                self.isolation_level = IsolationLevel(isolation_level_value)\n                set_isolation_level = True\n            except ValueError:\n                raise ImproperlyConfigured(\n                    f\"Invalid transaction isolation level {isolation_level_value} \"\n                    f\"specified. Use one of the psycopg.IsolationLevel values.\"\n                )\n        if self.pool:\n            # If nothing else has opened the pool, open it now.\n            self.pool.open()\n            connection = self.pool.getconn()\n        else:\n            connection = self.Database.connect(**conn_params)\n        if set_isolation_level:\n            connection.isolation_level = self.isolation_level\n        if not is_psycopg3:\n            # Register dummy loads() to avoid a round trip from psycopg2's\n            # decode to json.dumps() to json.loads(), when using a custom\n            # decoder in JSONField.\n            psycopg2.extras.register_default_jsonb(\n                conn_or_curs=connection, loads=lambda x: x\n            )\n        return connection\n\n    def ensure_timezone(self):\n        # Close the pool so new connections pick up the correct timezone.\n        self.close_pool()\n        if self.connection is None:\n            return False\n        return self._configure_timezone(self.connection)\n\n    def _configure_timezone(self, connection):\n        conn_timezone_name = connection.info.parameter_status(\"TimeZone\")\n        timezone_name = self.timezone_name\n        if timezone_name and conn_timezone_name != timezone_name:\n            with connection.cursor() as cursor:\n                cursor.execute(self.ops.set_time_zone_sql(), [timezone_name])\n            return True\n        return False\n\n    def _configure_role(self, connection):\n        if new_role := self.settings_dict[\"OPTIONS\"].get(\"assume_role\"):\n            with connection.cursor() as cursor:\n                sql = self.ops.compose_sql(\"SET ROLE %s\", [new_role])\n                cursor.execute(sql)\n            return True\n        return False\n\n    def _configure_connection(self, connection):\n        # This function is called from init_connection_state and from the\n        # psycopg pool itself after a connection is opened.\n\n        # Commit after setting the time zone.\n        commit_tz = self._configure_timezone(connection)\n        # Set the role on the connection. This is useful if the credential used\n        # to login is not the same as the role that owns database resources. As\n        # can be the case when using temporary or ephemeral credentials.\n        commit_role = self._configure_role(connection)\n\n        return commit_role or commit_tz\n\n    def _close(self):\n        if self.connection is not None:\n            # `wrap_database_errors` only works for `putconn` as long as there\n            # is no `reset` function set in the pool because it is deferred\n            # into a thread and not directly executed.\n            with self.wrap_database_errors:\n                if self.pool:\n                    # Ensure the correct pool is returned. This is a workaround\n                    # for tests so a pool can be changed on setting changes\n                    # (e.g. USE_TZ, TIME_ZONE).\n                    self.connection._pool.putconn(self.connection)\n                    # Connection can no longer be used.\n                    self.connection = None\n                else:\n                    return self.connection.close()\n\n    def init_connection_state(self):\n        super().init_connection_state()\n\n        if self.connection is not None and not self.pool:\n            commit = self._configure_connection(self.connection)\n\n            if commit and not self.get_autocommit():\n                self.connection.commit()\n\n    @async_unsafe\n    def create_cursor(self, name=None):\n        if name:\n            if is_psycopg3 and (\n                self.settings_dict[\"OPTIONS\"].get(\"server_side_binding\") is not True\n            ):\n                # psycopg >= 3 forces the usage of server-side bindings for\n                # named cursors so a specialized class that implements\n                # server-side cursors while performing client-side bindings\n                # must be used if `server_side_binding` is disabled (default).\n                cursor = ServerSideCursor(\n                    self.connection,\n                    name=name,\n                    scrollable=False,\n                    withhold=self.connection.autocommit,\n                )\n            else:\n                # In autocommit mode, the cursor will be used outside of a\n                # transaction, hence use a holdable cursor.\n                cursor = self.connection.cursor(\n                    name, scrollable=False, withhold=self.connection.autocommit\n                )\n        else:\n            cursor = self.connection.cursor()\n\n        if is_psycopg3:\n            # Register the cursor timezone only if the connection disagrees, to\n            # avoid copying the adapter map.\n            tzloader = self.connection.adapters.get_loader(TIMESTAMPTZ_OID, Format.TEXT)\n            if self.timezone != tzloader.timezone:\n                register_tzloader(self.timezone, cursor)\n        else:\n            cursor.tzinfo_factory = self.tzinfo_factory if settings.USE_TZ else None\n        return cursor\n\n    def tzinfo_factory(self, offset):\n        return self.timezone\n\n    @async_unsafe\n    def chunked_cursor(self):\n        self._named_cursor_idx += 1\n        # Get the current async task\n        # Note that right now this is behind @async_unsafe, so this is\n        # unreachable, but in future we'll start loosening this restriction.\n        # For now, it's here so that every use of \"threading\" is\n        # also async-compatible.\n        try:\n            current_task = asyncio.current_task()\n        except RuntimeError:\n            current_task = None\n        # Current task can be none even if the current_task call didn't error\n        if current_task:\n            task_ident = str(id(current_task))\n        else:\n            task_ident = \"sync\"\n        # Use that and the thread ident to get a unique name\n        return self._cursor(\n            name=\"_django_curs_%d_%s_%d\"\n            % (\n                # Avoid reusing name in other threads / tasks\n                threading.current_thread().ident,\n                task_ident,\n                self._named_cursor_idx,\n            )\n        )\n\n    def _set_autocommit(self, autocommit):\n        with self.wrap_database_errors:\n            self.connection.autocommit = autocommit\n\n    def check_constraints(self, table_names=None):\n        \"\"\"\n        Check constraints by setting them to immediate. Return them to deferred\n        afterward.\n        \"\"\"\n        with self.cursor() as cursor:\n            cursor.execute(\"SET CONSTRAINTS ALL IMMEDIATE\")\n            cursor.execute(\"SET CONSTRAINTS ALL DEFERRED\")\n\n    def is_usable(self):\n        if self.connection is None:\n            return False\n        try:\n            # Use a psycopg cursor directly, bypassing Django's utilities.\n            with self.connection.cursor() as cursor:\n                cursor.execute(\"SELECT 1\")\n        except Database.Error:\n            return False\n        else:\n            return True\n\n    def close_if_health_check_failed(self):\n        if self.pool:\n            # The pool only returns healthy connections.\n            return\n        return super().close_if_health_check_failed()\n\n    @contextmanager\n    def _nodb_cursor(self):\n        cursor = None\n        try:\n            with super()._nodb_cursor() as cursor:\n                yield cursor\n        except (Database.DatabaseError, WrappedDatabaseError):\n            if cursor is not None:\n                raise\n            warnings.warn(\n                \"Normally Django will use a connection to the 'postgres' database \"\n                \"to avoid running initialization queries against the production \"\n                \"database when it's not needed (for example, when running tests). \"\n                \"Django was unable to create a connection to the 'postgres' database \"\n                \"and will use the first PostgreSQL database instead.\",\n                RuntimeWarning,\n            )\n            for connection in connections.all():\n                if (\n                    connection.vendor == \"postgresql\"\n                    and connection.settings_dict[\"NAME\"] != \"postgres\"\n                ):\n                    conn = self.__class__(\n                        {\n                            **self.settings_dict,\n                            \"NAME\": connection.settings_dict[\"NAME\"],\n                        },\n                        alias=self.alias,\n                    )\n                    try:\n                        with conn.cursor() as cursor:\n                            yield cursor\n                    finally:\n                        conn.close()\n                    break\n            else:\n                raise\n\n    @cached_property\n    def pg_version(self):\n        with self.temporary_connection():\n            return self.connection.info.server_version\n\n    def make_debug_cursor(self, cursor):\n        return CursorDebugWrapper(cursor, self)"},{"start_line":368,"end_line":379,"belongs_to":{"file_name":"base.py","upper_path":"../django/django/db/backends/postgresql","module":"postgresql","define_class":["DatabaseWrapper","CursorMixin","ServerBindingCursor","Cursor","ServerSideCursor","CursorDebugWrapper","CursorDebugWrapper"],"imports":["asyncio","threading","warnings","contextlib.contextmanager","django.conf.settings","django.core.exceptions.ImproperlyConfigured","django.db.DatabaseError","django.db.connections","django.db.backends.base.base.NO_DB_ALIAS","django.db.backends.base.base.BaseDatabaseWrapper","django.db.backends.utils.CursorDebugWrapper","django.utils.asyncio.async_unsafe","django.utils.functional.cached_property","django.utils.safestring.SafeString","django.utils.version.get_version_tuple","psycopg_any.IsolationLevel","psycopg_any.is_psycopg3","client.DatabaseClient","creation.DatabaseCreation","features.DatabaseFeatures","introspection.DatabaseIntrospection","operations.DatabaseOperations","schema.DatabaseSchemaEditor","psycopg.adapters","psycopg.sql","psycopg.pq.Format","psycopg_any.get_adapters_template","psycopg_any.register_tzloader","psycopg2.extensions","psycopg2.extras","psycopg","psycopg2","psycopg_pool.ConnectionPool"]},"relative_function":[],"code":"def _configure_connection(self, connection):\n        # This function is called from init_connection_state and from the\n        # psycopg pool itself after a connection is opened.\n\n        # Commit after setting the time zone.\n        commit_tz = self._configure_timezone(connection)\n        # Set the role on the connection. This is useful if the credential used\n        # to login is not the same as the role that owns database resources. As\n        # can be the case when using temporary or ephemeral credentials.\n        commit_role = self._configure_role(connection)\n\n        return commit_role or commit_tz"}],"ground_truth":null,"score":null},
{"question":"Where is the main implementation of the `Return the SQL for starting a new savepoint` located?","answer":"","relative_code_list":[{"start_line":398,"end_line":404,"belongs_to":{"file_name":"operations.py","upper_path":"../django/django/db/backends/base","module":"base","define_class":["BaseDatabaseOperations"],"imports":["datetime","decimal","json","importlib.import_module","sqlparse","django.conf.settings","django.db.NotSupportedError","django.db.transaction","django.db.models.expressions.Col","django.utils.timezone","django.utils.encoding.force_str"]},"relative_function":[],"code":"def savepoint_create_sql(self, sid):\n        \"\"\"\n        Return the SQL for starting a new savepoint. Only required if the\n        \"uses_savepoints\" feature is True. The \"sid\" parameter is a string\n        for the savepoint id.\n        \"\"\"\n        return \"SAVEPOINT %s\" % self.quote_name(sid)"},{"start_line":15,"end_line":791,"belongs_to":{"file_name":"operations.py","upper_path":"../django/django/db/backends/base","module":"base","define_class":["BaseDatabaseOperations"],"imports":["datetime","decimal","json","importlib.import_module","sqlparse","django.conf.settings","django.db.NotSupportedError","django.db.transaction","django.db.models.expressions.Col","django.utils.timezone","django.utils.encoding.force_str"]},"relative_function":[],"code":"class BaseDatabaseOperations:\n    \"\"\"\n    Encapsulate backend-specific differences, such as the way a backend\n    performs ordering or calculates the ID of a recently-inserted row.\n    \"\"\"\n\n    compiler_module = \"django.db.models.sql.compiler\"\n\n    # Integer field safe ranges by `internal_type` as documented\n    # in docs/ref/models/fields.txt.\n    integer_field_ranges = {\n        \"SmallIntegerField\": (-32768, 32767),\n        \"IntegerField\": (-2147483648, 2147483647),\n        \"BigIntegerField\": (-9223372036854775808, 9223372036854775807),\n        \"PositiveBigIntegerField\": (0, 9223372036854775807),\n        \"PositiveSmallIntegerField\": (0, 32767),\n        \"PositiveIntegerField\": (0, 2147483647),\n        \"SmallAutoField\": (-32768, 32767),\n        \"AutoField\": (-2147483648, 2147483647),\n        \"BigAutoField\": (-9223372036854775808, 9223372036854775807),\n    }\n    set_operators = {\n        \"union\": \"UNION\",\n        \"intersection\": \"INTERSECT\",\n        \"difference\": \"EXCEPT\",\n    }\n    # Mapping of Field.get_internal_type() (typically the model field's class\n    # name) to the data type to use for the Cast() function, if different from\n    # DatabaseWrapper.data_types.\n    cast_data_types = {}\n    # CharField data type if the max_length argument isn't provided.\n    cast_char_field_without_max_length = None\n\n    # Start and end points for window expressions.\n    PRECEDING = \"PRECEDING\"\n    FOLLOWING = \"FOLLOWING\"\n    UNBOUNDED_PRECEDING = \"UNBOUNDED \" + PRECEDING\n    UNBOUNDED_FOLLOWING = \"UNBOUNDED \" + FOLLOWING\n    CURRENT_ROW = \"CURRENT ROW\"\n\n    # Prefix for EXPLAIN queries, or None EXPLAIN isn't supported.\n    explain_prefix = None\n\n    def __init__(self, connection):\n        self.connection = connection\n        self._cache = None\n\n    def autoinc_sql(self, table, column):\n        \"\"\"\n        Return any SQL needed to support auto-incrementing primary keys, or\n        None if no SQL is necessary.\n\n        This SQL is executed when a table is created.\n        \"\"\"\n        return None\n\n    def bulk_batch_size(self, fields, objs):\n        \"\"\"\n        Return the maximum allowed batch size for the backend. The fields\n        are the fields going to be inserted in the batch, the objs contains\n        all the objects to be inserted.\n        \"\"\"\n        return len(objs)\n\n    def format_for_duration_arithmetic(self, sql):\n        raise NotImplementedError(\n            \"subclasses of BaseDatabaseOperations may require a \"\n            \"format_for_duration_arithmetic() method.\"\n        )\n\n    def cache_key_culling_sql(self):\n        \"\"\"\n        Return an SQL query that retrieves the first cache key greater than the\n        n smallest.\n\n        This is used by the 'db' cache backend to determine where to start\n        culling.\n        \"\"\"\n        cache_key = self.quote_name(\"cache_key\")\n        return f\"SELECT {cache_key} FROM %s ORDER BY {cache_key} LIMIT 1 OFFSET %%s\"\n\n    def unification_cast_sql(self, output_field):\n        \"\"\"\n        Given a field instance, return the SQL that casts the result of a union\n        to that type. The resulting string should contain a '%s' placeholder\n        for the expression being cast.\n        \"\"\"\n        return \"%s\"\n\n    def date_extract_sql(self, lookup_type, sql, params):\n        \"\"\"\n        Given a lookup_type of 'year', 'month', or 'day', return the SQL that\n        extracts a value from the given date field field_name.\n        \"\"\"\n        raise NotImplementedError(\n            \"subclasses of BaseDatabaseOperations may require a date_extract_sql() \"\n            \"method\"\n        )\n\n    def date_trunc_sql(self, lookup_type, sql, params, tzname=None):\n        \"\"\"\n        Given a lookup_type of 'year', 'month', or 'day', return the SQL that\n        truncates the given date or datetime field field_name to a date object\n        with only the given specificity.\n\n        If `tzname` is provided, the given value is truncated in a specific\n        timezone.\n        \"\"\"\n        raise NotImplementedError(\n            \"subclasses of BaseDatabaseOperations may require a date_trunc_sql() \"\n            \"method.\"\n        )\n\n    def datetime_cast_date_sql(self, sql, params, tzname):\n        \"\"\"\n        Return the SQL to cast a datetime value to date value.\n        \"\"\"\n        raise NotImplementedError(\n            \"subclasses of BaseDatabaseOperations may require a \"\n            \"datetime_cast_date_sql() method.\"\n        )\n\n    def datetime_cast_time_sql(self, sql, params, tzname):\n        \"\"\"\n        Return the SQL to cast a datetime value to time value.\n        \"\"\"\n        raise NotImplementedError(\n            \"subclasses of BaseDatabaseOperations may require a \"\n            \"datetime_cast_time_sql() method\"\n        )\n\n    def datetime_extract_sql(self, lookup_type, sql, params, tzname):\n        \"\"\"\n        Given a lookup_type of 'year', 'month', 'day', 'hour', 'minute', or\n        'second', return the SQL that extracts a value from the given\n        datetime field field_name.\n        \"\"\"\n        raise NotImplementedError(\n            \"subclasses of BaseDatabaseOperations may require a datetime_extract_sql() \"\n            \"method\"\n        )\n\n    def datetime_trunc_sql(self, lookup_type, sql, params, tzname):\n        \"\"\"\n        Given a lookup_type of 'year', 'month', 'day', 'hour', 'minute', or\n        'second', return the SQL that truncates the given datetime field\n        field_name to a datetime object with only the given specificity.\n        \"\"\"\n        raise NotImplementedError(\n            \"subclasses of BaseDatabaseOperations may require a datetime_trunc_sql() \"\n            \"method\"\n        )\n\n    def time_trunc_sql(self, lookup_type, sql, params, tzname=None):\n        \"\"\"\n        Given a lookup_type of 'hour', 'minute' or 'second', return the SQL\n        that truncates the given time or datetime field field_name to a time\n        object with only the given specificity.\n\n        If `tzname` is provided, the given value is truncated in a specific\n        timezone.\n        \"\"\"\n        raise NotImplementedError(\n            \"subclasses of BaseDatabaseOperations may require a time_trunc_sql() method\"\n        )\n\n    def time_extract_sql(self, lookup_type, sql, params):\n        \"\"\"\n        Given a lookup_type of 'hour', 'minute', or 'second', return the SQL\n        that extracts a value from the given time field field_name.\n        \"\"\"\n        return self.date_extract_sql(lookup_type, sql, params)\n\n    def deferrable_sql(self):\n        \"\"\"\n        Return the SQL to make a constraint \"initially deferred\" during a\n        CREATE TABLE statement.\n        \"\"\"\n        return \"\"\n\n    def distinct_sql(self, fields, params):\n        \"\"\"\n        Return an SQL DISTINCT clause which removes duplicate rows from the\n        result set. If any fields are given, only check the given fields for\n        duplicates.\n        \"\"\"\n        if fields:\n            raise NotSupportedError(\n                \"DISTINCT ON fields is not supported by this database backend\"\n            )\n        else:\n            return [\"DISTINCT\"], []\n\n    def fetch_returned_insert_columns(self, cursor, returning_params):\n        \"\"\"\n        Given a cursor object that has just performed an INSERT...RETURNING\n        statement into a table, return the newly created data.\n        \"\"\"\n        return cursor.fetchone()\n\n    def force_group_by(self):\n        \"\"\"\n        Return a GROUP BY clause to use with a HAVING clause when no grouping\n        is specified.\n        \"\"\"\n        return []\n\n    def force_no_ordering(self):\n        \"\"\"\n        Return a list used in the \"ORDER BY\" clause to force no ordering at\n        all. Return an empty list to include nothing in the ordering.\n        \"\"\"\n        return []\n\n    def for_update_sql(self, nowait=False, skip_locked=False, of=(), no_key=False):\n        \"\"\"\n        Return the FOR UPDATE SQL clause to lock rows for an update operation.\n        \"\"\"\n        return \"FOR%s UPDATE%s%s%s\" % (\n            \" NO KEY\" if no_key else \"\",\n            \" OF %s\" % \", \".join(of) if of else \"\",\n            \" NOWAIT\" if nowait else \"\",\n            \" SKIP LOCKED\" if skip_locked else \"\",\n        )\n\n    def _get_limit_offset_params(self, low_mark, high_mark):\n        offset = low_mark or 0\n        if high_mark is not None:\n            return (high_mark - offset), offset\n        elif offset:\n            return self.connection.ops.no_limit_value(), offset\n        return None, offset\n\n    def limit_offset_sql(self, low_mark, high_mark):\n        \"\"\"Return LIMIT/OFFSET SQL clause.\"\"\"\n        limit, offset = self._get_limit_offset_params(low_mark, high_mark)\n        return \" \".join(\n            sql\n            for sql in (\n                (\"LIMIT %d\" % limit) if limit else None,\n                (\"OFFSET %d\" % offset) if offset else None,\n            )\n            if sql\n        )\n\n    def bulk_insert_sql(self, fields, placeholder_rows):\n        placeholder_rows_sql = (\", \".join(row) for row in placeholder_rows)\n        values_sql = \", \".join([f\"({sql})\" for sql in placeholder_rows_sql])\n        return f\"VALUES {values_sql}\"\n\n    def last_executed_query(self, cursor, sql, params):\n        \"\"\"\n        Return a string of the query last executed by the given cursor, with\n        placeholders replaced with actual values.\n\n        `sql` is the raw query containing placeholders and `params` is the\n        sequence of parameters. These are used by default, but this method\n        exists for database backends to provide a better implementation\n        according to their own quoting schemes.\n        \"\"\"\n\n        # Convert params to contain string values.\n        def to_string(s):\n            return force_str(s, strings_only=True, errors=\"replace\")\n\n        if isinstance(params, (list, tuple)):\n            u_params = tuple(to_string(val) for val in params)\n        elif params is None:\n            u_params = ()\n        else:\n            u_params = {to_string(k): to_string(v) for k, v in params.items()}\n\n        return \"QUERY = %r - PARAMS = %r\" % (sql, u_params)\n\n    def last_insert_id(self, cursor, table_name, pk_name):\n        \"\"\"\n        Given a cursor object that has just performed an INSERT statement into\n        a table that has an auto-incrementing ID, return the newly created ID.\n\n        `pk_name` is the name of the primary-key column.\n        \"\"\"\n        return cursor.lastrowid\n\n    def lookup_cast(self, lookup_type, internal_type=None):\n        \"\"\"\n        Return the string to use in a query when performing lookups\n        (\"contains\", \"like\", etc.). It should contain a '%s' placeholder for\n        the column being searched against.\n        \"\"\"\n        return \"%s\"\n\n    def max_in_list_size(self):\n        \"\"\"\n        Return the maximum number of items that can be passed in a single 'IN'\n        list condition, or None if the backend does not impose a limit.\n        \"\"\"\n        return None\n\n    def max_name_length(self):\n        \"\"\"\n        Return the maximum length of table and column names, or None if there\n        is no limit.\n        \"\"\"\n        return None\n\n    def no_limit_value(self):\n        \"\"\"\n        Return the value to use for the LIMIT when we are wanting \"LIMIT\n        infinity\". Return None if the limit clause can be omitted in this case.\n        \"\"\"\n        raise NotImplementedError(\n            \"subclasses of BaseDatabaseOperations may require a no_limit_value() method\"\n        )\n\n    def pk_default_value(self):\n        \"\"\"\n        Return the value to use during an INSERT statement to specify that\n        the field should use its default value.\n        \"\"\"\n        return \"DEFAULT\"\n\n    def prepare_sql_script(self, sql):\n        \"\"\"\n        Take an SQL script that may contain multiple lines and return a list\n        of statements to feed to successive cursor.execute() calls.\n\n        Since few databases are able to process raw SQL scripts in a single\n        cursor.execute() call and PEP 249 doesn't talk about this use case,\n        the default implementation is conservative.\n        \"\"\"\n        return [\n            sqlparse.format(statement, strip_comments=True)\n            for statement in sqlparse.split(sql)\n            if statement\n        ]\n\n    def process_clob(self, value):\n        \"\"\"\n        Return the value of a CLOB column, for backends that return a locator\n        object that requires additional processing.\n        \"\"\"\n        return value\n\n    def return_insert_columns(self, fields):\n        \"\"\"\n        For backends that support returning columns as part of an insert query,\n        return the SQL and params to append to the INSERT query. The returned\n        fragment should contain a format string to hold the appropriate column.\n        \"\"\"\n        pass\n\n    def compiler(self, compiler_name):\n        \"\"\"\n        Return the SQLCompiler class corresponding to the given name,\n        in the namespace corresponding to the `compiler_module` attribute\n        on this backend.\n        \"\"\"\n        if self._cache is None:\n            self._cache = import_module(self.compiler_module)\n        return getattr(self._cache, compiler_name)\n\n    def quote_name(self, name):\n        \"\"\"\n        Return a quoted version of the given table, index, or column name. Do\n        not quote the given name if it's already been quoted.\n        \"\"\"\n        raise NotImplementedError(\n            \"subclasses of BaseDatabaseOperations may require a quote_name() method\"\n        )\n\n    def regex_lookup(self, lookup_type):\n        \"\"\"\n        Return the string to use in a query when performing regular expression\n        lookups (using \"regex\" or \"iregex\"). It should contain a '%s'\n        placeholder for the column being searched against.\n\n        If the feature is not supported (or part of it is not supported), raise\n        NotImplementedError.\n        \"\"\"\n        raise NotImplementedError(\n            \"subclasses of BaseDatabaseOperations may require a regex_lookup() method\"\n        )\n\n    def savepoint_create_sql(self, sid):\n        \"\"\"\n        Return the SQL for starting a new savepoint. Only required if the\n        \"uses_savepoints\" feature is True. The \"sid\" parameter is a string\n        for the savepoint id.\n        \"\"\"\n        return \"SAVEPOINT %s\" % self.quote_name(sid)\n\n    def savepoint_commit_sql(self, sid):\n        \"\"\"\n        Return the SQL for committing the given savepoint.\n        \"\"\"\n        return \"RELEASE SAVEPOINT %s\" % self.quote_name(sid)\n\n    def savepoint_rollback_sql(self, sid):\n        \"\"\"\n        Return the SQL for rolling back the given savepoint.\n        \"\"\"\n        return \"ROLLBACK TO SAVEPOINT %s\" % self.quote_name(sid)\n\n    def set_time_zone_sql(self):\n        \"\"\"\n        Return the SQL that will set the connection's time zone.\n\n        Return '' if the backend doesn't support time zones.\n        \"\"\"\n        return \"\"\n\n    def sql_flush(self, style, tables, *, reset_sequences=False, allow_cascade=False):\n        \"\"\"\n        Return a list of SQL statements required to remove all data from\n        the given database tables (without actually removing the tables\n        themselves).\n\n        The `style` argument is a Style object as returned by either\n        color_style() or no_style() in django.core.management.color.\n\n        If `reset_sequences` is True, the list includes SQL statements required\n        to reset the sequences.\n\n        The `allow_cascade` argument determines whether truncation may cascade\n        to tables with foreign keys pointing the tables being truncated.\n        PostgreSQL requires a cascade even if these tables are empty.\n        \"\"\"\n        raise NotImplementedError(\n            \"subclasses of BaseDatabaseOperations must provide an sql_flush() method\"\n        )\n\n    def execute_sql_flush(self, sql_list):\n        \"\"\"Execute a list of SQL statements to flush the database.\"\"\"\n        with transaction.atomic(\n            using=self.connection.alias,\n            savepoint=self.connection.features.can_rollback_ddl,\n        ):\n            with self.connection.cursor() as cursor:\n                for sql in sql_list:\n                    cursor.execute(sql)\n\n    def sequence_reset_by_name_sql(self, style, sequences):\n        \"\"\"\n        Return a list of the SQL statements required to reset sequences\n        passed in `sequences`.\n\n        The `style` argument is a Style object as returned by either\n        color_style() or no_style() in django.core.management.color.\n        \"\"\"\n        return []\n\n    def sequence_reset_sql(self, style, model_list):\n        \"\"\"\n        Return a list of the SQL statements required to reset sequences for\n        the given models.\n\n        The `style` argument is a Style object as returned by either\n        color_style() or no_style() in django.core.management.color.\n        \"\"\"\n        return []  # No sequence reset required by default.\n\n    def start_transaction_sql(self):\n        \"\"\"Return the SQL statement required to start a transaction.\"\"\"\n        return \"BEGIN;\"\n\n    def end_transaction_sql(self, success=True):\n        \"\"\"Return the SQL statement required to end a transaction.\"\"\"\n        if not success:\n            return \"ROLLBACK;\"\n        return \"COMMIT;\"\n\n    def tablespace_sql(self, tablespace, inline=False):\n        \"\"\"\n        Return the SQL that will be used in a query to define the tablespace.\n\n        Return '' if the backend doesn't support tablespaces.\n\n        If `inline` is True, append the SQL to a row; otherwise append it to\n        the entire CREATE TABLE or CREATE INDEX statement.\n        \"\"\"\n        return \"\"\n\n    def prep_for_like_query(self, x):\n        \"\"\"Prepare a value for use in a LIKE query.\"\"\"\n        return str(x).replace(\"\\\\\", \"\\\\\\\\\").replace(\"%\", r\"\\%\").replace(\"_\", r\"\\_\")\n\n    # Same as prep_for_like_query(), but called for \"iexact\" matches, which\n    # need not necessarily be implemented using \"LIKE\" in the backend.\n    prep_for_iexact_query = prep_for_like_query\n\n    def validate_autopk_value(self, value):\n        \"\"\"\n        Certain backends do not accept some values for \"serial\" fields\n        (for example zero in MySQL). Raise a ValueError if the value is\n        invalid, otherwise return the validated value.\n        \"\"\"\n        return value\n\n    def adapt_unknown_value(self, value):\n        \"\"\"\n        Transform a value to something compatible with the backend driver.\n\n        This method only depends on the type of the value. It's designed for\n        cases where the target type isn't known, such as .raw() SQL queries.\n        As a consequence it may not work perfectly in all circumstances.\n        \"\"\"\n        if isinstance(value, datetime.datetime):  # must be before date\n            return self.adapt_datetimefield_value(value)\n        elif isinstance(value, datetime.date):\n            return self.adapt_datefield_value(value)\n        elif isinstance(value, datetime.time):\n            return self.adapt_timefield_value(value)\n        elif isinstance(value, decimal.Decimal):\n            return self.adapt_decimalfield_value(value)\n        else:\n            return value\n\n    def adapt_integerfield_value(self, value, internal_type):\n        return value\n\n    def adapt_datefield_value(self, value):\n        \"\"\"\n        Transform a date value to an object compatible with what is expected\n        by the backend driver for date columns.\n        \"\"\"\n        if value is None:\n            return None\n        return str(value)\n\n    def adapt_datetimefield_value(self, value):\n        \"\"\"\n        Transform a datetime value to an object compatible with what is expected\n        by the backend driver for datetime columns.\n        \"\"\"\n        if value is None:\n            return None\n        return str(value)\n\n    def adapt_timefield_value(self, value):\n        \"\"\"\n        Transform a time value to an object compatible with what is expected\n        by the backend driver for time columns.\n        \"\"\"\n        if value is None:\n            return None\n        if timezone.is_aware(value):\n            raise ValueError(\"Django does not support timezone-aware times.\")\n        return str(value)\n\n    def adapt_decimalfield_value(self, value, max_digits=None, decimal_places=None):\n        \"\"\"\n        Transform a decimal.Decimal value to an object compatible with what is\n        expected by the backend driver for decimal (numeric) columns.\n        \"\"\"\n        return value\n\n    def adapt_ipaddressfield_value(self, value):\n        \"\"\"\n        Transform a string representation of an IP address into the expected\n        type for the backend driver.\n        \"\"\"\n        return value or None\n\n    def adapt_json_value(self, value, encoder):\n        return json.dumps(value, cls=encoder)\n\n    def year_lookup_bounds_for_date_field(self, value, iso_year=False):\n        \"\"\"\n        Return a two-elements list with the lower and upper bound to be used\n        with a BETWEEN operator to query a DateField value using a year\n        lookup.\n\n        `value` is an int, containing the looked-up year.\n        If `iso_year` is True, return bounds for ISO-8601 week-numbering years.\n        \"\"\"\n        if iso_year:\n            first = datetime.date.fromisocalendar(value, 1, 1)\n            second = datetime.date.fromisocalendar(\n                value + 1, 1, 1\n            ) - datetime.timedelta(days=1)\n        else:\n            first = datetime.date(value, 1, 1)\n            second = datetime.date(value, 12, 31)\n        first = self.adapt_datefield_value(first)\n        second = self.adapt_datefield_value(second)\n        return [first, second]\n\n    def year_lookup_bounds_for_datetime_field(self, value, iso_year=False):\n        \"\"\"\n        Return a two-elements list with the lower and upper bound to be used\n        with a BETWEEN operator to query a DateTimeField value using a year\n        lookup.\n\n        `value` is an int, containing the looked-up year.\n        If `iso_year` is True, return bounds for ISO-8601 week-numbering years.\n        \"\"\"\n        if iso_year:\n            first = datetime.datetime.fromisocalendar(value, 1, 1)\n            second = datetime.datetime.fromisocalendar(\n                value + 1, 1, 1\n            ) - datetime.timedelta(microseconds=1)\n        else:\n            first = datetime.datetime(value, 1, 1)\n            second = datetime.datetime(value, 12, 31, 23, 59, 59, 999999)\n        if settings.USE_TZ:\n            tz = timezone.get_current_timezone()\n            first = timezone.make_aware(first, tz)\n            second = timezone.make_aware(second, tz)\n        first = self.adapt_datetimefield_value(first)\n        second = self.adapt_datetimefield_value(second)\n        return [first, second]\n\n    def get_db_converters(self, expression):\n        \"\"\"\n        Return a list of functions needed to convert field data.\n\n        Some field types on some backends do not provide data in the correct\n        format, this is the hook for converter functions.\n        \"\"\"\n        return []\n\n    def convert_durationfield_value(self, value, expression, connection):\n        if value is not None:\n            return datetime.timedelta(0, 0, value)\n\n    def check_expression_support(self, expression):\n        \"\"\"\n        Check that the backend supports the provided expression.\n\n        This is used on specific backends to rule out known expressions\n        that have problematic or nonexistent implementations. If the\n        expression has a known problem, the backend should raise\n        NotSupportedError.\n        \"\"\"\n        pass\n\n    def conditional_expression_supported_in_where_clause(self, expression):\n        \"\"\"\n        Return True, if the conditional expression is supported in the WHERE\n        clause.\n        \"\"\"\n        return True\n\n    def combine_expression(self, connector, sub_expressions):\n        \"\"\"\n        Combine a list of subexpressions into a single expression, using\n        the provided connecting operator. This is required because operators\n        can vary between backends (e.g., Oracle with %% and &) and between\n        subexpression types (e.g., date expressions).\n        \"\"\"\n        conn = \" %s \" % connector\n        return conn.join(sub_expressions)\n\n    def combine_duration_expression(self, connector, sub_expressions):\n        return self.combine_expression(connector, sub_expressions)\n\n    def binary_placeholder_sql(self, value):\n        \"\"\"\n        Some backends require special syntax to insert binary content (MySQL\n        for example uses '_binary %s').\n        \"\"\"\n        return \"%s\"\n\n    def modify_insert_params(self, placeholder, params):\n        \"\"\"\n        Allow modification of insert parameters. Needed for Oracle Spatial\n        backend due to #10888.\n        \"\"\"\n        return params\n\n    def integer_field_range(self, internal_type):\n        \"\"\"\n        Given an integer field internal type (e.g. 'PositiveIntegerField'),\n        return a tuple of the (min_value, max_value) form representing the\n        range of the column type bound to the field.\n        \"\"\"\n        return self.integer_field_ranges[internal_type]\n\n    def subtract_temporals(self, internal_type, lhs, rhs):\n        if self.connection.features.supports_temporal_subtraction:\n            lhs_sql, lhs_params = lhs\n            rhs_sql, rhs_params = rhs\n            return \"(%s - %s)\" % (lhs_sql, rhs_sql), (*lhs_params, *rhs_params)\n        raise NotSupportedError(\n            \"This backend does not support %s subtraction.\" % internal_type\n        )\n\n    def window_frame_value(self, value):\n        if isinstance(value, int):\n            if value == 0:\n                return self.CURRENT_ROW\n            elif value < 0:\n                return \"%d %s\" % (abs(value), self.PRECEDING)\n            else:\n                return \"%d %s\" % (value, self.FOLLOWING)\n\n    def window_frame_rows_start_end(self, start=None, end=None):\n        \"\"\"\n        Return SQL for start and end points in an OVER clause window frame.\n        \"\"\"\n        if isinstance(start, int) and isinstance(end, int) and start > end:\n            raise ValueError(\"start cannot be greater than end.\")\n        if start is not None and not isinstance(start, int):\n            raise ValueError(\n                f\"start argument must be an integer, zero, or None, but got '{start}'.\"\n            )\n        if end is not None and not isinstance(end, int):\n            raise ValueError(\n                f\"end argument must be an integer, zero, or None, but got '{end}'.\"\n            )\n        start_ = self.window_frame_value(start) or self.UNBOUNDED_PRECEDING\n        end_ = self.window_frame_value(end) or self.UNBOUNDED_FOLLOWING\n        return start_, end_\n\n    def window_frame_range_start_end(self, start=None, end=None):\n        if (start is not None and not isinstance(start, int)) or (\n            isinstance(start, int) and start > 0\n        ):\n            raise ValueError(\n                \"start argument must be a negative integer, zero, or None, \"\n                \"but got '%s'.\" % start\n            )\n        if (end is not None and not isinstance(end, int)) or (\n            isinstance(end, int) and end < 0\n        ):\n            raise ValueError(\n                \"end argument must be a positive integer, zero, or None, but got '%s'.\"\n                % end\n            )\n        start_ = self.window_frame_value(start) or self.UNBOUNDED_PRECEDING\n        end_ = self.window_frame_value(end) or self.UNBOUNDED_FOLLOWING\n        features = self.connection.features\n        if features.only_supports_unbounded_with_preceding_and_following and (\n            (start and start < 0) or (end and end > 0)\n        ):\n            raise NotSupportedError(\n                \"%s only supports UNBOUNDED together with PRECEDING and \"\n                \"FOLLOWING.\" % self.connection.display_name\n            )\n        return start_, end_\n\n    def explain_query_prefix(self, format=None, **options):\n        if not self.connection.features.supports_explaining_query_execution:\n            raise NotSupportedError(\n                \"This backend does not support explaining query execution.\"\n            )\n        if format:\n            supported_formats = self.connection.features.supported_explain_formats\n            normalized_format = format.upper()\n            if normalized_format not in supported_formats:\n                msg = \"%s is not a recognized format.\" % normalized_format\n                if supported_formats:\n                    msg += \" Allowed formats: %s\" % \", \".join(sorted(supported_formats))\n                else:\n                    msg += (\n                        f\" {self.connection.display_name} does not support any formats.\"\n                    )\n                raise ValueError(msg)\n        if options:\n            raise ValueError(\"Unknown options: %s\" % \", \".join(sorted(options.keys())))\n        return self.explain_prefix\n\n    def insert_statement(self, on_conflict=None):\n        return \"INSERT INTO\"\n\n    def on_conflict_suffix_sql(self, fields, on_conflict, update_fields, unique_fields):\n        return \"\"\n\n    def prepare_join_on_clause(self, lhs_table, lhs_field, rhs_table, rhs_field):\n        lhs_expr = Col(lhs_table, lhs_field)\n        rhs_expr = Col(rhs_table, rhs_field)\n\n        return lhs_expr, rhs_expr\n\n    def format_debug_sql(self, sql):\n        # Hook for backends (e.g. NoSQL) to customize formatting.\n        return sqlparse.format(sql, reindent=True, keyword_case=\"upper\")"}],"ground_truth":null,"score":null},
{"question":"Where can I find the implementation of the `DatabaseSchemaEditor` and its `_is_changing_type_of_indexed_text_column` method in the codebase?","answer":"","relative_code_list":[{"start_line":7,"end_line":380,"belongs_to":{"file_name":"schema.py","upper_path":"../django/django/db/backends/postgresql","module":"postgresql","define_class":["DatabaseSchemaEditor"],"imports":["django.db.backends.base.schema.BaseDatabaseSchemaEditor","django.db.backends.ddl_references.IndexColumns","django.db.backends.postgresql.psycopg_any.sql","django.db.backends.utils.strip_quotes"]},"relative_function":[],"code":"class DatabaseSchemaEditor(BaseDatabaseSchemaEditor):\n    # Setting all constraints to IMMEDIATE to allow changing data in the same\n    # transaction.\n    sql_update_with_default = (\n        \"UPDATE %(table)s SET %(column)s = %(default)s WHERE %(column)s IS NULL\"\n        \"; SET CONSTRAINTS ALL IMMEDIATE\"\n    )\n    sql_alter_sequence_type = \"ALTER SEQUENCE IF EXISTS %(sequence)s AS %(type)s\"\n    sql_delete_sequence = \"DROP SEQUENCE IF EXISTS %(sequence)s CASCADE\"\n\n    sql_create_index = (\n        \"CREATE INDEX %(name)s ON %(table)s%(using)s \"\n        \"(%(columns)s)%(include)s%(extra)s%(condition)s\"\n    )\n    sql_create_index_concurrently = (\n        \"CREATE INDEX CONCURRENTLY %(name)s ON %(table)s%(using)s \"\n        \"(%(columns)s)%(include)s%(extra)s%(condition)s\"\n    )\n    sql_delete_index = \"DROP INDEX IF EXISTS %(name)s\"\n    sql_delete_index_concurrently = \"DROP INDEX CONCURRENTLY IF EXISTS %(name)s\"\n\n    # Setting the constraint to IMMEDIATE to allow changing data in the same\n    # transaction.\n    sql_create_column_inline_fk = (\n        \"CONSTRAINT %(name)s REFERENCES %(to_table)s(%(to_column)s)%(deferrable)s\"\n        \"; SET CONSTRAINTS %(namespace)s%(name)s IMMEDIATE\"\n    )\n    # Setting the constraint to IMMEDIATE runs any deferred checks to allow\n    # dropping it in the same transaction.\n    sql_delete_fk = (\n        \"SET CONSTRAINTS %(name)s IMMEDIATE; \"\n        \"ALTER TABLE %(table)s DROP CONSTRAINT %(name)s\"\n    )\n    sql_delete_procedure = \"DROP FUNCTION %(procedure)s(%(param_types)s)\"\n\n    def execute(self, sql, params=()):\n        # Merge the query client-side, as PostgreSQL won't do it server-side.\n        if params is None:\n            return super().execute(sql, params)\n        sql = self.connection.ops.compose_sql(str(sql), params)\n        # Don't let the superclass touch anything.\n        return super().execute(sql, None)\n\n    sql_add_identity = (\n        \"ALTER TABLE %(table)s ALTER COLUMN %(column)s ADD \"\n        \"GENERATED BY DEFAULT AS IDENTITY\"\n    )\n    sql_drop_indentity = (\n        \"ALTER TABLE %(table)s ALTER COLUMN %(column)s DROP IDENTITY IF EXISTS\"\n    )\n\n    def quote_value(self, value):\n        return sql.quote(value, self.connection.connection)\n\n    def _field_indexes_sql(self, model, field):\n        output = super()._field_indexes_sql(model, field)\n        like_index_statement = self._create_like_index_sql(model, field)\n        if like_index_statement is not None:\n            output.append(like_index_statement)\n        return output\n\n    def _field_data_type(self, field):\n        if field.is_relation:\n            return field.rel_db_type(self.connection)\n        return self.connection.data_types.get(\n            field.get_internal_type(),\n            field.db_type(self.connection),\n        )\n\n    def _field_base_data_types(self, field):\n        # Yield base data types for array fields.\n        if field.base_field.get_internal_type() == \"ArrayField\":\n            yield from self._field_base_data_types(field.base_field)\n        else:\n            yield self._field_data_type(field.base_field)\n\n    def _create_like_index_sql(self, model, field):\n        \"\"\"\n        Return the statement to create an index with varchar operator pattern\n        when the column type is 'varchar' or 'text', otherwise return None.\n        \"\"\"\n        db_type = field.db_type(connection=self.connection)\n        if db_type is not None and (field.db_index or field.unique):\n            # Fields with database column types of `varchar` and `text` need\n            # a second index that specifies their operator class, which is\n            # needed when performing correct LIKE queries outside the\n            # C locale. See #12234.\n            #\n            # The same doesn't apply to array fields such as varchar[size]\n            # and text[size], so skip them.\n            if \"[\" in db_type:\n                return None\n            # Non-deterministic collations on Postgresql don't support indexes\n            # for operator classes varchar_pattern_ops/text_pattern_ops.\n            collation_name = getattr(field, \"db_collation\", None)\n            if not collation_name and field.is_relation:\n                collation_name = getattr(field.target_field, \"db_collation\", None)\n            if collation_name and not self._is_collation_deterministic(collation_name):\n                return None\n            if db_type.startswith(\"varchar\"):\n                return self._create_index_sql(\n                    model,\n                    fields=[field],\n                    suffix=\"_like\",\n                    opclasses=[\"varchar_pattern_ops\"],\n                )\n            elif db_type.startswith(\"text\"):\n                return self._create_index_sql(\n                    model,\n                    fields=[field],\n                    suffix=\"_like\",\n                    opclasses=[\"text_pattern_ops\"],\n                )\n        return None\n\n    def _using_sql(self, new_field, old_field):\n        if new_field.generated:\n            return \"\"\n        using_sql = \" USING %(column)s::%(type)s\"\n        new_internal_type = new_field.get_internal_type()\n        old_internal_type = old_field.get_internal_type()\n        if new_internal_type == \"ArrayField\" and new_internal_type == old_internal_type:\n            # Compare base data types for array fields.\n            if list(self._field_base_data_types(old_field)) != list(\n                self._field_base_data_types(new_field)\n            ):\n                return using_sql\n        elif self._field_data_type(old_field) != self._field_data_type(new_field):\n            return using_sql\n        return \"\"\n\n    def _get_sequence_name(self, table, column):\n        with self.connection.cursor() as cursor:\n            for sequence in self.connection.introspection.get_sequences(cursor, table):\n                if sequence[\"column\"] == column:\n                    return sequence[\"name\"]\n        return None\n\n    def _is_changing_type_of_indexed_text_column(self, old_field, old_type, new_type):\n        return (old_field.db_index or old_field.unique) and (\n            (old_type.startswith(\"varchar\") and not new_type.startswith(\"varchar\"))\n            or (old_type.startswith(\"text\") and not new_type.startswith(\"text\"))\n            or (old_type.startswith(\"citext\") and not new_type.startswith(\"citext\"))\n        )\n\n    def _alter_column_type_sql(\n        self, model, old_field, new_field, new_type, old_collation, new_collation\n    ):\n        # Drop indexes on varchar/text/citext columns that are changing to a\n        # different type.\n        old_db_params = old_field.db_parameters(connection=self.connection)\n        old_type = old_db_params[\"type\"]\n        if self._is_changing_type_of_indexed_text_column(old_field, old_type, new_type):\n            index_name = self._create_index_name(\n                model._meta.db_table, [old_field.column], suffix=\"_like\"\n            )\n            self.execute(self._delete_index_sql(model, index_name))\n\n        self.sql_alter_column_type = (\n            \"ALTER COLUMN %(column)s TYPE %(type)s%(collation)s\"\n        )\n        # Cast when data type changed.\n        if using_sql := self._using_sql(new_field, old_field):\n            self.sql_alter_column_type += using_sql\n        new_internal_type = new_field.get_internal_type()\n        old_internal_type = old_field.get_internal_type()\n        # Make ALTER TYPE with IDENTITY make sense.\n        table = strip_quotes(model._meta.db_table)\n        auto_field_types = {\n            \"AutoField\",\n            \"BigAutoField\",\n            \"SmallAutoField\",\n        }\n        old_is_auto = old_internal_type in auto_field_types\n        new_is_auto = new_internal_type in auto_field_types\n        if new_is_auto and not old_is_auto:\n            column = strip_quotes(new_field.column)\n            return (\n                (\n                    self.sql_alter_column_type\n                    % {\n                        \"column\": self.quote_name(column),\n                        \"type\": new_type,\n                        \"collation\": \"\",\n                    },\n                    [],\n                ),\n                [\n                    (\n                        self.sql_add_identity\n                        % {\n                            \"table\": self.quote_name(table),\n                            \"column\": self.quote_name(column),\n                        },\n                        [],\n                    ),\n                ],\n            )\n        elif old_is_auto and not new_is_auto:\n            # Drop IDENTITY if exists (pre-Django 4.1 serial columns don't have\n            # it).\n            self.execute(\n                self.sql_drop_indentity\n                % {\n                    \"table\": self.quote_name(table),\n                    \"column\": self.quote_name(strip_quotes(new_field.column)),\n                }\n            )\n            column = strip_quotes(new_field.column)\n            fragment, _ = super()._alter_column_type_sql(\n                model, old_field, new_field, new_type, old_collation, new_collation\n            )\n            # Drop the sequence if exists (Django 4.1+ identity columns don't\n            # have it).\n            other_actions = []\n            if sequence_name := self._get_sequence_name(table, column):\n                other_actions = [\n                    (\n                        self.sql_delete_sequence\n                        % {\n                            \"sequence\": self.quote_name(sequence_name),\n                        },\n                        [],\n                    )\n                ]\n            return fragment, other_actions\n        elif new_is_auto and old_is_auto and old_internal_type != new_internal_type:\n            fragment, _ = super()._alter_column_type_sql(\n                model, old_field, new_field, new_type, old_collation, new_collation\n            )\n            column = strip_quotes(new_field.column)\n            db_types = {\n                \"AutoField\": \"integer\",\n                \"BigAutoField\": \"bigint\",\n                \"SmallAutoField\": \"smallint\",\n            }\n            # Alter the sequence type if exists (Django 4.1+ identity columns\n            # don't have it).\n            other_actions = []\n            if sequence_name := self._get_sequence_name(table, column):\n                other_actions = [\n                    (\n                        self.sql_alter_sequence_type\n                        % {\n                            \"sequence\": self.quote_name(sequence_name),\n                            \"type\": db_types[new_internal_type],\n                        },\n                        [],\n                    ),\n                ]\n            return fragment, other_actions\n        else:\n            return super()._alter_column_type_sql(\n                model, old_field, new_field, new_type, old_collation, new_collation\n            )\n\n    def _alter_field(\n        self,\n        model,\n        old_field,\n        new_field,\n        old_type,\n        new_type,\n        old_db_params,\n        new_db_params,\n        strict=False,\n    ):\n        super()._alter_field(\n            model,\n            old_field,\n            new_field,\n            old_type,\n            new_type,\n            old_db_params,\n            new_db_params,\n            strict,\n        )\n        # Added an index? Create any PostgreSQL-specific indexes.\n        if (\n            (not (old_field.db_index or old_field.unique) and new_field.db_index)\n            or (not old_field.unique and new_field.unique)\n            or (\n                self._is_changing_type_of_indexed_text_column(\n                    old_field, old_type, new_type\n                )\n            )\n        ):\n            like_index_statement = self._create_like_index_sql(model, new_field)\n            if like_index_statement is not None:\n                self.execute(like_index_statement)\n\n        # Removed an index? Drop any PostgreSQL-specific indexes.\n        if old_field.unique and not (new_field.db_index or new_field.unique):\n            index_to_remove = self._create_index_name(\n                model._meta.db_table, [old_field.column], suffix=\"_like\"\n            )\n            self.execute(self._delete_index_sql(model, index_to_remove))\n\n    def _index_columns(self, table, columns, col_suffixes, opclasses):\n        if opclasses:\n            return IndexColumns(\n                table,\n                columns,\n                self.quote_name,\n                col_suffixes=col_suffixes,\n                opclasses=opclasses,\n            )\n        return super()._index_columns(table, columns, col_suffixes, opclasses)\n\n    def add_index(self, model, index, concurrently=False):\n        self.execute(\n            index.create_sql(model, self, concurrently=concurrently), params=None\n        )\n\n    def remove_index(self, model, index, concurrently=False):\n        self.execute(index.remove_sql(model, self, concurrently=concurrently))\n\n    def _delete_index_sql(self, model, name, sql=None, concurrently=False):\n        sql = sql or (\n            self.sql_delete_index_concurrently\n            if concurrently\n            else self.sql_delete_index\n        )\n        return super()._delete_index_sql(model, name, sql)\n\n    def _create_index_sql(\n        self,\n        model,\n        *,\n        fields=None,\n        name=None,\n        suffix=\"\",\n        using=\"\",\n        db_tablespace=None,\n        col_suffixes=(),\n        sql=None,\n        opclasses=(),\n        condition=None,\n        concurrently=False,\n        include=None,\n        expressions=None,\n    ):\n        sql = sql or (\n            self.sql_create_index\n            if not concurrently\n            else self.sql_create_index_concurrently\n        )\n        return super()._create_index_sql(\n            model,\n            fields=fields,\n            name=name,\n            suffix=suffix,\n            using=using,\n            db_tablespace=db_tablespace,\n            col_suffixes=col_suffixes,\n            sql=sql,\n            opclasses=opclasses,\n            condition=condition,\n            include=include,\n            expressions=expressions,\n        )\n\n    def _is_collation_deterministic(self, collation_name):\n        with self.connection.cursor() as cursor:\n            cursor.execute(\n                \"\"\"\n                SELECT collisdeterministic\n                FROM pg_collation\n                WHERE collname = %s\n                \"\"\",\n                [collation_name],\n            )\n            row = cursor.fetchone()\n            return row[0] if row else None"},{"start_line":145,"end_line":150,"belongs_to":{"file_name":"schema.py","upper_path":"../django/django/db/backends/postgresql","module":"postgresql","define_class":["DatabaseSchemaEditor"],"imports":["django.db.backends.base.schema.BaseDatabaseSchemaEditor","django.db.backends.ddl_references.IndexColumns","django.db.backends.postgresql.psycopg_any.sql","django.db.backends.utils.strip_quotes"]},"relative_function":[],"code":"def _is_changing_type_of_indexed_text_column(self, old_field, old_type, new_type):\n        return (old_field.db_index or old_field.unique) and (\n            (old_type.startswith(\"varchar\") and not new_type.startswith(\"varchar\"))\n            or (old_type.startswith(\"text\") and not new_type.startswith(\"text\"))\n            or (old_type.startswith(\"citext\") and not new_type.startswith(\"citext\"))\n        )"}],"ground_truth":null,"score":null},
{"question":"What are the parameters and expected behavior of the `_destroy_test_user` method in the `DatabaseCreation`?","answer":"","relative_code_list":[{"start_line":9,"end_line":91,"belongs_to":{"file_name":"creation.py","upper_path":"../django/django/db/backends/postgresql","module":"postgresql","define_class":["DatabaseCreation"],"imports":["sys","django.core.exceptions.ImproperlyConfigured","django.db.backends.base.creation.BaseDatabaseCreation","django.db.backends.postgresql.psycopg_any.errors","django.db.backends.utils.strip_quotes"]},"relative_function":[],"code":"class DatabaseCreation(BaseDatabaseCreation):\n    def _quote_name(self, name):\n        return self.connection.ops.quote_name(name)\n\n    def _get_database_create_suffix(self, encoding=None, template=None):\n        suffix = \"\"\n        if encoding:\n            suffix += \" ENCODING '{}'\".format(encoding)\n        if template:\n            suffix += \" TEMPLATE {}\".format(self._quote_name(template))\n        return suffix and \"WITH\" + suffix\n\n    def sql_table_creation_suffix(self):\n        test_settings = self.connection.settings_dict[\"TEST\"]\n        if test_settings.get(\"COLLATION\") is not None:\n            raise ImproperlyConfigured(\n                \"PostgreSQL does not support collation setting at database \"\n                \"creation time.\"\n            )\n        return self._get_database_create_suffix(\n            encoding=test_settings[\"CHARSET\"],\n            template=test_settings.get(\"TEMPLATE\"),\n        )\n\n    def _database_exists(self, cursor, database_name):\n        cursor.execute(\n            \"SELECT 1 FROM pg_catalog.pg_database WHERE datname = %s\",\n            [strip_quotes(database_name)],\n        )\n        return cursor.fetchone() is not None\n\n    def _execute_create_test_db(self, cursor, parameters, keepdb=False):\n        try:\n            if keepdb and self._database_exists(cursor, parameters[\"dbname\"]):\n                # If the database should be kept and it already exists, don't\n                # try to create a new one.\n                return\n            super()._execute_create_test_db(cursor, parameters, keepdb)\n        except Exception as e:\n            if not isinstance(e.__cause__, errors.DuplicateDatabase):\n                # All errors except \"database already exists\" cancel tests.\n                self.log(\"Got an error creating the test database: %s\" % e)\n                sys.exit(2)\n            elif not keepdb:\n                # If the database should be kept, ignore \"database already\n                # exists\".\n                raise\n\n    def _clone_test_db(self, suffix, verbosity, keepdb=False):\n        # CREATE DATABASE ... WITH TEMPLATE ... requires closing connections\n        # to the template database.\n        self.connection.close()\n        self.connection.close_pool()\n\n        source_database_name = self.connection.settings_dict[\"NAME\"]\n        target_database_name = self.get_test_db_clone_settings(suffix)[\"NAME\"]\n        test_db_params = {\n            \"dbname\": self._quote_name(target_database_name),\n            \"suffix\": self._get_database_create_suffix(template=source_database_name),\n        }\n        with self._nodb_cursor() as cursor:\n            try:\n                self._execute_create_test_db(cursor, test_db_params, keepdb)\n            except Exception:\n                try:\n                    if verbosity >= 1:\n                        self.log(\n                            \"Destroying old test database for alias %s...\"\n                            % (\n                                self._get_database_display_str(\n                                    verbosity, target_database_name\n                                ),\n                            )\n                        )\n                    cursor.execute(\"DROP DATABASE %(dbname)s\" % test_db_params)\n                    self._execute_create_test_db(cursor, test_db_params, keepdb)\n                except Exception as e:\n                    self.log(\"Got an error cloning the test database: %s\" % e)\n                    sys.exit(2)\n\n    def _destroy_test_db(self, test_database_name, verbosity):\n        self.connection.close_pool()\n        return super()._destroy_test_db(test_database_name, verbosity)"},{"start_line":316,"end_line":323,"belongs_to":{"file_name":"creation.py","upper_path":"../django/django/db/backends/oracle","module":"oracle","define_class":["DatabaseCreation"],"imports":["sys","django.conf.settings","django.db.DatabaseError","django.db.backends.base.creation.BaseDatabaseCreation","django.utils.crypto.get_random_string","django.utils.functional.cached_property"]},"relative_function":[],"code":"def _destroy_test_user(self, cursor, parameters, verbosity):\n        if verbosity >= 2:\n            self.log(\"_destroy_test_user(): user=%s\" % parameters[\"user\"])\n            self.log(\"Be patient. This can take some time...\")\n        statements = [\n            \"DROP USER %(user)s CASCADE\",\n        ]\n        self._execute_statements(cursor, statements, parameters, verbosity)"}],"ground_truth":null,"score":null},
{"question":"Where can I find the definition of the `FormatStylePlaceholderCursor`.`__getattr__` function in the codebase?","answer":"","relative_code_list":[{"start_line":482,"end_line":662,"belongs_to":{"file_name":"base.py","upper_path":"../django/django/db/backends/oracle","module":"oracle","define_class":["_UninitializedOperatorsDescriptor","DatabaseWrapper","OracleParam","VariableWrapper","FormatStylePlaceholderCursor"],"imports":["datetime","decimal","os","platform","contextlib.contextmanager","django.conf.settings","django.core.exceptions.ImproperlyConfigured","django.db.IntegrityError","django.db.backends.base.base.BaseDatabaseWrapper","django.db.backends.utils.debug_transaction","django.utils.asyncio.async_unsafe","django.utils.encoding.force_bytes","django.utils.encoding.force_str","django.utils.functional.cached_property","django.utils.version.get_version_tuple","client.DatabaseClient","creation.DatabaseCreation","features.DatabaseFeatures","introspection.DatabaseIntrospection","operations.DatabaseOperations","schema.DatabaseSchemaEditor","utils.Oracle_datetime","utils.dsn","validation.DatabaseValidation","oracledb","ctypes"]},"relative_function":[],"code":"class FormatStylePlaceholderCursor:\n    \"\"\"\n    Django uses \"format\" (e.g. '%s') style placeholders, but Oracle uses \":var\"\n    style. This fixes it -- but note that if you want to use a literal \"%s\" in\n    a query, you'll need to use \"%%s\".\n    \"\"\"\n\n    charset = \"utf-8\"\n\n    def __init__(self, connection, database):\n        self.cursor = connection.cursor()\n        self.cursor.outputtypehandler = self._output_type_handler\n        self.database = database\n\n    @staticmethod\n    def _output_number_converter(value):\n        return decimal.Decimal(value) if \".\" in value else int(value)\n\n    @staticmethod\n    def _get_decimal_converter(precision, scale):\n        if scale == 0:\n            return int\n        context = decimal.Context(prec=precision)\n        quantize_value = decimal.Decimal(1).scaleb(-scale)\n        return lambda v: decimal.Decimal(v).quantize(quantize_value, context=context)\n\n    @staticmethod\n    def _output_type_handler(cursor, name, defaultType, length, precision, scale):\n        \"\"\"\n        Called for each db column fetched from cursors. Return numbers as the\n        appropriate Python type, and NCLOB with JSON as strings.\n        \"\"\"\n        if defaultType == Database.NUMBER:\n            if scale == -127:\n                if precision == 0:\n                    # NUMBER column: decimal-precision floating point.\n                    # This will normally be an integer from a sequence,\n                    # but it could be a decimal value.\n                    outconverter = FormatStylePlaceholderCursor._output_number_converter\n                else:\n                    # FLOAT column: binary-precision floating point.\n                    # This comes from FloatField columns.\n                    outconverter = float\n            elif precision > 0:\n                # NUMBER(p,s) column: decimal-precision fixed point.\n                # This comes from IntegerField and DecimalField columns.\n                outconverter = FormatStylePlaceholderCursor._get_decimal_converter(\n                    precision, scale\n                )\n            else:\n                # No type information. This normally comes from a\n                # mathematical expression in the SELECT list. Guess int\n                # or Decimal based on whether it has a decimal point.\n                outconverter = FormatStylePlaceholderCursor._output_number_converter\n            return cursor.var(\n                Database.STRING,\n                size=255,\n                arraysize=cursor.arraysize,\n                outconverter=outconverter,\n            )\n        # oracledb 2.0.0+ returns NLOB columns with IS JSON constraints as\n        # dicts. Use a no-op converter to avoid this.\n        elif defaultType == Database.DB_TYPE_NCLOB:\n            return cursor.var(Database.DB_TYPE_NCLOB, arraysize=cursor.arraysize)\n\n    def _format_params(self, params):\n        try:\n            return {k: OracleParam(v, self, True) for k, v in params.items()}\n        except AttributeError:\n            return tuple(OracleParam(p, self, True) for p in params)\n\n    def _guess_input_sizes(self, params_list):\n        # Try dict handling; if that fails, treat as sequence\n        if hasattr(params_list[0], \"keys\"):\n            sizes = {}\n            for params in params_list:\n                for k, value in params.items():\n                    if value.input_size:\n                        sizes[k] = value.input_size\n            if sizes:\n                self.setinputsizes(**sizes)\n        else:\n            # It's not a list of dicts; it's a list of sequences\n            sizes = [None] * len(params_list[0])\n            for params in params_list:\n                for i, value in enumerate(params):\n                    if value.input_size:\n                        sizes[i] = value.input_size\n            if sizes:\n                self.setinputsizes(*sizes)\n\n    def _param_generator(self, params):\n        # Try dict handling; if that fails, treat as sequence\n        if hasattr(params, \"items\"):\n            return {k: v.force_bytes for k, v in params.items()}\n        else:\n            return [p.force_bytes for p in params]\n\n    def _fix_for_params(self, query, params, unify_by_values=False):\n        # oracledb wants no trailing ';' for SQL statements.  For PL/SQL, it\n        # it does want a trailing ';' but not a trailing '/'.  However, these\n        # characters must be included in the original query in case the query\n        # is being passed to SQL*Plus.\n        if query.endswith(\";\") or query.endswith(\"/\"):\n            query = query[:-1]\n        if params is None:\n            params = []\n        elif hasattr(params, \"keys\"):\n            # Handle params as dict\n            args = {k: \":%s\" % k for k in params}\n            query %= args\n        elif unify_by_values and params:\n            # Handle params as a dict with unified query parameters by their\n            # values. It can be used only in single query execute() because\n            # executemany() shares the formatted query with each of the params\n            # list. e.g. for input params = [0.75, 2, 0.75, 'sth', 0.75]\n            # params_dict = {\n            #     (float, 0.75): ':arg0',\n            #     (int, 2): ':arg1',\n            #     (str, 'sth'): ':arg2',\n            # }\n            # args = [':arg0', ':arg1', ':arg0', ':arg2', ':arg0']\n            # params = {':arg0': 0.75, ':arg1': 2, ':arg2': 'sth'}\n            # The type of parameters in param_types keys is necessary to avoid\n            # unifying 0/1 with False/True.\n            param_types = [(type(param), param) for param in params]\n            params_dict = {\n                param_type: \":arg%d\" % i\n                for i, param_type in enumerate(dict.fromkeys(param_types))\n            }\n            args = [params_dict[param_type] for param_type in param_types]\n            params = {\n                placeholder: param for (_, param), placeholder in params_dict.items()\n            }\n            query %= tuple(args)\n        else:\n            # Handle params as sequence\n            args = [(\":arg%d\" % i) for i in range(len(params))]\n            query %= tuple(args)\n        return query, self._format_params(params)\n\n    def execute(self, query, params=None):\n        query, params = self._fix_for_params(query, params, unify_by_values=True)\n        self._guess_input_sizes([params])\n        with wrap_oracle_errors():\n            return self.cursor.execute(query, self._param_generator(params))\n\n    def executemany(self, query, params=None):\n        if not params:\n            # No params given, nothing to do\n            return None\n        # uniform treatment for sequences and iterables\n        params_iter = iter(params)\n        query, firstparams = self._fix_for_params(query, next(params_iter))\n        # we build a list of formatted params; as we're going to traverse it\n        # more than once, we can't make it lazy by using a generator\n        formatted = [firstparams] + [self._format_params(p) for p in params_iter]\n        self._guess_input_sizes(formatted)\n        with wrap_oracle_errors():\n            return self.cursor.executemany(\n                query, [self._param_generator(p) for p in formatted]\n            )\n\n    def close(self):\n        try:\n            self.cursor.close()\n        except Database.InterfaceError:\n            # already closed\n            pass\n\n    def var(self, *args):\n        return VariableWrapper(self.cursor.var(*args))\n\n    def arrayvar(self, *args):\n        return VariableWrapper(self.cursor.arrayvar(*args))\n\n    def __getattr__(self, attr):\n        return getattr(self.cursor, attr)\n\n    def __iter__(self):\n        return iter(self.cursor)"},{"start_line":658,"end_line":659,"belongs_to":{"file_name":"base.py","upper_path":"../django/django/db/backends/oracle","module":"oracle","define_class":["_UninitializedOperatorsDescriptor","DatabaseWrapper","OracleParam","VariableWrapper","FormatStylePlaceholderCursor"],"imports":["datetime","decimal","os","platform","contextlib.contextmanager","django.conf.settings","django.core.exceptions.ImproperlyConfigured","django.db.IntegrityError","django.db.backends.base.base.BaseDatabaseWrapper","django.db.backends.utils.debug_transaction","django.utils.asyncio.async_unsafe","django.utils.encoding.force_bytes","django.utils.encoding.force_str","django.utils.functional.cached_property","django.utils.version.get_version_tuple","client.DatabaseClient","creation.DatabaseCreation","features.DatabaseFeatures","introspection.DatabaseIntrospection","operations.DatabaseOperations","schema.DatabaseSchemaEditor","utils.Oracle_datetime","utils.dsn","validation.DatabaseValidation","oracledb","ctypes"]},"relative_function":[],"code":"def __getattr__(self, attr):\n        return getattr(self.cursor, attr)"}],"ground_truth":null,"score":null},
{"question":"What are the expected input parameters and return values for the `test_collations` methods in the `DatabaseFeatures`?","answer":"","relative_code_list":[{"start_line":9,"end_line":171,"belongs_to":{"file_name":"features.py","upper_path":"../django/django/db/backends/postgresql","module":"postgresql","define_class":["DatabaseFeatures"],"imports":["operator","django.db.DataError","django.db.InterfaceError","django.db.backends.base.features.BaseDatabaseFeatures","django.db.backends.postgresql.psycopg_any.is_psycopg3","django.utils.functional.cached_property"]},"relative_function":[],"code":"class DatabaseFeatures(BaseDatabaseFeatures):\n    minimum_database_version = (14,)\n    allows_group_by_selected_pks = True\n    can_return_columns_from_insert = True\n    can_return_rows_from_bulk_insert = True\n    has_real_datatype = True\n    has_native_uuid_field = True\n    has_native_duration_field = True\n    has_native_json_field = True\n    can_defer_constraint_checks = True\n    has_select_for_update = True\n    has_select_for_update_nowait = True\n    has_select_for_update_of = True\n    has_select_for_update_skip_locked = True\n    has_select_for_no_key_update = True\n    can_release_savepoints = True\n    supports_comments = True\n    supports_tablespaces = True\n    supports_transactions = True\n    can_introspect_materialized_views = True\n    can_distinct_on_fields = True\n    can_rollback_ddl = True\n    schema_editor_uses_clientside_param_binding = True\n    supports_combined_alters = True\n    nulls_order_largest = True\n    closed_cursor_error_class = InterfaceError\n    greatest_least_ignores_nulls = True\n    can_clone_databases = True\n    supports_temporal_subtraction = True\n    supports_slicing_ordering_in_compound = True\n    create_test_procedure_without_params_sql = \"\"\"\n        CREATE FUNCTION test_procedure () RETURNS void AS $$\n        DECLARE\n            V_I INTEGER;\n        BEGIN\n            V_I := 1;\n        END;\n    $$ LANGUAGE plpgsql;\"\"\"\n    create_test_procedure_with_int_param_sql = \"\"\"\n        CREATE FUNCTION test_procedure (P_I INTEGER) RETURNS void AS $$\n        DECLARE\n            V_I INTEGER;\n        BEGIN\n            V_I := P_I;\n        END;\n    $$ LANGUAGE plpgsql;\"\"\"\n    create_test_table_with_composite_primary_key = \"\"\"\n        CREATE TABLE test_table_composite_pk (\n            column_1 INTEGER NOT NULL,\n            column_2 INTEGER NOT NULL,\n            PRIMARY KEY(column_1, column_2)\n        )\n    \"\"\"\n    requires_casted_case_in_updates = True\n    supports_over_clause = True\n    supports_frame_exclusion = True\n    only_supports_unbounded_with_preceding_and_following = True\n    supports_aggregate_filter_clause = True\n    supports_aggregate_order_by_clause = True\n    supported_explain_formats = {\"JSON\", \"TEXT\", \"XML\", \"YAML\"}\n    supports_deferrable_unique_constraints = True\n    has_json_operators = True\n    json_key_contains_list_matching_requires_list = True\n    supports_update_conflicts = True\n    supports_update_conflicts_with_target = True\n    supports_covering_indexes = True\n    supports_stored_generated_columns = True\n    supports_virtual_generated_columns = False\n    can_rename_index = True\n    test_collations = {\n        \"deterministic\": \"C\",\n        \"non_default\": \"sv-x-icu\",\n        \"swedish_ci\": \"sv-x-icu\",\n        \"virtual\": \"sv-x-icu\",\n    }\n    test_now_utc_template = \"STATEMENT_TIMESTAMP() AT TIME ZONE 'UTC'\"\n    insert_test_table_with_defaults = \"INSERT INTO {} DEFAULT VALUES\"\n\n    @cached_property\n    def django_test_skips(self):\n        skips = {\n            \"opclasses are PostgreSQL only.\": {\n                \"indexes.tests.SchemaIndexesNotPostgreSQLTests.\"\n                \"test_create_index_ignores_opclasses\",\n            },\n            \"PostgreSQL requires casting to text.\": {\n                \"lookup.tests.LookupTests.test_textfield_exact_null\",\n            },\n        }\n        if self.connection.settings_dict[\"OPTIONS\"].get(\"pool\"):\n            skips.update(\n                {\n                    \"Pool does implicit health checks\": {\n                        \"backends.base.test_base.ConnectionHealthChecksTests.\"\n                        \"test_health_checks_enabled\",\n                        \"backends.base.test_base.ConnectionHealthChecksTests.\"\n                        \"test_set_autocommit_health_checks_enabled\",\n                    },\n                }\n            )\n        if self.uses_server_side_binding:\n            skips.update(\n                {\n                    \"The actual query cannot be determined for server side bindings\": {\n                        \"backends.base.test_base.ExecuteWrapperTests.\"\n                        \"test_wrapper_debug\",\n                    }\n                },\n            )\n        return skips\n\n    @cached_property\n    def django_test_expected_failures(self):\n        expected_failures = set()\n        if self.uses_server_side_binding:\n            expected_failures.update(\n                {\n                    # Parameters passed to expressions in SELECT and GROUP BY\n                    # clauses are not recognized as the same values when using\n                    # server-side binding cursors (#34255).\n                    \"aggregation.tests.AggregateTestCase.\"\n                    \"test_group_by_nested_expression_with_params\",\n                }\n            )\n        return expected_failures\n\n    @cached_property\n    def uses_server_side_binding(self):\n        options = self.connection.settings_dict[\"OPTIONS\"]\n        return is_psycopg3 and options.get(\"server_side_binding\") is True\n\n    @cached_property\n    def prohibits_null_characters_in_text_exception(self):\n        if is_psycopg3:\n            return DataError, \"PostgreSQL text fields cannot contain NUL (0x00) bytes\"\n        else:\n            return ValueError, \"A string literal cannot contain NUL (0x00) characters.\"\n\n    @cached_property\n    def introspected_field_types(self):\n        return {\n            **super().introspected_field_types,\n            \"PositiveBigIntegerField\": \"BigIntegerField\",\n            \"PositiveIntegerField\": \"IntegerField\",\n            \"PositiveSmallIntegerField\": \"SmallIntegerField\",\n        }\n\n    @cached_property\n    def is_postgresql_15(self):\n        return self.connection.pg_version >= 150000\n\n    @cached_property\n    def is_postgresql_16(self):\n        return self.connection.pg_version >= 160000\n\n    @cached_property\n    def is_postgresql_17(self):\n        return self.connection.pg_version >= 170000\n\n    supports_unlimited_charfield = True\n    supports_nulls_distinct_unique_constraints = property(\n        operator.attrgetter(\"is_postgresql_15\")\n    )"},{"start_line":76,"end_line":82,"belongs_to":{"file_name":"features.py","upper_path":"../django/django/db/backends/mysql","module":"mysql","define_class":["DatabaseFeatures"],"imports":["operator","django.db.backends.base.features.BaseDatabaseFeatures","django.utils.functional.cached_property"]},"relative_function":[],"code":"def test_collations(self):\n        return {\n            \"ci\": \"utf8mb4_general_ci\",\n            \"non_default\": \"utf8mb4_esperanto_ci\",\n            \"swedish_ci\": \"utf8mb4_swedish_ci\",\n            \"virtual\": \"utf8mb4_esperanto_ci\",\n        }"}],"ground_truth":null,"score":null},
{"question":"What is the purpose of the `function` attribute in the `SecondsToInterval`, and how does it affect other features?","answer":"","relative_code_list":[{"start_line":19,"end_line":26,"belongs_to":{"file_name":"functions.py","upper_path":"../django/django/db/backends/oracle","module":"oracle","define_class":["IntervalToSeconds","SecondsToInterval"],"imports":["django.db.models.DecimalField","django.db.models.DurationField","django.db.models.Func"]},"relative_function":[],"code":"class SecondsToInterval(Func):\n    function = \"NUMTODSINTERVAL\"\n    template = \"%(function)s(%(expressions)s, 'SECOND')\"\n\n    def __init__(self, expression, *, output_field=None, **extra):\n        super().__init__(\n            expression, output_field=output_field or DurationField(), **extra\n        )"}],"ground_truth":null,"score":null},
{"question":"What are the expected parameters and return values for the `binary_placeholder_sql` method in the context of `DatabaseOperations`?","answer":"","relative_code_list":[{"start_line":27,"end_line":422,"belongs_to":{"file_name":"operations.py","upper_path":"../django/django/db/backends/postgresql","module":"postgresql","define_class":["DatabaseOperations"],"imports":["json","functools.lru_cache","functools.partial","django.conf.settings","django.db.backends.base.operations.BaseDatabaseOperations","django.db.backends.postgresql.compiler.InsertUnnest","django.db.backends.postgresql.psycopg_any.Inet","django.db.backends.postgresql.psycopg_any.Jsonb","django.db.backends.postgresql.psycopg_any.errors","django.db.backends.postgresql.psycopg_any.is_psycopg3","django.db.backends.postgresql.psycopg_any.mogrify","django.db.backends.utils.split_tzname_delta","django.db.models.constants.OnConflict","django.db.models.functions.Cast","django.utils.regex_helper._lazy_re_compile","psycopg.types.numeric","django.db.models"]},"relative_function":[],"code":"class DatabaseOperations(BaseDatabaseOperations):\n    compiler_module = \"django.db.backends.postgresql.compiler\"\n    cast_char_field_without_max_length = \"varchar\"\n    explain_prefix = \"EXPLAIN\"\n    explain_options = frozenset(\n        [\n            \"ANALYZE\",\n            \"BUFFERS\",\n            \"COSTS\",\n            \"GENERIC_PLAN\",\n            \"MEMORY\",\n            \"SETTINGS\",\n            \"SERIALIZE\",\n            \"SUMMARY\",\n            \"TIMING\",\n            \"VERBOSE\",\n            \"WAL\",\n        ]\n    )\n    cast_data_types = {\n        \"AutoField\": \"integer\",\n        \"BigAutoField\": \"bigint\",\n        \"SmallAutoField\": \"smallint\",\n    }\n\n    if is_psycopg3:\n        from psycopg.types import numeric\n\n        integerfield_type_map = {\n            \"SmallIntegerField\": numeric.Int2,\n            \"IntegerField\": numeric.Int4,\n            \"BigIntegerField\": numeric.Int8,\n            \"PositiveSmallIntegerField\": numeric.Int2,\n            \"PositiveIntegerField\": numeric.Int4,\n            \"PositiveBigIntegerField\": numeric.Int8,\n        }\n\n    def unification_cast_sql(self, output_field):\n        internal_type = output_field.get_internal_type()\n        if internal_type in (\n            \"GenericIPAddressField\",\n            \"IPAddressField\",\n            \"TimeField\",\n            \"UUIDField\",\n        ):\n            # PostgreSQL will resolve a union as type 'text' if input types are\n            # 'unknown'.\n            # https://www.postgresql.org/docs/current/typeconv-union-case.html\n            # These fields cannot be implicitly cast back in the default\n            # PostgreSQL configuration so we need to explicitly cast them.\n            # We must also remove components of the type within brackets:\n            # varchar(255) -> varchar.\n            return (\n                \"CAST(%%s AS %s)\" % output_field.db_type(self.connection).split(\"(\")[0]\n            )\n        return \"%s\"\n\n    # EXTRACT format cannot be passed in parameters.\n    _extract_format_re = _lazy_re_compile(r\"[A-Z_]+\")\n\n    def date_extract_sql(self, lookup_type, sql, params):\n        # https://www.postgresql.org/docs/current/functions-datetime.html#FUNCTIONS-DATETIME-EXTRACT\n        if lookup_type == \"week_day\":\n            # For consistency across backends, we return Sunday=1, Saturday=7.\n            return f\"EXTRACT(DOW FROM {sql}) + 1\", params\n        elif lookup_type == \"iso_week_day\":\n            return f\"EXTRACT(ISODOW FROM {sql})\", params\n        elif lookup_type == \"iso_year\":\n            return f\"EXTRACT(ISOYEAR FROM {sql})\", params\n\n        lookup_type = lookup_type.upper()\n        if not self._extract_format_re.fullmatch(lookup_type):\n            raise ValueError(f\"Invalid lookup type: {lookup_type!r}\")\n        return f\"EXTRACT({lookup_type} FROM {sql})\", params\n\n    def date_trunc_sql(self, lookup_type, sql, params, tzname=None):\n        sql, params = self._convert_sql_to_tz(sql, params, tzname)\n        # https://www.postgresql.org/docs/current/functions-datetime.html#FUNCTIONS-DATETIME-TRUNC\n        return f\"DATE_TRUNC(%s, {sql})\", (lookup_type, *params)\n\n    def _prepare_tzname_delta(self, tzname):\n        tzname, sign, offset = split_tzname_delta(tzname)\n        if offset:\n            sign = \"-\" if sign == \"+\" else \"+\"\n            return f\"{tzname}{sign}{offset}\"\n        return tzname\n\n    def _convert_sql_to_tz(self, sql, params, tzname):\n        if tzname and settings.USE_TZ:\n            tzname_param = self._prepare_tzname_delta(tzname)\n            return f\"{sql} AT TIME ZONE %s\", (*params, tzname_param)\n        return sql, params\n\n    def datetime_cast_date_sql(self, sql, params, tzname):\n        sql, params = self._convert_sql_to_tz(sql, params, tzname)\n        return f\"({sql})::date\", params\n\n    def datetime_cast_time_sql(self, sql, params, tzname):\n        sql, params = self._convert_sql_to_tz(sql, params, tzname)\n        return f\"({sql})::time\", params\n\n    def datetime_extract_sql(self, lookup_type, sql, params, tzname):\n        sql, params = self._convert_sql_to_tz(sql, params, tzname)\n        if lookup_type == \"second\":\n            # Truncate fractional seconds.\n            return f\"EXTRACT(SECOND FROM DATE_TRUNC(%s, {sql}))\", (\"second\", *params)\n        return self.date_extract_sql(lookup_type, sql, params)\n\n    def datetime_trunc_sql(self, lookup_type, sql, params, tzname):\n        sql, params = self._convert_sql_to_tz(sql, params, tzname)\n        # https://www.postgresql.org/docs/current/functions-datetime.html#FUNCTIONS-DATETIME-TRUNC\n        return f\"DATE_TRUNC(%s, {sql})\", (lookup_type, *params)\n\n    def time_extract_sql(self, lookup_type, sql, params):\n        if lookup_type == \"second\":\n            # Truncate fractional seconds.\n            return f\"EXTRACT(SECOND FROM DATE_TRUNC(%s, {sql}))\", (\"second\", *params)\n        return self.date_extract_sql(lookup_type, sql, params)\n\n    def time_trunc_sql(self, lookup_type, sql, params, tzname=None):\n        sql, params = self._convert_sql_to_tz(sql, params, tzname)\n        return f\"DATE_TRUNC(%s, {sql})::time\", (lookup_type, *params)\n\n    def deferrable_sql(self):\n        return \" DEFERRABLE INITIALLY DEFERRED\"\n\n    def bulk_insert_sql(self, fields, placeholder_rows):\n        if isinstance(placeholder_rows, InsertUnnest):\n            return f\"SELECT * FROM {placeholder_rows}\"\n        return super().bulk_insert_sql(fields, placeholder_rows)\n\n    def fetch_returned_insert_rows(self, cursor):\n        \"\"\"\n        Given a cursor object that has just performed an INSERT...RETURNING\n        statement into a table, return the tuple of returned data.\n        \"\"\"\n        return cursor.fetchall()\n\n    def lookup_cast(self, lookup_type, internal_type=None):\n        lookup = \"%s\"\n        # Cast text lookups to text to allow things like filter(x__contains=4)\n        if lookup_type in (\n            \"iexact\",\n            \"contains\",\n            \"icontains\",\n            \"startswith\",\n            \"istartswith\",\n            \"endswith\",\n            \"iendswith\",\n            \"regex\",\n            \"iregex\",\n        ):\n            if internal_type in (\"IPAddressField\", \"GenericIPAddressField\"):\n                lookup = \"HOST(%s)\"\n            else:\n                lookup = \"%s::text\"\n\n        # Use UPPER(x) for case-insensitive lookups; it's faster.\n        if lookup_type in (\"iexact\", \"icontains\", \"istartswith\", \"iendswith\"):\n            lookup = \"UPPER(%s)\" % lookup\n\n        return lookup\n\n    def no_limit_value(self):\n        return None\n\n    def prepare_sql_script(self, sql):\n        return [sql]\n\n    def quote_name(self, name):\n        if name.startswith('\"') and name.endswith('\"'):\n            return name  # Quoting once is enough.\n        return '\"%s\"' % name\n\n    def compose_sql(self, sql, params):\n        return mogrify(sql, params, self.connection)\n\n    def set_time_zone_sql(self):\n        return \"SELECT set_config('TimeZone', %s, false)\"\n\n    def sql_flush(self, style, tables, *, reset_sequences=False, allow_cascade=False):\n        if not tables:\n            return []\n\n        # Perform a single SQL 'TRUNCATE x, y, z...;' statement. It allows us\n        # to truncate tables referenced by a foreign key in any other table.\n        sql_parts = [\n            style.SQL_KEYWORD(\"TRUNCATE\"),\n            \", \".join(style.SQL_FIELD(self.quote_name(table)) for table in tables),\n        ]\n        if reset_sequences:\n            sql_parts.append(style.SQL_KEYWORD(\"RESTART IDENTITY\"))\n        if allow_cascade:\n            sql_parts.append(style.SQL_KEYWORD(\"CASCADE\"))\n        return [\"%s;\" % \" \".join(sql_parts)]\n\n    def sequence_reset_by_name_sql(self, style, sequences):\n        # 'ALTER SEQUENCE sequence_name RESTART WITH 1;'... style SQL statements\n        # to reset sequence indices\n        sql = []\n        for sequence_info in sequences:\n            table_name = sequence_info[\"table\"]\n            # 'id' will be the case if it's an m2m using an autogenerated\n            # intermediate table (see BaseDatabaseIntrospection.sequence_list).\n            column_name = sequence_info[\"column\"] or \"id\"\n            sql.append(\n                \"%s setval(pg_get_serial_sequence('%s','%s'), 1, false);\"\n                % (\n                    style.SQL_KEYWORD(\"SELECT\"),\n                    style.SQL_TABLE(self.quote_name(table_name)),\n                    style.SQL_FIELD(column_name),\n                )\n            )\n        return sql\n\n    def tablespace_sql(self, tablespace, inline=False):\n        if inline:\n            return \"USING INDEX TABLESPACE %s\" % self.quote_name(tablespace)\n        else:\n            return \"TABLESPACE %s\" % self.quote_name(tablespace)\n\n    def sequence_reset_sql(self, style, model_list):\n        from django.db import models\n\n        output = []\n        qn = self.quote_name\n        for model in model_list:\n            # Use `coalesce` to set the sequence for each model to the max pk\n            # value if there are records, or 1 if there are none. Set the\n            # `is_called` property (the third argument to `setval`) to true if\n            # there are records (as the max pk value is already in use),\n            # otherwise set it to false. Use pg_get_serial_sequence to get the\n            # underlying sequence name from the table name and column name.\n\n            for f in model._meta.local_fields:\n                if isinstance(f, models.AutoField):\n                    output.append(\n                        \"%s setval(pg_get_serial_sequence('%s','%s'), \"\n                        \"coalesce(max(%s), 1), max(%s) %s null) %s %s;\"\n                        % (\n                            style.SQL_KEYWORD(\"SELECT\"),\n                            style.SQL_TABLE(qn(model._meta.db_table)),\n                            style.SQL_FIELD(f.column),\n                            style.SQL_FIELD(qn(f.column)),\n                            style.SQL_FIELD(qn(f.column)),\n                            style.SQL_KEYWORD(\"IS NOT\"),\n                            style.SQL_KEYWORD(\"FROM\"),\n                            style.SQL_TABLE(qn(model._meta.db_table)),\n                        )\n                    )\n                    # Only one AutoField is allowed per model, so don't bother\n                    # continuing.\n                    break\n        return output\n\n    def prep_for_iexact_query(self, x):\n        return x\n\n    def max_name_length(self):\n        \"\"\"\n        Return the maximum length of an identifier.\n\n        The maximum length of an identifier is 63 by default, but can be\n        changed by recompiling PostgreSQL after editing the NAMEDATALEN\n        macro in src/include/pg_config_manual.h.\n\n        This implementation returns 63, but can be overridden by a custom\n        database backend that inherits most of its behavior from this one.\n        \"\"\"\n        return 63\n\n    def distinct_sql(self, fields, params):\n        if fields:\n            params = [param for param_list in params for param in param_list]\n            return ([\"DISTINCT ON (%s)\" % \", \".join(fields)], params)\n        else:\n            return [\"DISTINCT\"], []\n\n    if is_psycopg3:\n\n        def last_executed_query(self, cursor, sql, params):\n            if self.connection.features.uses_server_side_binding:\n                try:\n                    return self.compose_sql(sql, params)\n                except errors.DataError:\n                    return None\n            else:\n                if cursor._query and cursor._query.query is not None:\n                    return cursor._query.query.decode()\n                return None\n\n    else:\n\n        def last_executed_query(self, cursor, sql, params):\n            # https://www.psycopg.org/docs/cursor.html#cursor.query\n            # The query attribute is a Psycopg extension to the DB API 2.0.\n            if cursor.query is not None:\n                return cursor.query.decode()\n            return None\n\n    def return_insert_columns(self, fields):\n        if not fields:\n            return \"\", ()\n        columns = [\n            \"%s.%s\"\n            % (\n                self.quote_name(field.model._meta.db_table),\n                self.quote_name(field.column),\n            )\n            for field in fields\n        ]\n        return \"RETURNING %s\" % \", \".join(columns), ()\n\n    if is_psycopg3:\n\n        def adapt_integerfield_value(self, value, internal_type):\n            if value is None or hasattr(value, \"resolve_expression\"):\n                return value\n            return self.integerfield_type_map[internal_type](value)\n\n    def adapt_datefield_value(self, value):\n        return value\n\n    def adapt_datetimefield_value(self, value):\n        return value\n\n    def adapt_timefield_value(self, value):\n        return value\n\n    def adapt_ipaddressfield_value(self, value):\n        if value:\n            return Inet(value)\n        return None\n\n    def adapt_json_value(self, value, encoder):\n        return Jsonb(value, dumps=get_json_dumps(encoder))\n\n    def subtract_temporals(self, internal_type, lhs, rhs):\n        if internal_type == \"DateField\":\n            lhs_sql, lhs_params = lhs\n            rhs_sql, rhs_params = rhs\n            params = (*lhs_params, *rhs_params)\n            return \"(interval '1 day' * (%s - %s))\" % (lhs_sql, rhs_sql), params\n        return super().subtract_temporals(internal_type, lhs, rhs)\n\n    def explain_query_prefix(self, format=None, **options):\n        extra = {}\n        if serialize := options.pop(\"serialize\", None):\n            if serialize.upper() in {\"TEXT\", \"BINARY\"}:\n                extra[\"SERIALIZE\"] = serialize.upper()\n        # Normalize options.\n        if options:\n            options = {\n                name.upper(): \"true\" if value else \"false\"\n                for name, value in options.items()\n            }\n            for valid_option in self.explain_options:\n                value = options.pop(valid_option, None)\n                if value is not None:\n                    extra[valid_option] = value\n        prefix = super().explain_query_prefix(format, **options)\n        if format:\n            extra[\"FORMAT\"] = format\n        if extra:\n            prefix += \" (%s)\" % \", \".join(\"%s %s\" % i for i in extra.items())\n        return prefix\n\n    def on_conflict_suffix_sql(self, fields, on_conflict, update_fields, unique_fields):\n        if on_conflict == OnConflict.IGNORE:\n            return \"ON CONFLICT DO NOTHING\"\n        if on_conflict == OnConflict.UPDATE:\n            return \"ON CONFLICT(%s) DO UPDATE SET %s\" % (\n                \", \".join(map(self.quote_name, unique_fields)),\n                \", \".join(\n                    [\n                        f\"{field} = EXCLUDED.{field}\"\n                        for field in map(self.quote_name, update_fields)\n                    ]\n                ),\n            )\n        return super().on_conflict_suffix_sql(\n            fields,\n            on_conflict,\n            update_fields,\n            unique_fields,\n        )\n\n    def prepare_join_on_clause(self, lhs_table, lhs_field, rhs_table, rhs_field):\n        lhs_expr, rhs_expr = super().prepare_join_on_clause(\n            lhs_table, lhs_field, rhs_table, rhs_field\n        )\n\n        if lhs_field.db_type(self.connection) != rhs_field.db_type(self.connection):\n            rhs_expr = Cast(rhs_expr, lhs_field)\n\n        return lhs_expr, rhs_expr"},{"start_line":330,"end_line":333,"belongs_to":{"file_name":"operations.py","upper_path":"../django/django/db/backends/mysql","module":"mysql","define_class":["DatabaseOperations"],"imports":["uuid","django.conf.settings","django.db.backends.base.operations.BaseDatabaseOperations","django.db.backends.utils.split_tzname_delta","django.db.models.Exists","django.db.models.ExpressionWrapper","django.db.models.Lookup","django.db.models.constants.OnConflict","django.utils.timezone","django.utils.encoding.force_str","django.utils.regex_helper._lazy_re_compile"]},"relative_function":[],"code":"def binary_placeholder_sql(self, value):\n        return (\n            \"_binary %s\" if value is not None and not hasattr(value, \"as_sql\") else \"%s\"\n        )"}],"ground_truth":null,"score":null},
{"question":"Which API functions or methods are involved in `Return the value of a CLOB column, for backends that return a locator\nobject that requires additional processing`, and what are their expected parameters and return values?","answer":"","relative_code_list":[{"start_line":351,"end_line":356,"belongs_to":{"file_name":"operations.py","upper_path":"../django/django/db/backends/base","module":"base","define_class":["BaseDatabaseOperations"],"imports":["datetime","decimal","json","importlib.import_module","sqlparse","django.conf.settings","django.db.NotSupportedError","django.db.transaction","django.db.models.expressions.Col","django.utils.timezone","django.utils.encoding.force_str"]},"relative_function":[],"code":"def process_clob(self, value):\n        \"\"\"\n        Return the value of a CLOB column, for backends that return a locator\n        object that requires additional processing.\n        \"\"\"\n        return value"},{"start_line":15,"end_line":791,"belongs_to":{"file_name":"operations.py","upper_path":"../django/django/db/backends/base","module":"base","define_class":["BaseDatabaseOperations"],"imports":["datetime","decimal","json","importlib.import_module","sqlparse","django.conf.settings","django.db.NotSupportedError","django.db.transaction","django.db.models.expressions.Col","django.utils.timezone","django.utils.encoding.force_str"]},"relative_function":[],"code":"class BaseDatabaseOperations:\n    \"\"\"\n    Encapsulate backend-specific differences, such as the way a backend\n    performs ordering or calculates the ID of a recently-inserted row.\n    \"\"\"\n\n    compiler_module = \"django.db.models.sql.compiler\"\n\n    # Integer field safe ranges by `internal_type` as documented\n    # in docs/ref/models/fields.txt.\n    integer_field_ranges = {\n        \"SmallIntegerField\": (-32768, 32767),\n        \"IntegerField\": (-2147483648, 2147483647),\n        \"BigIntegerField\": (-9223372036854775808, 9223372036854775807),\n        \"PositiveBigIntegerField\": (0, 9223372036854775807),\n        \"PositiveSmallIntegerField\": (0, 32767),\n        \"PositiveIntegerField\": (0, 2147483647),\n        \"SmallAutoField\": (-32768, 32767),\n        \"AutoField\": (-2147483648, 2147483647),\n        \"BigAutoField\": (-9223372036854775808, 9223372036854775807),\n    }\n    set_operators = {\n        \"union\": \"UNION\",\n        \"intersection\": \"INTERSECT\",\n        \"difference\": \"EXCEPT\",\n    }\n    # Mapping of Field.get_internal_type() (typically the model field's class\n    # name) to the data type to use for the Cast() function, if different from\n    # DatabaseWrapper.data_types.\n    cast_data_types = {}\n    # CharField data type if the max_length argument isn't provided.\n    cast_char_field_without_max_length = None\n\n    # Start and end points for window expressions.\n    PRECEDING = \"PRECEDING\"\n    FOLLOWING = \"FOLLOWING\"\n    UNBOUNDED_PRECEDING = \"UNBOUNDED \" + PRECEDING\n    UNBOUNDED_FOLLOWING = \"UNBOUNDED \" + FOLLOWING\n    CURRENT_ROW = \"CURRENT ROW\"\n\n    # Prefix for EXPLAIN queries, or None EXPLAIN isn't supported.\n    explain_prefix = None\n\n    def __init__(self, connection):\n        self.connection = connection\n        self._cache = None\n\n    def autoinc_sql(self, table, column):\n        \"\"\"\n        Return any SQL needed to support auto-incrementing primary keys, or\n        None if no SQL is necessary.\n\n        This SQL is executed when a table is created.\n        \"\"\"\n        return None\n\n    def bulk_batch_size(self, fields, objs):\n        \"\"\"\n        Return the maximum allowed batch size for the backend. The fields\n        are the fields going to be inserted in the batch, the objs contains\n        all the objects to be inserted.\n        \"\"\"\n        return len(objs)\n\n    def format_for_duration_arithmetic(self, sql):\n        raise NotImplementedError(\n            \"subclasses of BaseDatabaseOperations may require a \"\n            \"format_for_duration_arithmetic() method.\"\n        )\n\n    def cache_key_culling_sql(self):\n        \"\"\"\n        Return an SQL query that retrieves the first cache key greater than the\n        n smallest.\n\n        This is used by the 'db' cache backend to determine where to start\n        culling.\n        \"\"\"\n        cache_key = self.quote_name(\"cache_key\")\n        return f\"SELECT {cache_key} FROM %s ORDER BY {cache_key} LIMIT 1 OFFSET %%s\"\n\n    def unification_cast_sql(self, output_field):\n        \"\"\"\n        Given a field instance, return the SQL that casts the result of a union\n        to that type. The resulting string should contain a '%s' placeholder\n        for the expression being cast.\n        \"\"\"\n        return \"%s\"\n\n    def date_extract_sql(self, lookup_type, sql, params):\n        \"\"\"\n        Given a lookup_type of 'year', 'month', or 'day', return the SQL that\n        extracts a value from the given date field field_name.\n        \"\"\"\n        raise NotImplementedError(\n            \"subclasses of BaseDatabaseOperations may require a date_extract_sql() \"\n            \"method\"\n        )\n\n    def date_trunc_sql(self, lookup_type, sql, params, tzname=None):\n        \"\"\"\n        Given a lookup_type of 'year', 'month', or 'day', return the SQL that\n        truncates the given date or datetime field field_name to a date object\n        with only the given specificity.\n\n        If `tzname` is provided, the given value is truncated in a specific\n        timezone.\n        \"\"\"\n        raise NotImplementedError(\n            \"subclasses of BaseDatabaseOperations may require a date_trunc_sql() \"\n            \"method.\"\n        )\n\n    def datetime_cast_date_sql(self, sql, params, tzname):\n        \"\"\"\n        Return the SQL to cast a datetime value to date value.\n        \"\"\"\n        raise NotImplementedError(\n            \"subclasses of BaseDatabaseOperations may require a \"\n            \"datetime_cast_date_sql() method.\"\n        )\n\n    def datetime_cast_time_sql(self, sql, params, tzname):\n        \"\"\"\n        Return the SQL to cast a datetime value to time value.\n        \"\"\"\n        raise NotImplementedError(\n            \"subclasses of BaseDatabaseOperations may require a \"\n            \"datetime_cast_time_sql() method\"\n        )\n\n    def datetime_extract_sql(self, lookup_type, sql, params, tzname):\n        \"\"\"\n        Given a lookup_type of 'year', 'month', 'day', 'hour', 'minute', or\n        'second', return the SQL that extracts a value from the given\n        datetime field field_name.\n        \"\"\"\n        raise NotImplementedError(\n            \"subclasses of BaseDatabaseOperations may require a datetime_extract_sql() \"\n            \"method\"\n        )\n\n    def datetime_trunc_sql(self, lookup_type, sql, params, tzname):\n        \"\"\"\n        Given a lookup_type of 'year', 'month', 'day', 'hour', 'minute', or\n        'second', return the SQL that truncates the given datetime field\n        field_name to a datetime object with only the given specificity.\n        \"\"\"\n        raise NotImplementedError(\n            \"subclasses of BaseDatabaseOperations may require a datetime_trunc_sql() \"\n            \"method\"\n        )\n\n    def time_trunc_sql(self, lookup_type, sql, params, tzname=None):\n        \"\"\"\n        Given a lookup_type of 'hour', 'minute' or 'second', return the SQL\n        that truncates the given time or datetime field field_name to a time\n        object with only the given specificity.\n\n        If `tzname` is provided, the given value is truncated in a specific\n        timezone.\n        \"\"\"\n        raise NotImplementedError(\n            \"subclasses of BaseDatabaseOperations may require a time_trunc_sql() method\"\n        )\n\n    def time_extract_sql(self, lookup_type, sql, params):\n        \"\"\"\n        Given a lookup_type of 'hour', 'minute', or 'second', return the SQL\n        that extracts a value from the given time field field_name.\n        \"\"\"\n        return self.date_extract_sql(lookup_type, sql, params)\n\n    def deferrable_sql(self):\n        \"\"\"\n        Return the SQL to make a constraint \"initially deferred\" during a\n        CREATE TABLE statement.\n        \"\"\"\n        return \"\"\n\n    def distinct_sql(self, fields, params):\n        \"\"\"\n        Return an SQL DISTINCT clause which removes duplicate rows from the\n        result set. If any fields are given, only check the given fields for\n        duplicates.\n        \"\"\"\n        if fields:\n            raise NotSupportedError(\n                \"DISTINCT ON fields is not supported by this database backend\"\n            )\n        else:\n            return [\"DISTINCT\"], []\n\n    def fetch_returned_insert_columns(self, cursor, returning_params):\n        \"\"\"\n        Given a cursor object that has just performed an INSERT...RETURNING\n        statement into a table, return the newly created data.\n        \"\"\"\n        return cursor.fetchone()\n\n    def force_group_by(self):\n        \"\"\"\n        Return a GROUP BY clause to use with a HAVING clause when no grouping\n        is specified.\n        \"\"\"\n        return []\n\n    def force_no_ordering(self):\n        \"\"\"\n        Return a list used in the \"ORDER BY\" clause to force no ordering at\n        all. Return an empty list to include nothing in the ordering.\n        \"\"\"\n        return []\n\n    def for_update_sql(self, nowait=False, skip_locked=False, of=(), no_key=False):\n        \"\"\"\n        Return the FOR UPDATE SQL clause to lock rows for an update operation.\n        \"\"\"\n        return \"FOR%s UPDATE%s%s%s\" % (\n            \" NO KEY\" if no_key else \"\",\n            \" OF %s\" % \", \".join(of) if of else \"\",\n            \" NOWAIT\" if nowait else \"\",\n            \" SKIP LOCKED\" if skip_locked else \"\",\n        )\n\n    def _get_limit_offset_params(self, low_mark, high_mark):\n        offset = low_mark or 0\n        if high_mark is not None:\n            return (high_mark - offset), offset\n        elif offset:\n            return self.connection.ops.no_limit_value(), offset\n        return None, offset\n\n    def limit_offset_sql(self, low_mark, high_mark):\n        \"\"\"Return LIMIT/OFFSET SQL clause.\"\"\"\n        limit, offset = self._get_limit_offset_params(low_mark, high_mark)\n        return \" \".join(\n            sql\n            for sql in (\n                (\"LIMIT %d\" % limit) if limit else None,\n                (\"OFFSET %d\" % offset) if offset else None,\n            )\n            if sql\n        )\n\n    def bulk_insert_sql(self, fields, placeholder_rows):\n        placeholder_rows_sql = (\", \".join(row) for row in placeholder_rows)\n        values_sql = \", \".join([f\"({sql})\" for sql in placeholder_rows_sql])\n        return f\"VALUES {values_sql}\"\n\n    def last_executed_query(self, cursor, sql, params):\n        \"\"\"\n        Return a string of the query last executed by the given cursor, with\n        placeholders replaced with actual values.\n\n        `sql` is the raw query containing placeholders and `params` is the\n        sequence of parameters. These are used by default, but this method\n        exists for database backends to provide a better implementation\n        according to their own quoting schemes.\n        \"\"\"\n\n        # Convert params to contain string values.\n        def to_string(s):\n            return force_str(s, strings_only=True, errors=\"replace\")\n\n        if isinstance(params, (list, tuple)):\n            u_params = tuple(to_string(val) for val in params)\n        elif params is None:\n            u_params = ()\n        else:\n            u_params = {to_string(k): to_string(v) for k, v in params.items()}\n\n        return \"QUERY = %r - PARAMS = %r\" % (sql, u_params)\n\n    def last_insert_id(self, cursor, table_name, pk_name):\n        \"\"\"\n        Given a cursor object that has just performed an INSERT statement into\n        a table that has an auto-incrementing ID, return the newly created ID.\n\n        `pk_name` is the name of the primary-key column.\n        \"\"\"\n        return cursor.lastrowid\n\n    def lookup_cast(self, lookup_type, internal_type=None):\n        \"\"\"\n        Return the string to use in a query when performing lookups\n        (\"contains\", \"like\", etc.). It should contain a '%s' placeholder for\n        the column being searched against.\n        \"\"\"\n        return \"%s\"\n\n    def max_in_list_size(self):\n        \"\"\"\n        Return the maximum number of items that can be passed in a single 'IN'\n        list condition, or None if the backend does not impose a limit.\n        \"\"\"\n        return None\n\n    def max_name_length(self):\n        \"\"\"\n        Return the maximum length of table and column names, or None if there\n        is no limit.\n        \"\"\"\n        return None\n\n    def no_limit_value(self):\n        \"\"\"\n        Return the value to use for the LIMIT when we are wanting \"LIMIT\n        infinity\". Return None if the limit clause can be omitted in this case.\n        \"\"\"\n        raise NotImplementedError(\n            \"subclasses of BaseDatabaseOperations may require a no_limit_value() method\"\n        )\n\n    def pk_default_value(self):\n        \"\"\"\n        Return the value to use during an INSERT statement to specify that\n        the field should use its default value.\n        \"\"\"\n        return \"DEFAULT\"\n\n    def prepare_sql_script(self, sql):\n        \"\"\"\n        Take an SQL script that may contain multiple lines and return a list\n        of statements to feed to successive cursor.execute() calls.\n\n        Since few databases are able to process raw SQL scripts in a single\n        cursor.execute() call and PEP 249 doesn't talk about this use case,\n        the default implementation is conservative.\n        \"\"\"\n        return [\n            sqlparse.format(statement, strip_comments=True)\n            for statement in sqlparse.split(sql)\n            if statement\n        ]\n\n    def process_clob(self, value):\n        \"\"\"\n        Return the value of a CLOB column, for backends that return a locator\n        object that requires additional processing.\n        \"\"\"\n        return value\n\n    def return_insert_columns(self, fields):\n        \"\"\"\n        For backends that support returning columns as part of an insert query,\n        return the SQL and params to append to the INSERT query. The returned\n        fragment should contain a format string to hold the appropriate column.\n        \"\"\"\n        pass\n\n    def compiler(self, compiler_name):\n        \"\"\"\n        Return the SQLCompiler class corresponding to the given name,\n        in the namespace corresponding to the `compiler_module` attribute\n        on this backend.\n        \"\"\"\n        if self._cache is None:\n            self._cache = import_module(self.compiler_module)\n        return getattr(self._cache, compiler_name)\n\n    def quote_name(self, name):\n        \"\"\"\n        Return a quoted version of the given table, index, or column name. Do\n        not quote the given name if it's already been quoted.\n        \"\"\"\n        raise NotImplementedError(\n            \"subclasses of BaseDatabaseOperations may require a quote_name() method\"\n        )\n\n    def regex_lookup(self, lookup_type):\n        \"\"\"\n        Return the string to use in a query when performing regular expression\n        lookups (using \"regex\" or \"iregex\"). It should contain a '%s'\n        placeholder for the column being searched against.\n\n        If the feature is not supported (or part of it is not supported), raise\n        NotImplementedError.\n        \"\"\"\n        raise NotImplementedError(\n            \"subclasses of BaseDatabaseOperations may require a regex_lookup() method\"\n        )\n\n    def savepoint_create_sql(self, sid):\n        \"\"\"\n        Return the SQL for starting a new savepoint. Only required if the\n        \"uses_savepoints\" feature is True. The \"sid\" parameter is a string\n        for the savepoint id.\n        \"\"\"\n        return \"SAVEPOINT %s\" % self.quote_name(sid)\n\n    def savepoint_commit_sql(self, sid):\n        \"\"\"\n        Return the SQL for committing the given savepoint.\n        \"\"\"\n        return \"RELEASE SAVEPOINT %s\" % self.quote_name(sid)\n\n    def savepoint_rollback_sql(self, sid):\n        \"\"\"\n        Return the SQL for rolling back the given savepoint.\n        \"\"\"\n        return \"ROLLBACK TO SAVEPOINT %s\" % self.quote_name(sid)\n\n    def set_time_zone_sql(self):\n        \"\"\"\n        Return the SQL that will set the connection's time zone.\n\n        Return '' if the backend doesn't support time zones.\n        \"\"\"\n        return \"\"\n\n    def sql_flush(self, style, tables, *, reset_sequences=False, allow_cascade=False):\n        \"\"\"\n        Return a list of SQL statements required to remove all data from\n        the given database tables (without actually removing the tables\n        themselves).\n\n        The `style` argument is a Style object as returned by either\n        color_style() or no_style() in django.core.management.color.\n\n        If `reset_sequences` is True, the list includes SQL statements required\n        to reset the sequences.\n\n        The `allow_cascade` argument determines whether truncation may cascade\n        to tables with foreign keys pointing the tables being truncated.\n        PostgreSQL requires a cascade even if these tables are empty.\n        \"\"\"\n        raise NotImplementedError(\n            \"subclasses of BaseDatabaseOperations must provide an sql_flush() method\"\n        )\n\n    def execute_sql_flush(self, sql_list):\n        \"\"\"Execute a list of SQL statements to flush the database.\"\"\"\n        with transaction.atomic(\n            using=self.connection.alias,\n            savepoint=self.connection.features.can_rollback_ddl,\n        ):\n            with self.connection.cursor() as cursor:\n                for sql in sql_list:\n                    cursor.execute(sql)\n\n    def sequence_reset_by_name_sql(self, style, sequences):\n        \"\"\"\n        Return a list of the SQL statements required to reset sequences\n        passed in `sequences`.\n\n        The `style` argument is a Style object as returned by either\n        color_style() or no_style() in django.core.management.color.\n        \"\"\"\n        return []\n\n    def sequence_reset_sql(self, style, model_list):\n        \"\"\"\n        Return a list of the SQL statements required to reset sequences for\n        the given models.\n\n        The `style` argument is a Style object as returned by either\n        color_style() or no_style() in django.core.management.color.\n        \"\"\"\n        return []  # No sequence reset required by default.\n\n    def start_transaction_sql(self):\n        \"\"\"Return the SQL statement required to start a transaction.\"\"\"\n        return \"BEGIN;\"\n\n    def end_transaction_sql(self, success=True):\n        \"\"\"Return the SQL statement required to end a transaction.\"\"\"\n        if not success:\n            return \"ROLLBACK;\"\n        return \"COMMIT;\"\n\n    def tablespace_sql(self, tablespace, inline=False):\n        \"\"\"\n        Return the SQL that will be used in a query to define the tablespace.\n\n        Return '' if the backend doesn't support tablespaces.\n\n        If `inline` is True, append the SQL to a row; otherwise append it to\n        the entire CREATE TABLE or CREATE INDEX statement.\n        \"\"\"\n        return \"\"\n\n    def prep_for_like_query(self, x):\n        \"\"\"Prepare a value for use in a LIKE query.\"\"\"\n        return str(x).replace(\"\\\\\", \"\\\\\\\\\").replace(\"%\", r\"\\%\").replace(\"_\", r\"\\_\")\n\n    # Same as prep_for_like_query(), but called for \"iexact\" matches, which\n    # need not necessarily be implemented using \"LIKE\" in the backend.\n    prep_for_iexact_query = prep_for_like_query\n\n    def validate_autopk_value(self, value):\n        \"\"\"\n        Certain backends do not accept some values for \"serial\" fields\n        (for example zero in MySQL). Raise a ValueError if the value is\n        invalid, otherwise return the validated value.\n        \"\"\"\n        return value\n\n    def adapt_unknown_value(self, value):\n        \"\"\"\n        Transform a value to something compatible with the backend driver.\n\n        This method only depends on the type of the value. It's designed for\n        cases where the target type isn't known, such as .raw() SQL queries.\n        As a consequence it may not work perfectly in all circumstances.\n        \"\"\"\n        if isinstance(value, datetime.datetime):  # must be before date\n            return self.adapt_datetimefield_value(value)\n        elif isinstance(value, datetime.date):\n            return self.adapt_datefield_value(value)\n        elif isinstance(value, datetime.time):\n            return self.adapt_timefield_value(value)\n        elif isinstance(value, decimal.Decimal):\n            return self.adapt_decimalfield_value(value)\n        else:\n            return value\n\n    def adapt_integerfield_value(self, value, internal_type):\n        return value\n\n    def adapt_datefield_value(self, value):\n        \"\"\"\n        Transform a date value to an object compatible with what is expected\n        by the backend driver for date columns.\n        \"\"\"\n        if value is None:\n            return None\n        return str(value)\n\n    def adapt_datetimefield_value(self, value):\n        \"\"\"\n        Transform a datetime value to an object compatible with what is expected\n        by the backend driver for datetime columns.\n        \"\"\"\n        if value is None:\n            return None\n        return str(value)\n\n    def adapt_timefield_value(self, value):\n        \"\"\"\n        Transform a time value to an object compatible with what is expected\n        by the backend driver for time columns.\n        \"\"\"\n        if value is None:\n            return None\n        if timezone.is_aware(value):\n            raise ValueError(\"Django does not support timezone-aware times.\")\n        return str(value)\n\n    def adapt_decimalfield_value(self, value, max_digits=None, decimal_places=None):\n        \"\"\"\n        Transform a decimal.Decimal value to an object compatible with what is\n        expected by the backend driver for decimal (numeric) columns.\n        \"\"\"\n        return value\n\n    def adapt_ipaddressfield_value(self, value):\n        \"\"\"\n        Transform a string representation of an IP address into the expected\n        type for the backend driver.\n        \"\"\"\n        return value or None\n\n    def adapt_json_value(self, value, encoder):\n        return json.dumps(value, cls=encoder)\n\n    def year_lookup_bounds_for_date_field(self, value, iso_year=False):\n        \"\"\"\n        Return a two-elements list with the lower and upper bound to be used\n        with a BETWEEN operator to query a DateField value using a year\n        lookup.\n\n        `value` is an int, containing the looked-up year.\n        If `iso_year` is True, return bounds for ISO-8601 week-numbering years.\n        \"\"\"\n        if iso_year:\n            first = datetime.date.fromisocalendar(value, 1, 1)\n            second = datetime.date.fromisocalendar(\n                value + 1, 1, 1\n            ) - datetime.timedelta(days=1)\n        else:\n            first = datetime.date(value, 1, 1)\n            second = datetime.date(value, 12, 31)\n        first = self.adapt_datefield_value(first)\n        second = self.adapt_datefield_value(second)\n        return [first, second]\n\n    def year_lookup_bounds_for_datetime_field(self, value, iso_year=False):\n        \"\"\"\n        Return a two-elements list with the lower and upper bound to be used\n        with a BETWEEN operator to query a DateTimeField value using a year\n        lookup.\n\n        `value` is an int, containing the looked-up year.\n        If `iso_year` is True, return bounds for ISO-8601 week-numbering years.\n        \"\"\"\n        if iso_year:\n            first = datetime.datetime.fromisocalendar(value, 1, 1)\n            second = datetime.datetime.fromisocalendar(\n                value + 1, 1, 1\n            ) - datetime.timedelta(microseconds=1)\n        else:\n            first = datetime.datetime(value, 1, 1)\n            second = datetime.datetime(value, 12, 31, 23, 59, 59, 999999)\n        if settings.USE_TZ:\n            tz = timezone.get_current_timezone()\n            first = timezone.make_aware(first, tz)\n            second = timezone.make_aware(second, tz)\n        first = self.adapt_datetimefield_value(first)\n        second = self.adapt_datetimefield_value(second)\n        return [first, second]\n\n    def get_db_converters(self, expression):\n        \"\"\"\n        Return a list of functions needed to convert field data.\n\n        Some field types on some backends do not provide data in the correct\n        format, this is the hook for converter functions.\n        \"\"\"\n        return []\n\n    def convert_durationfield_value(self, value, expression, connection):\n        if value is not None:\n            return datetime.timedelta(0, 0, value)\n\n    def check_expression_support(self, expression):\n        \"\"\"\n        Check that the backend supports the provided expression.\n\n        This is used on specific backends to rule out known expressions\n        that have problematic or nonexistent implementations. If the\n        expression has a known problem, the backend should raise\n        NotSupportedError.\n        \"\"\"\n        pass\n\n    def conditional_expression_supported_in_where_clause(self, expression):\n        \"\"\"\n        Return True, if the conditional expression is supported in the WHERE\n        clause.\n        \"\"\"\n        return True\n\n    def combine_expression(self, connector, sub_expressions):\n        \"\"\"\n        Combine a list of subexpressions into a single expression, using\n        the provided connecting operator. This is required because operators\n        can vary between backends (e.g., Oracle with %% and &) and between\n        subexpression types (e.g., date expressions).\n        \"\"\"\n        conn = \" %s \" % connector\n        return conn.join(sub_expressions)\n\n    def combine_duration_expression(self, connector, sub_expressions):\n        return self.combine_expression(connector, sub_expressions)\n\n    def binary_placeholder_sql(self, value):\n        \"\"\"\n        Some backends require special syntax to insert binary content (MySQL\n        for example uses '_binary %s').\n        \"\"\"\n        return \"%s\"\n\n    def modify_insert_params(self, placeholder, params):\n        \"\"\"\n        Allow modification of insert parameters. Needed for Oracle Spatial\n        backend due to #10888.\n        \"\"\"\n        return params\n\n    def integer_field_range(self, internal_type):\n        \"\"\"\n        Given an integer field internal type (e.g. 'PositiveIntegerField'),\n        return a tuple of the (min_value, max_value) form representing the\n        range of the column type bound to the field.\n        \"\"\"\n        return self.integer_field_ranges[internal_type]\n\n    def subtract_temporals(self, internal_type, lhs, rhs):\n        if self.connection.features.supports_temporal_subtraction:\n            lhs_sql, lhs_params = lhs\n            rhs_sql, rhs_params = rhs\n            return \"(%s - %s)\" % (lhs_sql, rhs_sql), (*lhs_params, *rhs_params)\n        raise NotSupportedError(\n            \"This backend does not support %s subtraction.\" % internal_type\n        )\n\n    def window_frame_value(self, value):\n        if isinstance(value, int):\n            if value == 0:\n                return self.CURRENT_ROW\n            elif value < 0:\n                return \"%d %s\" % (abs(value), self.PRECEDING)\n            else:\n                return \"%d %s\" % (value, self.FOLLOWING)\n\n    def window_frame_rows_start_end(self, start=None, end=None):\n        \"\"\"\n        Return SQL for start and end points in an OVER clause window frame.\n        \"\"\"\n        if isinstance(start, int) and isinstance(end, int) and start > end:\n            raise ValueError(\"start cannot be greater than end.\")\n        if start is not None and not isinstance(start, int):\n            raise ValueError(\n                f\"start argument must be an integer, zero, or None, but got '{start}'.\"\n            )\n        if end is not None and not isinstance(end, int):\n            raise ValueError(\n                f\"end argument must be an integer, zero, or None, but got '{end}'.\"\n            )\n        start_ = self.window_frame_value(start) or self.UNBOUNDED_PRECEDING\n        end_ = self.window_frame_value(end) or self.UNBOUNDED_FOLLOWING\n        return start_, end_\n\n    def window_frame_range_start_end(self, start=None, end=None):\n        if (start is not None and not isinstance(start, int)) or (\n            isinstance(start, int) and start > 0\n        ):\n            raise ValueError(\n                \"start argument must be a negative integer, zero, or None, \"\n                \"but got '%s'.\" % start\n            )\n        if (end is not None and not isinstance(end, int)) or (\n            isinstance(end, int) and end < 0\n        ):\n            raise ValueError(\n                \"end argument must be a positive integer, zero, or None, but got '%s'.\"\n                % end\n            )\n        start_ = self.window_frame_value(start) or self.UNBOUNDED_PRECEDING\n        end_ = self.window_frame_value(end) or self.UNBOUNDED_FOLLOWING\n        features = self.connection.features\n        if features.only_supports_unbounded_with_preceding_and_following and (\n            (start and start < 0) or (end and end > 0)\n        ):\n            raise NotSupportedError(\n                \"%s only supports UNBOUNDED together with PRECEDING and \"\n                \"FOLLOWING.\" % self.connection.display_name\n            )\n        return start_, end_\n\n    def explain_query_prefix(self, format=None, **options):\n        if not self.connection.features.supports_explaining_query_execution:\n            raise NotSupportedError(\n                \"This backend does not support explaining query execution.\"\n            )\n        if format:\n            supported_formats = self.connection.features.supported_explain_formats\n            normalized_format = format.upper()\n            if normalized_format not in supported_formats:\n                msg = \"%s is not a recognized format.\" % normalized_format\n                if supported_formats:\n                    msg += \" Allowed formats: %s\" % \", \".join(sorted(supported_formats))\n                else:\n                    msg += (\n                        f\" {self.connection.display_name} does not support any formats.\"\n                    )\n                raise ValueError(msg)\n        if options:\n            raise ValueError(\"Unknown options: %s\" % \", \".join(sorted(options.keys())))\n        return self.explain_prefix\n\n    def insert_statement(self, on_conflict=None):\n        return \"INSERT INTO\"\n\n    def on_conflict_suffix_sql(self, fields, on_conflict, update_fields, unique_fields):\n        return \"\"\n\n    def prepare_join_on_clause(self, lhs_table, lhs_field, rhs_table, rhs_field):\n        lhs_expr = Col(lhs_table, lhs_field)\n        rhs_expr = Col(rhs_table, rhs_field)\n\n        return lhs_expr, rhs_expr\n\n    def format_debug_sql(self, sql):\n        # Hook for backends (e.g. NoSQL) to customize formatting.\n        return sqlparse.format(sql, reindent=True, keyword_case=\"upper\")"}],"ground_truth":null,"score":null},
{"question":"Which API or library is responsible for `Certain backends do not accept some values for \"serial\" fields\n(for example zero in MySQL)`, and what are its key parameters or methods?","answer":"","relative_code_list":[{"start_line":505,"end_line":511,"belongs_to":{"file_name":"operations.py","upper_path":"../django/django/db/backends/base","module":"base","define_class":["BaseDatabaseOperations"],"imports":["datetime","decimal","json","importlib.import_module","sqlparse","django.conf.settings","django.db.NotSupportedError","django.db.transaction","django.db.models.expressions.Col","django.utils.timezone","django.utils.encoding.force_str"]},"relative_function":[],"code":"def validate_autopk_value(self, value):\n        \"\"\"\n        Certain backends do not accept some values for \"serial\" fields\n        (for example zero in MySQL). Raise a ValueError if the value is\n        invalid, otherwise return the validated value.\n        \"\"\"\n        return value"},{"start_line":15,"end_line":791,"belongs_to":{"file_name":"operations.py","upper_path":"../django/django/db/backends/base","module":"base","define_class":["BaseDatabaseOperations"],"imports":["datetime","decimal","json","importlib.import_module","sqlparse","django.conf.settings","django.db.NotSupportedError","django.db.transaction","django.db.models.expressions.Col","django.utils.timezone","django.utils.encoding.force_str"]},"relative_function":[],"code":"class BaseDatabaseOperations:\n    \"\"\"\n    Encapsulate backend-specific differences, such as the way a backend\n    performs ordering or calculates the ID of a recently-inserted row.\n    \"\"\"\n\n    compiler_module = \"django.db.models.sql.compiler\"\n\n    # Integer field safe ranges by `internal_type` as documented\n    # in docs/ref/models/fields.txt.\n    integer_field_ranges = {\n        \"SmallIntegerField\": (-32768, 32767),\n        \"IntegerField\": (-2147483648, 2147483647),\n        \"BigIntegerField\": (-9223372036854775808, 9223372036854775807),\n        \"PositiveBigIntegerField\": (0, 9223372036854775807),\n        \"PositiveSmallIntegerField\": (0, 32767),\n        \"PositiveIntegerField\": (0, 2147483647),\n        \"SmallAutoField\": (-32768, 32767),\n        \"AutoField\": (-2147483648, 2147483647),\n        \"BigAutoField\": (-9223372036854775808, 9223372036854775807),\n    }\n    set_operators = {\n        \"union\": \"UNION\",\n        \"intersection\": \"INTERSECT\",\n        \"difference\": \"EXCEPT\",\n    }\n    # Mapping of Field.get_internal_type() (typically the model field's class\n    # name) to the data type to use for the Cast() function, if different from\n    # DatabaseWrapper.data_types.\n    cast_data_types = {}\n    # CharField data type if the max_length argument isn't provided.\n    cast_char_field_without_max_length = None\n\n    # Start and end points for window expressions.\n    PRECEDING = \"PRECEDING\"\n    FOLLOWING = \"FOLLOWING\"\n    UNBOUNDED_PRECEDING = \"UNBOUNDED \" + PRECEDING\n    UNBOUNDED_FOLLOWING = \"UNBOUNDED \" + FOLLOWING\n    CURRENT_ROW = \"CURRENT ROW\"\n\n    # Prefix for EXPLAIN queries, or None EXPLAIN isn't supported.\n    explain_prefix = None\n\n    def __init__(self, connection):\n        self.connection = connection\n        self._cache = None\n\n    def autoinc_sql(self, table, column):\n        \"\"\"\n        Return any SQL needed to support auto-incrementing primary keys, or\n        None if no SQL is necessary.\n\n        This SQL is executed when a table is created.\n        \"\"\"\n        return None\n\n    def bulk_batch_size(self, fields, objs):\n        \"\"\"\n        Return the maximum allowed batch size for the backend. The fields\n        are the fields going to be inserted in the batch, the objs contains\n        all the objects to be inserted.\n        \"\"\"\n        return len(objs)\n\n    def format_for_duration_arithmetic(self, sql):\n        raise NotImplementedError(\n            \"subclasses of BaseDatabaseOperations may require a \"\n            \"format_for_duration_arithmetic() method.\"\n        )\n\n    def cache_key_culling_sql(self):\n        \"\"\"\n        Return an SQL query that retrieves the first cache key greater than the\n        n smallest.\n\n        This is used by the 'db' cache backend to determine where to start\n        culling.\n        \"\"\"\n        cache_key = self.quote_name(\"cache_key\")\n        return f\"SELECT {cache_key} FROM %s ORDER BY {cache_key} LIMIT 1 OFFSET %%s\"\n\n    def unification_cast_sql(self, output_field):\n        \"\"\"\n        Given a field instance, return the SQL that casts the result of a union\n        to that type. The resulting string should contain a '%s' placeholder\n        for the expression being cast.\n        \"\"\"\n        return \"%s\"\n\n    def date_extract_sql(self, lookup_type, sql, params):\n        \"\"\"\n        Given a lookup_type of 'year', 'month', or 'day', return the SQL that\n        extracts a value from the given date field field_name.\n        \"\"\"\n        raise NotImplementedError(\n            \"subclasses of BaseDatabaseOperations may require a date_extract_sql() \"\n            \"method\"\n        )\n\n    def date_trunc_sql(self, lookup_type, sql, params, tzname=None):\n        \"\"\"\n        Given a lookup_type of 'year', 'month', or 'day', return the SQL that\n        truncates the given date or datetime field field_name to a date object\n        with only the given specificity.\n\n        If `tzname` is provided, the given value is truncated in a specific\n        timezone.\n        \"\"\"\n        raise NotImplementedError(\n            \"subclasses of BaseDatabaseOperations may require a date_trunc_sql() \"\n            \"method.\"\n        )\n\n    def datetime_cast_date_sql(self, sql, params, tzname):\n        \"\"\"\n        Return the SQL to cast a datetime value to date value.\n        \"\"\"\n        raise NotImplementedError(\n            \"subclasses of BaseDatabaseOperations may require a \"\n            \"datetime_cast_date_sql() method.\"\n        )\n\n    def datetime_cast_time_sql(self, sql, params, tzname):\n        \"\"\"\n        Return the SQL to cast a datetime value to time value.\n        \"\"\"\n        raise NotImplementedError(\n            \"subclasses of BaseDatabaseOperations may require a \"\n            \"datetime_cast_time_sql() method\"\n        )\n\n    def datetime_extract_sql(self, lookup_type, sql, params, tzname):\n        \"\"\"\n        Given a lookup_type of 'year', 'month', 'day', 'hour', 'minute', or\n        'second', return the SQL that extracts a value from the given\n        datetime field field_name.\n        \"\"\"\n        raise NotImplementedError(\n            \"subclasses of BaseDatabaseOperations may require a datetime_extract_sql() \"\n            \"method\"\n        )\n\n    def datetime_trunc_sql(self, lookup_type, sql, params, tzname):\n        \"\"\"\n        Given a lookup_type of 'year', 'month', 'day', 'hour', 'minute', or\n        'second', return the SQL that truncates the given datetime field\n        field_name to a datetime object with only the given specificity.\n        \"\"\"\n        raise NotImplementedError(\n            \"subclasses of BaseDatabaseOperations may require a datetime_trunc_sql() \"\n            \"method\"\n        )\n\n    def time_trunc_sql(self, lookup_type, sql, params, tzname=None):\n        \"\"\"\n        Given a lookup_type of 'hour', 'minute' or 'second', return the SQL\n        that truncates the given time or datetime field field_name to a time\n        object with only the given specificity.\n\n        If `tzname` is provided, the given value is truncated in a specific\n        timezone.\n        \"\"\"\n        raise NotImplementedError(\n            \"subclasses of BaseDatabaseOperations may require a time_trunc_sql() method\"\n        )\n\n    def time_extract_sql(self, lookup_type, sql, params):\n        \"\"\"\n        Given a lookup_type of 'hour', 'minute', or 'second', return the SQL\n        that extracts a value from the given time field field_name.\n        \"\"\"\n        return self.date_extract_sql(lookup_type, sql, params)\n\n    def deferrable_sql(self):\n        \"\"\"\n        Return the SQL to make a constraint \"initially deferred\" during a\n        CREATE TABLE statement.\n        \"\"\"\n        return \"\"\n\n    def distinct_sql(self, fields, params):\n        \"\"\"\n        Return an SQL DISTINCT clause which removes duplicate rows from the\n        result set. If any fields are given, only check the given fields for\n        duplicates.\n        \"\"\"\n        if fields:\n            raise NotSupportedError(\n                \"DISTINCT ON fields is not supported by this database backend\"\n            )\n        else:\n            return [\"DISTINCT\"], []\n\n    def fetch_returned_insert_columns(self, cursor, returning_params):\n        \"\"\"\n        Given a cursor object that has just performed an INSERT...RETURNING\n        statement into a table, return the newly created data.\n        \"\"\"\n        return cursor.fetchone()\n\n    def force_group_by(self):\n        \"\"\"\n        Return a GROUP BY clause to use with a HAVING clause when no grouping\n        is specified.\n        \"\"\"\n        return []\n\n    def force_no_ordering(self):\n        \"\"\"\n        Return a list used in the \"ORDER BY\" clause to force no ordering at\n        all. Return an empty list to include nothing in the ordering.\n        \"\"\"\n        return []\n\n    def for_update_sql(self, nowait=False, skip_locked=False, of=(), no_key=False):\n        \"\"\"\n        Return the FOR UPDATE SQL clause to lock rows for an update operation.\n        \"\"\"\n        return \"FOR%s UPDATE%s%s%s\" % (\n            \" NO KEY\" if no_key else \"\",\n            \" OF %s\" % \", \".join(of) if of else \"\",\n            \" NOWAIT\" if nowait else \"\",\n            \" SKIP LOCKED\" if skip_locked else \"\",\n        )\n\n    def _get_limit_offset_params(self, low_mark, high_mark):\n        offset = low_mark or 0\n        if high_mark is not None:\n            return (high_mark - offset), offset\n        elif offset:\n            return self.connection.ops.no_limit_value(), offset\n        return None, offset\n\n    def limit_offset_sql(self, low_mark, high_mark):\n        \"\"\"Return LIMIT/OFFSET SQL clause.\"\"\"\n        limit, offset = self._get_limit_offset_params(low_mark, high_mark)\n        return \" \".join(\n            sql\n            for sql in (\n                (\"LIMIT %d\" % limit) if limit else None,\n                (\"OFFSET %d\" % offset) if offset else None,\n            )\n            if sql\n        )\n\n    def bulk_insert_sql(self, fields, placeholder_rows):\n        placeholder_rows_sql = (\", \".join(row) for row in placeholder_rows)\n        values_sql = \", \".join([f\"({sql})\" for sql in placeholder_rows_sql])\n        return f\"VALUES {values_sql}\"\n\n    def last_executed_query(self, cursor, sql, params):\n        \"\"\"\n        Return a string of the query last executed by the given cursor, with\n        placeholders replaced with actual values.\n\n        `sql` is the raw query containing placeholders and `params` is the\n        sequence of parameters. These are used by default, but this method\n        exists for database backends to provide a better implementation\n        according to their own quoting schemes.\n        \"\"\"\n\n        # Convert params to contain string values.\n        def to_string(s):\n            return force_str(s, strings_only=True, errors=\"replace\")\n\n        if isinstance(params, (list, tuple)):\n            u_params = tuple(to_string(val) for val in params)\n        elif params is None:\n            u_params = ()\n        else:\n            u_params = {to_string(k): to_string(v) for k, v in params.items()}\n\n        return \"QUERY = %r - PARAMS = %r\" % (sql, u_params)\n\n    def last_insert_id(self, cursor, table_name, pk_name):\n        \"\"\"\n        Given a cursor object that has just performed an INSERT statement into\n        a table that has an auto-incrementing ID, return the newly created ID.\n\n        `pk_name` is the name of the primary-key column.\n        \"\"\"\n        return cursor.lastrowid\n\n    def lookup_cast(self, lookup_type, internal_type=None):\n        \"\"\"\n        Return the string to use in a query when performing lookups\n        (\"contains\", \"like\", etc.). It should contain a '%s' placeholder for\n        the column being searched against.\n        \"\"\"\n        return \"%s\"\n\n    def max_in_list_size(self):\n        \"\"\"\n        Return the maximum number of items that can be passed in a single 'IN'\n        list condition, or None if the backend does not impose a limit.\n        \"\"\"\n        return None\n\n    def max_name_length(self):\n        \"\"\"\n        Return the maximum length of table and column names, or None if there\n        is no limit.\n        \"\"\"\n        return None\n\n    def no_limit_value(self):\n        \"\"\"\n        Return the value to use for the LIMIT when we are wanting \"LIMIT\n        infinity\". Return None if the limit clause can be omitted in this case.\n        \"\"\"\n        raise NotImplementedError(\n            \"subclasses of BaseDatabaseOperations may require a no_limit_value() method\"\n        )\n\n    def pk_default_value(self):\n        \"\"\"\n        Return the value to use during an INSERT statement to specify that\n        the field should use its default value.\n        \"\"\"\n        return \"DEFAULT\"\n\n    def prepare_sql_script(self, sql):\n        \"\"\"\n        Take an SQL script that may contain multiple lines and return a list\n        of statements to feed to successive cursor.execute() calls.\n\n        Since few databases are able to process raw SQL scripts in a single\n        cursor.execute() call and PEP 249 doesn't talk about this use case,\n        the default implementation is conservative.\n        \"\"\"\n        return [\n            sqlparse.format(statement, strip_comments=True)\n            for statement in sqlparse.split(sql)\n            if statement\n        ]\n\n    def process_clob(self, value):\n        \"\"\"\n        Return the value of a CLOB column, for backends that return a locator\n        object that requires additional processing.\n        \"\"\"\n        return value\n\n    def return_insert_columns(self, fields):\n        \"\"\"\n        For backends that support returning columns as part of an insert query,\n        return the SQL and params to append to the INSERT query. The returned\n        fragment should contain a format string to hold the appropriate column.\n        \"\"\"\n        pass\n\n    def compiler(self, compiler_name):\n        \"\"\"\n        Return the SQLCompiler class corresponding to the given name,\n        in the namespace corresponding to the `compiler_module` attribute\n        on this backend.\n        \"\"\"\n        if self._cache is None:\n            self._cache = import_module(self.compiler_module)\n        return getattr(self._cache, compiler_name)\n\n    def quote_name(self, name):\n        \"\"\"\n        Return a quoted version of the given table, index, or column name. Do\n        not quote the given name if it's already been quoted.\n        \"\"\"\n        raise NotImplementedError(\n            \"subclasses of BaseDatabaseOperations may require a quote_name() method\"\n        )\n\n    def regex_lookup(self, lookup_type):\n        \"\"\"\n        Return the string to use in a query when performing regular expression\n        lookups (using \"regex\" or \"iregex\"). It should contain a '%s'\n        placeholder for the column being searched against.\n\n        If the feature is not supported (or part of it is not supported), raise\n        NotImplementedError.\n        \"\"\"\n        raise NotImplementedError(\n            \"subclasses of BaseDatabaseOperations may require a regex_lookup() method\"\n        )\n\n    def savepoint_create_sql(self, sid):\n        \"\"\"\n        Return the SQL for starting a new savepoint. Only required if the\n        \"uses_savepoints\" feature is True. The \"sid\" parameter is a string\n        for the savepoint id.\n        \"\"\"\n        return \"SAVEPOINT %s\" % self.quote_name(sid)\n\n    def savepoint_commit_sql(self, sid):\n        \"\"\"\n        Return the SQL for committing the given savepoint.\n        \"\"\"\n        return \"RELEASE SAVEPOINT %s\" % self.quote_name(sid)\n\n    def savepoint_rollback_sql(self, sid):\n        \"\"\"\n        Return the SQL for rolling back the given savepoint.\n        \"\"\"\n        return \"ROLLBACK TO SAVEPOINT %s\" % self.quote_name(sid)\n\n    def set_time_zone_sql(self):\n        \"\"\"\n        Return the SQL that will set the connection's time zone.\n\n        Return '' if the backend doesn't support time zones.\n        \"\"\"\n        return \"\"\n\n    def sql_flush(self, style, tables, *, reset_sequences=False, allow_cascade=False):\n        \"\"\"\n        Return a list of SQL statements required to remove all data from\n        the given database tables (without actually removing the tables\n        themselves).\n\n        The `style` argument is a Style object as returned by either\n        color_style() or no_style() in django.core.management.color.\n\n        If `reset_sequences` is True, the list includes SQL statements required\n        to reset the sequences.\n\n        The `allow_cascade` argument determines whether truncation may cascade\n        to tables with foreign keys pointing the tables being truncated.\n        PostgreSQL requires a cascade even if these tables are empty.\n        \"\"\"\n        raise NotImplementedError(\n            \"subclasses of BaseDatabaseOperations must provide an sql_flush() method\"\n        )\n\n    def execute_sql_flush(self, sql_list):\n        \"\"\"Execute a list of SQL statements to flush the database.\"\"\"\n        with transaction.atomic(\n            using=self.connection.alias,\n            savepoint=self.connection.features.can_rollback_ddl,\n        ):\n            with self.connection.cursor() as cursor:\n                for sql in sql_list:\n                    cursor.execute(sql)\n\n    def sequence_reset_by_name_sql(self, style, sequences):\n        \"\"\"\n        Return a list of the SQL statements required to reset sequences\n        passed in `sequences`.\n\n        The `style` argument is a Style object as returned by either\n        color_style() or no_style() in django.core.management.color.\n        \"\"\"\n        return []\n\n    def sequence_reset_sql(self, style, model_list):\n        \"\"\"\n        Return a list of the SQL statements required to reset sequences for\n        the given models.\n\n        The `style` argument is a Style object as returned by either\n        color_style() or no_style() in django.core.management.color.\n        \"\"\"\n        return []  # No sequence reset required by default.\n\n    def start_transaction_sql(self):\n        \"\"\"Return the SQL statement required to start a transaction.\"\"\"\n        return \"BEGIN;\"\n\n    def end_transaction_sql(self, success=True):\n        \"\"\"Return the SQL statement required to end a transaction.\"\"\"\n        if not success:\n            return \"ROLLBACK;\"\n        return \"COMMIT;\"\n\n    def tablespace_sql(self, tablespace, inline=False):\n        \"\"\"\n        Return the SQL that will be used in a query to define the tablespace.\n\n        Return '' if the backend doesn't support tablespaces.\n\n        If `inline` is True, append the SQL to a row; otherwise append it to\n        the entire CREATE TABLE or CREATE INDEX statement.\n        \"\"\"\n        return \"\"\n\n    def prep_for_like_query(self, x):\n        \"\"\"Prepare a value for use in a LIKE query.\"\"\"\n        return str(x).replace(\"\\\\\", \"\\\\\\\\\").replace(\"%\", r\"\\%\").replace(\"_\", r\"\\_\")\n\n    # Same as prep_for_like_query(), but called for \"iexact\" matches, which\n    # need not necessarily be implemented using \"LIKE\" in the backend.\n    prep_for_iexact_query = prep_for_like_query\n\n    def validate_autopk_value(self, value):\n        \"\"\"\n        Certain backends do not accept some values for \"serial\" fields\n        (for example zero in MySQL). Raise a ValueError if the value is\n        invalid, otherwise return the validated value.\n        \"\"\"\n        return value\n\n    def adapt_unknown_value(self, value):\n        \"\"\"\n        Transform a value to something compatible with the backend driver.\n\n        This method only depends on the type of the value. It's designed for\n        cases where the target type isn't known, such as .raw() SQL queries.\n        As a consequence it may not work perfectly in all circumstances.\n        \"\"\"\n        if isinstance(value, datetime.datetime):  # must be before date\n            return self.adapt_datetimefield_value(value)\n        elif isinstance(value, datetime.date):\n            return self.adapt_datefield_value(value)\n        elif isinstance(value, datetime.time):\n            return self.adapt_timefield_value(value)\n        elif isinstance(value, decimal.Decimal):\n            return self.adapt_decimalfield_value(value)\n        else:\n            return value\n\n    def adapt_integerfield_value(self, value, internal_type):\n        return value\n\n    def adapt_datefield_value(self, value):\n        \"\"\"\n        Transform a date value to an object compatible with what is expected\n        by the backend driver for date columns.\n        \"\"\"\n        if value is None:\n            return None\n        return str(value)\n\n    def adapt_datetimefield_value(self, value):\n        \"\"\"\n        Transform a datetime value to an object compatible with what is expected\n        by the backend driver for datetime columns.\n        \"\"\"\n        if value is None:\n            return None\n        return str(value)\n\n    def adapt_timefield_value(self, value):\n        \"\"\"\n        Transform a time value to an object compatible with what is expected\n        by the backend driver for time columns.\n        \"\"\"\n        if value is None:\n            return None\n        if timezone.is_aware(value):\n            raise ValueError(\"Django does not support timezone-aware times.\")\n        return str(value)\n\n    def adapt_decimalfield_value(self, value, max_digits=None, decimal_places=None):\n        \"\"\"\n        Transform a decimal.Decimal value to an object compatible with what is\n        expected by the backend driver for decimal (numeric) columns.\n        \"\"\"\n        return value\n\n    def adapt_ipaddressfield_value(self, value):\n        \"\"\"\n        Transform a string representation of an IP address into the expected\n        type for the backend driver.\n        \"\"\"\n        return value or None\n\n    def adapt_json_value(self, value, encoder):\n        return json.dumps(value, cls=encoder)\n\n    def year_lookup_bounds_for_date_field(self, value, iso_year=False):\n        \"\"\"\n        Return a two-elements list with the lower and upper bound to be used\n        with a BETWEEN operator to query a DateField value using a year\n        lookup.\n\n        `value` is an int, containing the looked-up year.\n        If `iso_year` is True, return bounds for ISO-8601 week-numbering years.\n        \"\"\"\n        if iso_year:\n            first = datetime.date.fromisocalendar(value, 1, 1)\n            second = datetime.date.fromisocalendar(\n                value + 1, 1, 1\n            ) - datetime.timedelta(days=1)\n        else:\n            first = datetime.date(value, 1, 1)\n            second = datetime.date(value, 12, 31)\n        first = self.adapt_datefield_value(first)\n        second = self.adapt_datefield_value(second)\n        return [first, second]\n\n    def year_lookup_bounds_for_datetime_field(self, value, iso_year=False):\n        \"\"\"\n        Return a two-elements list with the lower and upper bound to be used\n        with a BETWEEN operator to query a DateTimeField value using a year\n        lookup.\n\n        `value` is an int, containing the looked-up year.\n        If `iso_year` is True, return bounds for ISO-8601 week-numbering years.\n        \"\"\"\n        if iso_year:\n            first = datetime.datetime.fromisocalendar(value, 1, 1)\n            second = datetime.datetime.fromisocalendar(\n                value + 1, 1, 1\n            ) - datetime.timedelta(microseconds=1)\n        else:\n            first = datetime.datetime(value, 1, 1)\n            second = datetime.datetime(value, 12, 31, 23, 59, 59, 999999)\n        if settings.USE_TZ:\n            tz = timezone.get_current_timezone()\n            first = timezone.make_aware(first, tz)\n            second = timezone.make_aware(second, tz)\n        first = self.adapt_datetimefield_value(first)\n        second = self.adapt_datetimefield_value(second)\n        return [first, second]\n\n    def get_db_converters(self, expression):\n        \"\"\"\n        Return a list of functions needed to convert field data.\n\n        Some field types on some backends do not provide data in the correct\n        format, this is the hook for converter functions.\n        \"\"\"\n        return []\n\n    def convert_durationfield_value(self, value, expression, connection):\n        if value is not None:\n            return datetime.timedelta(0, 0, value)\n\n    def check_expression_support(self, expression):\n        \"\"\"\n        Check that the backend supports the provided expression.\n\n        This is used on specific backends to rule out known expressions\n        that have problematic or nonexistent implementations. If the\n        expression has a known problem, the backend should raise\n        NotSupportedError.\n        \"\"\"\n        pass\n\n    def conditional_expression_supported_in_where_clause(self, expression):\n        \"\"\"\n        Return True, if the conditional expression is supported in the WHERE\n        clause.\n        \"\"\"\n        return True\n\n    def combine_expression(self, connector, sub_expressions):\n        \"\"\"\n        Combine a list of subexpressions into a single expression, using\n        the provided connecting operator. This is required because operators\n        can vary between backends (e.g., Oracle with %% and &) and between\n        subexpression types (e.g., date expressions).\n        \"\"\"\n        conn = \" %s \" % connector\n        return conn.join(sub_expressions)\n\n    def combine_duration_expression(self, connector, sub_expressions):\n        return self.combine_expression(connector, sub_expressions)\n\n    def binary_placeholder_sql(self, value):\n        \"\"\"\n        Some backends require special syntax to insert binary content (MySQL\n        for example uses '_binary %s').\n        \"\"\"\n        return \"%s\"\n\n    def modify_insert_params(self, placeholder, params):\n        \"\"\"\n        Allow modification of insert parameters. Needed for Oracle Spatial\n        backend due to #10888.\n        \"\"\"\n        return params\n\n    def integer_field_range(self, internal_type):\n        \"\"\"\n        Given an integer field internal type (e.g. 'PositiveIntegerField'),\n        return a tuple of the (min_value, max_value) form representing the\n        range of the column type bound to the field.\n        \"\"\"\n        return self.integer_field_ranges[internal_type]\n\n    def subtract_temporals(self, internal_type, lhs, rhs):\n        if self.connection.features.supports_temporal_subtraction:\n            lhs_sql, lhs_params = lhs\n            rhs_sql, rhs_params = rhs\n            return \"(%s - %s)\" % (lhs_sql, rhs_sql), (*lhs_params, *rhs_params)\n        raise NotSupportedError(\n            \"This backend does not support %s subtraction.\" % internal_type\n        )\n\n    def window_frame_value(self, value):\n        if isinstance(value, int):\n            if value == 0:\n                return self.CURRENT_ROW\n            elif value < 0:\n                return \"%d %s\" % (abs(value), self.PRECEDING)\n            else:\n                return \"%d %s\" % (value, self.FOLLOWING)\n\n    def window_frame_rows_start_end(self, start=None, end=None):\n        \"\"\"\n        Return SQL for start and end points in an OVER clause window frame.\n        \"\"\"\n        if isinstance(start, int) and isinstance(end, int) and start > end:\n            raise ValueError(\"start cannot be greater than end.\")\n        if start is not None and not isinstance(start, int):\n            raise ValueError(\n                f\"start argument must be an integer, zero, or None, but got '{start}'.\"\n            )\n        if end is not None and not isinstance(end, int):\n            raise ValueError(\n                f\"end argument must be an integer, zero, or None, but got '{end}'.\"\n            )\n        start_ = self.window_frame_value(start) or self.UNBOUNDED_PRECEDING\n        end_ = self.window_frame_value(end) or self.UNBOUNDED_FOLLOWING\n        return start_, end_\n\n    def window_frame_range_start_end(self, start=None, end=None):\n        if (start is not None and not isinstance(start, int)) or (\n            isinstance(start, int) and start > 0\n        ):\n            raise ValueError(\n                \"start argument must be a negative integer, zero, or None, \"\n                \"but got '%s'.\" % start\n            )\n        if (end is not None and not isinstance(end, int)) or (\n            isinstance(end, int) and end < 0\n        ):\n            raise ValueError(\n                \"end argument must be a positive integer, zero, or None, but got '%s'.\"\n                % end\n            )\n        start_ = self.window_frame_value(start) or self.UNBOUNDED_PRECEDING\n        end_ = self.window_frame_value(end) or self.UNBOUNDED_FOLLOWING\n        features = self.connection.features\n        if features.only_supports_unbounded_with_preceding_and_following and (\n            (start and start < 0) or (end and end > 0)\n        ):\n            raise NotSupportedError(\n                \"%s only supports UNBOUNDED together with PRECEDING and \"\n                \"FOLLOWING.\" % self.connection.display_name\n            )\n        return start_, end_\n\n    def explain_query_prefix(self, format=None, **options):\n        if not self.connection.features.supports_explaining_query_execution:\n            raise NotSupportedError(\n                \"This backend does not support explaining query execution.\"\n            )\n        if format:\n            supported_formats = self.connection.features.supported_explain_formats\n            normalized_format = format.upper()\n            if normalized_format not in supported_formats:\n                msg = \"%s is not a recognized format.\" % normalized_format\n                if supported_formats:\n                    msg += \" Allowed formats: %s\" % \", \".join(sorted(supported_formats))\n                else:\n                    msg += (\n                        f\" {self.connection.display_name} does not support any formats.\"\n                    )\n                raise ValueError(msg)\n        if options:\n            raise ValueError(\"Unknown options: %s\" % \", \".join(sorted(options.keys())))\n        return self.explain_prefix\n\n    def insert_statement(self, on_conflict=None):\n        return \"INSERT INTO\"\n\n    def on_conflict_suffix_sql(self, fields, on_conflict, update_fields, unique_fields):\n        return \"\"\n\n    def prepare_join_on_clause(self, lhs_table, lhs_field, rhs_table, rhs_field):\n        lhs_expr = Col(lhs_table, lhs_field)\n        rhs_expr = Col(rhs_table, rhs_field)\n\n        return lhs_expr, rhs_expr\n\n    def format_debug_sql(self, sql):\n        # Hook for backends (e.g. NoSQL) to customize formatting.\n        return sqlparse.format(sql, reindent=True, keyword_case=\"upper\")"}],"ground_truth":null,"score":null},
{"question":"What are the expected parameters and return values for the `convert_timefield_value` method in the context of `DatabaseOperations`?","answer":"","relative_code_list":[{"start_line":27,"end_line":422,"belongs_to":{"file_name":"operations.py","upper_path":"../django/django/db/backends/postgresql","module":"postgresql","define_class":["DatabaseOperations"],"imports":["json","functools.lru_cache","functools.partial","django.conf.settings","django.db.backends.base.operations.BaseDatabaseOperations","django.db.backends.postgresql.compiler.InsertUnnest","django.db.backends.postgresql.psycopg_any.Inet","django.db.backends.postgresql.psycopg_any.Jsonb","django.db.backends.postgresql.psycopg_any.errors","django.db.backends.postgresql.psycopg_any.is_psycopg3","django.db.backends.postgresql.psycopg_any.mogrify","django.db.backends.utils.split_tzname_delta","django.db.models.constants.OnConflict","django.db.models.functions.Cast","django.utils.regex_helper._lazy_re_compile","psycopg.types.numeric","django.db.models"]},"relative_function":[],"code":"class DatabaseOperations(BaseDatabaseOperations):\n    compiler_module = \"django.db.backends.postgresql.compiler\"\n    cast_char_field_without_max_length = \"varchar\"\n    explain_prefix = \"EXPLAIN\"\n    explain_options = frozenset(\n        [\n            \"ANALYZE\",\n            \"BUFFERS\",\n            \"COSTS\",\n            \"GENERIC_PLAN\",\n            \"MEMORY\",\n            \"SETTINGS\",\n            \"SERIALIZE\",\n            \"SUMMARY\",\n            \"TIMING\",\n            \"VERBOSE\",\n            \"WAL\",\n        ]\n    )\n    cast_data_types = {\n        \"AutoField\": \"integer\",\n        \"BigAutoField\": \"bigint\",\n        \"SmallAutoField\": \"smallint\",\n    }\n\n    if is_psycopg3:\n        from psycopg.types import numeric\n\n        integerfield_type_map = {\n            \"SmallIntegerField\": numeric.Int2,\n            \"IntegerField\": numeric.Int4,\n            \"BigIntegerField\": numeric.Int8,\n            \"PositiveSmallIntegerField\": numeric.Int2,\n            \"PositiveIntegerField\": numeric.Int4,\n            \"PositiveBigIntegerField\": numeric.Int8,\n        }\n\n    def unification_cast_sql(self, output_field):\n        internal_type = output_field.get_internal_type()\n        if internal_type in (\n            \"GenericIPAddressField\",\n            \"IPAddressField\",\n            \"TimeField\",\n            \"UUIDField\",\n        ):\n            # PostgreSQL will resolve a union as type 'text' if input types are\n            # 'unknown'.\n            # https://www.postgresql.org/docs/current/typeconv-union-case.html\n            # These fields cannot be implicitly cast back in the default\n            # PostgreSQL configuration so we need to explicitly cast them.\n            # We must also remove components of the type within brackets:\n            # varchar(255) -> varchar.\n            return (\n                \"CAST(%%s AS %s)\" % output_field.db_type(self.connection).split(\"(\")[0]\n            )\n        return \"%s\"\n\n    # EXTRACT format cannot be passed in parameters.\n    _extract_format_re = _lazy_re_compile(r\"[A-Z_]+\")\n\n    def date_extract_sql(self, lookup_type, sql, params):\n        # https://www.postgresql.org/docs/current/functions-datetime.html#FUNCTIONS-DATETIME-EXTRACT\n        if lookup_type == \"week_day\":\n            # For consistency across backends, we return Sunday=1, Saturday=7.\n            return f\"EXTRACT(DOW FROM {sql}) + 1\", params\n        elif lookup_type == \"iso_week_day\":\n            return f\"EXTRACT(ISODOW FROM {sql})\", params\n        elif lookup_type == \"iso_year\":\n            return f\"EXTRACT(ISOYEAR FROM {sql})\", params\n\n        lookup_type = lookup_type.upper()\n        if not self._extract_format_re.fullmatch(lookup_type):\n            raise ValueError(f\"Invalid lookup type: {lookup_type!r}\")\n        return f\"EXTRACT({lookup_type} FROM {sql})\", params\n\n    def date_trunc_sql(self, lookup_type, sql, params, tzname=None):\n        sql, params = self._convert_sql_to_tz(sql, params, tzname)\n        # https://www.postgresql.org/docs/current/functions-datetime.html#FUNCTIONS-DATETIME-TRUNC\n        return f\"DATE_TRUNC(%s, {sql})\", (lookup_type, *params)\n\n    def _prepare_tzname_delta(self, tzname):\n        tzname, sign, offset = split_tzname_delta(tzname)\n        if offset:\n            sign = \"-\" if sign == \"+\" else \"+\"\n            return f\"{tzname}{sign}{offset}\"\n        return tzname\n\n    def _convert_sql_to_tz(self, sql, params, tzname):\n        if tzname and settings.USE_TZ:\n            tzname_param = self._prepare_tzname_delta(tzname)\n            return f\"{sql} AT TIME ZONE %s\", (*params, tzname_param)\n        return sql, params\n\n    def datetime_cast_date_sql(self, sql, params, tzname):\n        sql, params = self._convert_sql_to_tz(sql, params, tzname)\n        return f\"({sql})::date\", params\n\n    def datetime_cast_time_sql(self, sql, params, tzname):\n        sql, params = self._convert_sql_to_tz(sql, params, tzname)\n        return f\"({sql})::time\", params\n\n    def datetime_extract_sql(self, lookup_type, sql, params, tzname):\n        sql, params = self._convert_sql_to_tz(sql, params, tzname)\n        if lookup_type == \"second\":\n            # Truncate fractional seconds.\n            return f\"EXTRACT(SECOND FROM DATE_TRUNC(%s, {sql}))\", (\"second\", *params)\n        return self.date_extract_sql(lookup_type, sql, params)\n\n    def datetime_trunc_sql(self, lookup_type, sql, params, tzname):\n        sql, params = self._convert_sql_to_tz(sql, params, tzname)\n        # https://www.postgresql.org/docs/current/functions-datetime.html#FUNCTIONS-DATETIME-TRUNC\n        return f\"DATE_TRUNC(%s, {sql})\", (lookup_type, *params)\n\n    def time_extract_sql(self, lookup_type, sql, params):\n        if lookup_type == \"second\":\n            # Truncate fractional seconds.\n            return f\"EXTRACT(SECOND FROM DATE_TRUNC(%s, {sql}))\", (\"second\", *params)\n        return self.date_extract_sql(lookup_type, sql, params)\n\n    def time_trunc_sql(self, lookup_type, sql, params, tzname=None):\n        sql, params = self._convert_sql_to_tz(sql, params, tzname)\n        return f\"DATE_TRUNC(%s, {sql})::time\", (lookup_type, *params)\n\n    def deferrable_sql(self):\n        return \" DEFERRABLE INITIALLY DEFERRED\"\n\n    def bulk_insert_sql(self, fields, placeholder_rows):\n        if isinstance(placeholder_rows, InsertUnnest):\n            return f\"SELECT * FROM {placeholder_rows}\"\n        return super().bulk_insert_sql(fields, placeholder_rows)\n\n    def fetch_returned_insert_rows(self, cursor):\n        \"\"\"\n        Given a cursor object that has just performed an INSERT...RETURNING\n        statement into a table, return the tuple of returned data.\n        \"\"\"\n        return cursor.fetchall()\n\n    def lookup_cast(self, lookup_type, internal_type=None):\n        lookup = \"%s\"\n        # Cast text lookups to text to allow things like filter(x__contains=4)\n        if lookup_type in (\n            \"iexact\",\n            \"contains\",\n            \"icontains\",\n            \"startswith\",\n            \"istartswith\",\n            \"endswith\",\n            \"iendswith\",\n            \"regex\",\n            \"iregex\",\n        ):\n            if internal_type in (\"IPAddressField\", \"GenericIPAddressField\"):\n                lookup = \"HOST(%s)\"\n            else:\n                lookup = \"%s::text\"\n\n        # Use UPPER(x) for case-insensitive lookups; it's faster.\n        if lookup_type in (\"iexact\", \"icontains\", \"istartswith\", \"iendswith\"):\n            lookup = \"UPPER(%s)\" % lookup\n\n        return lookup\n\n    def no_limit_value(self):\n        return None\n\n    def prepare_sql_script(self, sql):\n        return [sql]\n\n    def quote_name(self, name):\n        if name.startswith('\"') and name.endswith('\"'):\n            return name  # Quoting once is enough.\n        return '\"%s\"' % name\n\n    def compose_sql(self, sql, params):\n        return mogrify(sql, params, self.connection)\n\n    def set_time_zone_sql(self):\n        return \"SELECT set_config('TimeZone', %s, false)\"\n\n    def sql_flush(self, style, tables, *, reset_sequences=False, allow_cascade=False):\n        if not tables:\n            return []\n\n        # Perform a single SQL 'TRUNCATE x, y, z...;' statement. It allows us\n        # to truncate tables referenced by a foreign key in any other table.\n        sql_parts = [\n            style.SQL_KEYWORD(\"TRUNCATE\"),\n            \", \".join(style.SQL_FIELD(self.quote_name(table)) for table in tables),\n        ]\n        if reset_sequences:\n            sql_parts.append(style.SQL_KEYWORD(\"RESTART IDENTITY\"))\n        if allow_cascade:\n            sql_parts.append(style.SQL_KEYWORD(\"CASCADE\"))\n        return [\"%s;\" % \" \".join(sql_parts)]\n\n    def sequence_reset_by_name_sql(self, style, sequences):\n        # 'ALTER SEQUENCE sequence_name RESTART WITH 1;'... style SQL statements\n        # to reset sequence indices\n        sql = []\n        for sequence_info in sequences:\n            table_name = sequence_info[\"table\"]\n            # 'id' will be the case if it's an m2m using an autogenerated\n            # intermediate table (see BaseDatabaseIntrospection.sequence_list).\n            column_name = sequence_info[\"column\"] or \"id\"\n            sql.append(\n                \"%s setval(pg_get_serial_sequence('%s','%s'), 1, false);\"\n                % (\n                    style.SQL_KEYWORD(\"SELECT\"),\n                    style.SQL_TABLE(self.quote_name(table_name)),\n                    style.SQL_FIELD(column_name),\n                )\n            )\n        return sql\n\n    def tablespace_sql(self, tablespace, inline=False):\n        if inline:\n            return \"USING INDEX TABLESPACE %s\" % self.quote_name(tablespace)\n        else:\n            return \"TABLESPACE %s\" % self.quote_name(tablespace)\n\n    def sequence_reset_sql(self, style, model_list):\n        from django.db import models\n\n        output = []\n        qn = self.quote_name\n        for model in model_list:\n            # Use `coalesce` to set the sequence for each model to the max pk\n            # value if there are records, or 1 if there are none. Set the\n            # `is_called` property (the third argument to `setval`) to true if\n            # there are records (as the max pk value is already in use),\n            # otherwise set it to false. Use pg_get_serial_sequence to get the\n            # underlying sequence name from the table name and column name.\n\n            for f in model._meta.local_fields:\n                if isinstance(f, models.AutoField):\n                    output.append(\n                        \"%s setval(pg_get_serial_sequence('%s','%s'), \"\n                        \"coalesce(max(%s), 1), max(%s) %s null) %s %s;\"\n                        % (\n                            style.SQL_KEYWORD(\"SELECT\"),\n                            style.SQL_TABLE(qn(model._meta.db_table)),\n                            style.SQL_FIELD(f.column),\n                            style.SQL_FIELD(qn(f.column)),\n                            style.SQL_FIELD(qn(f.column)),\n                            style.SQL_KEYWORD(\"IS NOT\"),\n                            style.SQL_KEYWORD(\"FROM\"),\n                            style.SQL_TABLE(qn(model._meta.db_table)),\n                        )\n                    )\n                    # Only one AutoField is allowed per model, so don't bother\n                    # continuing.\n                    break\n        return output\n\n    def prep_for_iexact_query(self, x):\n        return x\n\n    def max_name_length(self):\n        \"\"\"\n        Return the maximum length of an identifier.\n\n        The maximum length of an identifier is 63 by default, but can be\n        changed by recompiling PostgreSQL after editing the NAMEDATALEN\n        macro in src/include/pg_config_manual.h.\n\n        This implementation returns 63, but can be overridden by a custom\n        database backend that inherits most of its behavior from this one.\n        \"\"\"\n        return 63\n\n    def distinct_sql(self, fields, params):\n        if fields:\n            params = [param for param_list in params for param in param_list]\n            return ([\"DISTINCT ON (%s)\" % \", \".join(fields)], params)\n        else:\n            return [\"DISTINCT\"], []\n\n    if is_psycopg3:\n\n        def last_executed_query(self, cursor, sql, params):\n            if self.connection.features.uses_server_side_binding:\n                try:\n                    return self.compose_sql(sql, params)\n                except errors.DataError:\n                    return None\n            else:\n                if cursor._query and cursor._query.query is not None:\n                    return cursor._query.query.decode()\n                return None\n\n    else:\n\n        def last_executed_query(self, cursor, sql, params):\n            # https://www.psycopg.org/docs/cursor.html#cursor.query\n            # The query attribute is a Psycopg extension to the DB API 2.0.\n            if cursor.query is not None:\n                return cursor.query.decode()\n            return None\n\n    def return_insert_columns(self, fields):\n        if not fields:\n            return \"\", ()\n        columns = [\n            \"%s.%s\"\n            % (\n                self.quote_name(field.model._meta.db_table),\n                self.quote_name(field.column),\n            )\n            for field in fields\n        ]\n        return \"RETURNING %s\" % \", \".join(columns), ()\n\n    if is_psycopg3:\n\n        def adapt_integerfield_value(self, value, internal_type):\n            if value is None or hasattr(value, \"resolve_expression\"):\n                return value\n            return self.integerfield_type_map[internal_type](value)\n\n    def adapt_datefield_value(self, value):\n        return value\n\n    def adapt_datetimefield_value(self, value):\n        return value\n\n    def adapt_timefield_value(self, value):\n        return value\n\n    def adapt_ipaddressfield_value(self, value):\n        if value:\n            return Inet(value)\n        return None\n\n    def adapt_json_value(self, value, encoder):\n        return Jsonb(value, dumps=get_json_dumps(encoder))\n\n    def subtract_temporals(self, internal_type, lhs, rhs):\n        if internal_type == \"DateField\":\n            lhs_sql, lhs_params = lhs\n            rhs_sql, rhs_params = rhs\n            params = (*lhs_params, *rhs_params)\n            return \"(interval '1 day' * (%s - %s))\" % (lhs_sql, rhs_sql), params\n        return super().subtract_temporals(internal_type, lhs, rhs)\n\n    def explain_query_prefix(self, format=None, **options):\n        extra = {}\n        if serialize := options.pop(\"serialize\", None):\n            if serialize.upper() in {\"TEXT\", \"BINARY\"}:\n                extra[\"SERIALIZE\"] = serialize.upper()\n        # Normalize options.\n        if options:\n            options = {\n                name.upper(): \"true\" if value else \"false\"\n                for name, value in options.items()\n            }\n            for valid_option in self.explain_options:\n                value = options.pop(valid_option, None)\n                if value is not None:\n                    extra[valid_option] = value\n        prefix = super().explain_query_prefix(format, **options)\n        if format:\n            extra[\"FORMAT\"] = format\n        if extra:\n            prefix += \" (%s)\" % \", \".join(\"%s %s\" % i for i in extra.items())\n        return prefix\n\n    def on_conflict_suffix_sql(self, fields, on_conflict, update_fields, unique_fields):\n        if on_conflict == OnConflict.IGNORE:\n            return \"ON CONFLICT DO NOTHING\"\n        if on_conflict == OnConflict.UPDATE:\n            return \"ON CONFLICT(%s) DO UPDATE SET %s\" % (\n                \", \".join(map(self.quote_name, unique_fields)),\n                \", \".join(\n                    [\n                        f\"{field} = EXCLUDED.{field}\"\n                        for field in map(self.quote_name, update_fields)\n                    ]\n                ),\n            )\n        return super().on_conflict_suffix_sql(\n            fields,\n            on_conflict,\n            update_fields,\n            unique_fields,\n        )\n\n    def prepare_join_on_clause(self, lhs_table, lhs_field, rhs_table, rhs_field):\n        lhs_expr, rhs_expr = super().prepare_join_on_clause(\n            lhs_table, lhs_field, rhs_table, rhs_field\n        )\n\n        if lhs_field.db_type(self.connection) != rhs_field.db_type(self.connection):\n            rhs_expr = Cast(rhs_expr, lhs_field)\n\n        return lhs_expr, rhs_expr"},{"start_line":329,"end_line":333,"belongs_to":{"file_name":"operations.py","upper_path":"../django/django/db/backends/sqlite3","module":"sqlite3","define_class":["DatabaseOperations"],"imports":["datetime","decimal","uuid","functools.lru_cache","itertools.chain","django.conf.settings","django.core.exceptions.FieldError","django.db.DatabaseError","django.db.NotSupportedError","django.db.models","django.db.backends.base.operations.BaseDatabaseOperations","django.db.models.constants.OnConflict","django.db.models.expressions.Col","django.utils.timezone","django.utils.dateparse.parse_date","django.utils.dateparse.parse_datetime","django.utils.dateparse.parse_time","django.utils.functional.cached_property","base.Database"]},"relative_function":[],"code":"def convert_timefield_value(self, value, expression, connection):\n        if value is not None:\n            if not isinstance(value, datetime.time):\n                value = parse_time(value)\n        return value"}],"ground_truth":null,"score":null},
{"question":"What is the purpose of the `codes_for_integrityerror` attribute in the `CursorWrapper`, and how does it affect other features?","answer":"","relative_code_list":[{"start_line":17,"end_line":114,"belongs_to":{"file_name":"utils.py","upper_path":"../django/django/db/backends","module":"backends","define_class":["CursorWrapper","CursorDebugWrapper"],"imports":["datetime","decimal","functools","logging","time","warnings","contextlib.contextmanager","hashlib.md5","django.apps.apps","django.db.NotSupportedError","django.utils.dateparse.parse_time"]},"relative_function":[],"code":"class CursorWrapper:\n    def __init__(self, cursor, db):\n        self.cursor = cursor\n        self.db = db\n\n    WRAP_ERROR_ATTRS = frozenset([\"fetchone\", \"fetchmany\", \"fetchall\", \"nextset\"])\n\n    APPS_NOT_READY_WARNING_MSG = (\n        \"Accessing the database during app initialization is discouraged. To fix this \"\n        \"warning, avoid executing queries in AppConfig.ready() or when your app \"\n        \"modules are imported.\"\n    )\n\n    def __getattr__(self, attr):\n        cursor_attr = getattr(self.cursor, attr)\n        if attr in CursorWrapper.WRAP_ERROR_ATTRS:\n            return self.db.wrap_database_errors(cursor_attr)\n        else:\n            return cursor_attr\n\n    def __iter__(self):\n        with self.db.wrap_database_errors:\n            yield from self.cursor\n\n    def __enter__(self):\n        return self\n\n    def __exit__(self, type, value, traceback):\n        # Close instead of passing through to avoid backend-specific behavior\n        # (#17671). Catch errors liberally because errors in cleanup code\n        # aren't useful.\n        try:\n            self.close()\n        except self.db.Database.Error:\n            pass\n\n    # The following methods cannot be implemented in __getattr__, because the\n    # code must run when the method is invoked, not just when it is accessed.\n\n    def callproc(self, procname, params=None, kparams=None):\n        # Keyword parameters for callproc aren't supported in PEP 249, but the\n        # database driver may support them (e.g. oracledb).\n        if kparams is not None and not self.db.features.supports_callproc_kwargs:\n            raise NotSupportedError(\n                \"Keyword parameters for callproc are not supported on this \"\n                \"database backend.\"\n            )\n        # Raise a warning during app initialization (stored_app_configs is only\n        # ever set during testing).\n        if not apps.ready and not apps.stored_app_configs:\n            warnings.warn(self.APPS_NOT_READY_WARNING_MSG, category=RuntimeWarning)\n        self.db.validate_no_broken_transaction()\n        with self.db.wrap_database_errors:\n            if params is None and kparams is None:\n                return self.cursor.callproc(procname)\n            elif kparams is None:\n                return self.cursor.callproc(procname, params)\n            else:\n                params = params or ()\n                return self.cursor.callproc(procname, params, kparams)\n\n    def execute(self, sql, params=None):\n        return self._execute_with_wrappers(\n            sql, params, many=False, executor=self._execute\n        )\n\n    def executemany(self, sql, param_list):\n        return self._execute_with_wrappers(\n            sql, param_list, many=True, executor=self._executemany\n        )\n\n    def _execute_with_wrappers(self, sql, params, many, executor):\n        context = {\"connection\": self.db, \"cursor\": self}\n        for wrapper in reversed(self.db.execute_wrappers):\n            executor = functools.partial(wrapper, executor)\n        return executor(sql, params, many, context)\n\n    def _execute(self, sql, params, *ignored_wrapper_args):\n        # Raise a warning during app initialization (stored_app_configs is only\n        # ever set during testing).\n        if not apps.ready and not apps.stored_app_configs:\n            warnings.warn(self.APPS_NOT_READY_WARNING_MSG, category=RuntimeWarning)\n        self.db.validate_no_broken_transaction()\n        with self.db.wrap_database_errors:\n            if params is None:\n                # params default might be backend specific.\n                return self.cursor.execute(sql)\n            else:\n                return self.cursor.execute(sql, params)\n\n    def _executemany(self, sql, param_list, *ignored_wrapper_args):\n        # Raise a warning during app initialization (stored_app_configs is only\n        # ever set during testing).\n        if not apps.ready and not apps.stored_app_configs:\n            warnings.warn(self.APPS_NOT_READY_WARNING_MSG, category=RuntimeWarning)\n        self.db.validate_no_broken_transaction()\n        with self.db.wrap_database_errors:\n            return self.cursor.executemany(sql, param_list)"}],"ground_truth":null,"score":null},
{"question":"What is the purpose of the `<Function>` function in `dummy`?","answer":"","relative_code_list":[{"start_line":52,"end_line":75,"belongs_to":{"file_name":"base.py","upper_path":"../django/django/db/backends/dummy","module":"dummy","define_class":["DatabaseOperations","DatabaseClient","DatabaseCreation","DatabaseIntrospection","DatabaseWrapper"],"imports":["django.core.exceptions.ImproperlyConfigured","django.db.backends.base.base.BaseDatabaseWrapper","django.db.backends.base.client.BaseDatabaseClient","django.db.backends.base.creation.BaseDatabaseCreation","django.db.backends.base.introspection.BaseDatabaseIntrospection","django.db.backends.base.operations.BaseDatabaseOperations","django.db.backends.dummy.features.DummyDatabaseFeatures"]},"relative_function":[],"code":"class DatabaseWrapper(BaseDatabaseWrapper):\n    operators = {}\n    # Override the base class implementations with null\n    # implementations. Anything that tries to actually\n    # do something raises complain; anything that tries\n    # to rollback or undo something raises ignore.\n    _cursor = complain\n    ensure_connection = complain\n    _commit = complain\n    _rollback = ignore\n    _close = ignore\n    _savepoint = ignore\n    _savepoint_commit = complain\n    _savepoint_rollback = ignore\n    _set_autocommit = complain\n    # Classes instantiated in __init__().\n    client_class = DatabaseClient\n    creation_class = DatabaseCreation\n    features_class = DummyDatabaseFeatures\n    introspection_class = DatabaseIntrospection\n    ops_class = DatabaseOperations\n\n    def is_usable(self):\n        return True"}],"ground_truth":null,"score":null},
{"question":"What is the purpose of the `can_distinct_on_fields` attribute in the `DatabaseFeatures`, and how does it affect other features?","answer":"","relative_code_list":[{"start_line":9,"end_line":171,"belongs_to":{"file_name":"features.py","upper_path":"../django/django/db/backends/postgresql","module":"postgresql","define_class":["DatabaseFeatures"],"imports":["operator","django.db.DataError","django.db.InterfaceError","django.db.backends.base.features.BaseDatabaseFeatures","django.db.backends.postgresql.psycopg_any.is_psycopg3","django.utils.functional.cached_property"]},"relative_function":[],"code":"class DatabaseFeatures(BaseDatabaseFeatures):\n    minimum_database_version = (14,)\n    allows_group_by_selected_pks = True\n    can_return_columns_from_insert = True\n    can_return_rows_from_bulk_insert = True\n    has_real_datatype = True\n    has_native_uuid_field = True\n    has_native_duration_field = True\n    has_native_json_field = True\n    can_defer_constraint_checks = True\n    has_select_for_update = True\n    has_select_for_update_nowait = True\n    has_select_for_update_of = True\n    has_select_for_update_skip_locked = True\n    has_select_for_no_key_update = True\n    can_release_savepoints = True\n    supports_comments = True\n    supports_tablespaces = True\n    supports_transactions = True\n    can_introspect_materialized_views = True\n    can_distinct_on_fields = True\n    can_rollback_ddl = True\n    schema_editor_uses_clientside_param_binding = True\n    supports_combined_alters = True\n    nulls_order_largest = True\n    closed_cursor_error_class = InterfaceError\n    greatest_least_ignores_nulls = True\n    can_clone_databases = True\n    supports_temporal_subtraction = True\n    supports_slicing_ordering_in_compound = True\n    create_test_procedure_without_params_sql = \"\"\"\n        CREATE FUNCTION test_procedure () RETURNS void AS $$\n        DECLARE\n            V_I INTEGER;\n        BEGIN\n            V_I := 1;\n        END;\n    $$ LANGUAGE plpgsql;\"\"\"\n    create_test_procedure_with_int_param_sql = \"\"\"\n        CREATE FUNCTION test_procedure (P_I INTEGER) RETURNS void AS $$\n        DECLARE\n            V_I INTEGER;\n        BEGIN\n            V_I := P_I;\n        END;\n    $$ LANGUAGE plpgsql;\"\"\"\n    create_test_table_with_composite_primary_key = \"\"\"\n        CREATE TABLE test_table_composite_pk (\n            column_1 INTEGER NOT NULL,\n            column_2 INTEGER NOT NULL,\n            PRIMARY KEY(column_1, column_2)\n        )\n    \"\"\"\n    requires_casted_case_in_updates = True\n    supports_over_clause = True\n    supports_frame_exclusion = True\n    only_supports_unbounded_with_preceding_and_following = True\n    supports_aggregate_filter_clause = True\n    supports_aggregate_order_by_clause = True\n    supported_explain_formats = {\"JSON\", \"TEXT\", \"XML\", \"YAML\"}\n    supports_deferrable_unique_constraints = True\n    has_json_operators = True\n    json_key_contains_list_matching_requires_list = True\n    supports_update_conflicts = True\n    supports_update_conflicts_with_target = True\n    supports_covering_indexes = True\n    supports_stored_generated_columns = True\n    supports_virtual_generated_columns = False\n    can_rename_index = True\n    test_collations = {\n        \"deterministic\": \"C\",\n        \"non_default\": \"sv-x-icu\",\n        \"swedish_ci\": \"sv-x-icu\",\n        \"virtual\": \"sv-x-icu\",\n    }\n    test_now_utc_template = \"STATEMENT_TIMESTAMP() AT TIME ZONE 'UTC'\"\n    insert_test_table_with_defaults = \"INSERT INTO {} DEFAULT VALUES\"\n\n    @cached_property\n    def django_test_skips(self):\n        skips = {\n            \"opclasses are PostgreSQL only.\": {\n                \"indexes.tests.SchemaIndexesNotPostgreSQLTests.\"\n                \"test_create_index_ignores_opclasses\",\n            },\n            \"PostgreSQL requires casting to text.\": {\n                \"lookup.tests.LookupTests.test_textfield_exact_null\",\n            },\n        }\n        if self.connection.settings_dict[\"OPTIONS\"].get(\"pool\"):\n            skips.update(\n                {\n                    \"Pool does implicit health checks\": {\n                        \"backends.base.test_base.ConnectionHealthChecksTests.\"\n                        \"test_health_checks_enabled\",\n                        \"backends.base.test_base.ConnectionHealthChecksTests.\"\n                        \"test_set_autocommit_health_checks_enabled\",\n                    },\n                }\n            )\n        if self.uses_server_side_binding:\n            skips.update(\n                {\n                    \"The actual query cannot be determined for server side bindings\": {\n                        \"backends.base.test_base.ExecuteWrapperTests.\"\n                        \"test_wrapper_debug\",\n                    }\n                },\n            )\n        return skips\n\n    @cached_property\n    def django_test_expected_failures(self):\n        expected_failures = set()\n        if self.uses_server_side_binding:\n            expected_failures.update(\n                {\n                    # Parameters passed to expressions in SELECT and GROUP BY\n                    # clauses are not recognized as the same values when using\n                    # server-side binding cursors (#34255).\n                    \"aggregation.tests.AggregateTestCase.\"\n                    \"test_group_by_nested_expression_with_params\",\n                }\n            )\n        return expected_failures\n\n    @cached_property\n    def uses_server_side_binding(self):\n        options = self.connection.settings_dict[\"OPTIONS\"]\n        return is_psycopg3 and options.get(\"server_side_binding\") is True\n\n    @cached_property\n    def prohibits_null_characters_in_text_exception(self):\n        if is_psycopg3:\n            return DataError, \"PostgreSQL text fields cannot contain NUL (0x00) bytes\"\n        else:\n            return ValueError, \"A string literal cannot contain NUL (0x00) characters.\"\n\n    @cached_property\n    def introspected_field_types(self):\n        return {\n            **super().introspected_field_types,\n            \"PositiveBigIntegerField\": \"BigIntegerField\",\n            \"PositiveIntegerField\": \"IntegerField\",\n            \"PositiveSmallIntegerField\": \"SmallIntegerField\",\n        }\n\n    @cached_property\n    def is_postgresql_15(self):\n        return self.connection.pg_version >= 150000\n\n    @cached_property\n    def is_postgresql_16(self):\n        return self.connection.pg_version >= 160000\n\n    @cached_property\n    def is_postgresql_17(self):\n        return self.connection.pg_version >= 170000\n\n    supports_unlimited_charfield = True\n    supports_nulls_distinct_unique_constraints = property(\n        operator.attrgetter(\"is_postgresql_15\")\n    )"}],"ground_truth":null,"score":null},
{"question":"Which API or library is responsible for `Return LIMIT/OFFSET SQL clause`, and what are its key parameters or methods?","answer":"","relative_code_list":[{"start_line":248,"end_line":258,"belongs_to":{"file_name":"operations.py","upper_path":"../django/django/db/backends/base","module":"base","define_class":["BaseDatabaseOperations"],"imports":["datetime","decimal","json","importlib.import_module","sqlparse","django.conf.settings","django.db.NotSupportedError","django.db.transaction","django.db.models.expressions.Col","django.utils.timezone","django.utils.encoding.force_str"]},"relative_function":[],"code":"def limit_offset_sql(self, low_mark, high_mark):\n        \"\"\"Return LIMIT/OFFSET SQL clause.\"\"\"\n        limit, offset = self._get_limit_offset_params(low_mark, high_mark)\n        return \" \".join(\n            sql\n            for sql in (\n                (\"LIMIT %d\" % limit) if limit else None,\n                (\"OFFSET %d\" % offset) if offset else None,\n            )\n            if sql\n        )"},{"start_line":15,"end_line":791,"belongs_to":{"file_name":"operations.py","upper_path":"../django/django/db/backends/base","module":"base","define_class":["BaseDatabaseOperations"],"imports":["datetime","decimal","json","importlib.import_module","sqlparse","django.conf.settings","django.db.NotSupportedError","django.db.transaction","django.db.models.expressions.Col","django.utils.timezone","django.utils.encoding.force_str"]},"relative_function":[],"code":"class BaseDatabaseOperations:\n    \"\"\"\n    Encapsulate backend-specific differences, such as the way a backend\n    performs ordering or calculates the ID of a recently-inserted row.\n    \"\"\"\n\n    compiler_module = \"django.db.models.sql.compiler\"\n\n    # Integer field safe ranges by `internal_type` as documented\n    # in docs/ref/models/fields.txt.\n    integer_field_ranges = {\n        \"SmallIntegerField\": (-32768, 32767),\n        \"IntegerField\": (-2147483648, 2147483647),\n        \"BigIntegerField\": (-9223372036854775808, 9223372036854775807),\n        \"PositiveBigIntegerField\": (0, 9223372036854775807),\n        \"PositiveSmallIntegerField\": (0, 32767),\n        \"PositiveIntegerField\": (0, 2147483647),\n        \"SmallAutoField\": (-32768, 32767),\n        \"AutoField\": (-2147483648, 2147483647),\n        \"BigAutoField\": (-9223372036854775808, 9223372036854775807),\n    }\n    set_operators = {\n        \"union\": \"UNION\",\n        \"intersection\": \"INTERSECT\",\n        \"difference\": \"EXCEPT\",\n    }\n    # Mapping of Field.get_internal_type() (typically the model field's class\n    # name) to the data type to use for the Cast() function, if different from\n    # DatabaseWrapper.data_types.\n    cast_data_types = {}\n    # CharField data type if the max_length argument isn't provided.\n    cast_char_field_without_max_length = None\n\n    # Start and end points for window expressions.\n    PRECEDING = \"PRECEDING\"\n    FOLLOWING = \"FOLLOWING\"\n    UNBOUNDED_PRECEDING = \"UNBOUNDED \" + PRECEDING\n    UNBOUNDED_FOLLOWING = \"UNBOUNDED \" + FOLLOWING\n    CURRENT_ROW = \"CURRENT ROW\"\n\n    # Prefix for EXPLAIN queries, or None EXPLAIN isn't supported.\n    explain_prefix = None\n\n    def __init__(self, connection):\n        self.connection = connection\n        self._cache = None\n\n    def autoinc_sql(self, table, column):\n        \"\"\"\n        Return any SQL needed to support auto-incrementing primary keys, or\n        None if no SQL is necessary.\n\n        This SQL is executed when a table is created.\n        \"\"\"\n        return None\n\n    def bulk_batch_size(self, fields, objs):\n        \"\"\"\n        Return the maximum allowed batch size for the backend. The fields\n        are the fields going to be inserted in the batch, the objs contains\n        all the objects to be inserted.\n        \"\"\"\n        return len(objs)\n\n    def format_for_duration_arithmetic(self, sql):\n        raise NotImplementedError(\n            \"subclasses of BaseDatabaseOperations may require a \"\n            \"format_for_duration_arithmetic() method.\"\n        )\n\n    def cache_key_culling_sql(self):\n        \"\"\"\n        Return an SQL query that retrieves the first cache key greater than the\n        n smallest.\n\n        This is used by the 'db' cache backend to determine where to start\n        culling.\n        \"\"\"\n        cache_key = self.quote_name(\"cache_key\")\n        return f\"SELECT {cache_key} FROM %s ORDER BY {cache_key} LIMIT 1 OFFSET %%s\"\n\n    def unification_cast_sql(self, output_field):\n        \"\"\"\n        Given a field instance, return the SQL that casts the result of a union\n        to that type. The resulting string should contain a '%s' placeholder\n        for the expression being cast.\n        \"\"\"\n        return \"%s\"\n\n    def date_extract_sql(self, lookup_type, sql, params):\n        \"\"\"\n        Given a lookup_type of 'year', 'month', or 'day', return the SQL that\n        extracts a value from the given date field field_name.\n        \"\"\"\n        raise NotImplementedError(\n            \"subclasses of BaseDatabaseOperations may require a date_extract_sql() \"\n            \"method\"\n        )\n\n    def date_trunc_sql(self, lookup_type, sql, params, tzname=None):\n        \"\"\"\n        Given a lookup_type of 'year', 'month', or 'day', return the SQL that\n        truncates the given date or datetime field field_name to a date object\n        with only the given specificity.\n\n        If `tzname` is provided, the given value is truncated in a specific\n        timezone.\n        \"\"\"\n        raise NotImplementedError(\n            \"subclasses of BaseDatabaseOperations may require a date_trunc_sql() \"\n            \"method.\"\n        )\n\n    def datetime_cast_date_sql(self, sql, params, tzname):\n        \"\"\"\n        Return the SQL to cast a datetime value to date value.\n        \"\"\"\n        raise NotImplementedError(\n            \"subclasses of BaseDatabaseOperations may require a \"\n            \"datetime_cast_date_sql() method.\"\n        )\n\n    def datetime_cast_time_sql(self, sql, params, tzname):\n        \"\"\"\n        Return the SQL to cast a datetime value to time value.\n        \"\"\"\n        raise NotImplementedError(\n            \"subclasses of BaseDatabaseOperations may require a \"\n            \"datetime_cast_time_sql() method\"\n        )\n\n    def datetime_extract_sql(self, lookup_type, sql, params, tzname):\n        \"\"\"\n        Given a lookup_type of 'year', 'month', 'day', 'hour', 'minute', or\n        'second', return the SQL that extracts a value from the given\n        datetime field field_name.\n        \"\"\"\n        raise NotImplementedError(\n            \"subclasses of BaseDatabaseOperations may require a datetime_extract_sql() \"\n            \"method\"\n        )\n\n    def datetime_trunc_sql(self, lookup_type, sql, params, tzname):\n        \"\"\"\n        Given a lookup_type of 'year', 'month', 'day', 'hour', 'minute', or\n        'second', return the SQL that truncates the given datetime field\n        field_name to a datetime object with only the given specificity.\n        \"\"\"\n        raise NotImplementedError(\n            \"subclasses of BaseDatabaseOperations may require a datetime_trunc_sql() \"\n            \"method\"\n        )\n\n    def time_trunc_sql(self, lookup_type, sql, params, tzname=None):\n        \"\"\"\n        Given a lookup_type of 'hour', 'minute' or 'second', return the SQL\n        that truncates the given time or datetime field field_name to a time\n        object with only the given specificity.\n\n        If `tzname` is provided, the given value is truncated in a specific\n        timezone.\n        \"\"\"\n        raise NotImplementedError(\n            \"subclasses of BaseDatabaseOperations may require a time_trunc_sql() method\"\n        )\n\n    def time_extract_sql(self, lookup_type, sql, params):\n        \"\"\"\n        Given a lookup_type of 'hour', 'minute', or 'second', return the SQL\n        that extracts a value from the given time field field_name.\n        \"\"\"\n        return self.date_extract_sql(lookup_type, sql, params)\n\n    def deferrable_sql(self):\n        \"\"\"\n        Return the SQL to make a constraint \"initially deferred\" during a\n        CREATE TABLE statement.\n        \"\"\"\n        return \"\"\n\n    def distinct_sql(self, fields, params):\n        \"\"\"\n        Return an SQL DISTINCT clause which removes duplicate rows from the\n        result set. If any fields are given, only check the given fields for\n        duplicates.\n        \"\"\"\n        if fields:\n            raise NotSupportedError(\n                \"DISTINCT ON fields is not supported by this database backend\"\n            )\n        else:\n            return [\"DISTINCT\"], []\n\n    def fetch_returned_insert_columns(self, cursor, returning_params):\n        \"\"\"\n        Given a cursor object that has just performed an INSERT...RETURNING\n        statement into a table, return the newly created data.\n        \"\"\"\n        return cursor.fetchone()\n\n    def force_group_by(self):\n        \"\"\"\n        Return a GROUP BY clause to use with a HAVING clause when no grouping\n        is specified.\n        \"\"\"\n        return []\n\n    def force_no_ordering(self):\n        \"\"\"\n        Return a list used in the \"ORDER BY\" clause to force no ordering at\n        all. Return an empty list to include nothing in the ordering.\n        \"\"\"\n        return []\n\n    def for_update_sql(self, nowait=False, skip_locked=False, of=(), no_key=False):\n        \"\"\"\n        Return the FOR UPDATE SQL clause to lock rows for an update operation.\n        \"\"\"\n        return \"FOR%s UPDATE%s%s%s\" % (\n            \" NO KEY\" if no_key else \"\",\n            \" OF %s\" % \", \".join(of) if of else \"\",\n            \" NOWAIT\" if nowait else \"\",\n            \" SKIP LOCKED\" if skip_locked else \"\",\n        )\n\n    def _get_limit_offset_params(self, low_mark, high_mark):\n        offset = low_mark or 0\n        if high_mark is not None:\n            return (high_mark - offset), offset\n        elif offset:\n            return self.connection.ops.no_limit_value(), offset\n        return None, offset\n\n    def limit_offset_sql(self, low_mark, high_mark):\n        \"\"\"Return LIMIT/OFFSET SQL clause.\"\"\"\n        limit, offset = self._get_limit_offset_params(low_mark, high_mark)\n        return \" \".join(\n            sql\n            for sql in (\n                (\"LIMIT %d\" % limit) if limit else None,\n                (\"OFFSET %d\" % offset) if offset else None,\n            )\n            if sql\n        )\n\n    def bulk_insert_sql(self, fields, placeholder_rows):\n        placeholder_rows_sql = (\", \".join(row) for row in placeholder_rows)\n        values_sql = \", \".join([f\"({sql})\" for sql in placeholder_rows_sql])\n        return f\"VALUES {values_sql}\"\n\n    def last_executed_query(self, cursor, sql, params):\n        \"\"\"\n        Return a string of the query last executed by the given cursor, with\n        placeholders replaced with actual values.\n\n        `sql` is the raw query containing placeholders and `params` is the\n        sequence of parameters. These are used by default, but this method\n        exists for database backends to provide a better implementation\n        according to their own quoting schemes.\n        \"\"\"\n\n        # Convert params to contain string values.\n        def to_string(s):\n            return force_str(s, strings_only=True, errors=\"replace\")\n\n        if isinstance(params, (list, tuple)):\n            u_params = tuple(to_string(val) for val in params)\n        elif params is None:\n            u_params = ()\n        else:\n            u_params = {to_string(k): to_string(v) for k, v in params.items()}\n\n        return \"QUERY = %r - PARAMS = %r\" % (sql, u_params)\n\n    def last_insert_id(self, cursor, table_name, pk_name):\n        \"\"\"\n        Given a cursor object that has just performed an INSERT statement into\n        a table that has an auto-incrementing ID, return the newly created ID.\n\n        `pk_name` is the name of the primary-key column.\n        \"\"\"\n        return cursor.lastrowid\n\n    def lookup_cast(self, lookup_type, internal_type=None):\n        \"\"\"\n        Return the string to use in a query when performing lookups\n        (\"contains\", \"like\", etc.). It should contain a '%s' placeholder for\n        the column being searched against.\n        \"\"\"\n        return \"%s\"\n\n    def max_in_list_size(self):\n        \"\"\"\n        Return the maximum number of items that can be passed in a single 'IN'\n        list condition, or None if the backend does not impose a limit.\n        \"\"\"\n        return None\n\n    def max_name_length(self):\n        \"\"\"\n        Return the maximum length of table and column names, or None if there\n        is no limit.\n        \"\"\"\n        return None\n\n    def no_limit_value(self):\n        \"\"\"\n        Return the value to use for the LIMIT when we are wanting \"LIMIT\n        infinity\". Return None if the limit clause can be omitted in this case.\n        \"\"\"\n        raise NotImplementedError(\n            \"subclasses of BaseDatabaseOperations may require a no_limit_value() method\"\n        )\n\n    def pk_default_value(self):\n        \"\"\"\n        Return the value to use during an INSERT statement to specify that\n        the field should use its default value.\n        \"\"\"\n        return \"DEFAULT\"\n\n    def prepare_sql_script(self, sql):\n        \"\"\"\n        Take an SQL script that may contain multiple lines and return a list\n        of statements to feed to successive cursor.execute() calls.\n\n        Since few databases are able to process raw SQL scripts in a single\n        cursor.execute() call and PEP 249 doesn't talk about this use case,\n        the default implementation is conservative.\n        \"\"\"\n        return [\n            sqlparse.format(statement, strip_comments=True)\n            for statement in sqlparse.split(sql)\n            if statement\n        ]\n\n    def process_clob(self, value):\n        \"\"\"\n        Return the value of a CLOB column, for backends that return a locator\n        object that requires additional processing.\n        \"\"\"\n        return value\n\n    def return_insert_columns(self, fields):\n        \"\"\"\n        For backends that support returning columns as part of an insert query,\n        return the SQL and params to append to the INSERT query. The returned\n        fragment should contain a format string to hold the appropriate column.\n        \"\"\"\n        pass\n\n    def compiler(self, compiler_name):\n        \"\"\"\n        Return the SQLCompiler class corresponding to the given name,\n        in the namespace corresponding to the `compiler_module` attribute\n        on this backend.\n        \"\"\"\n        if self._cache is None:\n            self._cache = import_module(self.compiler_module)\n        return getattr(self._cache, compiler_name)\n\n    def quote_name(self, name):\n        \"\"\"\n        Return a quoted version of the given table, index, or column name. Do\n        not quote the given name if it's already been quoted.\n        \"\"\"\n        raise NotImplementedError(\n            \"subclasses of BaseDatabaseOperations may require a quote_name() method\"\n        )\n\n    def regex_lookup(self, lookup_type):\n        \"\"\"\n        Return the string to use in a query when performing regular expression\n        lookups (using \"regex\" or \"iregex\"). It should contain a '%s'\n        placeholder for the column being searched against.\n\n        If the feature is not supported (or part of it is not supported), raise\n        NotImplementedError.\n        \"\"\"\n        raise NotImplementedError(\n            \"subclasses of BaseDatabaseOperations may require a regex_lookup() method\"\n        )\n\n    def savepoint_create_sql(self, sid):\n        \"\"\"\n        Return the SQL for starting a new savepoint. Only required if the\n        \"uses_savepoints\" feature is True. The \"sid\" parameter is a string\n        for the savepoint id.\n        \"\"\"\n        return \"SAVEPOINT %s\" % self.quote_name(sid)\n\n    def savepoint_commit_sql(self, sid):\n        \"\"\"\n        Return the SQL for committing the given savepoint.\n        \"\"\"\n        return \"RELEASE SAVEPOINT %s\" % self.quote_name(sid)\n\n    def savepoint_rollback_sql(self, sid):\n        \"\"\"\n        Return the SQL for rolling back the given savepoint.\n        \"\"\"\n        return \"ROLLBACK TO SAVEPOINT %s\" % self.quote_name(sid)\n\n    def set_time_zone_sql(self):\n        \"\"\"\n        Return the SQL that will set the connection's time zone.\n\n        Return '' if the backend doesn't support time zones.\n        \"\"\"\n        return \"\"\n\n    def sql_flush(self, style, tables, *, reset_sequences=False, allow_cascade=False):\n        \"\"\"\n        Return a list of SQL statements required to remove all data from\n        the given database tables (without actually removing the tables\n        themselves).\n\n        The `style` argument is a Style object as returned by either\n        color_style() or no_style() in django.core.management.color.\n\n        If `reset_sequences` is True, the list includes SQL statements required\n        to reset the sequences.\n\n        The `allow_cascade` argument determines whether truncation may cascade\n        to tables with foreign keys pointing the tables being truncated.\n        PostgreSQL requires a cascade even if these tables are empty.\n        \"\"\"\n        raise NotImplementedError(\n            \"subclasses of BaseDatabaseOperations must provide an sql_flush() method\"\n        )\n\n    def execute_sql_flush(self, sql_list):\n        \"\"\"Execute a list of SQL statements to flush the database.\"\"\"\n        with transaction.atomic(\n            using=self.connection.alias,\n            savepoint=self.connection.features.can_rollback_ddl,\n        ):\n            with self.connection.cursor() as cursor:\n                for sql in sql_list:\n                    cursor.execute(sql)\n\n    def sequence_reset_by_name_sql(self, style, sequences):\n        \"\"\"\n        Return a list of the SQL statements required to reset sequences\n        passed in `sequences`.\n\n        The `style` argument is a Style object as returned by either\n        color_style() or no_style() in django.core.management.color.\n        \"\"\"\n        return []\n\n    def sequence_reset_sql(self, style, model_list):\n        \"\"\"\n        Return a list of the SQL statements required to reset sequences for\n        the given models.\n\n        The `style` argument is a Style object as returned by either\n        color_style() or no_style() in django.core.management.color.\n        \"\"\"\n        return []  # No sequence reset required by default.\n\n    def start_transaction_sql(self):\n        \"\"\"Return the SQL statement required to start a transaction.\"\"\"\n        return \"BEGIN;\"\n\n    def end_transaction_sql(self, success=True):\n        \"\"\"Return the SQL statement required to end a transaction.\"\"\"\n        if not success:\n            return \"ROLLBACK;\"\n        return \"COMMIT;\"\n\n    def tablespace_sql(self, tablespace, inline=False):\n        \"\"\"\n        Return the SQL that will be used in a query to define the tablespace.\n\n        Return '' if the backend doesn't support tablespaces.\n\n        If `inline` is True, append the SQL to a row; otherwise append it to\n        the entire CREATE TABLE or CREATE INDEX statement.\n        \"\"\"\n        return \"\"\n\n    def prep_for_like_query(self, x):\n        \"\"\"Prepare a value for use in a LIKE query.\"\"\"\n        return str(x).replace(\"\\\\\", \"\\\\\\\\\").replace(\"%\", r\"\\%\").replace(\"_\", r\"\\_\")\n\n    # Same as prep_for_like_query(), but called for \"iexact\" matches, which\n    # need not necessarily be implemented using \"LIKE\" in the backend.\n    prep_for_iexact_query = prep_for_like_query\n\n    def validate_autopk_value(self, value):\n        \"\"\"\n        Certain backends do not accept some values for \"serial\" fields\n        (for example zero in MySQL). Raise a ValueError if the value is\n        invalid, otherwise return the validated value.\n        \"\"\"\n        return value\n\n    def adapt_unknown_value(self, value):\n        \"\"\"\n        Transform a value to something compatible with the backend driver.\n\n        This method only depends on the type of the value. It's designed for\n        cases where the target type isn't known, such as .raw() SQL queries.\n        As a consequence it may not work perfectly in all circumstances.\n        \"\"\"\n        if isinstance(value, datetime.datetime):  # must be before date\n            return self.adapt_datetimefield_value(value)\n        elif isinstance(value, datetime.date):\n            return self.adapt_datefield_value(value)\n        elif isinstance(value, datetime.time):\n            return self.adapt_timefield_value(value)\n        elif isinstance(value, decimal.Decimal):\n            return self.adapt_decimalfield_value(value)\n        else:\n            return value\n\n    def adapt_integerfield_value(self, value, internal_type):\n        return value\n\n    def adapt_datefield_value(self, value):\n        \"\"\"\n        Transform a date value to an object compatible with what is expected\n        by the backend driver for date columns.\n        \"\"\"\n        if value is None:\n            return None\n        return str(value)\n\n    def adapt_datetimefield_value(self, value):\n        \"\"\"\n        Transform a datetime value to an object compatible with what is expected\n        by the backend driver for datetime columns.\n        \"\"\"\n        if value is None:\n            return None\n        return str(value)\n\n    def adapt_timefield_value(self, value):\n        \"\"\"\n        Transform a time value to an object compatible with what is expected\n        by the backend driver for time columns.\n        \"\"\"\n        if value is None:\n            return None\n        if timezone.is_aware(value):\n            raise ValueError(\"Django does not support timezone-aware times.\")\n        return str(value)\n\n    def adapt_decimalfield_value(self, value, max_digits=None, decimal_places=None):\n        \"\"\"\n        Transform a decimal.Decimal value to an object compatible with what is\n        expected by the backend driver for decimal (numeric) columns.\n        \"\"\"\n        return value\n\n    def adapt_ipaddressfield_value(self, value):\n        \"\"\"\n        Transform a string representation of an IP address into the expected\n        type for the backend driver.\n        \"\"\"\n        return value or None\n\n    def adapt_json_value(self, value, encoder):\n        return json.dumps(value, cls=encoder)\n\n    def year_lookup_bounds_for_date_field(self, value, iso_year=False):\n        \"\"\"\n        Return a two-elements list with the lower and upper bound to be used\n        with a BETWEEN operator to query a DateField value using a year\n        lookup.\n\n        `value` is an int, containing the looked-up year.\n        If `iso_year` is True, return bounds for ISO-8601 week-numbering years.\n        \"\"\"\n        if iso_year:\n            first = datetime.date.fromisocalendar(value, 1, 1)\n            second = datetime.date.fromisocalendar(\n                value + 1, 1, 1\n            ) - datetime.timedelta(days=1)\n        else:\n            first = datetime.date(value, 1, 1)\n            second = datetime.date(value, 12, 31)\n        first = self.adapt_datefield_value(first)\n        second = self.adapt_datefield_value(second)\n        return [first, second]\n\n    def year_lookup_bounds_for_datetime_field(self, value, iso_year=False):\n        \"\"\"\n        Return a two-elements list with the lower and upper bound to be used\n        with a BETWEEN operator to query a DateTimeField value using a year\n        lookup.\n\n        `value` is an int, containing the looked-up year.\n        If `iso_year` is True, return bounds for ISO-8601 week-numbering years.\n        \"\"\"\n        if iso_year:\n            first = datetime.datetime.fromisocalendar(value, 1, 1)\n            second = datetime.datetime.fromisocalendar(\n                value + 1, 1, 1\n            ) - datetime.timedelta(microseconds=1)\n        else:\n            first = datetime.datetime(value, 1, 1)\n            second = datetime.datetime(value, 12, 31, 23, 59, 59, 999999)\n        if settings.USE_TZ:\n            tz = timezone.get_current_timezone()\n            first = timezone.make_aware(first, tz)\n            second = timezone.make_aware(second, tz)\n        first = self.adapt_datetimefield_value(first)\n        second = self.adapt_datetimefield_value(second)\n        return [first, second]\n\n    def get_db_converters(self, expression):\n        \"\"\"\n        Return a list of functions needed to convert field data.\n\n        Some field types on some backends do not provide data in the correct\n        format, this is the hook for converter functions.\n        \"\"\"\n        return []\n\n    def convert_durationfield_value(self, value, expression, connection):\n        if value is not None:\n            return datetime.timedelta(0, 0, value)\n\n    def check_expression_support(self, expression):\n        \"\"\"\n        Check that the backend supports the provided expression.\n\n        This is used on specific backends to rule out known expressions\n        that have problematic or nonexistent implementations. If the\n        expression has a known problem, the backend should raise\n        NotSupportedError.\n        \"\"\"\n        pass\n\n    def conditional_expression_supported_in_where_clause(self, expression):\n        \"\"\"\n        Return True, if the conditional expression is supported in the WHERE\n        clause.\n        \"\"\"\n        return True\n\n    def combine_expression(self, connector, sub_expressions):\n        \"\"\"\n        Combine a list of subexpressions into a single expression, using\n        the provided connecting operator. This is required because operators\n        can vary between backends (e.g., Oracle with %% and &) and between\n        subexpression types (e.g., date expressions).\n        \"\"\"\n        conn = \" %s \" % connector\n        return conn.join(sub_expressions)\n\n    def combine_duration_expression(self, connector, sub_expressions):\n        return self.combine_expression(connector, sub_expressions)\n\n    def binary_placeholder_sql(self, value):\n        \"\"\"\n        Some backends require special syntax to insert binary content (MySQL\n        for example uses '_binary %s').\n        \"\"\"\n        return \"%s\"\n\n    def modify_insert_params(self, placeholder, params):\n        \"\"\"\n        Allow modification of insert parameters. Needed for Oracle Spatial\n        backend due to #10888.\n        \"\"\"\n        return params\n\n    def integer_field_range(self, internal_type):\n        \"\"\"\n        Given an integer field internal type (e.g. 'PositiveIntegerField'),\n        return a tuple of the (min_value, max_value) form representing the\n        range of the column type bound to the field.\n        \"\"\"\n        return self.integer_field_ranges[internal_type]\n\n    def subtract_temporals(self, internal_type, lhs, rhs):\n        if self.connection.features.supports_temporal_subtraction:\n            lhs_sql, lhs_params = lhs\n            rhs_sql, rhs_params = rhs\n            return \"(%s - %s)\" % (lhs_sql, rhs_sql), (*lhs_params, *rhs_params)\n        raise NotSupportedError(\n            \"This backend does not support %s subtraction.\" % internal_type\n        )\n\n    def window_frame_value(self, value):\n        if isinstance(value, int):\n            if value == 0:\n                return self.CURRENT_ROW\n            elif value < 0:\n                return \"%d %s\" % (abs(value), self.PRECEDING)\n            else:\n                return \"%d %s\" % (value, self.FOLLOWING)\n\n    def window_frame_rows_start_end(self, start=None, end=None):\n        \"\"\"\n        Return SQL for start and end points in an OVER clause window frame.\n        \"\"\"\n        if isinstance(start, int) and isinstance(end, int) and start > end:\n            raise ValueError(\"start cannot be greater than end.\")\n        if start is not None and not isinstance(start, int):\n            raise ValueError(\n                f\"start argument must be an integer, zero, or None, but got '{start}'.\"\n            )\n        if end is not None and not isinstance(end, int):\n            raise ValueError(\n                f\"end argument must be an integer, zero, or None, but got '{end}'.\"\n            )\n        start_ = self.window_frame_value(start) or self.UNBOUNDED_PRECEDING\n        end_ = self.window_frame_value(end) or self.UNBOUNDED_FOLLOWING\n        return start_, end_\n\n    def window_frame_range_start_end(self, start=None, end=None):\n        if (start is not None and not isinstance(start, int)) or (\n            isinstance(start, int) and start > 0\n        ):\n            raise ValueError(\n                \"start argument must be a negative integer, zero, or None, \"\n                \"but got '%s'.\" % start\n            )\n        if (end is not None and not isinstance(end, int)) or (\n            isinstance(end, int) and end < 0\n        ):\n            raise ValueError(\n                \"end argument must be a positive integer, zero, or None, but got '%s'.\"\n                % end\n            )\n        start_ = self.window_frame_value(start) or self.UNBOUNDED_PRECEDING\n        end_ = self.window_frame_value(end) or self.UNBOUNDED_FOLLOWING\n        features = self.connection.features\n        if features.only_supports_unbounded_with_preceding_and_following and (\n            (start and start < 0) or (end and end > 0)\n        ):\n            raise NotSupportedError(\n                \"%s only supports UNBOUNDED together with PRECEDING and \"\n                \"FOLLOWING.\" % self.connection.display_name\n            )\n        return start_, end_\n\n    def explain_query_prefix(self, format=None, **options):\n        if not self.connection.features.supports_explaining_query_execution:\n            raise NotSupportedError(\n                \"This backend does not support explaining query execution.\"\n            )\n        if format:\n            supported_formats = self.connection.features.supported_explain_formats\n            normalized_format = format.upper()\n            if normalized_format not in supported_formats:\n                msg = \"%s is not a recognized format.\" % normalized_format\n                if supported_formats:\n                    msg += \" Allowed formats: %s\" % \", \".join(sorted(supported_formats))\n                else:\n                    msg += (\n                        f\" {self.connection.display_name} does not support any formats.\"\n                    )\n                raise ValueError(msg)\n        if options:\n            raise ValueError(\"Unknown options: %s\" % \", \".join(sorted(options.keys())))\n        return self.explain_prefix\n\n    def insert_statement(self, on_conflict=None):\n        return \"INSERT INTO\"\n\n    def on_conflict_suffix_sql(self, fields, on_conflict, update_fields, unique_fields):\n        return \"\"\n\n    def prepare_join_on_clause(self, lhs_table, lhs_field, rhs_table, rhs_field):\n        lhs_expr = Col(lhs_table, lhs_field)\n        rhs_expr = Col(rhs_table, rhs_field)\n\n        return lhs_expr, rhs_expr\n\n    def format_debug_sql(self, sql):\n        # Hook for backends (e.g. NoSQL) to customize formatting.\n        return sqlparse.format(sql, reindent=True, keyword_case=\"upper\")"}],"ground_truth":null,"score":null},
{"question":"Where is the main implementation of the `Return a quoted version of the given table, index, or column name` located?","answer":"","relative_code_list":[{"start_line":376,"end_line":383,"belongs_to":{"file_name":"operations.py","upper_path":"../django/django/db/backends/base","module":"base","define_class":["BaseDatabaseOperations"],"imports":["datetime","decimal","json","importlib.import_module","sqlparse","django.conf.settings","django.db.NotSupportedError","django.db.transaction","django.db.models.expressions.Col","django.utils.timezone","django.utils.encoding.force_str"]},"relative_function":[],"code":"def quote_name(self, name):\n        \"\"\"\n        Return a quoted version of the given table, index, or column name. Do\n        not quote the given name if it's already been quoted.\n        \"\"\"\n        raise NotImplementedError(\n            \"subclasses of BaseDatabaseOperations may require a quote_name() method\"\n        )"},{"start_line":15,"end_line":791,"belongs_to":{"file_name":"operations.py","upper_path":"../django/django/db/backends/base","module":"base","define_class":["BaseDatabaseOperations"],"imports":["datetime","decimal","json","importlib.import_module","sqlparse","django.conf.settings","django.db.NotSupportedError","django.db.transaction","django.db.models.expressions.Col","django.utils.timezone","django.utils.encoding.force_str"]},"relative_function":[],"code":"class BaseDatabaseOperations:\n    \"\"\"\n    Encapsulate backend-specific differences, such as the way a backend\n    performs ordering or calculates the ID of a recently-inserted row.\n    \"\"\"\n\n    compiler_module = \"django.db.models.sql.compiler\"\n\n    # Integer field safe ranges by `internal_type` as documented\n    # in docs/ref/models/fields.txt.\n    integer_field_ranges = {\n        \"SmallIntegerField\": (-32768, 32767),\n        \"IntegerField\": (-2147483648, 2147483647),\n        \"BigIntegerField\": (-9223372036854775808, 9223372036854775807),\n        \"PositiveBigIntegerField\": (0, 9223372036854775807),\n        \"PositiveSmallIntegerField\": (0, 32767),\n        \"PositiveIntegerField\": (0, 2147483647),\n        \"SmallAutoField\": (-32768, 32767),\n        \"AutoField\": (-2147483648, 2147483647),\n        \"BigAutoField\": (-9223372036854775808, 9223372036854775807),\n    }\n    set_operators = {\n        \"union\": \"UNION\",\n        \"intersection\": \"INTERSECT\",\n        \"difference\": \"EXCEPT\",\n    }\n    # Mapping of Field.get_internal_type() (typically the model field's class\n    # name) to the data type to use for the Cast() function, if different from\n    # DatabaseWrapper.data_types.\n    cast_data_types = {}\n    # CharField data type if the max_length argument isn't provided.\n    cast_char_field_without_max_length = None\n\n    # Start and end points for window expressions.\n    PRECEDING = \"PRECEDING\"\n    FOLLOWING = \"FOLLOWING\"\n    UNBOUNDED_PRECEDING = \"UNBOUNDED \" + PRECEDING\n    UNBOUNDED_FOLLOWING = \"UNBOUNDED \" + FOLLOWING\n    CURRENT_ROW = \"CURRENT ROW\"\n\n    # Prefix for EXPLAIN queries, or None EXPLAIN isn't supported.\n    explain_prefix = None\n\n    def __init__(self, connection):\n        self.connection = connection\n        self._cache = None\n\n    def autoinc_sql(self, table, column):\n        \"\"\"\n        Return any SQL needed to support auto-incrementing primary keys, or\n        None if no SQL is necessary.\n\n        This SQL is executed when a table is created.\n        \"\"\"\n        return None\n\n    def bulk_batch_size(self, fields, objs):\n        \"\"\"\n        Return the maximum allowed batch size for the backend. The fields\n        are the fields going to be inserted in the batch, the objs contains\n        all the objects to be inserted.\n        \"\"\"\n        return len(objs)\n\n    def format_for_duration_arithmetic(self, sql):\n        raise NotImplementedError(\n            \"subclasses of BaseDatabaseOperations may require a \"\n            \"format_for_duration_arithmetic() method.\"\n        )\n\n    def cache_key_culling_sql(self):\n        \"\"\"\n        Return an SQL query that retrieves the first cache key greater than the\n        n smallest.\n\n        This is used by the 'db' cache backend to determine where to start\n        culling.\n        \"\"\"\n        cache_key = self.quote_name(\"cache_key\")\n        return f\"SELECT {cache_key} FROM %s ORDER BY {cache_key} LIMIT 1 OFFSET %%s\"\n\n    def unification_cast_sql(self, output_field):\n        \"\"\"\n        Given a field instance, return the SQL that casts the result of a union\n        to that type. The resulting string should contain a '%s' placeholder\n        for the expression being cast.\n        \"\"\"\n        return \"%s\"\n\n    def date_extract_sql(self, lookup_type, sql, params):\n        \"\"\"\n        Given a lookup_type of 'year', 'month', or 'day', return the SQL that\n        extracts a value from the given date field field_name.\n        \"\"\"\n        raise NotImplementedError(\n            \"subclasses of BaseDatabaseOperations may require a date_extract_sql() \"\n            \"method\"\n        )\n\n    def date_trunc_sql(self, lookup_type, sql, params, tzname=None):\n        \"\"\"\n        Given a lookup_type of 'year', 'month', or 'day', return the SQL that\n        truncates the given date or datetime field field_name to a date object\n        with only the given specificity.\n\n        If `tzname` is provided, the given value is truncated in a specific\n        timezone.\n        \"\"\"\n        raise NotImplementedError(\n            \"subclasses of BaseDatabaseOperations may require a date_trunc_sql() \"\n            \"method.\"\n        )\n\n    def datetime_cast_date_sql(self, sql, params, tzname):\n        \"\"\"\n        Return the SQL to cast a datetime value to date value.\n        \"\"\"\n        raise NotImplementedError(\n            \"subclasses of BaseDatabaseOperations may require a \"\n            \"datetime_cast_date_sql() method.\"\n        )\n\n    def datetime_cast_time_sql(self, sql, params, tzname):\n        \"\"\"\n        Return the SQL to cast a datetime value to time value.\n        \"\"\"\n        raise NotImplementedError(\n            \"subclasses of BaseDatabaseOperations may require a \"\n            \"datetime_cast_time_sql() method\"\n        )\n\n    def datetime_extract_sql(self, lookup_type, sql, params, tzname):\n        \"\"\"\n        Given a lookup_type of 'year', 'month', 'day', 'hour', 'minute', or\n        'second', return the SQL that extracts a value from the given\n        datetime field field_name.\n        \"\"\"\n        raise NotImplementedError(\n            \"subclasses of BaseDatabaseOperations may require a datetime_extract_sql() \"\n            \"method\"\n        )\n\n    def datetime_trunc_sql(self, lookup_type, sql, params, tzname):\n        \"\"\"\n        Given a lookup_type of 'year', 'month', 'day', 'hour', 'minute', or\n        'second', return the SQL that truncates the given datetime field\n        field_name to a datetime object with only the given specificity.\n        \"\"\"\n        raise NotImplementedError(\n            \"subclasses of BaseDatabaseOperations may require a datetime_trunc_sql() \"\n            \"method\"\n        )\n\n    def time_trunc_sql(self, lookup_type, sql, params, tzname=None):\n        \"\"\"\n        Given a lookup_type of 'hour', 'minute' or 'second', return the SQL\n        that truncates the given time or datetime field field_name to a time\n        object with only the given specificity.\n\n        If `tzname` is provided, the given value is truncated in a specific\n        timezone.\n        \"\"\"\n        raise NotImplementedError(\n            \"subclasses of BaseDatabaseOperations may require a time_trunc_sql() method\"\n        )\n\n    def time_extract_sql(self, lookup_type, sql, params):\n        \"\"\"\n        Given a lookup_type of 'hour', 'minute', or 'second', return the SQL\n        that extracts a value from the given time field field_name.\n        \"\"\"\n        return self.date_extract_sql(lookup_type, sql, params)\n\n    def deferrable_sql(self):\n        \"\"\"\n        Return the SQL to make a constraint \"initially deferred\" during a\n        CREATE TABLE statement.\n        \"\"\"\n        return \"\"\n\n    def distinct_sql(self, fields, params):\n        \"\"\"\n        Return an SQL DISTINCT clause which removes duplicate rows from the\n        result set. If any fields are given, only check the given fields for\n        duplicates.\n        \"\"\"\n        if fields:\n            raise NotSupportedError(\n                \"DISTINCT ON fields is not supported by this database backend\"\n            )\n        else:\n            return [\"DISTINCT\"], []\n\n    def fetch_returned_insert_columns(self, cursor, returning_params):\n        \"\"\"\n        Given a cursor object that has just performed an INSERT...RETURNING\n        statement into a table, return the newly created data.\n        \"\"\"\n        return cursor.fetchone()\n\n    def force_group_by(self):\n        \"\"\"\n        Return a GROUP BY clause to use with a HAVING clause when no grouping\n        is specified.\n        \"\"\"\n        return []\n\n    def force_no_ordering(self):\n        \"\"\"\n        Return a list used in the \"ORDER BY\" clause to force no ordering at\n        all. Return an empty list to include nothing in the ordering.\n        \"\"\"\n        return []\n\n    def for_update_sql(self, nowait=False, skip_locked=False, of=(), no_key=False):\n        \"\"\"\n        Return the FOR UPDATE SQL clause to lock rows for an update operation.\n        \"\"\"\n        return \"FOR%s UPDATE%s%s%s\" % (\n            \" NO KEY\" if no_key else \"\",\n            \" OF %s\" % \", \".join(of) if of else \"\",\n            \" NOWAIT\" if nowait else \"\",\n            \" SKIP LOCKED\" if skip_locked else \"\",\n        )\n\n    def _get_limit_offset_params(self, low_mark, high_mark):\n        offset = low_mark or 0\n        if high_mark is not None:\n            return (high_mark - offset), offset\n        elif offset:\n            return self.connection.ops.no_limit_value(), offset\n        return None, offset\n\n    def limit_offset_sql(self, low_mark, high_mark):\n        \"\"\"Return LIMIT/OFFSET SQL clause.\"\"\"\n        limit, offset = self._get_limit_offset_params(low_mark, high_mark)\n        return \" \".join(\n            sql\n            for sql in (\n                (\"LIMIT %d\" % limit) if limit else None,\n                (\"OFFSET %d\" % offset) if offset else None,\n            )\n            if sql\n        )\n\n    def bulk_insert_sql(self, fields, placeholder_rows):\n        placeholder_rows_sql = (\", \".join(row) for row in placeholder_rows)\n        values_sql = \", \".join([f\"({sql})\" for sql in placeholder_rows_sql])\n        return f\"VALUES {values_sql}\"\n\n    def last_executed_query(self, cursor, sql, params):\n        \"\"\"\n        Return a string of the query last executed by the given cursor, with\n        placeholders replaced with actual values.\n\n        `sql` is the raw query containing placeholders and `params` is the\n        sequence of parameters. These are used by default, but this method\n        exists for database backends to provide a better implementation\n        according to their own quoting schemes.\n        \"\"\"\n\n        # Convert params to contain string values.\n        def to_string(s):\n            return force_str(s, strings_only=True, errors=\"replace\")\n\n        if isinstance(params, (list, tuple)):\n            u_params = tuple(to_string(val) for val in params)\n        elif params is None:\n            u_params = ()\n        else:\n            u_params = {to_string(k): to_string(v) for k, v in params.items()}\n\n        return \"QUERY = %r - PARAMS = %r\" % (sql, u_params)\n\n    def last_insert_id(self, cursor, table_name, pk_name):\n        \"\"\"\n        Given a cursor object that has just performed an INSERT statement into\n        a table that has an auto-incrementing ID, return the newly created ID.\n\n        `pk_name` is the name of the primary-key column.\n        \"\"\"\n        return cursor.lastrowid\n\n    def lookup_cast(self, lookup_type, internal_type=None):\n        \"\"\"\n        Return the string to use in a query when performing lookups\n        (\"contains\", \"like\", etc.). It should contain a '%s' placeholder for\n        the column being searched against.\n        \"\"\"\n        return \"%s\"\n\n    def max_in_list_size(self):\n        \"\"\"\n        Return the maximum number of items that can be passed in a single 'IN'\n        list condition, or None if the backend does not impose a limit.\n        \"\"\"\n        return None\n\n    def max_name_length(self):\n        \"\"\"\n        Return the maximum length of table and column names, or None if there\n        is no limit.\n        \"\"\"\n        return None\n\n    def no_limit_value(self):\n        \"\"\"\n        Return the value to use for the LIMIT when we are wanting \"LIMIT\n        infinity\". Return None if the limit clause can be omitted in this case.\n        \"\"\"\n        raise NotImplementedError(\n            \"subclasses of BaseDatabaseOperations may require a no_limit_value() method\"\n        )\n\n    def pk_default_value(self):\n        \"\"\"\n        Return the value to use during an INSERT statement to specify that\n        the field should use its default value.\n        \"\"\"\n        return \"DEFAULT\"\n\n    def prepare_sql_script(self, sql):\n        \"\"\"\n        Take an SQL script that may contain multiple lines and return a list\n        of statements to feed to successive cursor.execute() calls.\n\n        Since few databases are able to process raw SQL scripts in a single\n        cursor.execute() call and PEP 249 doesn't talk about this use case,\n        the default implementation is conservative.\n        \"\"\"\n        return [\n            sqlparse.format(statement, strip_comments=True)\n            for statement in sqlparse.split(sql)\n            if statement\n        ]\n\n    def process_clob(self, value):\n        \"\"\"\n        Return the value of a CLOB column, for backends that return a locator\n        object that requires additional processing.\n        \"\"\"\n        return value\n\n    def return_insert_columns(self, fields):\n        \"\"\"\n        For backends that support returning columns as part of an insert query,\n        return the SQL and params to append to the INSERT query. The returned\n        fragment should contain a format string to hold the appropriate column.\n        \"\"\"\n        pass\n\n    def compiler(self, compiler_name):\n        \"\"\"\n        Return the SQLCompiler class corresponding to the given name,\n        in the namespace corresponding to the `compiler_module` attribute\n        on this backend.\n        \"\"\"\n        if self._cache is None:\n            self._cache = import_module(self.compiler_module)\n        return getattr(self._cache, compiler_name)\n\n    def quote_name(self, name):\n        \"\"\"\n        Return a quoted version of the given table, index, or column name. Do\n        not quote the given name if it's already been quoted.\n        \"\"\"\n        raise NotImplementedError(\n            \"subclasses of BaseDatabaseOperations may require a quote_name() method\"\n        )\n\n    def regex_lookup(self, lookup_type):\n        \"\"\"\n        Return the string to use in a query when performing regular expression\n        lookups (using \"regex\" or \"iregex\"). It should contain a '%s'\n        placeholder for the column being searched against.\n\n        If the feature is not supported (or part of it is not supported), raise\n        NotImplementedError.\n        \"\"\"\n        raise NotImplementedError(\n            \"subclasses of BaseDatabaseOperations may require a regex_lookup() method\"\n        )\n\n    def savepoint_create_sql(self, sid):\n        \"\"\"\n        Return the SQL for starting a new savepoint. Only required if the\n        \"uses_savepoints\" feature is True. The \"sid\" parameter is a string\n        for the savepoint id.\n        \"\"\"\n        return \"SAVEPOINT %s\" % self.quote_name(sid)\n\n    def savepoint_commit_sql(self, sid):\n        \"\"\"\n        Return the SQL for committing the given savepoint.\n        \"\"\"\n        return \"RELEASE SAVEPOINT %s\" % self.quote_name(sid)\n\n    def savepoint_rollback_sql(self, sid):\n        \"\"\"\n        Return the SQL for rolling back the given savepoint.\n        \"\"\"\n        return \"ROLLBACK TO SAVEPOINT %s\" % self.quote_name(sid)\n\n    def set_time_zone_sql(self):\n        \"\"\"\n        Return the SQL that will set the connection's time zone.\n\n        Return '' if the backend doesn't support time zones.\n        \"\"\"\n        return \"\"\n\n    def sql_flush(self, style, tables, *, reset_sequences=False, allow_cascade=False):\n        \"\"\"\n        Return a list of SQL statements required to remove all data from\n        the given database tables (without actually removing the tables\n        themselves).\n\n        The `style` argument is a Style object as returned by either\n        color_style() or no_style() in django.core.management.color.\n\n        If `reset_sequences` is True, the list includes SQL statements required\n        to reset the sequences.\n\n        The `allow_cascade` argument determines whether truncation may cascade\n        to tables with foreign keys pointing the tables being truncated.\n        PostgreSQL requires a cascade even if these tables are empty.\n        \"\"\"\n        raise NotImplementedError(\n            \"subclasses of BaseDatabaseOperations must provide an sql_flush() method\"\n        )\n\n    def execute_sql_flush(self, sql_list):\n        \"\"\"Execute a list of SQL statements to flush the database.\"\"\"\n        with transaction.atomic(\n            using=self.connection.alias,\n            savepoint=self.connection.features.can_rollback_ddl,\n        ):\n            with self.connection.cursor() as cursor:\n                for sql in sql_list:\n                    cursor.execute(sql)\n\n    def sequence_reset_by_name_sql(self, style, sequences):\n        \"\"\"\n        Return a list of the SQL statements required to reset sequences\n        passed in `sequences`.\n\n        The `style` argument is a Style object as returned by either\n        color_style() or no_style() in django.core.management.color.\n        \"\"\"\n        return []\n\n    def sequence_reset_sql(self, style, model_list):\n        \"\"\"\n        Return a list of the SQL statements required to reset sequences for\n        the given models.\n\n        The `style` argument is a Style object as returned by either\n        color_style() or no_style() in django.core.management.color.\n        \"\"\"\n        return []  # No sequence reset required by default.\n\n    def start_transaction_sql(self):\n        \"\"\"Return the SQL statement required to start a transaction.\"\"\"\n        return \"BEGIN;\"\n\n    def end_transaction_sql(self, success=True):\n        \"\"\"Return the SQL statement required to end a transaction.\"\"\"\n        if not success:\n            return \"ROLLBACK;\"\n        return \"COMMIT;\"\n\n    def tablespace_sql(self, tablespace, inline=False):\n        \"\"\"\n        Return the SQL that will be used in a query to define the tablespace.\n\n        Return '' if the backend doesn't support tablespaces.\n\n        If `inline` is True, append the SQL to a row; otherwise append it to\n        the entire CREATE TABLE or CREATE INDEX statement.\n        \"\"\"\n        return \"\"\n\n    def prep_for_like_query(self, x):\n        \"\"\"Prepare a value for use in a LIKE query.\"\"\"\n        return str(x).replace(\"\\\\\", \"\\\\\\\\\").replace(\"%\", r\"\\%\").replace(\"_\", r\"\\_\")\n\n    # Same as prep_for_like_query(), but called for \"iexact\" matches, which\n    # need not necessarily be implemented using \"LIKE\" in the backend.\n    prep_for_iexact_query = prep_for_like_query\n\n    def validate_autopk_value(self, value):\n        \"\"\"\n        Certain backends do not accept some values for \"serial\" fields\n        (for example zero in MySQL). Raise a ValueError if the value is\n        invalid, otherwise return the validated value.\n        \"\"\"\n        return value\n\n    def adapt_unknown_value(self, value):\n        \"\"\"\n        Transform a value to something compatible with the backend driver.\n\n        This method only depends on the type of the value. It's designed for\n        cases where the target type isn't known, such as .raw() SQL queries.\n        As a consequence it may not work perfectly in all circumstances.\n        \"\"\"\n        if isinstance(value, datetime.datetime):  # must be before date\n            return self.adapt_datetimefield_value(value)\n        elif isinstance(value, datetime.date):\n            return self.adapt_datefield_value(value)\n        elif isinstance(value, datetime.time):\n            return self.adapt_timefield_value(value)\n        elif isinstance(value, decimal.Decimal):\n            return self.adapt_decimalfield_value(value)\n        else:\n            return value\n\n    def adapt_integerfield_value(self, value, internal_type):\n        return value\n\n    def adapt_datefield_value(self, value):\n        \"\"\"\n        Transform a date value to an object compatible with what is expected\n        by the backend driver for date columns.\n        \"\"\"\n        if value is None:\n            return None\n        return str(value)\n\n    def adapt_datetimefield_value(self, value):\n        \"\"\"\n        Transform a datetime value to an object compatible with what is expected\n        by the backend driver for datetime columns.\n        \"\"\"\n        if value is None:\n            return None\n        return str(value)\n\n    def adapt_timefield_value(self, value):\n        \"\"\"\n        Transform a time value to an object compatible with what is expected\n        by the backend driver for time columns.\n        \"\"\"\n        if value is None:\n            return None\n        if timezone.is_aware(value):\n            raise ValueError(\"Django does not support timezone-aware times.\")\n        return str(value)\n\n    def adapt_decimalfield_value(self, value, max_digits=None, decimal_places=None):\n        \"\"\"\n        Transform a decimal.Decimal value to an object compatible with what is\n        expected by the backend driver for decimal (numeric) columns.\n        \"\"\"\n        return value\n\n    def adapt_ipaddressfield_value(self, value):\n        \"\"\"\n        Transform a string representation of an IP address into the expected\n        type for the backend driver.\n        \"\"\"\n        return value or None\n\n    def adapt_json_value(self, value, encoder):\n        return json.dumps(value, cls=encoder)\n\n    def year_lookup_bounds_for_date_field(self, value, iso_year=False):\n        \"\"\"\n        Return a two-elements list with the lower and upper bound to be used\n        with a BETWEEN operator to query a DateField value using a year\n        lookup.\n\n        `value` is an int, containing the looked-up year.\n        If `iso_year` is True, return bounds for ISO-8601 week-numbering years.\n        \"\"\"\n        if iso_year:\n            first = datetime.date.fromisocalendar(value, 1, 1)\n            second = datetime.date.fromisocalendar(\n                value + 1, 1, 1\n            ) - datetime.timedelta(days=1)\n        else:\n            first = datetime.date(value, 1, 1)\n            second = datetime.date(value, 12, 31)\n        first = self.adapt_datefield_value(first)\n        second = self.adapt_datefield_value(second)\n        return [first, second]\n\n    def year_lookup_bounds_for_datetime_field(self, value, iso_year=False):\n        \"\"\"\n        Return a two-elements list with the lower and upper bound to be used\n        with a BETWEEN operator to query a DateTimeField value using a year\n        lookup.\n\n        `value` is an int, containing the looked-up year.\n        If `iso_year` is True, return bounds for ISO-8601 week-numbering years.\n        \"\"\"\n        if iso_year:\n            first = datetime.datetime.fromisocalendar(value, 1, 1)\n            second = datetime.datetime.fromisocalendar(\n                value + 1, 1, 1\n            ) - datetime.timedelta(microseconds=1)\n        else:\n            first = datetime.datetime(value, 1, 1)\n            second = datetime.datetime(value, 12, 31, 23, 59, 59, 999999)\n        if settings.USE_TZ:\n            tz = timezone.get_current_timezone()\n            first = timezone.make_aware(first, tz)\n            second = timezone.make_aware(second, tz)\n        first = self.adapt_datetimefield_value(first)\n        second = self.adapt_datetimefield_value(second)\n        return [first, second]\n\n    def get_db_converters(self, expression):\n        \"\"\"\n        Return a list of functions needed to convert field data.\n\n        Some field types on some backends do not provide data in the correct\n        format, this is the hook for converter functions.\n        \"\"\"\n        return []\n\n    def convert_durationfield_value(self, value, expression, connection):\n        if value is not None:\n            return datetime.timedelta(0, 0, value)\n\n    def check_expression_support(self, expression):\n        \"\"\"\n        Check that the backend supports the provided expression.\n\n        This is used on specific backends to rule out known expressions\n        that have problematic or nonexistent implementations. If the\n        expression has a known problem, the backend should raise\n        NotSupportedError.\n        \"\"\"\n        pass\n\n    def conditional_expression_supported_in_where_clause(self, expression):\n        \"\"\"\n        Return True, if the conditional expression is supported in the WHERE\n        clause.\n        \"\"\"\n        return True\n\n    def combine_expression(self, connector, sub_expressions):\n        \"\"\"\n        Combine a list of subexpressions into a single expression, using\n        the provided connecting operator. This is required because operators\n        can vary between backends (e.g., Oracle with %% and &) and between\n        subexpression types (e.g., date expressions).\n        \"\"\"\n        conn = \" %s \" % connector\n        return conn.join(sub_expressions)\n\n    def combine_duration_expression(self, connector, sub_expressions):\n        return self.combine_expression(connector, sub_expressions)\n\n    def binary_placeholder_sql(self, value):\n        \"\"\"\n        Some backends require special syntax to insert binary content (MySQL\n        for example uses '_binary %s').\n        \"\"\"\n        return \"%s\"\n\n    def modify_insert_params(self, placeholder, params):\n        \"\"\"\n        Allow modification of insert parameters. Needed for Oracle Spatial\n        backend due to #10888.\n        \"\"\"\n        return params\n\n    def integer_field_range(self, internal_type):\n        \"\"\"\n        Given an integer field internal type (e.g. 'PositiveIntegerField'),\n        return a tuple of the (min_value, max_value) form representing the\n        range of the column type bound to the field.\n        \"\"\"\n        return self.integer_field_ranges[internal_type]\n\n    def subtract_temporals(self, internal_type, lhs, rhs):\n        if self.connection.features.supports_temporal_subtraction:\n            lhs_sql, lhs_params = lhs\n            rhs_sql, rhs_params = rhs\n            return \"(%s - %s)\" % (lhs_sql, rhs_sql), (*lhs_params, *rhs_params)\n        raise NotSupportedError(\n            \"This backend does not support %s subtraction.\" % internal_type\n        )\n\n    def window_frame_value(self, value):\n        if isinstance(value, int):\n            if value == 0:\n                return self.CURRENT_ROW\n            elif value < 0:\n                return \"%d %s\" % (abs(value), self.PRECEDING)\n            else:\n                return \"%d %s\" % (value, self.FOLLOWING)\n\n    def window_frame_rows_start_end(self, start=None, end=None):\n        \"\"\"\n        Return SQL for start and end points in an OVER clause window frame.\n        \"\"\"\n        if isinstance(start, int) and isinstance(end, int) and start > end:\n            raise ValueError(\"start cannot be greater than end.\")\n        if start is not None and not isinstance(start, int):\n            raise ValueError(\n                f\"start argument must be an integer, zero, or None, but got '{start}'.\"\n            )\n        if end is not None and not isinstance(end, int):\n            raise ValueError(\n                f\"end argument must be an integer, zero, or None, but got '{end}'.\"\n            )\n        start_ = self.window_frame_value(start) or self.UNBOUNDED_PRECEDING\n        end_ = self.window_frame_value(end) or self.UNBOUNDED_FOLLOWING\n        return start_, end_\n\n    def window_frame_range_start_end(self, start=None, end=None):\n        if (start is not None and not isinstance(start, int)) or (\n            isinstance(start, int) and start > 0\n        ):\n            raise ValueError(\n                \"start argument must be a negative integer, zero, or None, \"\n                \"but got '%s'.\" % start\n            )\n        if (end is not None and not isinstance(end, int)) or (\n            isinstance(end, int) and end < 0\n        ):\n            raise ValueError(\n                \"end argument must be a positive integer, zero, or None, but got '%s'.\"\n                % end\n            )\n        start_ = self.window_frame_value(start) or self.UNBOUNDED_PRECEDING\n        end_ = self.window_frame_value(end) or self.UNBOUNDED_FOLLOWING\n        features = self.connection.features\n        if features.only_supports_unbounded_with_preceding_and_following and (\n            (start and start < 0) or (end and end > 0)\n        ):\n            raise NotSupportedError(\n                \"%s only supports UNBOUNDED together with PRECEDING and \"\n                \"FOLLOWING.\" % self.connection.display_name\n            )\n        return start_, end_\n\n    def explain_query_prefix(self, format=None, **options):\n        if not self.connection.features.supports_explaining_query_execution:\n            raise NotSupportedError(\n                \"This backend does not support explaining query execution.\"\n            )\n        if format:\n            supported_formats = self.connection.features.supported_explain_formats\n            normalized_format = format.upper()\n            if normalized_format not in supported_formats:\n                msg = \"%s is not a recognized format.\" % normalized_format\n                if supported_formats:\n                    msg += \" Allowed formats: %s\" % \", \".join(sorted(supported_formats))\n                else:\n                    msg += (\n                        f\" {self.connection.display_name} does not support any formats.\"\n                    )\n                raise ValueError(msg)\n        if options:\n            raise ValueError(\"Unknown options: %s\" % \", \".join(sorted(options.keys())))\n        return self.explain_prefix\n\n    def insert_statement(self, on_conflict=None):\n        return \"INSERT INTO\"\n\n    def on_conflict_suffix_sql(self, fields, on_conflict, update_fields, unique_fields):\n        return \"\"\n\n    def prepare_join_on_clause(self, lhs_table, lhs_field, rhs_table, rhs_field):\n        lhs_expr = Col(lhs_table, lhs_field)\n        rhs_expr = Col(rhs_table, rhs_field)\n\n        return lhs_expr, rhs_expr\n\n    def format_debug_sql(self, sql):\n        # Hook for backends (e.g. NoSQL) to customize formatting.\n        return sqlparse.format(sql, reindent=True, keyword_case=\"upper\")"}],"ground_truth":null,"score":null},
{"question":"What is the purpose of the `supports_unlimited_charfield` attribute in the `DatabaseFeatures`, and how is it intended to be used?","answer":"","relative_code_list":[{"start_line":9,"end_line":171,"belongs_to":{"file_name":"features.py","upper_path":"../django/django/db/backends/postgresql","module":"postgresql","define_class":["DatabaseFeatures"],"imports":["operator","django.db.DataError","django.db.InterfaceError","django.db.backends.base.features.BaseDatabaseFeatures","django.db.backends.postgresql.psycopg_any.is_psycopg3","django.utils.functional.cached_property"]},"relative_function":[],"code":"class DatabaseFeatures(BaseDatabaseFeatures):\n    minimum_database_version = (14,)\n    allows_group_by_selected_pks = True\n    can_return_columns_from_insert = True\n    can_return_rows_from_bulk_insert = True\n    has_real_datatype = True\n    has_native_uuid_field = True\n    has_native_duration_field = True\n    has_native_json_field = True\n    can_defer_constraint_checks = True\n    has_select_for_update = True\n    has_select_for_update_nowait = True\n    has_select_for_update_of = True\n    has_select_for_update_skip_locked = True\n    has_select_for_no_key_update = True\n    can_release_savepoints = True\n    supports_comments = True\n    supports_tablespaces = True\n    supports_transactions = True\n    can_introspect_materialized_views = True\n    can_distinct_on_fields = True\n    can_rollback_ddl = True\n    schema_editor_uses_clientside_param_binding = True\n    supports_combined_alters = True\n    nulls_order_largest = True\n    closed_cursor_error_class = InterfaceError\n    greatest_least_ignores_nulls = True\n    can_clone_databases = True\n    supports_temporal_subtraction = True\n    supports_slicing_ordering_in_compound = True\n    create_test_procedure_without_params_sql = \"\"\"\n        CREATE FUNCTION test_procedure () RETURNS void AS $$\n        DECLARE\n            V_I INTEGER;\n        BEGIN\n            V_I := 1;\n        END;\n    $$ LANGUAGE plpgsql;\"\"\"\n    create_test_procedure_with_int_param_sql = \"\"\"\n        CREATE FUNCTION test_procedure (P_I INTEGER) RETURNS void AS $$\n        DECLARE\n            V_I INTEGER;\n        BEGIN\n            V_I := P_I;\n        END;\n    $$ LANGUAGE plpgsql;\"\"\"\n    create_test_table_with_composite_primary_key = \"\"\"\n        CREATE TABLE test_table_composite_pk (\n            column_1 INTEGER NOT NULL,\n            column_2 INTEGER NOT NULL,\n            PRIMARY KEY(column_1, column_2)\n        )\n    \"\"\"\n    requires_casted_case_in_updates = True\n    supports_over_clause = True\n    supports_frame_exclusion = True\n    only_supports_unbounded_with_preceding_and_following = True\n    supports_aggregate_filter_clause = True\n    supports_aggregate_order_by_clause = True\n    supported_explain_formats = {\"JSON\", \"TEXT\", \"XML\", \"YAML\"}\n    supports_deferrable_unique_constraints = True\n    has_json_operators = True\n    json_key_contains_list_matching_requires_list = True\n    supports_update_conflicts = True\n    supports_update_conflicts_with_target = True\n    supports_covering_indexes = True\n    supports_stored_generated_columns = True\n    supports_virtual_generated_columns = False\n    can_rename_index = True\n    test_collations = {\n        \"deterministic\": \"C\",\n        \"non_default\": \"sv-x-icu\",\n        \"swedish_ci\": \"sv-x-icu\",\n        \"virtual\": \"sv-x-icu\",\n    }\n    test_now_utc_template = \"STATEMENT_TIMESTAMP() AT TIME ZONE 'UTC'\"\n    insert_test_table_with_defaults = \"INSERT INTO {} DEFAULT VALUES\"\n\n    @cached_property\n    def django_test_skips(self):\n        skips = {\n            \"opclasses are PostgreSQL only.\": {\n                \"indexes.tests.SchemaIndexesNotPostgreSQLTests.\"\n                \"test_create_index_ignores_opclasses\",\n            },\n            \"PostgreSQL requires casting to text.\": {\n                \"lookup.tests.LookupTests.test_textfield_exact_null\",\n            },\n        }\n        if self.connection.settings_dict[\"OPTIONS\"].get(\"pool\"):\n            skips.update(\n                {\n                    \"Pool does implicit health checks\": {\n                        \"backends.base.test_base.ConnectionHealthChecksTests.\"\n                        \"test_health_checks_enabled\",\n                        \"backends.base.test_base.ConnectionHealthChecksTests.\"\n                        \"test_set_autocommit_health_checks_enabled\",\n                    },\n                }\n            )\n        if self.uses_server_side_binding:\n            skips.update(\n                {\n                    \"The actual query cannot be determined for server side bindings\": {\n                        \"backends.base.test_base.ExecuteWrapperTests.\"\n                        \"test_wrapper_debug\",\n                    }\n                },\n            )\n        return skips\n\n    @cached_property\n    def django_test_expected_failures(self):\n        expected_failures = set()\n        if self.uses_server_side_binding:\n            expected_failures.update(\n                {\n                    # Parameters passed to expressions in SELECT and GROUP BY\n                    # clauses are not recognized as the same values when using\n                    # server-side binding cursors (#34255).\n                    \"aggregation.tests.AggregateTestCase.\"\n                    \"test_group_by_nested_expression_with_params\",\n                }\n            )\n        return expected_failures\n\n    @cached_property\n    def uses_server_side_binding(self):\n        options = self.connection.settings_dict[\"OPTIONS\"]\n        return is_psycopg3 and options.get(\"server_side_binding\") is True\n\n    @cached_property\n    def prohibits_null_characters_in_text_exception(self):\n        if is_psycopg3:\n            return DataError, \"PostgreSQL text fields cannot contain NUL (0x00) bytes\"\n        else:\n            return ValueError, \"A string literal cannot contain NUL (0x00) characters.\"\n\n    @cached_property\n    def introspected_field_types(self):\n        return {\n            **super().introspected_field_types,\n            \"PositiveBigIntegerField\": \"BigIntegerField\",\n            \"PositiveIntegerField\": \"IntegerField\",\n            \"PositiveSmallIntegerField\": \"SmallIntegerField\",\n        }\n\n    @cached_property\n    def is_postgresql_15(self):\n        return self.connection.pg_version >= 150000\n\n    @cached_property\n    def is_postgresql_16(self):\n        return self.connection.pg_version >= 160000\n\n    @cached_property\n    def is_postgresql_17(self):\n        return self.connection.pg_version >= 170000\n\n    supports_unlimited_charfield = True\n    supports_nulls_distinct_unique_constraints = property(\n        operator.attrgetter(\"is_postgresql_15\")\n    )"}],"ground_truth":null,"score":null},
{"question":"Where can I find the implementation of the `quote_value` method in the `BaseDatabaseSchemaEditor`?","answer":"","relative_code_list":[{"start_line":77,"end_line":2046,"belongs_to":{"file_name":"schema.py","upper_path":"../django/django/db/backends/base","module":"base","define_class":["BaseDatabaseSchemaEditor"],"imports":["logging","operator","datetime.datetime","django.conf.settings","django.core.exceptions.FieldError","django.db.backends.ddl_references.Columns","django.db.backends.ddl_references.Expressions","django.db.backends.ddl_references.ForeignKeyName","django.db.backends.ddl_references.IndexName","django.db.backends.ddl_references.Statement","django.db.backends.ddl_references.Table","django.db.backends.utils.names_digest","django.db.backends.utils.split_identifier","django.db.backends.utils.truncate_name","django.db.models.Deferrable","django.db.models.Index","django.db.models.fields.composite.CompositePrimaryKey","django.db.models.sql.Query","django.db.transaction.TransactionManagementError","django.db.transaction.atomic","django.utils.timezone","django.db.models.expressions.Value"]},"relative_function":[],"code":"class BaseDatabaseSchemaEditor:\n    \"\"\"\n    This class and its subclasses are responsible for emitting schema-changing\n    statements to the databases - model creation/removal/alteration, field\n    renaming, index fiddling, and so on.\n    \"\"\"\n\n    # Overrideable SQL templates\n    sql_create_table = \"CREATE TABLE %(table)s (%(definition)s)\"\n    sql_rename_table = \"ALTER TABLE %(old_table)s RENAME TO %(new_table)s\"\n    sql_retablespace_table = \"ALTER TABLE %(table)s SET TABLESPACE %(new_tablespace)s\"\n    sql_delete_table = \"DROP TABLE %(table)s CASCADE\"\n\n    sql_create_column = \"ALTER TABLE %(table)s ADD COLUMN %(column)s %(definition)s\"\n    sql_alter_column = \"ALTER TABLE %(table)s %(changes)s\"\n    sql_alter_column_type = \"ALTER COLUMN %(column)s TYPE %(type)s%(collation)s\"\n    sql_alter_column_null = \"ALTER COLUMN %(column)s DROP NOT NULL\"\n    sql_alter_column_not_null = \"ALTER COLUMN %(column)s SET NOT NULL\"\n    sql_alter_column_default = \"ALTER COLUMN %(column)s SET DEFAULT %(default)s\"\n    sql_alter_column_no_default = \"ALTER COLUMN %(column)s DROP DEFAULT\"\n    sql_alter_column_no_default_null = sql_alter_column_no_default\n    sql_delete_column = \"ALTER TABLE %(table)s DROP COLUMN %(column)s CASCADE\"\n    sql_rename_column = (\n        \"ALTER TABLE %(table)s RENAME COLUMN %(old_column)s TO %(new_column)s\"\n    )\n    sql_update_with_default = (\n        \"UPDATE %(table)s SET %(column)s = %(default)s WHERE %(column)s IS NULL\"\n    )\n\n    sql_unique_constraint = \"UNIQUE (%(columns)s)%(deferrable)s\"\n    sql_check_constraint = \"CHECK (%(check)s)\"\n    sql_delete_constraint = \"ALTER TABLE %(table)s DROP CONSTRAINT %(name)s\"\n    sql_constraint = \"CONSTRAINT %(name)s %(constraint)s\"\n    sql_pk_constraint = \"PRIMARY KEY (%(columns)s)\"\n\n    sql_create_check = \"ALTER TABLE %(table)s ADD CONSTRAINT %(name)s CHECK (%(check)s)\"\n    sql_delete_check = sql_delete_constraint\n\n    sql_create_unique = (\n        \"ALTER TABLE %(table)s ADD CONSTRAINT %(name)s \"\n        \"UNIQUE%(nulls_distinct)s (%(columns)s)%(deferrable)s\"\n    )\n    sql_delete_unique = sql_delete_constraint\n\n    sql_create_fk = (\n        \"ALTER TABLE %(table)s ADD CONSTRAINT %(name)s FOREIGN KEY (%(column)s) \"\n        \"REFERENCES %(to_table)s (%(to_column)s)%(deferrable)s\"\n    )\n    sql_create_inline_fk = None\n    sql_create_column_inline_fk = None\n    sql_delete_fk = sql_delete_constraint\n\n    sql_create_index = (\n        \"CREATE INDEX %(name)s ON %(table)s \"\n        \"(%(columns)s)%(include)s%(extra)s%(condition)s\"\n    )\n    sql_create_unique_index = (\n        \"CREATE UNIQUE INDEX %(name)s ON %(table)s \"\n        \"(%(columns)s)%(include)s%(nulls_distinct)s%(condition)s\"\n    )\n    sql_rename_index = \"ALTER INDEX %(old_name)s RENAME TO %(new_name)s\"\n    sql_delete_index = \"DROP INDEX %(name)s\"\n\n    sql_create_pk = (\n        \"ALTER TABLE %(table)s ADD CONSTRAINT %(name)s PRIMARY KEY (%(columns)s)\"\n    )\n    sql_delete_pk = sql_delete_constraint\n\n    sql_delete_procedure = \"DROP PROCEDURE %(procedure)s\"\n\n    sql_alter_table_comment = \"COMMENT ON TABLE %(table)s IS %(comment)s\"\n    sql_alter_column_comment = \"COMMENT ON COLUMN %(table)s.%(column)s IS %(comment)s\"\n\n    def __init__(self, connection, collect_sql=False, atomic=True):\n        self.connection = connection\n        self.collect_sql = collect_sql\n        if self.collect_sql:\n            self.collected_sql = []\n        self.atomic_migration = self.connection.features.can_rollback_ddl and atomic\n\n    # State-managing methods\n\n    def __enter__(self):\n        self.deferred_sql = []\n        if self.atomic_migration:\n            self.atomic = atomic(self.connection.alias)\n            self.atomic.__enter__()\n        return self\n\n    def __exit__(self, exc_type, exc_value, traceback):\n        if exc_type is None:\n            for sql in self.deferred_sql:\n                self.execute(sql, None)\n        if self.atomic_migration:\n            self.atomic.__exit__(exc_type, exc_value, traceback)\n\n    # Core utility functions\n\n    def execute(self, sql, params=()):\n        \"\"\"Execute the given SQL statement, with optional parameters.\"\"\"\n        # Don't perform the transactional DDL check if SQL is being collected\n        # as it's not going to be executed anyway.\n        if (\n            not self.collect_sql\n            and self.connection.in_atomic_block\n            and not self.connection.features.can_rollback_ddl\n        ):\n            raise TransactionManagementError(\n                \"Executing DDL statements while in a transaction on databases \"\n                \"that can't perform a rollback is prohibited.\"\n            )\n        # Account for non-string statement objects.\n        sql = str(sql)\n        # Log the command we're running, then run it\n        logger.debug(\n            \"%s; (params %r)\", sql, params, extra={\"params\": params, \"sql\": sql}\n        )\n        if self.collect_sql:\n            ending = \"\" if sql.rstrip().endswith(\";\") else \";\"\n            if params is not None:\n                self.collected_sql.append(\n                    (sql % tuple(map(self.quote_value, params))) + ending\n                )\n            else:\n                self.collected_sql.append(sql + ending)\n        else:\n            with self.connection.cursor() as cursor:\n                cursor.execute(sql, params)\n\n    def quote_name(self, name):\n        return self.connection.ops.quote_name(name)\n\n    def table_sql(self, model):\n        \"\"\"Take a model and return its table definition.\"\"\"\n        # Add any unique_togethers (always deferred, as some fields might be\n        # created afterward, like geometry fields with some backends).\n        for field_names in model._meta.unique_together:\n            fields = [model._meta.get_field(field) for field in field_names]\n            self.deferred_sql.append(self._create_unique_sql(model, fields))\n        # Create column SQL, add FK deferreds if needed.\n        column_sqls = []\n        params = []\n        for field in model._meta.local_fields:\n            # SQL.\n            definition, extra_params = self.column_sql(model, field)\n            if definition is None:\n                continue\n            # Check constraints can go on the column SQL here.\n            db_params = field.db_parameters(connection=self.connection)\n            if db_params[\"check\"]:\n                definition += \" \" + self.sql_check_constraint % db_params\n            # Autoincrement SQL (for backends with inline variant).\n            col_type_suffix = field.db_type_suffix(connection=self.connection)\n            if col_type_suffix:\n                definition += \" %s\" % col_type_suffix\n            params.extend(extra_params)\n            # FK.\n            if field.remote_field and field.db_constraint:\n                to_table = field.remote_field.model._meta.db_table\n                to_column = field.remote_field.model._meta.get_field(\n                    field.remote_field.field_name\n                ).column\n                if self.sql_create_inline_fk:\n                    definition += \" \" + self.sql_create_inline_fk % {\n                        \"to_table\": self.quote_name(to_table),\n                        \"to_column\": self.quote_name(to_column),\n                    }\n                elif self.connection.features.supports_foreign_keys:\n                    self.deferred_sql.append(\n                        self._create_fk_sql(\n                            model, field, \"_fk_%(to_table)s_%(to_column)s\"\n                        )\n                    )\n            # Add the SQL to our big list.\n            column_sqls.append(\n                \"%s %s\"\n                % (\n                    self.quote_name(field.column),\n                    definition,\n                )\n            )\n            # Autoincrement SQL (for backends with post table definition\n            # variant).\n            if field.get_internal_type() in (\n                \"AutoField\",\n                \"BigAutoField\",\n                \"SmallAutoField\",\n            ):\n                autoinc_sql = self.connection.ops.autoinc_sql(\n                    model._meta.db_table, field.column\n                )\n                if autoinc_sql:\n                    self.deferred_sql.extend(autoinc_sql)\n        # The BaseConstraint DDL creation methods such as constraint_sql(),\n        # create_sql(), and delete_sql(), were not designed in a way that\n        # separate SQL from parameters which make their generated SQL unfit to\n        # be used in a context where parametrization is delegated to the\n        # backend.\n        constraint_sqls = []\n        if params:\n            # If parameters are present (e.g. a DEFAULT clause on backends that\n            # allow parametrization) defer constraint creation so they are not\n            # mixed with SQL meant to be parametrized.\n            for constraint in model._meta.constraints:\n                self.deferred_sql.append(constraint.create_sql(model, self))\n        else:\n            constraint_sqls.extend(\n                constraint.constraint_sql(model, self)\n                for constraint in model._meta.constraints\n            )\n\n        pk = model._meta.pk\n        if isinstance(pk, CompositePrimaryKey):\n            constraint_sqls.append(self._pk_constraint_sql(pk.columns))\n\n        sql = self.sql_create_table % {\n            \"table\": self.quote_name(model._meta.db_table),\n            \"definition\": \", \".join(\n                str(statement)\n                for statement in (*column_sqls, *constraint_sqls)\n                if statement\n            ),\n        }\n        if model._meta.db_tablespace:\n            tablespace_sql = self.connection.ops.tablespace_sql(\n                model._meta.db_tablespace\n            )\n            if tablespace_sql:\n                sql += \" \" + tablespace_sql\n        return sql, params\n\n    # Field <-> database mapping functions\n\n    def _iter_column_sql(\n        self, column_db_type, params, model, field, field_db_params, include_default\n    ):\n        yield column_db_type\n        if collation := field_db_params.get(\"collation\"):\n            yield self._collate_sql(collation)\n        # Work out nullability.\n        null = field.null\n        # Add database default.\n        if field.has_db_default():\n            default_sql, default_params = self.db_default_sql(field)\n            yield f\"DEFAULT {default_sql}\"\n            params.extend(default_params)\n            include_default = False\n        # Include a default value, if requested.\n        include_default = (\n            include_default\n            and not self.skip_default(field)\n            and\n            # Don't include a default value if it's a nullable field and the\n            # default cannot be dropped in the ALTER COLUMN statement (e.g.\n            # MySQL longtext and longblob).\n            not (null and self.skip_default_on_alter(field))\n        )\n        if include_default:\n            default_value = self.effective_default(field)\n            if default_value is not None:\n                column_default = \"DEFAULT \" + self._column_default_sql(field)\n                if self.connection.features.requires_literal_defaults:\n                    # Some databases can't take defaults as a parameter\n                    # (Oracle, SQLite). If this is the case, the individual\n                    # schema backend should implement prepare_default().\n                    yield column_default % self.prepare_default(default_value)\n                else:\n                    yield column_default\n                    params.append(default_value)\n        # Oracle treats the empty string ('') as null, so coerce the null\n        # option whenever '' is a possible value.\n        if (\n            field.empty_strings_allowed\n            and not field.primary_key\n            and self.connection.features.interprets_empty_strings_as_nulls\n        ):\n            null = True\n        if field.generated:\n            generated_sql, generated_params = self._column_generated_sql(field)\n            params.extend(generated_params)\n            yield generated_sql\n        elif not null:\n            yield \"NOT NULL\"\n        elif not self.connection.features.implied_column_null:\n            yield \"NULL\"\n        if field.primary_key:\n            yield \"PRIMARY KEY\"\n        elif field.unique:\n            yield \"UNIQUE\"\n        # Optionally add the tablespace if it's an implicitly indexed column.\n        tablespace = field.db_tablespace or model._meta.db_tablespace\n        if (\n            tablespace\n            and self.connection.features.supports_tablespaces\n            and field.unique\n        ):\n            yield self.connection.ops.tablespace_sql(tablespace, inline=True)\n        if self.connection.features.supports_comments_inline and field.db_comment:\n            yield self._comment_sql(field.db_comment)\n\n    def column_sql(self, model, field, include_default=False):\n        \"\"\"\n        Return the column definition for a field. The field must already have\n        had set_attributes_from_name() called.\n        \"\"\"\n        # Get the column's type and use that as the basis of the SQL.\n        field_db_params = field.db_parameters(connection=self.connection)\n        column_db_type = field_db_params[\"type\"]\n        # Check for fields that aren't actually columns (e.g. M2M).\n        if column_db_type is None:\n            return None, None\n        params = []\n        return (\n            \" \".join(\n                # This appends to the params being returned.\n                self._iter_column_sql(\n                    column_db_type,\n                    params,\n                    model,\n                    field,\n                    field_db_params,\n                    include_default,\n                )\n            ),\n            params,\n        )\n\n    def skip_default(self, field):\n        \"\"\"\n        Some backends don't accept default values for certain columns types\n        (i.e. MySQL longtext and longblob).\n        \"\"\"\n        return False\n\n    def skip_default_on_alter(self, field):\n        \"\"\"\n        Some backends don't accept default values for certain columns types\n        (i.e. MySQL longtext and longblob) in the ALTER COLUMN statement.\n        \"\"\"\n        return False\n\n    def prepare_default(self, value):\n        \"\"\"\n        Only used for backends which have requires_literal_defaults feature\n        \"\"\"\n        raise NotImplementedError(\n            \"subclasses of BaseDatabaseSchemaEditor for backends which have \"\n            \"requires_literal_defaults must provide a prepare_default() method\"\n        )\n\n    def _column_default_sql(self, field):\n        \"\"\"\n        Return the SQL to use in a DEFAULT clause. The resulting string should\n        contain a '%s' placeholder for a default value.\n        \"\"\"\n        return \"%s\"\n\n    def db_default_sql(self, field):\n        \"\"\"Return the sql and params for the field's database default.\"\"\"\n        from django.db.models.expressions import Value\n\n        db_default = field._db_default_expression\n        sql = (\n            self._column_default_sql(field) if isinstance(db_default, Value) else \"(%s)\"\n        )\n        query = Query(model=field.model)\n        compiler = query.get_compiler(connection=self.connection)\n        default_sql, params = compiler.compile(db_default)\n        if self.connection.features.requires_literal_defaults:\n            # Some databases don't support parameterized defaults (Oracle,\n            # SQLite). If this is the case, the individual schema backend\n            # should implement prepare_default().\n            default_sql %= tuple(self.prepare_default(p) for p in params)\n            params = []\n        return sql % default_sql, params\n\n    def _column_generated_sql(self, field):\n        \"\"\"Return the SQL to use in a GENERATED ALWAYS clause.\"\"\"\n        expression_sql, params = field.generated_sql(self.connection)\n        persistency_sql = \"STORED\" if field.db_persist else \"VIRTUAL\"\n        if self.connection.features.requires_literal_defaults:\n            expression_sql = expression_sql % tuple(self.quote_value(p) for p in params)\n            params = ()\n        return f\"GENERATED ALWAYS AS ({expression_sql}) {persistency_sql}\", params\n\n    @staticmethod\n    def _effective_default(field):\n        # This method allows testing its logic without a connection.\n        if field.has_default():\n            default = field.get_default()\n        elif field.generated:\n            default = None\n        elif not field.null and field.blank and field.empty_strings_allowed:\n            if field.get_internal_type() == \"BinaryField\":\n                default = b\"\"\n            else:\n                default = \"\"\n        elif getattr(field, \"auto_now\", False) or getattr(field, \"auto_now_add\", False):\n            internal_type = field.get_internal_type()\n            if internal_type == \"DateTimeField\":\n                default = timezone.now()\n            else:\n                default = datetime.now()\n                if internal_type == \"DateField\":\n                    default = default.date()\n                elif internal_type == \"TimeField\":\n                    default = default.time()\n        else:\n            default = None\n        return default\n\n    def effective_default(self, field):\n        \"\"\"Return a field's effective database default value.\"\"\"\n        return field.get_db_prep_save(self._effective_default(field), self.connection)\n\n    def quote_value(self, value):\n        \"\"\"\n        Return a quoted version of the value so it's safe to use in an SQL\n        string. This is not safe against injection from user code; it is\n        intended only for use in making SQL scripts or preparing default values\n        for particularly tricky backends (defaults are not user-defined, though,\n        so this is safe).\n        \"\"\"\n        raise NotImplementedError()\n\n    # Actions\n\n    def create_model(self, model):\n        \"\"\"\n        Create a table and any accompanying indexes or unique constraints for\n        the given `model`.\n        \"\"\"\n        sql, params = self.table_sql(model)\n        # Prevent using [] as params, in the case a literal '%' is used in the\n        # definition on backends that don't support parametrized DDL.\n        self.execute(sql, params or None)\n\n        if self.connection.features.supports_comments:\n            # Add table comment.\n            if model._meta.db_table_comment:\n                self.alter_db_table_comment(model, None, model._meta.db_table_comment)\n            # Add column comments.\n            if not self.connection.features.supports_comments_inline:\n                for field in model._meta.local_fields:\n                    if field.db_comment:\n                        field_db_params = field.db_parameters(\n                            connection=self.connection\n                        )\n                        field_type = field_db_params[\"type\"]\n                        self.execute(\n                            *self._alter_column_comment_sql(\n                                model, field, field_type, field.db_comment\n                            )\n                        )\n        # Add any field index (deferred as SQLite _remake_table needs it).\n        self.deferred_sql.extend(self._model_indexes_sql(model))\n\n        # Make M2M tables\n        for field in model._meta.local_many_to_many:\n            if field.remote_field.through._meta.auto_created:\n                self.create_model(field.remote_field.through)\n\n    def delete_model(self, model):\n        \"\"\"Delete a model from the database.\"\"\"\n        # Handle auto-created intermediary models\n        for field in model._meta.local_many_to_many:\n            if field.remote_field.through._meta.auto_created:\n                self.delete_model(field.remote_field.through)\n\n        # Delete the table\n        self.execute(\n            self.sql_delete_table\n            % {\n                \"table\": self.quote_name(model._meta.db_table),\n            }\n        )\n        # Remove all deferred statements referencing the deleted table.\n        for sql in list(self.deferred_sql):\n            if isinstance(sql, Statement) and sql.references_table(\n                model._meta.db_table\n            ):\n                self.deferred_sql.remove(sql)\n\n    def add_index(self, model, index):\n        \"\"\"Add an index on a model.\"\"\"\n        if (\n            index.contains_expressions\n            and not self.connection.features.supports_expression_indexes\n        ):\n            return None\n        # Index.create_sql returns interpolated SQL which makes params=None a\n        # necessity to avoid escaping attempts on execution.\n        self.execute(index.create_sql(model, self), params=None)\n\n    def remove_index(self, model, index):\n        \"\"\"Remove an index from a model.\"\"\"\n        if (\n            index.contains_expressions\n            and not self.connection.features.supports_expression_indexes\n        ):\n            return None\n        self.execute(index.remove_sql(model, self))\n\n    def rename_index(self, model, old_index, new_index):\n        if self.connection.features.can_rename_index:\n            self.execute(\n                self._rename_index_sql(model, old_index.name, new_index.name),\n                params=None,\n            )\n        else:\n            self.remove_index(model, old_index)\n            self.add_index(model, new_index)\n\n    def add_constraint(self, model, constraint):\n        \"\"\"Add a constraint to a model.\"\"\"\n        sql = constraint.create_sql(model, self)\n        if sql:\n            # Constraint.create_sql returns interpolated SQL which makes\n            # params=None a necessity to avoid escaping attempts on execution.\n            self.execute(sql, params=None)\n\n    def remove_constraint(self, model, constraint):\n        \"\"\"Remove a constraint from a model.\"\"\"\n        sql = constraint.remove_sql(model, self)\n        if sql:\n            self.execute(sql)\n\n    def alter_unique_together(self, model, old_unique_together, new_unique_together):\n        \"\"\"\n        Deal with a model changing its unique_together. The input\n        unique_togethers must be doubly-nested, not the single-nested\n        [\"foo\", \"bar\"] format.\n        \"\"\"\n        olds = {tuple(fields) for fields in old_unique_together}\n        news = {tuple(fields) for fields in new_unique_together}\n        # Deleted uniques\n        for fields in olds.difference(news):\n            self._delete_composed_index(\n                model,\n                fields,\n                {\"unique\": True, \"primary_key\": False},\n                self.sql_delete_unique,\n            )\n        # Created uniques\n        for field_names in news.difference(olds):\n            fields = [model._meta.get_field(field) for field in field_names]\n            self.execute(self._create_unique_sql(model, fields))\n\n    def alter_index_together(self, model, old_index_together, new_index_together):\n        \"\"\"\n        Deal with a model changing its index_together. The input\n        index_togethers must be doubly-nested, not the single-nested\n        [\"foo\", \"bar\"] format.\n        \"\"\"\n        olds = {tuple(fields) for fields in old_index_together}\n        news = {tuple(fields) for fields in new_index_together}\n        # Deleted indexes\n        for fields in olds.difference(news):\n            self._delete_composed_index(\n                model,\n                fields,\n                {\"index\": True, \"unique\": False},\n                self.sql_delete_index,\n            )\n        # Created indexes\n        for field_names in news.difference(olds):\n            fields = [model._meta.get_field(field) for field in field_names]\n            self.execute(self._create_index_sql(model, fields=fields, suffix=\"_idx\"))\n\n    def _delete_composed_index(self, model, fields, constraint_kwargs, sql):\n        meta_constraint_names = {\n            constraint.name for constraint in model._meta.constraints\n        }\n        meta_index_names = {constraint.name for constraint in model._meta.indexes}\n        columns = [model._meta.get_field(field).column for field in fields]\n        constraint_names = self._constraint_names(\n            model,\n            columns,\n            exclude=meta_constraint_names | meta_index_names,\n            **constraint_kwargs,\n        )\n        if (\n            constraint_kwargs.get(\"unique\") is True\n            and constraint_names\n            and self.connection.features.allows_multiple_constraints_on_same_fields\n        ):\n            # Constraint matching the unique_together name.\n            default_name = str(\n                self._unique_constraint_name(model._meta.db_table, columns, quote=False)\n            )\n            if default_name in constraint_names:\n                constraint_names = [default_name]\n        if len(constraint_names) != 1:\n            raise ValueError(\n                \"Found wrong number (%s) of constraints for %s(%s)\"\n                % (\n                    len(constraint_names),\n                    model._meta.db_table,\n                    \", \".join(columns),\n                )\n            )\n        self.execute(self._delete_constraint_sql(sql, model, constraint_names[0]))\n\n    def alter_db_table(self, model, old_db_table, new_db_table):\n        \"\"\"Rename the table a model points to.\"\"\"\n        if old_db_table == new_db_table or (\n            self.connection.features.ignores_table_name_case\n            and old_db_table.lower() == new_db_table.lower()\n        ):\n            return\n        self.execute(\n            self.sql_rename_table\n            % {\n                \"old_table\": self.quote_name(old_db_table),\n                \"new_table\": self.quote_name(new_db_table),\n            }\n        )\n        # Rename all references to the old table name.\n        for sql in self.deferred_sql:\n            if isinstance(sql, Statement):\n                sql.rename_table_references(old_db_table, new_db_table)\n\n    def alter_db_table_comment(self, model, old_db_table_comment, new_db_table_comment):\n        if self.sql_alter_table_comment and self.connection.features.supports_comments:\n            self.execute(\n                self.sql_alter_table_comment\n                % {\n                    \"table\": self.quote_name(model._meta.db_table),\n                    \"comment\": self.quote_value(new_db_table_comment or \"\"),\n                }\n            )\n\n    def alter_db_tablespace(self, model, old_db_tablespace, new_db_tablespace):\n        \"\"\"Move a model's table between tablespaces.\"\"\"\n        self.execute(\n            self.sql_retablespace_table\n            % {\n                \"table\": self.quote_name(model._meta.db_table),\n                \"old_tablespace\": self.quote_name(old_db_tablespace),\n                \"new_tablespace\": self.quote_name(new_db_tablespace),\n            }\n        )\n\n    def add_field(self, model, field):\n        \"\"\"\n        Create a field on a model. Usually involves adding a column, but may\n        involve adding a table instead (for M2M fields).\n        \"\"\"\n        # Special-case implicit M2M tables\n        if field.many_to_many and field.remote_field.through._meta.auto_created:\n            return self.create_model(field.remote_field.through)\n        # Get the column's definition\n        definition, params = self.column_sql(model, field, include_default=True)\n        # It might not actually have a column behind it\n        if definition is None:\n            return\n        if col_type_suffix := field.db_type_suffix(connection=self.connection):\n            definition += f\" {col_type_suffix}\"\n        # Check constraints can go on the column SQL here\n        db_params = field.db_parameters(connection=self.connection)\n        if db_params[\"check\"]:\n            definition += \" \" + self.sql_check_constraint % db_params\n        if (\n            field.remote_field\n            and self.connection.features.supports_foreign_keys\n            and field.db_constraint\n        ):\n            constraint_suffix = \"_fk_%(to_table)s_%(to_column)s\"\n            # Add FK constraint inline, if supported.\n            if self.sql_create_column_inline_fk:\n                to_table = field.remote_field.model._meta.db_table\n                to_column = field.remote_field.model._meta.get_field(\n                    field.remote_field.field_name\n                ).column\n                namespace, _ = split_identifier(model._meta.db_table)\n                definition += \" \" + self.sql_create_column_inline_fk % {\n                    \"name\": self._fk_constraint_name(model, field, constraint_suffix),\n                    \"namespace\": (\n                        \"%s.\" % self.quote_name(namespace) if namespace else \"\"\n                    ),\n                    \"column\": self.quote_name(field.column),\n                    \"to_table\": self.quote_name(to_table),\n                    \"to_column\": self.quote_name(to_column),\n                    \"deferrable\": self.connection.ops.deferrable_sql(),\n                }\n            # Otherwise, add FK constraints later.\n            else:\n                self.deferred_sql.append(\n                    self._create_fk_sql(model, field, constraint_suffix)\n                )\n        # Build the SQL and run it\n        sql = self.sql_create_column % {\n            \"table\": self.quote_name(model._meta.db_table),\n            \"column\": self.quote_name(field.column),\n            \"definition\": definition,\n        }\n        # Prevent using [] as params, in the case a literal '%' is used in the\n        # definition on backends that don't support parametrized DDL.\n        self.execute(sql, params or None)\n        # Drop the default if we need to\n        if (\n            not field.has_db_default()\n            and not self.skip_default_on_alter(field)\n            and self.effective_default(field) is not None\n        ):\n            changes_sql, params = self._alter_column_default_sql(\n                model, None, field, drop=True\n            )\n            sql = self.sql_alter_column % {\n                \"table\": self.quote_name(model._meta.db_table),\n                \"changes\": changes_sql,\n            }\n            self.execute(sql, params)\n        # Add field comment, if required.\n        if (\n            field.db_comment\n            and self.connection.features.supports_comments\n            and not self.connection.features.supports_comments_inline\n        ):\n            field_type = db_params[\"type\"]\n            self.execute(\n                *self._alter_column_comment_sql(\n                    model, field, field_type, field.db_comment\n                )\n            )\n        # Add an index, if required\n        self.deferred_sql.extend(self._field_indexes_sql(model, field))\n        # Reset connection if required\n        if self.connection.features.connection_persists_old_columns:\n            self.connection.close()\n\n    def remove_field(self, model, field):\n        \"\"\"\n        Remove a field from a model. Usually involves deleting a column,\n        but for M2Ms may involve deleting a table.\n        \"\"\"\n        # Special-case implicit M2M tables\n        if field.many_to_many and field.remote_field.through._meta.auto_created:\n            return self.delete_model(field.remote_field.through)\n        # It might not actually have a column behind it\n        if field.db_parameters(connection=self.connection)[\"type\"] is None:\n            return\n        # Drop any FK constraints, MySQL requires explicit deletion\n        if field.remote_field:\n            fk_names = self._constraint_names(model, [field.column], foreign_key=True)\n            for fk_name in fk_names:\n                self.execute(self._delete_fk_sql(model, fk_name))\n        # Delete the column\n        sql = self.sql_delete_column % {\n            \"table\": self.quote_name(model._meta.db_table),\n            \"column\": self.quote_name(field.column),\n        }\n        self.execute(sql)\n        # Reset connection if required\n        if self.connection.features.connection_persists_old_columns:\n            self.connection.close()\n        # Remove all deferred statements referencing the deleted column.\n        for sql in list(self.deferred_sql):\n            if isinstance(sql, Statement) and sql.references_column(\n                model._meta.db_table, field.column\n            ):\n                self.deferred_sql.remove(sql)\n\n    def alter_field(self, model, old_field, new_field, strict=False):\n        \"\"\"\n        Allow a field's type, uniqueness, nullability, default, column,\n        constraints, etc. to be modified.\n        `old_field` is required to compute the necessary changes.\n        If `strict` is True, raise errors if the old column does not match\n        `old_field` precisely.\n        \"\"\"\n        if not self._field_should_be_altered(old_field, new_field):\n            return\n        # Ensure this field is even column-based\n        old_db_params = old_field.db_parameters(connection=self.connection)\n        old_type = old_db_params[\"type\"]\n        new_db_params = new_field.db_parameters(connection=self.connection)\n        new_type = new_db_params[\"type\"]\n        modifying_generated_field = False\n        if (old_type is None and old_field.remote_field is None) or (\n            new_type is None and new_field.remote_field is None\n        ):\n            raise ValueError(\n                \"Cannot alter field %s into %s - they do not properly define \"\n                \"db_type (are you using a badly-written custom field?)\"\n                % (old_field, new_field),\n            )\n        elif (\n            old_type is None\n            and new_type is None\n            and (\n                old_field.remote_field.through\n                and new_field.remote_field.through\n                and old_field.remote_field.through._meta.auto_created\n                and new_field.remote_field.through._meta.auto_created\n            )\n        ):\n            return self._alter_many_to_many(model, old_field, new_field, strict)\n        elif (\n            old_type is None\n            and new_type is None\n            and (\n                old_field.remote_field.through\n                and new_field.remote_field.through\n                and not old_field.remote_field.through._meta.auto_created\n                and not new_field.remote_field.through._meta.auto_created\n            )\n        ):\n            # Both sides have through models; this is a no-op.\n            return\n        elif old_type is None or new_type is None:\n            raise ValueError(\n                \"Cannot alter field %s into %s - they are not compatible types \"\n                \"(you cannot alter to or from M2M fields, or add or remove \"\n                \"through= on M2M fields)\" % (old_field, new_field)\n            )\n        elif old_field.generated != new_field.generated or (\n            new_field.generated and old_field.db_persist != new_field.db_persist\n        ):\n            modifying_generated_field = True\n        elif new_field.generated:\n            try:\n                old_field_sql = old_field.generated_sql(self.connection)\n            except FieldError:\n                # Field used in a generated field was renamed.\n                modifying_generated_field = True\n            else:\n                new_field_sql = new_field.generated_sql(self.connection)\n                modifying_generated_field = old_field_sql != new_field_sql\n        if modifying_generated_field:\n            raise ValueError(\n                f\"Modifying GeneratedFields is not supported - the field {new_field} \"\n                \"must be removed and re-added with the new definition.\"\n            )\n\n        self._alter_field(\n            model,\n            old_field,\n            new_field,\n            old_type,\n            new_type,\n            old_db_params,\n            new_db_params,\n            strict,\n        )\n\n    def _field_db_check(self, field, field_db_params):\n        # Always check constraints with the same mocked column name to avoid\n        # recreating constrains when the column is renamed.\n        check_constraints = self.connection.data_type_check_constraints\n        data = field.db_type_parameters(self.connection)\n        data[\"column\"] = \"__column_name__\"\n        try:\n            return check_constraints[field.get_internal_type()] % data\n        except KeyError:\n            return None\n\n    def _alter_field(\n        self,\n        model,\n        old_field,\n        new_field,\n        old_type,\n        new_type,\n        old_db_params,\n        new_db_params,\n        strict=False,\n    ):\n        \"\"\"Perform a \"physical\" (non-ManyToMany) field update.\"\"\"\n        # Drop any FK constraints, we'll remake them later\n        fks_dropped = set()\n        if (\n            self.connection.features.supports_foreign_keys\n            and old_field.remote_field\n            and old_field.db_constraint\n            and self._field_should_be_altered(\n                old_field,\n                new_field,\n                ignore={\"db_comment\"},\n            )\n        ):\n            fk_names = self._constraint_names(\n                model, [old_field.column], foreign_key=True\n            )\n            if strict and len(fk_names) != 1:\n                raise ValueError(\n                    \"Found wrong number (%s) of foreign key constraints for %s.%s\"\n                    % (\n                        len(fk_names),\n                        model._meta.db_table,\n                        old_field.column,\n                    )\n                )\n            for fk_name in fk_names:\n                fks_dropped.add((old_field.column,))\n                self.execute(self._delete_fk_sql(model, fk_name))\n        # Has unique been removed?\n        if old_field.unique and (\n            not new_field.unique or self._field_became_primary_key(old_field, new_field)\n        ):\n            # Find the unique constraint for this field\n            meta_constraint_names = {\n                constraint.name for constraint in model._meta.constraints\n            }\n            constraint_names = self._constraint_names(\n                model,\n                [old_field.column],\n                unique=True,\n                primary_key=False,\n                exclude=meta_constraint_names,\n            )\n            if strict and len(constraint_names) != 1:\n                raise ValueError(\n                    \"Found wrong number (%s) of unique constraints for %s.%s\"\n                    % (\n                        len(constraint_names),\n                        model._meta.db_table,\n                        old_field.column,\n                    )\n                )\n            for constraint_name in constraint_names:\n                self.execute(self._delete_unique_sql(model, constraint_name))\n        # Drop incoming FK constraints if the field is a primary key or unique,\n        # which might be a to_field target, and things are going to change.\n        old_collation = old_db_params.get(\"collation\")\n        new_collation = new_db_params.get(\"collation\")\n        drop_foreign_keys = (\n            self.connection.features.supports_foreign_keys\n            and (\n                (old_field.primary_key and new_field.primary_key)\n                or (old_field.unique and new_field.unique)\n            )\n            and ((old_type != new_type) or (old_collation != new_collation))\n        )\n        if drop_foreign_keys:\n            # '_meta.related_field' also contains M2M reverse fields, these\n            # will be filtered out\n            for _old_rel, new_rel in _related_non_m2m_objects(old_field, new_field):\n                rel_fk_names = self._constraint_names(\n                    new_rel.related_model, [new_rel.field.column], foreign_key=True\n                )\n                for fk_name in rel_fk_names:\n                    self.execute(self._delete_fk_sql(new_rel.related_model, fk_name))\n        # Removed an index? (no strict check, as multiple indexes are possible)\n        # Remove indexes if db_index switched to False or a unique constraint\n        # will now be used in lieu of an index. The following lines from the\n        # truth table show all True cases; the rest are False:\n        #\n        # old_field.db_index | old_field.unique | new_field.db_index | new_field.unique\n        # ------------------------------------------------------------------------------\n        # True               | False            | False              | False\n        # True               | False            | False              | True\n        # True               | False            | True               | True\n        if (\n            old_field.db_index\n            and not old_field.unique\n            and (not new_field.db_index or new_field.unique)\n        ):\n            # Find the index for this field\n            meta_index_names = {index.name for index in model._meta.indexes}\n            # Retrieve only BTREE indexes since this is what's created with\n            # db_index=True.\n            index_names = self._constraint_names(\n                model,\n                [old_field.column],\n                index=True,\n                type_=Index.suffix,\n                exclude=meta_index_names,\n            )\n            for index_name in index_names:\n                # The only way to check if an index was created with\n                # db_index=True or with Index(['field'], name='foo')\n                # is to look at its name (refs #28053).\n                self.execute(self._delete_index_sql(model, index_name))\n        # Change check constraints?\n        old_db_check = self._field_db_check(old_field, old_db_params)\n        new_db_check = self._field_db_check(new_field, new_db_params)\n        if old_db_check != new_db_check and old_db_check:\n            meta_constraint_names = {\n                constraint.name for constraint in model._meta.constraints\n            }\n            constraint_names = self._constraint_names(\n                model,\n                [old_field.column],\n                check=True,\n                exclude=meta_constraint_names,\n            )\n            if strict and len(constraint_names) != 1:\n                raise ValueError(\n                    \"Found wrong number (%s) of check constraints for %s.%s\"\n                    % (\n                        len(constraint_names),\n                        model._meta.db_table,\n                        old_field.column,\n                    )\n                )\n            for constraint_name in constraint_names:\n                self.execute(self._delete_check_sql(model, constraint_name))\n        # Have they renamed the column?\n        if old_field.column != new_field.column:\n            self.execute(\n                self._rename_field_sql(\n                    model._meta.db_table, old_field, new_field, new_type\n                )\n            )\n            # Rename all references to the renamed column.\n            for sql in self.deferred_sql:\n                if isinstance(sql, Statement):\n                    sql.rename_column_references(\n                        model._meta.db_table, old_field.column, new_field.column\n                    )\n        # Next, start accumulating actions to do\n        actions = []\n        null_actions = []\n        post_actions = []\n        # Type suffix change? (e.g. auto increment).\n        old_type_suffix = old_field.db_type_suffix(connection=self.connection)\n        new_type_suffix = new_field.db_type_suffix(connection=self.connection)\n        # Type, collation, or comment change?\n        if (\n            old_type != new_type\n            or old_type_suffix != new_type_suffix\n            or old_collation != new_collation\n            or (\n                self.connection.features.supports_comments\n                and old_field.db_comment != new_field.db_comment\n            )\n        ):\n            fragment, other_actions = self._alter_column_type_sql(\n                model, old_field, new_field, new_type, old_collation, new_collation\n            )\n            actions.append(fragment)\n            post_actions.extend(other_actions)\n\n        if new_field.has_db_default():\n            if (\n                not old_field.has_db_default()\n                or new_field.db_default != old_field.db_default\n            ):\n                actions.append(\n                    self._alter_column_database_default_sql(model, old_field, new_field)\n                )\n        elif old_field.has_db_default():\n            actions.append(\n                self._alter_column_database_default_sql(\n                    model, old_field, new_field, drop=True\n                )\n            )\n        # When changing a column NULL constraint to NOT NULL with a given\n        # default value, we need to perform 4 steps:\n        #  1. Add a default for new incoming writes\n        #  2. Update existing NULL rows with new default\n        #  3. Replace NULL constraint with NOT NULL\n        #  4. Drop the default again.\n        # Default change?\n        needs_database_default = False\n        if old_field.null and not new_field.null and not new_field.has_db_default():\n            old_default = self.effective_default(old_field)\n            new_default = self.effective_default(new_field)\n            if (\n                not self.skip_default_on_alter(new_field)\n                and old_default != new_default\n                and new_default is not None\n            ):\n                needs_database_default = True\n                actions.append(\n                    self._alter_column_default_sql(model, old_field, new_field)\n                )\n        # Nullability change?\n        if old_field.null != new_field.null:\n            fragment = self._alter_column_null_sql(model, old_field, new_field)\n            if fragment:\n                null_actions.append(fragment)\n        # Only if we have a default and there is a change from NULL to NOT NULL\n        four_way_default_alteration = (\n            new_field.has_default() or new_field.has_db_default()\n        ) and (old_field.null and not new_field.null)\n        if actions or null_actions:\n            if not four_way_default_alteration:\n                # If we don't have to do a 4-way default alteration we can\n                # directly run a (NOT) NULL alteration\n                actions += null_actions\n            # Combine actions together if we can (e.g. postgres)\n            if self.connection.features.supports_combined_alters and actions:\n                sql, params = tuple(zip(*actions))\n                actions = [(\", \".join(sql), sum(params, []))]\n            # Apply those actions\n            for sql, params in actions:\n                self.execute(\n                    self.sql_alter_column\n                    % {\n                        \"table\": self.quote_name(model._meta.db_table),\n                        \"changes\": sql,\n                    },\n                    params,\n                )\n            if four_way_default_alteration:\n                if not new_field.has_db_default():\n                    default_sql = \"%s\"\n                    params = [new_default]\n                else:\n                    default_sql, params = self.db_default_sql(new_field)\n                # Update existing rows with default value\n                self.execute(\n                    self.sql_update_with_default\n                    % {\n                        \"table\": self.quote_name(model._meta.db_table),\n                        \"column\": self.quote_name(new_field.column),\n                        \"default\": default_sql,\n                    },\n                    params,\n                )\n                # Since we didn't run a NOT NULL change before we need to do it\n                # now\n                for sql, params in null_actions:\n                    self.execute(\n                        self.sql_alter_column\n                        % {\n                            \"table\": self.quote_name(model._meta.db_table),\n                            \"changes\": sql,\n                        },\n                        params,\n                    )\n        if post_actions:\n            for sql, params in post_actions:\n                self.execute(sql, params)\n        # If primary_key changed to False, delete the primary key constraint.\n        if old_field.primary_key and not new_field.primary_key:\n            self._delete_primary_key(model, strict)\n        # Added a unique?\n        if self._unique_should_be_added(old_field, new_field):\n            self.execute(self._create_unique_sql(model, [new_field]))\n        # Added an index? Add an index if db_index switched to True or a unique\n        # constraint will no longer be used in lieu of an index. The following\n        # lines from the truth table show all True cases; the rest are False:\n        #\n        # old_field.db_index | old_field.unique | new_field.db_index | new_field.unique\n        # ------------------------------------------------------------------------------\n        # False              | False            | True               | False\n        # False              | True             | True               | False\n        # True               | True             | True               | False\n        if (\n            (not old_field.db_index or old_field.unique)\n            and new_field.db_index\n            and not new_field.unique\n        ):\n            self.execute(self._create_index_sql(model, fields=[new_field]))\n        # Type alteration on primary key? Then we need to alter the column\n        # referring to us.\n        rels_to_update = []\n        if drop_foreign_keys:\n            rels_to_update.extend(_related_non_m2m_objects(old_field, new_field))\n        # Changed to become primary key?\n        if self._field_became_primary_key(old_field, new_field):\n            # Make the new one\n            self.execute(self._create_primary_key_sql(model, new_field))\n            # Update all referencing columns\n            rels_to_update.extend(_related_non_m2m_objects(old_field, new_field))\n        # Handle our type alters on the other end of rels from the PK stuff above\n        for old_rel, new_rel in rels_to_update:\n            rel_db_params = new_rel.field.db_parameters(connection=self.connection)\n            rel_type = rel_db_params[\"type\"]\n            rel_collation = rel_db_params.get(\"collation\")\n            old_rel_db_params = old_rel.field.db_parameters(connection=self.connection)\n            old_rel_collation = old_rel_db_params.get(\"collation\")\n            fragment, other_actions = self._alter_column_type_sql(\n                new_rel.related_model,\n                old_rel.field,\n                new_rel.field,\n                rel_type,\n                old_rel_collation,\n                rel_collation,\n            )\n            self.execute(\n                self.sql_alter_column\n                % {\n                    \"table\": self.quote_name(new_rel.related_model._meta.db_table),\n                    \"changes\": fragment[0],\n                },\n                fragment[1],\n            )\n            for sql, params in other_actions:\n                self.execute(sql, params)\n        # Does it have a foreign key?\n        if (\n            self.connection.features.supports_foreign_keys\n            and new_field.remote_field\n            and (\n                fks_dropped or not old_field.remote_field or not old_field.db_constraint\n            )\n            and new_field.db_constraint\n        ):\n            self.execute(\n                self._create_fk_sql(model, new_field, \"_fk_%(to_table)s_%(to_column)s\")\n            )\n        # Rebuild FKs that pointed to us if we previously had to drop them\n        if drop_foreign_keys:\n            for _, rel in rels_to_update:\n                if rel.field.db_constraint:\n                    self.execute(\n                        self._create_fk_sql(rel.related_model, rel.field, \"_fk\")\n                    )\n        # Does it have check constraints we need to add?\n        if old_db_check != new_db_check and new_db_check:\n            constraint_name = self._create_index_name(\n                model._meta.db_table, [new_field.column], suffix=\"_check\"\n            )\n            self.execute(\n                self._create_check_sql(model, constraint_name, new_db_params[\"check\"])\n            )\n        # Drop the default if we need to\n        # (Django usually does not use in-database defaults)\n        if needs_database_default:\n            changes_sql, params = self._alter_column_default_sql(\n                model, old_field, new_field, drop=True\n            )\n            sql = self.sql_alter_column % {\n                \"table\": self.quote_name(model._meta.db_table),\n                \"changes\": changes_sql,\n            }\n            self.execute(sql, params)\n        # Reset connection if required\n        if self.connection.features.connection_persists_old_columns:\n            self.connection.close()\n\n    def _alter_column_null_sql(self, model, old_field, new_field):\n        \"\"\"\n        Hook to specialize column null alteration.\n\n        Return a (sql, params) fragment to set a column to null or non-null\n        as required by new_field, or None if no changes are required.\n        \"\"\"\n        if (\n            self.connection.features.interprets_empty_strings_as_nulls\n            and new_field.empty_strings_allowed\n        ):\n            # The field is nullable in the database anyway, leave it alone.\n            return\n        else:\n            new_db_params = new_field.db_parameters(connection=self.connection)\n            sql = (\n                self.sql_alter_column_null\n                if new_field.null\n                else self.sql_alter_column_not_null\n            )\n            return (\n                sql\n                % {\n                    \"column\": self.quote_name(new_field.column),\n                    \"type\": new_db_params[\"type\"],\n                },\n                [],\n            )\n\n    def _alter_column_default_sql(self, model, old_field, new_field, drop=False):\n        \"\"\"\n        Hook to specialize column default alteration.\n\n        Return a (sql, params) fragment to add or drop (depending on the drop\n        argument) a default to new_field's column.\n        \"\"\"\n        new_default = self.effective_default(new_field)\n        default = self._column_default_sql(new_field)\n        params = [new_default]\n\n        if drop:\n            params = []\n        elif self.connection.features.requires_literal_defaults:\n            # Some databases (Oracle) can't take defaults as a parameter\n            # If this is the case, the SchemaEditor for that database should\n            # implement prepare_default().\n            default = self.prepare_default(new_default)\n            params = []\n\n        new_db_params = new_field.db_parameters(connection=self.connection)\n        if drop:\n            if new_field.null:\n                sql = self.sql_alter_column_no_default_null\n            else:\n                sql = self.sql_alter_column_no_default\n        else:\n            sql = self.sql_alter_column_default\n        return (\n            sql\n            % {\n                \"column\": self.quote_name(new_field.column),\n                \"type\": new_db_params[\"type\"],\n                \"default\": default,\n            },\n            params,\n        )\n\n    def _alter_column_database_default_sql(\n        self, model, old_field, new_field, drop=False\n    ):\n        \"\"\"\n        Hook to specialize column database default alteration.\n\n        Return a (sql, params) fragment to add or drop (depending on the drop\n        argument) a default to new_field's column.\n        \"\"\"\n        if drop:\n            sql = self.sql_alter_column_no_default\n            default_sql = \"\"\n            params = []\n        else:\n            sql = self.sql_alter_column_default\n            default_sql, params = self.db_default_sql(new_field)\n\n        new_db_params = new_field.db_parameters(connection=self.connection)\n        return (\n            sql\n            % {\n                \"column\": self.quote_name(new_field.column),\n                \"type\": new_db_params[\"type\"],\n                \"default\": default_sql,\n            },\n            params,\n        )\n\n    def _alter_column_type_sql(\n        self, model, old_field, new_field, new_type, old_collation, new_collation\n    ):\n        \"\"\"\n        Hook to specialize column type alteration for different backends,\n        for cases when a creation type is different to an alteration type\n        (e.g. SERIAL in PostgreSQL, PostGIS fields).\n\n        Return a 2-tuple of: an SQL fragment of (sql, params) to insert into\n        an ALTER TABLE statement and a list of extra (sql, params) tuples to\n        run once the field is altered.\n        \"\"\"\n        other_actions = []\n        if collate_sql := self._collate_sql(\n            new_collation, old_collation, model._meta.db_table\n        ):\n            collate_sql = f\" {collate_sql}\"\n        else:\n            collate_sql = \"\"\n        # Comment change?\n        comment_sql = \"\"\n        if self.connection.features.supports_comments and not new_field.many_to_many:\n            if old_field.db_comment != new_field.db_comment:\n                # PostgreSQL and Oracle can't execute 'ALTER COLUMN ...' and\n                # 'COMMENT ON ...' at the same time.\n                sql, params = self._alter_column_comment_sql(\n                    model, new_field, new_type, new_field.db_comment\n                )\n                if sql:\n                    other_actions.append((sql, params))\n            if new_field.db_comment:\n                comment_sql = self._comment_sql(new_field.db_comment)\n        return (\n            (\n                self.sql_alter_column_type\n                % {\n                    \"column\": self.quote_name(new_field.column),\n                    \"type\": new_type,\n                    \"collation\": collate_sql,\n                    \"comment\": comment_sql,\n                },\n                [],\n            ),\n            other_actions,\n        )\n\n    def _alter_column_comment_sql(self, model, new_field, new_type, new_db_comment):\n        return (\n            self.sql_alter_column_comment\n            % {\n                \"table\": self.quote_name(model._meta.db_table),\n                \"column\": self.quote_name(new_field.column),\n                \"comment\": self._comment_sql(new_db_comment),\n            },\n            [],\n        )\n\n    def _comment_sql(self, comment):\n        return self.quote_value(comment or \"\")\n\n    def _alter_many_to_many(self, model, old_field, new_field, strict):\n        \"\"\"Alter M2Ms to repoint their to= endpoints.\"\"\"\n        # Rename the through table\n        if (\n            old_field.remote_field.through._meta.db_table\n            != new_field.remote_field.through._meta.db_table\n        ):\n            self.alter_db_table(\n                old_field.remote_field.through,\n                old_field.remote_field.through._meta.db_table,\n                new_field.remote_field.through._meta.db_table,\n            )\n        # Repoint the FK to the other side\n        self.alter_field(\n            new_field.remote_field.through,\n            # The field that points to the target model is needed, so we can\n            # tell alter_field to change it - this is m2m_reverse_field_name()\n            # (as opposed to m2m_field_name(), which points to our model).\n            old_field.remote_field.through._meta.get_field(\n                old_field.m2m_reverse_field_name()\n            ),\n            new_field.remote_field.through._meta.get_field(\n                new_field.m2m_reverse_field_name()\n            ),\n        )\n        self.alter_field(\n            new_field.remote_field.through,\n            # for self-referential models we need to alter field from the other end too\n            old_field.remote_field.through._meta.get_field(old_field.m2m_field_name()),\n            new_field.remote_field.through._meta.get_field(new_field.m2m_field_name()),\n        )\n\n    def _create_index_name(self, table_name, column_names, suffix=\"\"):\n        \"\"\"\n        Generate a unique name for an index/unique constraint.\n\n        The name is divided into 3 parts: the table name, the column names,\n        and a unique digest and suffix.\n        \"\"\"\n        _, table_name = split_identifier(table_name)\n        hash_suffix_part = \"%s%s\" % (\n            names_digest(table_name, *column_names, length=8),\n            suffix,\n        )\n        max_length = self.connection.ops.max_name_length() or 200\n        # If everything fits into max_length, use that name.\n        index_name = \"%s_%s_%s\" % (table_name, \"_\".join(column_names), hash_suffix_part)\n        if len(index_name) <= max_length:\n            return index_name\n        # Shorten a long suffix.\n        if len(hash_suffix_part) > max_length / 3:\n            hash_suffix_part = hash_suffix_part[: max_length // 3]\n        other_length = (max_length - len(hash_suffix_part)) // 2 - 1\n        index_name = \"%s_%s_%s\" % (\n            table_name[:other_length],\n            \"_\".join(column_names)[:other_length],\n            hash_suffix_part,\n        )\n        # Prepend D if needed to prevent the name from starting with an\n        # underscore or a number (not permitted on Oracle).\n        if index_name[0] == \"_\" or index_name[0].isdigit():\n            index_name = \"D%s\" % index_name[:-1]\n        return index_name\n\n    def _get_index_tablespace_sql(self, model, fields, db_tablespace=None):\n        if db_tablespace is None:\n            if len(fields) == 1 and fields[0].db_tablespace:\n                db_tablespace = fields[0].db_tablespace\n            elif settings.DEFAULT_INDEX_TABLESPACE:\n                db_tablespace = settings.DEFAULT_INDEX_TABLESPACE\n            elif model._meta.db_tablespace:\n                db_tablespace = model._meta.db_tablespace\n        if db_tablespace is not None:\n            return \" \" + self.connection.ops.tablespace_sql(db_tablespace)\n        return \"\"\n\n    def _index_condition_sql(self, condition):\n        if condition:\n            return \" WHERE \" + condition\n        return \"\"\n\n    def _index_include_sql(self, model, columns):\n        if not columns or not self.connection.features.supports_covering_indexes:\n            return \"\"\n        return Statement(\n            \" INCLUDE (%(columns)s)\",\n            columns=Columns(model._meta.db_table, columns, self.quote_name),\n        )\n\n    def _create_index_sql(\n        self,\n        model,\n        *,\n        fields=None,\n        name=None,\n        suffix=\"\",\n        using=\"\",\n        db_tablespace=None,\n        col_suffixes=(),\n        sql=None,\n        opclasses=(),\n        condition=None,\n        include=None,\n        expressions=None,\n    ):\n        \"\"\"\n        Return the SQL statement to create the index for one or several fields\n        or expressions. `sql` can be specified if the syntax differs from the\n        standard (GIS indexes, ...).\n        \"\"\"\n        fields = fields or []\n        expressions = expressions or []\n        compiler = Query(model, alias_cols=False).get_compiler(\n            connection=self.connection,\n        )\n        tablespace_sql = self._get_index_tablespace_sql(\n            model, fields, db_tablespace=db_tablespace\n        )\n        columns = [field.column for field in fields]\n        sql_create_index = sql or self.sql_create_index\n        table = model._meta.db_table\n\n        def create_index_name(*args, **kwargs):\n            nonlocal name\n            if name is None:\n                name = self._create_index_name(*args, **kwargs)\n            return self.quote_name(name)\n\n        return Statement(\n            sql_create_index,\n            table=Table(table, self.quote_name),\n            name=IndexName(table, columns, suffix, create_index_name),\n            using=using,\n            columns=(\n                self._index_columns(table, columns, col_suffixes, opclasses)\n                if columns\n                else Expressions(table, expressions, compiler, self.quote_value)\n            ),\n            extra=tablespace_sql,\n            condition=self._index_condition_sql(condition),\n            include=self._index_include_sql(model, include),\n        )\n\n    def _delete_index_sql(self, model, name, sql=None):\n        statement = Statement(\n            sql or self.sql_delete_index,\n            table=Table(model._meta.db_table, self.quote_name),\n            name=self.quote_name(name),\n        )\n\n        # Remove all deferred statements referencing the deleted index.\n        table_name = statement.parts[\"table\"].table\n        index_name = statement.parts[\"name\"]\n        for sql in list(self.deferred_sql):\n            if isinstance(sql, Statement) and sql.references_index(\n                table_name, index_name\n            ):\n                self.deferred_sql.remove(sql)\n\n        return statement\n\n    def _rename_index_sql(self, model, old_name, new_name):\n        return Statement(\n            self.sql_rename_index,\n            table=Table(model._meta.db_table, self.quote_name),\n            old_name=self.quote_name(old_name),\n            new_name=self.quote_name(new_name),\n        )\n\n    def _index_columns(self, table, columns, col_suffixes, opclasses):\n        return Columns(table, columns, self.quote_name, col_suffixes=col_suffixes)\n\n    def _model_indexes_sql(self, model):\n        \"\"\"\n        Return a list of all index SQL statements (field indexes, Meta.indexes)\n        for the specified model.\n        \"\"\"\n        if not model._meta.managed or model._meta.proxy or model._meta.swapped:\n            return []\n        output = []\n        for field in model._meta.local_fields:\n            output.extend(self._field_indexes_sql(model, field))\n\n        for index in model._meta.indexes:\n            if (\n                not index.contains_expressions\n                or self.connection.features.supports_expression_indexes\n            ):\n                output.append(index.create_sql(model, self))\n        return output\n\n    def _field_indexes_sql(self, model, field):\n        \"\"\"\n        Return a list of all index SQL statements for the specified field.\n        \"\"\"\n        output = []\n        if self._field_should_be_indexed(model, field):\n            output.append(self._create_index_sql(model, fields=[field]))\n        return output\n\n    def _field_should_be_altered(self, old_field, new_field, ignore=None):\n        if not old_field.concrete and not new_field.concrete:\n            return False\n        ignore = ignore or set()\n        _, old_path, old_args, old_kwargs = old_field.deconstruct()\n        _, new_path, new_args, new_kwargs = new_field.deconstruct()\n        # Don't alter when:\n        # - changing only a field name\n        # - changing an attribute that doesn't affect the schema\n        # - changing an attribute in the provided set of ignored attributes\n        # - adding only a db_column and the column name is not changed\n        # - db_table does not change for model referenced by foreign keys\n        for attr in ignore.union(old_field.non_db_attrs):\n            old_kwargs.pop(attr, None)\n        for attr in ignore.union(new_field.non_db_attrs):\n            new_kwargs.pop(attr, None)\n        if (\n            not new_field.many_to_many\n            and old_field.remote_field\n            and new_field.remote_field\n            and old_field.remote_field.model._meta.db_table\n            == new_field.remote_field.model._meta.db_table\n        ):\n            old_kwargs.pop(\"to\", None)\n            new_kwargs.pop(\"to\", None)\n        # db_default can take many form but result in the same SQL.\n        if (\n            old_kwargs.get(\"db_default\")\n            and new_kwargs.get(\"db_default\")\n            and self.db_default_sql(old_field) == self.db_default_sql(new_field)\n        ):\n            old_kwargs.pop(\"db_default\")\n            new_kwargs.pop(\"db_default\")\n        return self.quote_name(old_field.column) != self.quote_name(\n            new_field.column\n        ) or (old_path, old_args, old_kwargs) != (new_path, new_args, new_kwargs)\n\n    def _field_should_be_indexed(self, model, field):\n        return field.db_index and not field.unique\n\n    def _field_became_primary_key(self, old_field, new_field):\n        return not old_field.primary_key and new_field.primary_key\n\n    def _unique_should_be_added(self, old_field, new_field):\n        return (\n            not new_field.primary_key\n            and new_field.unique\n            and (not old_field.unique or old_field.primary_key)\n        )\n\n    def _rename_field_sql(self, table, old_field, new_field, new_type):\n        return self.sql_rename_column % {\n            \"table\": self.quote_name(table),\n            \"old_column\": self.quote_name(old_field.column),\n            \"new_column\": self.quote_name(new_field.column),\n            \"type\": new_type,\n        }\n\n    def _create_fk_sql(self, model, field, suffix):\n        table = Table(model._meta.db_table, self.quote_name)\n        name = self._fk_constraint_name(model, field, suffix)\n        column = Columns(model._meta.db_table, [field.column], self.quote_name)\n        to_table = Table(field.target_field.model._meta.db_table, self.quote_name)\n        to_column = Columns(\n            field.target_field.model._meta.db_table,\n            [field.target_field.column],\n            self.quote_name,\n        )\n        deferrable = self.connection.ops.deferrable_sql()\n        return Statement(\n            self.sql_create_fk,\n            table=table,\n            name=name,\n            column=column,\n            to_table=to_table,\n            to_column=to_column,\n            deferrable=deferrable,\n        )\n\n    def _fk_constraint_name(self, model, field, suffix):\n        def create_fk_name(*args, **kwargs):\n            return self.quote_name(self._create_index_name(*args, **kwargs))\n\n        return ForeignKeyName(\n            model._meta.db_table,\n            [field.column],\n            split_identifier(field.target_field.model._meta.db_table)[1],\n            [field.target_field.column],\n            suffix,\n            create_fk_name,\n        )\n\n    def _delete_fk_sql(self, model, name):\n        return self._delete_constraint_sql(self.sql_delete_fk, model, name)\n\n    def _deferrable_constraint_sql(self, deferrable):\n        if deferrable is None:\n            return \"\"\n        if deferrable == Deferrable.DEFERRED:\n            return \" DEFERRABLE INITIALLY DEFERRED\"\n        if deferrable == Deferrable.IMMEDIATE:\n            return \" DEFERRABLE INITIALLY IMMEDIATE\"\n\n    def _unique_index_nulls_distinct_sql(self, nulls_distinct):\n        if nulls_distinct is False:\n            return \" NULLS NOT DISTINCT\"\n        elif nulls_distinct is True:\n            return \" NULLS DISTINCT\"\n        return \"\"\n\n    def _unique_supported(\n        self,\n        condition=None,\n        deferrable=None,\n        include=None,\n        expressions=None,\n        nulls_distinct=None,\n    ):\n        return (\n            (not condition or self.connection.features.supports_partial_indexes)\n            and (\n                not deferrable\n                or self.connection.features.supports_deferrable_unique_constraints\n            )\n            and (not include or self.connection.features.supports_covering_indexes)\n            and (\n                not expressions or self.connection.features.supports_expression_indexes\n            )\n            and (\n                nulls_distinct is None\n                or self.connection.features.supports_nulls_distinct_unique_constraints\n            )\n        )\n\n    def _unique_sql(\n        self,\n        model,\n        fields,\n        name,\n        condition=None,\n        deferrable=None,\n        include=None,\n        opclasses=None,\n        expressions=None,\n        nulls_distinct=None,\n    ):\n        if not self._unique_supported(\n            condition=condition,\n            deferrable=deferrable,\n            include=include,\n            expressions=expressions,\n            nulls_distinct=nulls_distinct,\n        ):\n            return None\n\n        if (\n            condition\n            or include\n            or opclasses\n            or expressions\n            or nulls_distinct is not None\n        ):\n            # Databases support conditional, covering, functional unique,\n            # and nulls distinct constraints via a unique index.\n            sql = self._create_unique_sql(\n                model,\n                fields,\n                name=name,\n                condition=condition,\n                include=include,\n                opclasses=opclasses,\n                expressions=expressions,\n                nulls_distinct=nulls_distinct,\n            )\n            if sql:\n                self.deferred_sql.append(sql)\n            return None\n        constraint = self.sql_unique_constraint % {\n            \"columns\": \", \".join([self.quote_name(field.column) for field in fields]),\n            \"deferrable\": self._deferrable_constraint_sql(deferrable),\n        }\n        return self.sql_constraint % {\n            \"name\": self.quote_name(name),\n            \"constraint\": constraint,\n        }\n\n    def _create_unique_sql(\n        self,\n        model,\n        fields,\n        name=None,\n        condition=None,\n        deferrable=None,\n        include=None,\n        opclasses=None,\n        expressions=None,\n        nulls_distinct=None,\n    ):\n        if not self._unique_supported(\n            condition=condition,\n            deferrable=deferrable,\n            include=include,\n            expressions=expressions,\n            nulls_distinct=nulls_distinct,\n        ):\n            return None\n\n        compiler = Query(model, alias_cols=False).get_compiler(\n            connection=self.connection\n        )\n        table = model._meta.db_table\n        columns = [field.column for field in fields]\n        if name is None:\n            name = self._unique_constraint_name(table, columns, quote=True)\n        else:\n            name = self.quote_name(name)\n        if condition or include or opclasses or expressions:\n            sql = self.sql_create_unique_index\n        else:\n            sql = self.sql_create_unique\n        if columns:\n            columns = self._index_columns(\n                table, columns, col_suffixes=(), opclasses=opclasses\n            )\n        else:\n            columns = Expressions(table, expressions, compiler, self.quote_value)\n        return Statement(\n            sql,\n            table=Table(table, self.quote_name),\n            name=name,\n            columns=columns,\n            condition=self._index_condition_sql(condition),\n            deferrable=self._deferrable_constraint_sql(deferrable),\n            include=self._index_include_sql(model, include),\n            nulls_distinct=self._unique_index_nulls_distinct_sql(nulls_distinct),\n        )\n\n    def _unique_constraint_name(self, table, columns, quote=True):\n        if quote:\n\n            def create_unique_name(*args, **kwargs):\n                return self.quote_name(self._create_index_name(*args, **kwargs))\n\n        else:\n            create_unique_name = self._create_index_name\n\n        return IndexName(table, columns, \"_uniq\", create_unique_name)\n\n    def _delete_unique_sql(\n        self,\n        model,\n        name,\n        condition=None,\n        deferrable=None,\n        include=None,\n        opclasses=None,\n        expressions=None,\n        nulls_distinct=None,\n    ):\n        if not self._unique_supported(\n            condition=condition,\n            deferrable=deferrable,\n            include=include,\n            expressions=expressions,\n            nulls_distinct=nulls_distinct,\n        ):\n            return None\n        if condition or include or opclasses or expressions:\n            sql = self.sql_delete_index\n        else:\n            sql = self.sql_delete_unique\n        return self._delete_constraint_sql(sql, model, name)\n\n    def _check_sql(self, name, check):\n        return self.sql_constraint % {\n            \"name\": self.quote_name(name),\n            \"constraint\": self.sql_check_constraint % {\"check\": check},\n        }\n\n    def _create_check_sql(self, model, name, check):\n        if not self.connection.features.supports_table_check_constraints:\n            return None\n        return Statement(\n            self.sql_create_check,\n            table=Table(model._meta.db_table, self.quote_name),\n            name=self.quote_name(name),\n            check=check,\n        )\n\n    def _delete_check_sql(self, model, name):\n        if not self.connection.features.supports_table_check_constraints:\n            return None\n        return self._delete_constraint_sql(self.sql_delete_check, model, name)\n\n    def _delete_constraint_sql(self, template, model, name):\n        return Statement(\n            template,\n            table=Table(model._meta.db_table, self.quote_name),\n            name=self.quote_name(name),\n        )\n\n    def _constraint_names(\n        self,\n        model,\n        column_names=None,\n        unique=None,\n        primary_key=None,\n        index=None,\n        foreign_key=None,\n        check=None,\n        type_=None,\n        exclude=None,\n    ):\n        \"\"\"Return all constraint names matching the columns and conditions.\"\"\"\n        if column_names is not None:\n            column_names = [\n                (\n                    self.connection.introspection.identifier_converter(\n                        truncate_name(name, self.connection.ops.max_name_length())\n                    )\n                    if self.connection.features.truncates_names\n                    else self.connection.introspection.identifier_converter(name)\n                )\n                for name in column_names\n            ]\n        with self.connection.cursor() as cursor:\n            constraints = self.connection.introspection.get_constraints(\n                cursor, model._meta.db_table\n            )\n        result = []\n        for name, infodict in constraints.items():\n            if column_names is None or column_names == infodict[\"columns\"]:\n                if unique is not None and infodict[\"unique\"] != unique:\n                    continue\n                if primary_key is not None and infodict[\"primary_key\"] != primary_key:\n                    continue\n                if index is not None and infodict[\"index\"] != index:\n                    continue\n                if check is not None and infodict[\"check\"] != check:\n                    continue\n                if foreign_key is not None and not infodict[\"foreign_key\"]:\n                    continue\n                if type_ is not None and infodict[\"type\"] != type_:\n                    continue\n                if not exclude or name not in exclude:\n                    result.append(name)\n        return result\n\n    def _pk_constraint_sql(self, columns):\n        return self.sql_pk_constraint % {\n            \"columns\": \", \".join(self.quote_name(column) for column in columns)\n        }\n\n    def _delete_primary_key(self, model, strict=False):\n        constraint_names = self._constraint_names(model, primary_key=True)\n        if strict and len(constraint_names) != 1:\n            raise ValueError(\n                \"Found wrong number (%s) of PK constraints for %s\"\n                % (\n                    len(constraint_names),\n                    model._meta.db_table,\n                )\n            )\n        for constraint_name in constraint_names:\n            self.execute(self._delete_primary_key_sql(model, constraint_name))\n\n    def _create_primary_key_sql(self, model, field):\n        return Statement(\n            self.sql_create_pk,\n            table=Table(model._meta.db_table, self.quote_name),\n            name=self.quote_name(\n                self._create_index_name(\n                    model._meta.db_table, [field.column], suffix=\"_pk\"\n                )\n            ),\n            columns=Columns(model._meta.db_table, [field.column], self.quote_name),\n        )\n\n    def _delete_primary_key_sql(self, model, name):\n        return self._delete_constraint_sql(self.sql_delete_pk, model, name)\n\n    def _collate_sql(self, collation, old_collation=None, table_name=None):\n        return \"COLLATE \" + self.quote_name(collation) if collation else \"\"\n\n    def remove_procedure(self, procedure_name, param_types=()):\n        sql = self.sql_delete_procedure % {\n            \"procedure\": self.quote_name(procedure_name),\n            \"param_types\": \",\".join(param_types),\n        }\n        self.execute(sql)"},{"start_line":492,"end_line":500,"belongs_to":{"file_name":"schema.py","upper_path":"../django/django/db/backends/base","module":"base","define_class":["BaseDatabaseSchemaEditor"],"imports":["logging","operator","datetime.datetime","django.conf.settings","django.core.exceptions.FieldError","django.db.backends.ddl_references.Columns","django.db.backends.ddl_references.Expressions","django.db.backends.ddl_references.ForeignKeyName","django.db.backends.ddl_references.IndexName","django.db.backends.ddl_references.Statement","django.db.backends.ddl_references.Table","django.db.backends.utils.names_digest","django.db.backends.utils.split_identifier","django.db.backends.utils.truncate_name","django.db.models.Deferrable","django.db.models.Index","django.db.models.fields.composite.CompositePrimaryKey","django.db.models.sql.Query","django.db.transaction.TransactionManagementError","django.db.transaction.atomic","django.utils.timezone","django.db.models.expressions.Value"]},"relative_function":[],"code":"def quote_value(self, value):\n        \"\"\"\n        Return a quoted version of the value so it's safe to use in an SQL\n        string. This is not safe against injection from user code; it is\n        intended only for use in making SQL scripts or preparing default values\n        for particularly tricky backends (defaults are not user-defined, though,\n        so this is safe).\n        \"\"\"\n        raise NotImplementedError()"}],"ground_truth":null,"score":null},
{"question":"Which API or library is responsible for `Start a transaction explicitly in autocommit mode`, and what are its key parameters or methods?","answer":"","relative_code_list":[{"start_line":322,"end_line":332,"belongs_to":{"file_name":"base.py","upper_path":"../django/django/db/backends/sqlite3","module":"sqlite3","define_class":["DatabaseWrapper","SQLiteCursorWrapper"],"imports":["datetime","decimal","warnings","collections.abc.Mapping","itertools.chain","itertools.tee","sqlite3.dbapi2","django.core.exceptions.ImproperlyConfigured","django.db.IntegrityError","django.db.backends.base.base.BaseDatabaseWrapper","django.utils.asyncio.async_unsafe","django.utils.dateparse.parse_date","django.utils.dateparse.parse_datetime","django.utils.dateparse.parse_time","django.utils.regex_helper._lazy_re_compile","_functions.register","client.DatabaseClient","creation.DatabaseCreation","features.DatabaseFeatures","introspection.DatabaseIntrospection","operations.DatabaseOperations","schema.DatabaseSchemaEditor"]},"relative_function":[],"code":"def _start_transaction_under_autocommit(self):\n        \"\"\"\n        Start a transaction explicitly in autocommit mode.\n\n        Staying in autocommit mode works around a bug of sqlite3 that breaks\n        savepoints when autocommit is disabled.\n        \"\"\"\n        if self.transaction_mode is None:\n            self.cursor().execute(\"BEGIN\")\n        else:\n            self.cursor().execute(f\"BEGIN {self.transaction_mode}\")"},{"start_line":89,"end_line":547,"belongs_to":{"file_name":"base.py","upper_path":"../django/django/db/backends/postgresql","module":"postgresql","define_class":["DatabaseWrapper","CursorMixin","ServerBindingCursor","Cursor","ServerSideCursor","CursorDebugWrapper","CursorDebugWrapper"],"imports":["asyncio","threading","warnings","contextlib.contextmanager","django.conf.settings","django.core.exceptions.ImproperlyConfigured","django.db.DatabaseError","django.db.connections","django.db.backends.base.base.NO_DB_ALIAS","django.db.backends.base.base.BaseDatabaseWrapper","django.db.backends.utils.CursorDebugWrapper","django.utils.asyncio.async_unsafe","django.utils.functional.cached_property","django.utils.safestring.SafeString","django.utils.version.get_version_tuple","psycopg_any.IsolationLevel","psycopg_any.is_psycopg3","client.DatabaseClient","creation.DatabaseCreation","features.DatabaseFeatures","introspection.DatabaseIntrospection","operations.DatabaseOperations","schema.DatabaseSchemaEditor","psycopg.adapters","psycopg.sql","psycopg.pq.Format","psycopg_any.get_adapters_template","psycopg_any.register_tzloader","psycopg2.extensions","psycopg2.extras","psycopg","psycopg2","psycopg_pool.ConnectionPool"]},"relative_function":[],"code":"class DatabaseWrapper(BaseDatabaseWrapper):\n    vendor = \"postgresql\"\n    display_name = \"PostgreSQL\"\n    # This dictionary maps Field objects to their associated PostgreSQL column\n    # types, as strings. Column-type strings can contain format strings; they'll\n    # be interpolated against the values of Field.__dict__ before being output.\n    # If a column type is set to None, it won't be included in the output.\n    data_types = {\n        \"AutoField\": \"integer\",\n        \"BigAutoField\": \"bigint\",\n        \"BinaryField\": \"bytea\",\n        \"BooleanField\": \"boolean\",\n        \"CharField\": _get_varchar_column,\n        \"DateField\": \"date\",\n        \"DateTimeField\": \"timestamp with time zone\",\n        \"DecimalField\": \"numeric(%(max_digits)s, %(decimal_places)s)\",\n        \"DurationField\": \"interval\",\n        \"FileField\": \"varchar(%(max_length)s)\",\n        \"FilePathField\": \"varchar(%(max_length)s)\",\n        \"FloatField\": \"double precision\",\n        \"IntegerField\": \"integer\",\n        \"BigIntegerField\": \"bigint\",\n        \"IPAddressField\": \"inet\",\n        \"GenericIPAddressField\": \"inet\",\n        \"JSONField\": \"jsonb\",\n        \"OneToOneField\": \"integer\",\n        \"PositiveBigIntegerField\": \"bigint\",\n        \"PositiveIntegerField\": \"integer\",\n        \"PositiveSmallIntegerField\": \"smallint\",\n        \"SlugField\": \"varchar(%(max_length)s)\",\n        \"SmallAutoField\": \"smallint\",\n        \"SmallIntegerField\": \"smallint\",\n        \"TextField\": \"text\",\n        \"TimeField\": \"time\",\n        \"UUIDField\": \"uuid\",\n    }\n    data_type_check_constraints = {\n        \"PositiveBigIntegerField\": '\"%(column)s\" >= 0',\n        \"PositiveIntegerField\": '\"%(column)s\" >= 0',\n        \"PositiveSmallIntegerField\": '\"%(column)s\" >= 0',\n    }\n    data_types_suffix = {\n        \"AutoField\": \"GENERATED BY DEFAULT AS IDENTITY\",\n        \"BigAutoField\": \"GENERATED BY DEFAULT AS IDENTITY\",\n        \"SmallAutoField\": \"GENERATED BY DEFAULT AS IDENTITY\",\n    }\n    operators = {\n        \"exact\": \"= %s\",\n        \"iexact\": \"= UPPER(%s)\",\n        \"contains\": \"LIKE %s\",\n        \"icontains\": \"LIKE UPPER(%s)\",\n        \"regex\": \"~ %s\",\n        \"iregex\": \"~* %s\",\n        \"gt\": \"> %s\",\n        \"gte\": \">= %s\",\n        \"lt\": \"< %s\",\n        \"lte\": \"<= %s\",\n        \"startswith\": \"LIKE %s\",\n        \"endswith\": \"LIKE %s\",\n        \"istartswith\": \"LIKE UPPER(%s)\",\n        \"iendswith\": \"LIKE UPPER(%s)\",\n    }\n\n    # The patterns below are used to generate SQL pattern lookup clauses when\n    # the right-hand side of the lookup isn't a raw string (it might be an expression\n    # or the result of a bilateral transformation).\n    # In those cases, special characters for LIKE operators (e.g. \\, *, _) should be\n    # escaped on database side.\n    #\n    # Note: we use str.format() here for readability as '%' is used as a wildcard for\n    # the LIKE operator.\n    pattern_esc = (\n        r\"REPLACE(REPLACE(REPLACE({}, E'\\\\', E'\\\\\\\\'), E'%%', E'\\\\%%'), E'_', E'\\\\_')\"\n    )\n    pattern_ops = {\n        \"contains\": \"LIKE '%%' || {} || '%%'\",\n        \"icontains\": \"LIKE '%%' || UPPER({}) || '%%'\",\n        \"startswith\": \"LIKE {} || '%%'\",\n        \"istartswith\": \"LIKE UPPER({}) || '%%'\",\n        \"endswith\": \"LIKE '%%' || {}\",\n        \"iendswith\": \"LIKE '%%' || UPPER({})\",\n    }\n\n    Database = Database\n    SchemaEditorClass = DatabaseSchemaEditor\n    # Classes instantiated in __init__().\n    client_class = DatabaseClient\n    creation_class = DatabaseCreation\n    features_class = DatabaseFeatures\n    introspection_class = DatabaseIntrospection\n    ops_class = DatabaseOperations\n    # PostgreSQL backend-specific attributes.\n    _named_cursor_idx = 0\n    _connection_pools = {}\n\n    @property\n    def pool(self):\n        pool_options = self.settings_dict[\"OPTIONS\"].get(\"pool\")\n        if self.alias == NO_DB_ALIAS or not pool_options:\n            return None\n\n        if self.alias not in self._connection_pools:\n            if self.settings_dict.get(\"CONN_MAX_AGE\", 0) != 0:\n                raise ImproperlyConfigured(\n                    \"Pooling doesn't support persistent connections.\"\n                )\n            # Set the default options.\n            if pool_options is True:\n                pool_options = {}\n\n            try:\n                from psycopg_pool import ConnectionPool\n            except ImportError as err:\n                raise ImproperlyConfigured(\n                    \"Error loading psycopg_pool module.\\nDid you install psycopg[pool]?\"\n                ) from err\n\n            connect_kwargs = self.get_connection_params()\n            # Ensure we run in autocommit, Django properly sets it later on.\n            connect_kwargs[\"autocommit\"] = True\n            enable_checks = self.settings_dict[\"CONN_HEALTH_CHECKS\"]\n            pool = ConnectionPool(\n                kwargs=connect_kwargs,\n                open=False,  # Do not open the pool during startup.\n                configure=self._configure_connection,\n                check=ConnectionPool.check_connection if enable_checks else None,\n                **pool_options,\n            )\n            # setdefault() ensures that multiple threads don't set this in\n            # parallel. Since we do not open the pool during it's init above,\n            # this means that at worst during startup multiple threads generate\n            # pool objects and the first to set it wins.\n            self._connection_pools.setdefault(self.alias, pool)\n\n        return self._connection_pools[self.alias]\n\n    def close_pool(self):\n        if self.pool:\n            self.pool.close()\n            del self._connection_pools[self.alias]\n\n    def get_database_version(self):\n        \"\"\"\n        Return a tuple of the database's version.\n        E.g. for pg_version 120004, return (12, 4).\n        \"\"\"\n        return divmod(self.pg_version, 10000)\n\n    def get_connection_params(self):\n        settings_dict = self.settings_dict\n        # None may be used to connect to the default 'postgres' db\n        if settings_dict[\"NAME\"] == \"\" and not settings_dict[\"OPTIONS\"].get(\"service\"):\n            raise ImproperlyConfigured(\n                \"settings.DATABASES is improperly configured. \"\n                \"Please supply the NAME or OPTIONS['service'] value.\"\n            )\n        if len(settings_dict[\"NAME\"] or \"\") > self.ops.max_name_length():\n            raise ImproperlyConfigured(\n                \"The database name '%s' (%d characters) is longer than \"\n                \"PostgreSQL's limit of %d characters. Supply a shorter NAME \"\n                \"in settings.DATABASES.\"\n                % (\n                    settings_dict[\"NAME\"],\n                    len(settings_dict[\"NAME\"]),\n                    self.ops.max_name_length(),\n                )\n            )\n        if settings_dict[\"NAME\"]:\n            conn_params = {\n                \"dbname\": settings_dict[\"NAME\"],\n                **settings_dict[\"OPTIONS\"],\n            }\n        elif settings_dict[\"NAME\"] is None:\n            # Connect to the default 'postgres' db.\n            settings_dict[\"OPTIONS\"].pop(\"service\", None)\n            conn_params = {\"dbname\": \"postgres\", **settings_dict[\"OPTIONS\"]}\n        else:\n            conn_params = {**settings_dict[\"OPTIONS\"]}\n        conn_params[\"client_encoding\"] = \"UTF8\"\n\n        conn_params.pop(\"assume_role\", None)\n        conn_params.pop(\"isolation_level\", None)\n\n        pool_options = conn_params.pop(\"pool\", None)\n        if pool_options and not is_psycopg3:\n            raise ImproperlyConfigured(\"Database pooling requires psycopg >= 3\")\n\n        server_side_binding = conn_params.pop(\"server_side_binding\", None)\n        conn_params.setdefault(\n            \"cursor_factory\",\n            (\n                ServerBindingCursor\n                if is_psycopg3 and server_side_binding is True\n                else Cursor\n            ),\n        )\n        if settings_dict[\"USER\"]:\n            conn_params[\"user\"] = settings_dict[\"USER\"]\n        if settings_dict[\"PASSWORD\"]:\n            conn_params[\"password\"] = settings_dict[\"PASSWORD\"]\n        if settings_dict[\"HOST\"]:\n            conn_params[\"host\"] = settings_dict[\"HOST\"]\n        if settings_dict[\"PORT\"]:\n            conn_params[\"port\"] = settings_dict[\"PORT\"]\n        if is_psycopg3:\n            conn_params[\"context\"] = get_adapters_template(\n                settings.USE_TZ, self.timezone\n            )\n            # Disable prepared statements by default to keep connection poolers\n            # working. Can be reenabled via OPTIONS in the settings dict.\n            conn_params[\"prepare_threshold\"] = conn_params.pop(\n                \"prepare_threshold\", None\n            )\n        return conn_params\n\n    @async_unsafe\n    def get_new_connection(self, conn_params):\n        # self.isolation_level must be set:\n        # - after connecting to the database in order to obtain the database's\n        #   default when no value is explicitly specified in options.\n        # - before calling _set_autocommit() because if autocommit is on, that\n        #   will set connection.isolation_level to ISOLATION_LEVEL_AUTOCOMMIT.\n        options = self.settings_dict[\"OPTIONS\"]\n        set_isolation_level = False\n        try:\n            isolation_level_value = options[\"isolation_level\"]\n        except KeyError:\n            self.isolation_level = IsolationLevel.READ_COMMITTED\n        else:\n            # Set the isolation level to the value from OPTIONS.\n            try:\n                self.isolation_level = IsolationLevel(isolation_level_value)\n                set_isolation_level = True\n            except ValueError:\n                raise ImproperlyConfigured(\n                    f\"Invalid transaction isolation level {isolation_level_value} \"\n                    f\"specified. Use one of the psycopg.IsolationLevel values.\"\n                )\n        if self.pool:\n            # If nothing else has opened the pool, open it now.\n            self.pool.open()\n            connection = self.pool.getconn()\n        else:\n            connection = self.Database.connect(**conn_params)\n        if set_isolation_level:\n            connection.isolation_level = self.isolation_level\n        if not is_psycopg3:\n            # Register dummy loads() to avoid a round trip from psycopg2's\n            # decode to json.dumps() to json.loads(), when using a custom\n            # decoder in JSONField.\n            psycopg2.extras.register_default_jsonb(\n                conn_or_curs=connection, loads=lambda x: x\n            )\n        return connection\n\n    def ensure_timezone(self):\n        # Close the pool so new connections pick up the correct timezone.\n        self.close_pool()\n        if self.connection is None:\n            return False\n        return self._configure_timezone(self.connection)\n\n    def _configure_timezone(self, connection):\n        conn_timezone_name = connection.info.parameter_status(\"TimeZone\")\n        timezone_name = self.timezone_name\n        if timezone_name and conn_timezone_name != timezone_name:\n            with connection.cursor() as cursor:\n                cursor.execute(self.ops.set_time_zone_sql(), [timezone_name])\n            return True\n        return False\n\n    def _configure_role(self, connection):\n        if new_role := self.settings_dict[\"OPTIONS\"].get(\"assume_role\"):\n            with connection.cursor() as cursor:\n                sql = self.ops.compose_sql(\"SET ROLE %s\", [new_role])\n                cursor.execute(sql)\n            return True\n        return False\n\n    def _configure_connection(self, connection):\n        # This function is called from init_connection_state and from the\n        # psycopg pool itself after a connection is opened.\n\n        # Commit after setting the time zone.\n        commit_tz = self._configure_timezone(connection)\n        # Set the role on the connection. This is useful if the credential used\n        # to login is not the same as the role that owns database resources. As\n        # can be the case when using temporary or ephemeral credentials.\n        commit_role = self._configure_role(connection)\n\n        return commit_role or commit_tz\n\n    def _close(self):\n        if self.connection is not None:\n            # `wrap_database_errors` only works for `putconn` as long as there\n            # is no `reset` function set in the pool because it is deferred\n            # into a thread and not directly executed.\n            with self.wrap_database_errors:\n                if self.pool:\n                    # Ensure the correct pool is returned. This is a workaround\n                    # for tests so a pool can be changed on setting changes\n                    # (e.g. USE_TZ, TIME_ZONE).\n                    self.connection._pool.putconn(self.connection)\n                    # Connection can no longer be used.\n                    self.connection = None\n                else:\n                    return self.connection.close()\n\n    def init_connection_state(self):\n        super().init_connection_state()\n\n        if self.connection is not None and not self.pool:\n            commit = self._configure_connection(self.connection)\n\n            if commit and not self.get_autocommit():\n                self.connection.commit()\n\n    @async_unsafe\n    def create_cursor(self, name=None):\n        if name:\n            if is_psycopg3 and (\n                self.settings_dict[\"OPTIONS\"].get(\"server_side_binding\") is not True\n            ):\n                # psycopg >= 3 forces the usage of server-side bindings for\n                # named cursors so a specialized class that implements\n                # server-side cursors while performing client-side bindings\n                # must be used if `server_side_binding` is disabled (default).\n                cursor = ServerSideCursor(\n                    self.connection,\n                    name=name,\n                    scrollable=False,\n                    withhold=self.connection.autocommit,\n                )\n            else:\n                # In autocommit mode, the cursor will be used outside of a\n                # transaction, hence use a holdable cursor.\n                cursor = self.connection.cursor(\n                    name, scrollable=False, withhold=self.connection.autocommit\n                )\n        else:\n            cursor = self.connection.cursor()\n\n        if is_psycopg3:\n            # Register the cursor timezone only if the connection disagrees, to\n            # avoid copying the adapter map.\n            tzloader = self.connection.adapters.get_loader(TIMESTAMPTZ_OID, Format.TEXT)\n            if self.timezone != tzloader.timezone:\n                register_tzloader(self.timezone, cursor)\n        else:\n            cursor.tzinfo_factory = self.tzinfo_factory if settings.USE_TZ else None\n        return cursor\n\n    def tzinfo_factory(self, offset):\n        return self.timezone\n\n    @async_unsafe\n    def chunked_cursor(self):\n        self._named_cursor_idx += 1\n        # Get the current async task\n        # Note that right now this is behind @async_unsafe, so this is\n        # unreachable, but in future we'll start loosening this restriction.\n        # For now, it's here so that every use of \"threading\" is\n        # also async-compatible.\n        try:\n            current_task = asyncio.current_task()\n        except RuntimeError:\n            current_task = None\n        # Current task can be none even if the current_task call didn't error\n        if current_task:\n            task_ident = str(id(current_task))\n        else:\n            task_ident = \"sync\"\n        # Use that and the thread ident to get a unique name\n        return self._cursor(\n            name=\"_django_curs_%d_%s_%d\"\n            % (\n                # Avoid reusing name in other threads / tasks\n                threading.current_thread().ident,\n                task_ident,\n                self._named_cursor_idx,\n            )\n        )\n\n    def _set_autocommit(self, autocommit):\n        with self.wrap_database_errors:\n            self.connection.autocommit = autocommit\n\n    def check_constraints(self, table_names=None):\n        \"\"\"\n        Check constraints by setting them to immediate. Return them to deferred\n        afterward.\n        \"\"\"\n        with self.cursor() as cursor:\n            cursor.execute(\"SET CONSTRAINTS ALL IMMEDIATE\")\n            cursor.execute(\"SET CONSTRAINTS ALL DEFERRED\")\n\n    def is_usable(self):\n        if self.connection is None:\n            return False\n        try:\n            # Use a psycopg cursor directly, bypassing Django's utilities.\n            with self.connection.cursor() as cursor:\n                cursor.execute(\"SELECT 1\")\n        except Database.Error:\n            return False\n        else:\n            return True\n\n    def close_if_health_check_failed(self):\n        if self.pool:\n            # The pool only returns healthy connections.\n            return\n        return super().close_if_health_check_failed()\n\n    @contextmanager\n    def _nodb_cursor(self):\n        cursor = None\n        try:\n            with super()._nodb_cursor() as cursor:\n                yield cursor\n        except (Database.DatabaseError, WrappedDatabaseError):\n            if cursor is not None:\n                raise\n            warnings.warn(\n                \"Normally Django will use a connection to the 'postgres' database \"\n                \"to avoid running initialization queries against the production \"\n                \"database when it's not needed (for example, when running tests). \"\n                \"Django was unable to create a connection to the 'postgres' database \"\n                \"and will use the first PostgreSQL database instead.\",\n                RuntimeWarning,\n            )\n            for connection in connections.all():\n                if (\n                    connection.vendor == \"postgresql\"\n                    and connection.settings_dict[\"NAME\"] != \"postgres\"\n                ):\n                    conn = self.__class__(\n                        {\n                            **self.settings_dict,\n                            \"NAME\": connection.settings_dict[\"NAME\"],\n                        },\n                        alias=self.alias,\n                    )\n                    try:\n                        with conn.cursor() as cursor:\n                            yield cursor\n                    finally:\n                        conn.close()\n                    break\n            else:\n                raise\n\n    @cached_property\n    def pg_version(self):\n        with self.temporary_connection():\n            return self.connection.info.server_version\n\n    def make_debug_cursor(self, cursor):\n        return CursorDebugWrapper(cursor, self)"}],"ground_truth":null,"score":null},
{"question":"What is the purpose of the `introspection_class` attribute in the `DatabaseWrapper`, and how is it typically used?","answer":"","relative_code_list":[{"start_line":89,"end_line":547,"belongs_to":{"file_name":"base.py","upper_path":"../django/django/db/backends/postgresql","module":"postgresql","define_class":["DatabaseWrapper","CursorMixin","ServerBindingCursor","Cursor","ServerSideCursor","CursorDebugWrapper","CursorDebugWrapper"],"imports":["asyncio","threading","warnings","contextlib.contextmanager","django.conf.settings","django.core.exceptions.ImproperlyConfigured","django.db.DatabaseError","django.db.connections","django.db.backends.base.base.NO_DB_ALIAS","django.db.backends.base.base.BaseDatabaseWrapper","django.db.backends.utils.CursorDebugWrapper","django.utils.asyncio.async_unsafe","django.utils.functional.cached_property","django.utils.safestring.SafeString","django.utils.version.get_version_tuple","psycopg_any.IsolationLevel","psycopg_any.is_psycopg3","client.DatabaseClient","creation.DatabaseCreation","features.DatabaseFeatures","introspection.DatabaseIntrospection","operations.DatabaseOperations","schema.DatabaseSchemaEditor","psycopg.adapters","psycopg.sql","psycopg.pq.Format","psycopg_any.get_adapters_template","psycopg_any.register_tzloader","psycopg2.extensions","psycopg2.extras","psycopg","psycopg2","psycopg_pool.ConnectionPool"]},"relative_function":[],"code":"class DatabaseWrapper(BaseDatabaseWrapper):\n    vendor = \"postgresql\"\n    display_name = \"PostgreSQL\"\n    # This dictionary maps Field objects to their associated PostgreSQL column\n    # types, as strings. Column-type strings can contain format strings; they'll\n    # be interpolated against the values of Field.__dict__ before being output.\n    # If a column type is set to None, it won't be included in the output.\n    data_types = {\n        \"AutoField\": \"integer\",\n        \"BigAutoField\": \"bigint\",\n        \"BinaryField\": \"bytea\",\n        \"BooleanField\": \"boolean\",\n        \"CharField\": _get_varchar_column,\n        \"DateField\": \"date\",\n        \"DateTimeField\": \"timestamp with time zone\",\n        \"DecimalField\": \"numeric(%(max_digits)s, %(decimal_places)s)\",\n        \"DurationField\": \"interval\",\n        \"FileField\": \"varchar(%(max_length)s)\",\n        \"FilePathField\": \"varchar(%(max_length)s)\",\n        \"FloatField\": \"double precision\",\n        \"IntegerField\": \"integer\",\n        \"BigIntegerField\": \"bigint\",\n        \"IPAddressField\": \"inet\",\n        \"GenericIPAddressField\": \"inet\",\n        \"JSONField\": \"jsonb\",\n        \"OneToOneField\": \"integer\",\n        \"PositiveBigIntegerField\": \"bigint\",\n        \"PositiveIntegerField\": \"integer\",\n        \"PositiveSmallIntegerField\": \"smallint\",\n        \"SlugField\": \"varchar(%(max_length)s)\",\n        \"SmallAutoField\": \"smallint\",\n        \"SmallIntegerField\": \"smallint\",\n        \"TextField\": \"text\",\n        \"TimeField\": \"time\",\n        \"UUIDField\": \"uuid\",\n    }\n    data_type_check_constraints = {\n        \"PositiveBigIntegerField\": '\"%(column)s\" >= 0',\n        \"PositiveIntegerField\": '\"%(column)s\" >= 0',\n        \"PositiveSmallIntegerField\": '\"%(column)s\" >= 0',\n    }\n    data_types_suffix = {\n        \"AutoField\": \"GENERATED BY DEFAULT AS IDENTITY\",\n        \"BigAutoField\": \"GENERATED BY DEFAULT AS IDENTITY\",\n        \"SmallAutoField\": \"GENERATED BY DEFAULT AS IDENTITY\",\n    }\n    operators = {\n        \"exact\": \"= %s\",\n        \"iexact\": \"= UPPER(%s)\",\n        \"contains\": \"LIKE %s\",\n        \"icontains\": \"LIKE UPPER(%s)\",\n        \"regex\": \"~ %s\",\n        \"iregex\": \"~* %s\",\n        \"gt\": \"> %s\",\n        \"gte\": \">= %s\",\n        \"lt\": \"< %s\",\n        \"lte\": \"<= %s\",\n        \"startswith\": \"LIKE %s\",\n        \"endswith\": \"LIKE %s\",\n        \"istartswith\": \"LIKE UPPER(%s)\",\n        \"iendswith\": \"LIKE UPPER(%s)\",\n    }\n\n    # The patterns below are used to generate SQL pattern lookup clauses when\n    # the right-hand side of the lookup isn't a raw string (it might be an expression\n    # or the result of a bilateral transformation).\n    # In those cases, special characters for LIKE operators (e.g. \\, *, _) should be\n    # escaped on database side.\n    #\n    # Note: we use str.format() here for readability as '%' is used as a wildcard for\n    # the LIKE operator.\n    pattern_esc = (\n        r\"REPLACE(REPLACE(REPLACE({}, E'\\\\', E'\\\\\\\\'), E'%%', E'\\\\%%'), E'_', E'\\\\_')\"\n    )\n    pattern_ops = {\n        \"contains\": \"LIKE '%%' || {} || '%%'\",\n        \"icontains\": \"LIKE '%%' || UPPER({}) || '%%'\",\n        \"startswith\": \"LIKE {} || '%%'\",\n        \"istartswith\": \"LIKE UPPER({}) || '%%'\",\n        \"endswith\": \"LIKE '%%' || {}\",\n        \"iendswith\": \"LIKE '%%' || UPPER({})\",\n    }\n\n    Database = Database\n    SchemaEditorClass = DatabaseSchemaEditor\n    # Classes instantiated in __init__().\n    client_class = DatabaseClient\n    creation_class = DatabaseCreation\n    features_class = DatabaseFeatures\n    introspection_class = DatabaseIntrospection\n    ops_class = DatabaseOperations\n    # PostgreSQL backend-specific attributes.\n    _named_cursor_idx = 0\n    _connection_pools = {}\n\n    @property\n    def pool(self):\n        pool_options = self.settings_dict[\"OPTIONS\"].get(\"pool\")\n        if self.alias == NO_DB_ALIAS or not pool_options:\n            return None\n\n        if self.alias not in self._connection_pools:\n            if self.settings_dict.get(\"CONN_MAX_AGE\", 0) != 0:\n                raise ImproperlyConfigured(\n                    \"Pooling doesn't support persistent connections.\"\n                )\n            # Set the default options.\n            if pool_options is True:\n                pool_options = {}\n\n            try:\n                from psycopg_pool import ConnectionPool\n            except ImportError as err:\n                raise ImproperlyConfigured(\n                    \"Error loading psycopg_pool module.\\nDid you install psycopg[pool]?\"\n                ) from err\n\n            connect_kwargs = self.get_connection_params()\n            # Ensure we run in autocommit, Django properly sets it later on.\n            connect_kwargs[\"autocommit\"] = True\n            enable_checks = self.settings_dict[\"CONN_HEALTH_CHECKS\"]\n            pool = ConnectionPool(\n                kwargs=connect_kwargs,\n                open=False,  # Do not open the pool during startup.\n                configure=self._configure_connection,\n                check=ConnectionPool.check_connection if enable_checks else None,\n                **pool_options,\n            )\n            # setdefault() ensures that multiple threads don't set this in\n            # parallel. Since we do not open the pool during it's init above,\n            # this means that at worst during startup multiple threads generate\n            # pool objects and the first to set it wins.\n            self._connection_pools.setdefault(self.alias, pool)\n\n        return self._connection_pools[self.alias]\n\n    def close_pool(self):\n        if self.pool:\n            self.pool.close()\n            del self._connection_pools[self.alias]\n\n    def get_database_version(self):\n        \"\"\"\n        Return a tuple of the database's version.\n        E.g. for pg_version 120004, return (12, 4).\n        \"\"\"\n        return divmod(self.pg_version, 10000)\n\n    def get_connection_params(self):\n        settings_dict = self.settings_dict\n        # None may be used to connect to the default 'postgres' db\n        if settings_dict[\"NAME\"] == \"\" and not settings_dict[\"OPTIONS\"].get(\"service\"):\n            raise ImproperlyConfigured(\n                \"settings.DATABASES is improperly configured. \"\n                \"Please supply the NAME or OPTIONS['service'] value.\"\n            )\n        if len(settings_dict[\"NAME\"] or \"\") > self.ops.max_name_length():\n            raise ImproperlyConfigured(\n                \"The database name '%s' (%d characters) is longer than \"\n                \"PostgreSQL's limit of %d characters. Supply a shorter NAME \"\n                \"in settings.DATABASES.\"\n                % (\n                    settings_dict[\"NAME\"],\n                    len(settings_dict[\"NAME\"]),\n                    self.ops.max_name_length(),\n                )\n            )\n        if settings_dict[\"NAME\"]:\n            conn_params = {\n                \"dbname\": settings_dict[\"NAME\"],\n                **settings_dict[\"OPTIONS\"],\n            }\n        elif settings_dict[\"NAME\"] is None:\n            # Connect to the default 'postgres' db.\n            settings_dict[\"OPTIONS\"].pop(\"service\", None)\n            conn_params = {\"dbname\": \"postgres\", **settings_dict[\"OPTIONS\"]}\n        else:\n            conn_params = {**settings_dict[\"OPTIONS\"]}\n        conn_params[\"client_encoding\"] = \"UTF8\"\n\n        conn_params.pop(\"assume_role\", None)\n        conn_params.pop(\"isolation_level\", None)\n\n        pool_options = conn_params.pop(\"pool\", None)\n        if pool_options and not is_psycopg3:\n            raise ImproperlyConfigured(\"Database pooling requires psycopg >= 3\")\n\n        server_side_binding = conn_params.pop(\"server_side_binding\", None)\n        conn_params.setdefault(\n            \"cursor_factory\",\n            (\n                ServerBindingCursor\n                if is_psycopg3 and server_side_binding is True\n                else Cursor\n            ),\n        )\n        if settings_dict[\"USER\"]:\n            conn_params[\"user\"] = settings_dict[\"USER\"]\n        if settings_dict[\"PASSWORD\"]:\n            conn_params[\"password\"] = settings_dict[\"PASSWORD\"]\n        if settings_dict[\"HOST\"]:\n            conn_params[\"host\"] = settings_dict[\"HOST\"]\n        if settings_dict[\"PORT\"]:\n            conn_params[\"port\"] = settings_dict[\"PORT\"]\n        if is_psycopg3:\n            conn_params[\"context\"] = get_adapters_template(\n                settings.USE_TZ, self.timezone\n            )\n            # Disable prepared statements by default to keep connection poolers\n            # working. Can be reenabled via OPTIONS in the settings dict.\n            conn_params[\"prepare_threshold\"] = conn_params.pop(\n                \"prepare_threshold\", None\n            )\n        return conn_params\n\n    @async_unsafe\n    def get_new_connection(self, conn_params):\n        # self.isolation_level must be set:\n        # - after connecting to the database in order to obtain the database's\n        #   default when no value is explicitly specified in options.\n        # - before calling _set_autocommit() because if autocommit is on, that\n        #   will set connection.isolation_level to ISOLATION_LEVEL_AUTOCOMMIT.\n        options = self.settings_dict[\"OPTIONS\"]\n        set_isolation_level = False\n        try:\n            isolation_level_value = options[\"isolation_level\"]\n        except KeyError:\n            self.isolation_level = IsolationLevel.READ_COMMITTED\n        else:\n            # Set the isolation level to the value from OPTIONS.\n            try:\n                self.isolation_level = IsolationLevel(isolation_level_value)\n                set_isolation_level = True\n            except ValueError:\n                raise ImproperlyConfigured(\n                    f\"Invalid transaction isolation level {isolation_level_value} \"\n                    f\"specified. Use one of the psycopg.IsolationLevel values.\"\n                )\n        if self.pool:\n            # If nothing else has opened the pool, open it now.\n            self.pool.open()\n            connection = self.pool.getconn()\n        else:\n            connection = self.Database.connect(**conn_params)\n        if set_isolation_level:\n            connection.isolation_level = self.isolation_level\n        if not is_psycopg3:\n            # Register dummy loads() to avoid a round trip from psycopg2's\n            # decode to json.dumps() to json.loads(), when using a custom\n            # decoder in JSONField.\n            psycopg2.extras.register_default_jsonb(\n                conn_or_curs=connection, loads=lambda x: x\n            )\n        return connection\n\n    def ensure_timezone(self):\n        # Close the pool so new connections pick up the correct timezone.\n        self.close_pool()\n        if self.connection is None:\n            return False\n        return self._configure_timezone(self.connection)\n\n    def _configure_timezone(self, connection):\n        conn_timezone_name = connection.info.parameter_status(\"TimeZone\")\n        timezone_name = self.timezone_name\n        if timezone_name and conn_timezone_name != timezone_name:\n            with connection.cursor() as cursor:\n                cursor.execute(self.ops.set_time_zone_sql(), [timezone_name])\n            return True\n        return False\n\n    def _configure_role(self, connection):\n        if new_role := self.settings_dict[\"OPTIONS\"].get(\"assume_role\"):\n            with connection.cursor() as cursor:\n                sql = self.ops.compose_sql(\"SET ROLE %s\", [new_role])\n                cursor.execute(sql)\n            return True\n        return False\n\n    def _configure_connection(self, connection):\n        # This function is called from init_connection_state and from the\n        # psycopg pool itself after a connection is opened.\n\n        # Commit after setting the time zone.\n        commit_tz = self._configure_timezone(connection)\n        # Set the role on the connection. This is useful if the credential used\n        # to login is not the same as the role that owns database resources. As\n        # can be the case when using temporary or ephemeral credentials.\n        commit_role = self._configure_role(connection)\n\n        return commit_role or commit_tz\n\n    def _close(self):\n        if self.connection is not None:\n            # `wrap_database_errors` only works for `putconn` as long as there\n            # is no `reset` function set in the pool because it is deferred\n            # into a thread and not directly executed.\n            with self.wrap_database_errors:\n                if self.pool:\n                    # Ensure the correct pool is returned. This is a workaround\n                    # for tests so a pool can be changed on setting changes\n                    # (e.g. USE_TZ, TIME_ZONE).\n                    self.connection._pool.putconn(self.connection)\n                    # Connection can no longer be used.\n                    self.connection = None\n                else:\n                    return self.connection.close()\n\n    def init_connection_state(self):\n        super().init_connection_state()\n\n        if self.connection is not None and not self.pool:\n            commit = self._configure_connection(self.connection)\n\n            if commit and not self.get_autocommit():\n                self.connection.commit()\n\n    @async_unsafe\n    def create_cursor(self, name=None):\n        if name:\n            if is_psycopg3 and (\n                self.settings_dict[\"OPTIONS\"].get(\"server_side_binding\") is not True\n            ):\n                # psycopg >= 3 forces the usage of server-side bindings for\n                # named cursors so a specialized class that implements\n                # server-side cursors while performing client-side bindings\n                # must be used if `server_side_binding` is disabled (default).\n                cursor = ServerSideCursor(\n                    self.connection,\n                    name=name,\n                    scrollable=False,\n                    withhold=self.connection.autocommit,\n                )\n            else:\n                # In autocommit mode, the cursor will be used outside of a\n                # transaction, hence use a holdable cursor.\n                cursor = self.connection.cursor(\n                    name, scrollable=False, withhold=self.connection.autocommit\n                )\n        else:\n            cursor = self.connection.cursor()\n\n        if is_psycopg3:\n            # Register the cursor timezone only if the connection disagrees, to\n            # avoid copying the adapter map.\n            tzloader = self.connection.adapters.get_loader(TIMESTAMPTZ_OID, Format.TEXT)\n            if self.timezone != tzloader.timezone:\n                register_tzloader(self.timezone, cursor)\n        else:\n            cursor.tzinfo_factory = self.tzinfo_factory if settings.USE_TZ else None\n        return cursor\n\n    def tzinfo_factory(self, offset):\n        return self.timezone\n\n    @async_unsafe\n    def chunked_cursor(self):\n        self._named_cursor_idx += 1\n        # Get the current async task\n        # Note that right now this is behind @async_unsafe, so this is\n        # unreachable, but in future we'll start loosening this restriction.\n        # For now, it's here so that every use of \"threading\" is\n        # also async-compatible.\n        try:\n            current_task = asyncio.current_task()\n        except RuntimeError:\n            current_task = None\n        # Current task can be none even if the current_task call didn't error\n        if current_task:\n            task_ident = str(id(current_task))\n        else:\n            task_ident = \"sync\"\n        # Use that and the thread ident to get a unique name\n        return self._cursor(\n            name=\"_django_curs_%d_%s_%d\"\n            % (\n                # Avoid reusing name in other threads / tasks\n                threading.current_thread().ident,\n                task_ident,\n                self._named_cursor_idx,\n            )\n        )\n\n    def _set_autocommit(self, autocommit):\n        with self.wrap_database_errors:\n            self.connection.autocommit = autocommit\n\n    def check_constraints(self, table_names=None):\n        \"\"\"\n        Check constraints by setting them to immediate. Return them to deferred\n        afterward.\n        \"\"\"\n        with self.cursor() as cursor:\n            cursor.execute(\"SET CONSTRAINTS ALL IMMEDIATE\")\n            cursor.execute(\"SET CONSTRAINTS ALL DEFERRED\")\n\n    def is_usable(self):\n        if self.connection is None:\n            return False\n        try:\n            # Use a psycopg cursor directly, bypassing Django's utilities.\n            with self.connection.cursor() as cursor:\n                cursor.execute(\"SELECT 1\")\n        except Database.Error:\n            return False\n        else:\n            return True\n\n    def close_if_health_check_failed(self):\n        if self.pool:\n            # The pool only returns healthy connections.\n            return\n        return super().close_if_health_check_failed()\n\n    @contextmanager\n    def _nodb_cursor(self):\n        cursor = None\n        try:\n            with super()._nodb_cursor() as cursor:\n                yield cursor\n        except (Database.DatabaseError, WrappedDatabaseError):\n            if cursor is not None:\n                raise\n            warnings.warn(\n                \"Normally Django will use a connection to the 'postgres' database \"\n                \"to avoid running initialization queries against the production \"\n                \"database when it's not needed (for example, when running tests). \"\n                \"Django was unable to create a connection to the 'postgres' database \"\n                \"and will use the first PostgreSQL database instead.\",\n                RuntimeWarning,\n            )\n            for connection in connections.all():\n                if (\n                    connection.vendor == \"postgresql\"\n                    and connection.settings_dict[\"NAME\"] != \"postgres\"\n                ):\n                    conn = self.__class__(\n                        {\n                            **self.settings_dict,\n                            \"NAME\": connection.settings_dict[\"NAME\"],\n                        },\n                        alias=self.alias,\n                    )\n                    try:\n                        with conn.cursor() as cursor:\n                            yield cursor\n                    finally:\n                        conn.close()\n                    break\n            else:\n                raise\n\n    @cached_property\n    def pg_version(self):\n        with self.temporary_connection():\n            return self.connection.info.server_version\n\n    def make_debug_cursor(self, cursor):\n        return CursorDebugWrapper(cursor, self)"}],"ground_truth":null,"score":null},
{"question":"What are the parameters and expected behavior of the `_test_database_tblspace_datafile` method in the `DatabaseCreation`?","answer":"","relative_code_list":[{"start_line":9,"end_line":91,"belongs_to":{"file_name":"creation.py","upper_path":"../django/django/db/backends/postgresql","module":"postgresql","define_class":["DatabaseCreation"],"imports":["sys","django.core.exceptions.ImproperlyConfigured","django.db.backends.base.creation.BaseDatabaseCreation","django.db.backends.postgresql.psycopg_any.errors","django.db.backends.utils.strip_quotes"]},"relative_function":[],"code":"class DatabaseCreation(BaseDatabaseCreation):\n    def _quote_name(self, name):\n        return self.connection.ops.quote_name(name)\n\n    def _get_database_create_suffix(self, encoding=None, template=None):\n        suffix = \"\"\n        if encoding:\n            suffix += \" ENCODING '{}'\".format(encoding)\n        if template:\n            suffix += \" TEMPLATE {}\".format(self._quote_name(template))\n        return suffix and \"WITH\" + suffix\n\n    def sql_table_creation_suffix(self):\n        test_settings = self.connection.settings_dict[\"TEST\"]\n        if test_settings.get(\"COLLATION\") is not None:\n            raise ImproperlyConfigured(\n                \"PostgreSQL does not support collation setting at database \"\n                \"creation time.\"\n            )\n        return self._get_database_create_suffix(\n            encoding=test_settings[\"CHARSET\"],\n            template=test_settings.get(\"TEMPLATE\"),\n        )\n\n    def _database_exists(self, cursor, database_name):\n        cursor.execute(\n            \"SELECT 1 FROM pg_catalog.pg_database WHERE datname = %s\",\n            [strip_quotes(database_name)],\n        )\n        return cursor.fetchone() is not None\n\n    def _execute_create_test_db(self, cursor, parameters, keepdb=False):\n        try:\n            if keepdb and self._database_exists(cursor, parameters[\"dbname\"]):\n                # If the database should be kept and it already exists, don't\n                # try to create a new one.\n                return\n            super()._execute_create_test_db(cursor, parameters, keepdb)\n        except Exception as e:\n            if not isinstance(e.__cause__, errors.DuplicateDatabase):\n                # All errors except \"database already exists\" cancel tests.\n                self.log(\"Got an error creating the test database: %s\" % e)\n                sys.exit(2)\n            elif not keepdb:\n                # If the database should be kept, ignore \"database already\n                # exists\".\n                raise\n\n    def _clone_test_db(self, suffix, verbosity, keepdb=False):\n        # CREATE DATABASE ... WITH TEMPLATE ... requires closing connections\n        # to the template database.\n        self.connection.close()\n        self.connection.close_pool()\n\n        source_database_name = self.connection.settings_dict[\"NAME\"]\n        target_database_name = self.get_test_db_clone_settings(suffix)[\"NAME\"]\n        test_db_params = {\n            \"dbname\": self._quote_name(target_database_name),\n            \"suffix\": self._get_database_create_suffix(template=source_database_name),\n        }\n        with self._nodb_cursor() as cursor:\n            try:\n                self._execute_create_test_db(cursor, test_db_params, keepdb)\n            except Exception:\n                try:\n                    if verbosity >= 1:\n                        self.log(\n                            \"Destroying old test database for alias %s...\"\n                            % (\n                                self._get_database_display_str(\n                                    verbosity, target_database_name\n                                ),\n                            )\n                        )\n                    cursor.execute(\"DROP DATABASE %(dbname)s\" % test_db_params)\n                    self._execute_create_test_db(cursor, test_db_params, keepdb)\n                except Exception as e:\n                    self.log(\"Got an error cloning the test database: %s\" % e)\n                    sys.exit(2)\n\n    def _destroy_test_db(self, test_database_name, verbosity):\n        self.connection.close_pool()\n        return super()._destroy_test_db(test_database_name, verbosity)"},{"start_line":422,"end_line":424,"belongs_to":{"file_name":"creation.py","upper_path":"../django/django/db/backends/oracle","module":"oracle","define_class":["DatabaseCreation"],"imports":["sys","django.conf.settings","django.db.DatabaseError","django.db.backends.base.creation.BaseDatabaseCreation","django.utils.crypto.get_random_string","django.utils.functional.cached_property"]},"relative_function":[],"code":"def _test_database_tblspace_datafile(self):\n        tblspace = \"%s.dbf\" % self._test_database_tblspace()\n        return self._test_settings_get(\"DATAFILE\", default=tblspace)"}],"ground_truth":null,"score":null},
{"question":"What are the parameters and expected behavior of the `__init__` method in the `BaseDatabaseCreation`?","answer":"","relative_code_list":[{"start_line":19,"end_line":398,"belongs_to":{"file_name":"creation.py","upper_path":"../django/django/db/backends/base","module":"base","define_class":["BaseDatabaseCreation"],"imports":["os","sys","warnings","io.StringIO","django.apps.apps","django.conf.settings","django.core.serializers","django.db.router","django.db.transaction.atomic","django.utils.deprecation.RemovedInDjango70Warning","django.utils.module_loading.import_string","django.core.management.call_command","unittest.expectedFailure","unittest.skip","django.db.migrations.loader.MigrationLoader"]},"relative_function":[],"code":"class BaseDatabaseCreation:\n    \"\"\"\n    Encapsulate backend-specific differences pertaining to creation and\n    destruction of the test database.\n    \"\"\"\n\n    def __init__(self, connection):\n        self.connection = connection\n\n    def _nodb_cursor(self):\n        return self.connection._nodb_cursor()\n\n    def log(self, msg):\n        sys.stderr.write(msg + os.linesep)\n\n    # RemovedInDjango70Warning: When the deprecation ends, replace with:\n    # def create_test_db(self, verbosity=1, autoclobber=False, keepdb=False):\n    def create_test_db(\n        self, verbosity=1, autoclobber=False, serialize=None, keepdb=False\n    ):\n        \"\"\"\n        Create a test database, prompting the user for confirmation if the\n        database already exists. Return the name of the test database created.\n        \"\"\"\n        # Don't import django.core.management if it isn't needed.\n        from django.core.management import call_command\n\n        test_database_name = self._get_test_db_name()\n\n        if verbosity >= 1:\n            action = \"Creating\"\n            if keepdb:\n                action = \"Using existing\"\n\n            self.log(\n                \"%s test database for alias %s...\"\n                % (\n                    action,\n                    self._get_database_display_str(verbosity, test_database_name),\n                )\n            )\n\n        # We could skip this call if keepdb is True, but we instead\n        # give it the keepdb param. This is to handle the case\n        # where the test DB doesn't exist, in which case we need to\n        # create it, then just not destroy it. If we instead skip\n        # this, we will get an exception.\n        self._create_test_db(verbosity, autoclobber, keepdb)\n\n        self.connection.close()\n        settings.DATABASES[self.connection.alias][\"NAME\"] = test_database_name\n        self.connection.settings_dict[\"NAME\"] = test_database_name\n\n        try:\n            if self.connection.settings_dict[\"TEST\"][\"MIGRATE\"] is False:\n                # Disable migrations for all apps.\n                old_migration_modules = settings.MIGRATION_MODULES\n                settings.MIGRATION_MODULES = {\n                    app.label: None for app in apps.get_app_configs()\n                }\n            # We report migrate messages at one level lower than that\n            # requested. This ensures we don't get flooded with messages during\n            # testing (unless you really ask to be flooded).\n            call_command(\n                \"migrate\",\n                verbosity=max(verbosity - 1, 0),\n                interactive=False,\n                database=self.connection.alias,\n                run_syncdb=True,\n            )\n        finally:\n            if self.connection.settings_dict[\"TEST\"][\"MIGRATE\"] is False:\n                settings.MIGRATION_MODULES = old_migration_modules\n\n        # We then serialize the current state of the database into a string\n        # and store it on the connection. This slightly horrific process is so people\n        # who are testing on databases without transactions or who are using\n        # a TransactionTestCase still get a clean database on every test run.\n        if serialize is not None:\n            warnings.warn(\n                \"DatabaseCreation.create_test_db(serialize) is deprecated. Call \"\n                \"DatabaseCreation.serialize_test_db() once all test databases are set \"\n                \"up instead if you need fixtures persistence between tests.\",\n                stacklevel=2,\n                category=RemovedInDjango70Warning,\n            )\n            if serialize:\n                self.connection._test_serialized_contents = (\n                    self.serialize_db_to_string()\n                )\n\n        call_command(\"createcachetable\", database=self.connection.alias)\n\n        # Ensure a connection for the side effect of initializing the test database.\n        self.connection.ensure_connection()\n\n        if os.environ.get(\"RUNNING_DJANGOS_TEST_SUITE\") == \"true\":\n            self.mark_expected_failures_and_skips()\n\n        return test_database_name\n\n    def set_as_test_mirror(self, primary_settings_dict):\n        \"\"\"\n        Set this database up to be used in testing as a mirror of a primary\n        database whose settings are given.\n        \"\"\"\n        self.connection.settings_dict[\"NAME\"] = primary_settings_dict[\"NAME\"]\n\n    def serialize_db_to_string(self):\n        \"\"\"\n        Serialize all data in the database into a JSON string.\n        Designed only for test runner usage; will not handle large\n        amounts of data.\n        \"\"\"\n\n        # Iteratively return every object for all models to serialize.\n        def get_objects():\n            from django.db.migrations.loader import MigrationLoader\n\n            loader = MigrationLoader(self.connection)\n            for app_config in apps.get_app_configs():\n                if (\n                    app_config.models_module is not None\n                    and app_config.label in loader.migrated_apps\n                    and app_config.name not in settings.TEST_NON_SERIALIZED_APPS\n                ):\n                    for model in app_config.get_models():\n                        if model._meta.can_migrate(\n                            self.connection\n                        ) and router.allow_migrate_model(self.connection.alias, model):\n                            queryset = model._base_manager.using(\n                                self.connection.alias,\n                            ).order_by(model._meta.pk.name)\n                            chunk_size = (\n                                2000 if queryset._prefetch_related_lookups else None\n                            )\n                            yield from queryset.iterator(chunk_size=chunk_size)\n\n        # Serialize to a string\n        out = StringIO()\n        serializers.serialize(\"json\", get_objects(), indent=None, stream=out)\n        return out.getvalue()\n\n    def deserialize_db_from_string(self, data):\n        \"\"\"\n        Reload the database with data from a string generated by\n        the serialize_db_to_string() method.\n        \"\"\"\n        data = StringIO(data)\n        table_names = set()\n        # Load data in a transaction to handle forward references and cycles.\n        with atomic(using=self.connection.alias):\n            # Disable constraint checks, because some databases (MySQL) doesn't\n            # support deferred checks.\n            with self.connection.constraint_checks_disabled():\n                for obj in serializers.deserialize(\n                    \"json\", data, using=self.connection.alias\n                ):\n                    obj.save()\n                    table_names.add(obj.object.__class__._meta.db_table)\n            # Manually check for any invalid keys that might have been added,\n            # because constraint checks were disabled.\n            self.connection.check_constraints(table_names=table_names)\n\n    def _get_database_display_str(self, verbosity, database_name):\n        \"\"\"\n        Return display string for a database for use in various actions.\n        \"\"\"\n        return \"'%s'%s\" % (\n            self.connection.alias,\n            (\" ('%s')\" % database_name) if verbosity >= 2 else \"\",\n        )\n\n    def _get_test_db_name(self):\n        \"\"\"\n        Internal implementation - return the name of the test DB that will be\n        created. Only useful when called from create_test_db() and\n        _create_test_db() and when no external munging is done with the 'NAME'\n        settings.\n        \"\"\"\n        if self.connection.settings_dict[\"TEST\"][\"NAME\"]:\n            return self.connection.settings_dict[\"TEST\"][\"NAME\"]\n        return TEST_DATABASE_PREFIX + self.connection.settings_dict[\"NAME\"]\n\n    def _execute_create_test_db(self, cursor, parameters, keepdb=False):\n        cursor.execute(\"CREATE DATABASE %(dbname)s %(suffix)s\" % parameters)\n\n    def _create_test_db(self, verbosity, autoclobber, keepdb=False):\n        \"\"\"\n        Internal implementation - create the test db tables.\n        \"\"\"\n        test_database_name = self._get_test_db_name()\n        test_db_params = {\n            \"dbname\": self.connection.ops.quote_name(test_database_name),\n            \"suffix\": self.sql_table_creation_suffix(),\n        }\n        # Create the test database and connect to it.\n        with self._nodb_cursor() as cursor:\n            try:\n                self._execute_create_test_db(cursor, test_db_params, keepdb)\n            except Exception as e:\n                # if we want to keep the db, then no need to do any of the below,\n                # just return and skip it all.\n                if keepdb:\n                    return test_database_name\n\n                self.log(\"Got an error creating the test database: %s\" % e)\n                if not autoclobber:\n                    confirm = input(\n                        \"Type 'yes' if you would like to try deleting the test \"\n                        \"database '%s', or 'no' to cancel: \" % test_database_name\n                    )\n                if autoclobber or confirm == \"yes\":\n                    try:\n                        if verbosity >= 1:\n                            self.log(\n                                \"Destroying old test database for alias %s...\"\n                                % (\n                                    self._get_database_display_str(\n                                        verbosity, test_database_name\n                                    ),\n                                )\n                            )\n                        cursor.execute(\"DROP DATABASE %(dbname)s\" % test_db_params)\n                        self._execute_create_test_db(cursor, test_db_params, keepdb)\n                    except Exception as e:\n                        self.log(\"Got an error recreating the test database: %s\" % e)\n                        sys.exit(2)\n                else:\n                    self.log(\"Tests cancelled.\")\n                    sys.exit(1)\n\n        return test_database_name\n\n    def clone_test_db(self, suffix, verbosity=1, autoclobber=False, keepdb=False):\n        \"\"\"\n        Clone a test database.\n        \"\"\"\n        source_database_name = self.connection.settings_dict[\"NAME\"]\n\n        if verbosity >= 1:\n            action = \"Cloning test database\"\n            if keepdb:\n                action = \"Using existing clone\"\n            self.log(\n                \"%s for alias %s...\"\n                % (\n                    action,\n                    self._get_database_display_str(verbosity, source_database_name),\n                )\n            )\n\n        # We could skip this call if keepdb is True, but we instead\n        # give it the keepdb param. See create_test_db for details.\n        self._clone_test_db(suffix, verbosity, keepdb)\n\n    def get_test_db_clone_settings(self, suffix):\n        \"\"\"\n        Return a modified connection settings dict for the n-th clone of a DB.\n        \"\"\"\n        # When this function is called, the test database has been created\n        # already and its name has been copied to settings_dict['NAME'] so\n        # we don't need to call _get_test_db_name.\n        orig_settings_dict = self.connection.settings_dict\n        return {\n            **orig_settings_dict,\n            \"NAME\": \"{}_{}\".format(orig_settings_dict[\"NAME\"], suffix),\n        }\n\n    def _clone_test_db(self, suffix, verbosity, keepdb=False):\n        \"\"\"\n        Internal implementation - duplicate the test db tables.\n        \"\"\"\n        raise NotImplementedError(\n            \"The database backend doesn't support cloning databases. \"\n            \"Disable the option to run tests in parallel processes.\"\n        )\n\n    def destroy_test_db(\n        self, old_database_name=None, verbosity=1, keepdb=False, suffix=None\n    ):\n        \"\"\"\n        Destroy a test database, prompting the user for confirmation if the\n        database already exists.\n        \"\"\"\n        self.connection.close()\n        if suffix is None:\n            test_database_name = self.connection.settings_dict[\"NAME\"]\n        else:\n            test_database_name = self.get_test_db_clone_settings(suffix)[\"NAME\"]\n\n        if verbosity >= 1:\n            action = \"Destroying\"\n            if keepdb:\n                action = \"Preserving\"\n            self.log(\n                \"%s test database for alias %s...\"\n                % (\n                    action,\n                    self._get_database_display_str(verbosity, test_database_name),\n                )\n            )\n\n        # if we want to preserve the database\n        # skip the actual destroying piece.\n        if not keepdb:\n            self._destroy_test_db(test_database_name, verbosity)\n\n        # Restore the original database name\n        if old_database_name is not None:\n            settings.DATABASES[self.connection.alias][\"NAME\"] = old_database_name\n            self.connection.settings_dict[\"NAME\"] = old_database_name\n\n    def _destroy_test_db(self, test_database_name, verbosity):\n        \"\"\"\n        Internal implementation - remove the test db tables.\n        \"\"\"\n        # Remove the test database to clean up after\n        # ourselves. Connect to the previous database (not the test database)\n        # to do so, because it's not allowed to delete a database while being\n        # connected to it.\n        with self._nodb_cursor() as cursor:\n            cursor.execute(\n                \"DROP DATABASE %s\" % self.connection.ops.quote_name(test_database_name)\n            )\n\n    def mark_expected_failures_and_skips(self):\n        \"\"\"\n        Mark tests in Django's test suite which are expected failures on this\n        database and test which should be skipped on this database.\n        \"\"\"\n        # Only load unittest if we're actually testing.\n        from unittest import expectedFailure, skip\n\n        for test_name in self.connection.features.django_test_expected_failures:\n            test_case_name, _, test_method_name = test_name.rpartition(\".\")\n            test_app = test_name.split(\".\")[0]\n            # Importing a test app that isn't installed raises RuntimeError.\n            if test_app in settings.INSTALLED_APPS:\n                test_case = import_string(test_case_name)\n                test_method = getattr(test_case, test_method_name)\n                setattr(test_case, test_method_name, expectedFailure(test_method))\n        for reason, tests in self.connection.features.django_test_skips.items():\n            for test_name in tests:\n                test_case_name, _, test_method_name = test_name.rpartition(\".\")\n                test_app = test_name.split(\".\")[0]\n                # Importing a test app that isn't installed raises RuntimeError.\n                if test_app in settings.INSTALLED_APPS:\n                    test_case = import_string(test_case_name)\n                    test_method = getattr(test_case, test_method_name)\n                    setattr(test_case, test_method_name, skip(reason)(test_method))\n\n    def sql_table_creation_suffix(self):\n        \"\"\"\n        SQL to append to the end of the test table creation statements.\n        \"\"\"\n        return \"\"\n\n    def test_db_signature(self):\n        \"\"\"\n        Return a tuple with elements of self.connection.settings_dict (a\n        DATABASES setting value) that uniquely identify a database\n        accordingly to the RDBMS particularities.\n        \"\"\"\n        settings_dict = self.connection.settings_dict\n        return (\n            settings_dict[\"HOST\"],\n            settings_dict[\"PORT\"],\n            settings_dict[\"ENGINE\"],\n            self._get_test_db_name(),\n        )\n\n    def setup_worker_connection(self, _worker_id):\n        settings_dict = self.get_test_db_clone_settings(str(_worker_id))\n        # connection.settings_dict must be updated in place for changes to be\n        # reflected in django.db.connections. If the following line assigned\n        # connection.settings_dict = settings_dict, new threads would connect\n        # to the default database instead of the appropriate clone.\n        self.connection.settings_dict.update(settings_dict)\n        self.connection.close()"},{"start_line":25,"end_line":26,"belongs_to":{"file_name":"creation.py","upper_path":"../django/django/db/backends/base","module":"base","define_class":["BaseDatabaseCreation"],"imports":["os","sys","warnings","io.StringIO","django.apps.apps","django.conf.settings","django.core.serializers","django.db.router","django.db.transaction.atomic","django.utils.deprecation.RemovedInDjango70Warning","django.utils.module_loading.import_string","django.core.management.call_command","unittest.expectedFailure","unittest.skip","django.db.migrations.loader.MigrationLoader"]},"relative_function":[],"code":"def __init__(self, connection):\n        self.connection = connection"}],"ground_truth":null,"score":null},
{"question":"Where can I find the file or module that defines the `SQLInsertCompiler` in the codebase?","answer":"","relative_code_list":[{"start_line":28,"end_line":50,"belongs_to":{"file_name":"compiler.py","upper_path":"../django/django/db/backends/postgresql","module":"postgresql","define_class":["InsertUnnest","SQLInsertCompiler"],"imports":["django.db.models.sql.compiler.SQLAggregateCompiler","django.db.models.sql.compiler.SQLCompiler","django.db.models.sql.compiler.SQLDeleteCompiler","django.db.models.sql.compiler.SQLInsertCompiler","django.db.models.sql.compiler.SQLUpdateCompiler"]},"relative_function":[],"code":"class SQLInsertCompiler(BaseSQLInsertCompiler):\n    def assemble_as_sql(self, fields, value_rows):\n        # Specialize bulk-insertion of literal non-array values through\n        # UNNEST to reduce the time spent planning the query.\n        if (\n            # The optimization is not worth doing if there is a single\n            # row as it will result in the same number of placeholders.\n            len(value_rows) <= 1\n            # Lack of fields denote the usage of the DEFAULT keyword\n            # for the insertion of empty rows.\n            or any(field is None for field in fields)\n            # Compilable cannot be combined in an array of literal values.\n            or any(any(hasattr(value, \"as_sql\") for value in row) for row in value_rows)\n        ):\n            return super().assemble_as_sql(fields, value_rows)\n        db_types = [field.db_type(self.connection) for field in fields]\n        # Abort if any of the fields are arrays as UNNEST indiscriminately\n        # flatten them instead of reducing their nesting by one.\n        if any(db_type.endswith(\"]\") for db_type in db_types):\n            return super().assemble_as_sql(fields, value_rows)\n        return InsertUnnest([\"(%%s)::%s[]\" % db_type for db_type in db_types]), [\n            list(map(list, zip(*value_rows)))\n        ]"}],"ground_truth":null,"score":null},
{"question":"What is the purpose of the `pattern_esc` attribute in the `DatabaseWrapper`, and how does it affect other features?","answer":"","relative_code_list":[{"start_line":89,"end_line":547,"belongs_to":{"file_name":"base.py","upper_path":"../django/django/db/backends/postgresql","module":"postgresql","define_class":["DatabaseWrapper","CursorMixin","ServerBindingCursor","Cursor","ServerSideCursor","CursorDebugWrapper","CursorDebugWrapper"],"imports":["asyncio","threading","warnings","contextlib.contextmanager","django.conf.settings","django.core.exceptions.ImproperlyConfigured","django.db.DatabaseError","django.db.connections","django.db.backends.base.base.NO_DB_ALIAS","django.db.backends.base.base.BaseDatabaseWrapper","django.db.backends.utils.CursorDebugWrapper","django.utils.asyncio.async_unsafe","django.utils.functional.cached_property","django.utils.safestring.SafeString","django.utils.version.get_version_tuple","psycopg_any.IsolationLevel","psycopg_any.is_psycopg3","client.DatabaseClient","creation.DatabaseCreation","features.DatabaseFeatures","introspection.DatabaseIntrospection","operations.DatabaseOperations","schema.DatabaseSchemaEditor","psycopg.adapters","psycopg.sql","psycopg.pq.Format","psycopg_any.get_adapters_template","psycopg_any.register_tzloader","psycopg2.extensions","psycopg2.extras","psycopg","psycopg2","psycopg_pool.ConnectionPool"]},"relative_function":[],"code":"class DatabaseWrapper(BaseDatabaseWrapper):\n    vendor = \"postgresql\"\n    display_name = \"PostgreSQL\"\n    # This dictionary maps Field objects to their associated PostgreSQL column\n    # types, as strings. Column-type strings can contain format strings; they'll\n    # be interpolated against the values of Field.__dict__ before being output.\n    # If a column type is set to None, it won't be included in the output.\n    data_types = {\n        \"AutoField\": \"integer\",\n        \"BigAutoField\": \"bigint\",\n        \"BinaryField\": \"bytea\",\n        \"BooleanField\": \"boolean\",\n        \"CharField\": _get_varchar_column,\n        \"DateField\": \"date\",\n        \"DateTimeField\": \"timestamp with time zone\",\n        \"DecimalField\": \"numeric(%(max_digits)s, %(decimal_places)s)\",\n        \"DurationField\": \"interval\",\n        \"FileField\": \"varchar(%(max_length)s)\",\n        \"FilePathField\": \"varchar(%(max_length)s)\",\n        \"FloatField\": \"double precision\",\n        \"IntegerField\": \"integer\",\n        \"BigIntegerField\": \"bigint\",\n        \"IPAddressField\": \"inet\",\n        \"GenericIPAddressField\": \"inet\",\n        \"JSONField\": \"jsonb\",\n        \"OneToOneField\": \"integer\",\n        \"PositiveBigIntegerField\": \"bigint\",\n        \"PositiveIntegerField\": \"integer\",\n        \"PositiveSmallIntegerField\": \"smallint\",\n        \"SlugField\": \"varchar(%(max_length)s)\",\n        \"SmallAutoField\": \"smallint\",\n        \"SmallIntegerField\": \"smallint\",\n        \"TextField\": \"text\",\n        \"TimeField\": \"time\",\n        \"UUIDField\": \"uuid\",\n    }\n    data_type_check_constraints = {\n        \"PositiveBigIntegerField\": '\"%(column)s\" >= 0',\n        \"PositiveIntegerField\": '\"%(column)s\" >= 0',\n        \"PositiveSmallIntegerField\": '\"%(column)s\" >= 0',\n    }\n    data_types_suffix = {\n        \"AutoField\": \"GENERATED BY DEFAULT AS IDENTITY\",\n        \"BigAutoField\": \"GENERATED BY DEFAULT AS IDENTITY\",\n        \"SmallAutoField\": \"GENERATED BY DEFAULT AS IDENTITY\",\n    }\n    operators = {\n        \"exact\": \"= %s\",\n        \"iexact\": \"= UPPER(%s)\",\n        \"contains\": \"LIKE %s\",\n        \"icontains\": \"LIKE UPPER(%s)\",\n        \"regex\": \"~ %s\",\n        \"iregex\": \"~* %s\",\n        \"gt\": \"> %s\",\n        \"gte\": \">= %s\",\n        \"lt\": \"< %s\",\n        \"lte\": \"<= %s\",\n        \"startswith\": \"LIKE %s\",\n        \"endswith\": \"LIKE %s\",\n        \"istartswith\": \"LIKE UPPER(%s)\",\n        \"iendswith\": \"LIKE UPPER(%s)\",\n    }\n\n    # The patterns below are used to generate SQL pattern lookup clauses when\n    # the right-hand side of the lookup isn't a raw string (it might be an expression\n    # or the result of a bilateral transformation).\n    # In those cases, special characters for LIKE operators (e.g. \\, *, _) should be\n    # escaped on database side.\n    #\n    # Note: we use str.format() here for readability as '%' is used as a wildcard for\n    # the LIKE operator.\n    pattern_esc = (\n        r\"REPLACE(REPLACE(REPLACE({}, E'\\\\', E'\\\\\\\\'), E'%%', E'\\\\%%'), E'_', E'\\\\_')\"\n    )\n    pattern_ops = {\n        \"contains\": \"LIKE '%%' || {} || '%%'\",\n        \"icontains\": \"LIKE '%%' || UPPER({}) || '%%'\",\n        \"startswith\": \"LIKE {} || '%%'\",\n        \"istartswith\": \"LIKE UPPER({}) || '%%'\",\n        \"endswith\": \"LIKE '%%' || {}\",\n        \"iendswith\": \"LIKE '%%' || UPPER({})\",\n    }\n\n    Database = Database\n    SchemaEditorClass = DatabaseSchemaEditor\n    # Classes instantiated in __init__().\n    client_class = DatabaseClient\n    creation_class = DatabaseCreation\n    features_class = DatabaseFeatures\n    introspection_class = DatabaseIntrospection\n    ops_class = DatabaseOperations\n    # PostgreSQL backend-specific attributes.\n    _named_cursor_idx = 0\n    _connection_pools = {}\n\n    @property\n    def pool(self):\n        pool_options = self.settings_dict[\"OPTIONS\"].get(\"pool\")\n        if self.alias == NO_DB_ALIAS or not pool_options:\n            return None\n\n        if self.alias not in self._connection_pools:\n            if self.settings_dict.get(\"CONN_MAX_AGE\", 0) != 0:\n                raise ImproperlyConfigured(\n                    \"Pooling doesn't support persistent connections.\"\n                )\n            # Set the default options.\n            if pool_options is True:\n                pool_options = {}\n\n            try:\n                from psycopg_pool import ConnectionPool\n            except ImportError as err:\n                raise ImproperlyConfigured(\n                    \"Error loading psycopg_pool module.\\nDid you install psycopg[pool]?\"\n                ) from err\n\n            connect_kwargs = self.get_connection_params()\n            # Ensure we run in autocommit, Django properly sets it later on.\n            connect_kwargs[\"autocommit\"] = True\n            enable_checks = self.settings_dict[\"CONN_HEALTH_CHECKS\"]\n            pool = ConnectionPool(\n                kwargs=connect_kwargs,\n                open=False,  # Do not open the pool during startup.\n                configure=self._configure_connection,\n                check=ConnectionPool.check_connection if enable_checks else None,\n                **pool_options,\n            )\n            # setdefault() ensures that multiple threads don't set this in\n            # parallel. Since we do not open the pool during it's init above,\n            # this means that at worst during startup multiple threads generate\n            # pool objects and the first to set it wins.\n            self._connection_pools.setdefault(self.alias, pool)\n\n        return self._connection_pools[self.alias]\n\n    def close_pool(self):\n        if self.pool:\n            self.pool.close()\n            del self._connection_pools[self.alias]\n\n    def get_database_version(self):\n        \"\"\"\n        Return a tuple of the database's version.\n        E.g. for pg_version 120004, return (12, 4).\n        \"\"\"\n        return divmod(self.pg_version, 10000)\n\n    def get_connection_params(self):\n        settings_dict = self.settings_dict\n        # None may be used to connect to the default 'postgres' db\n        if settings_dict[\"NAME\"] == \"\" and not settings_dict[\"OPTIONS\"].get(\"service\"):\n            raise ImproperlyConfigured(\n                \"settings.DATABASES is improperly configured. \"\n                \"Please supply the NAME or OPTIONS['service'] value.\"\n            )\n        if len(settings_dict[\"NAME\"] or \"\") > self.ops.max_name_length():\n            raise ImproperlyConfigured(\n                \"The database name '%s' (%d characters) is longer than \"\n                \"PostgreSQL's limit of %d characters. Supply a shorter NAME \"\n                \"in settings.DATABASES.\"\n                % (\n                    settings_dict[\"NAME\"],\n                    len(settings_dict[\"NAME\"]),\n                    self.ops.max_name_length(),\n                )\n            )\n        if settings_dict[\"NAME\"]:\n            conn_params = {\n                \"dbname\": settings_dict[\"NAME\"],\n                **settings_dict[\"OPTIONS\"],\n            }\n        elif settings_dict[\"NAME\"] is None:\n            # Connect to the default 'postgres' db.\n            settings_dict[\"OPTIONS\"].pop(\"service\", None)\n            conn_params = {\"dbname\": \"postgres\", **settings_dict[\"OPTIONS\"]}\n        else:\n            conn_params = {**settings_dict[\"OPTIONS\"]}\n        conn_params[\"client_encoding\"] = \"UTF8\"\n\n        conn_params.pop(\"assume_role\", None)\n        conn_params.pop(\"isolation_level\", None)\n\n        pool_options = conn_params.pop(\"pool\", None)\n        if pool_options and not is_psycopg3:\n            raise ImproperlyConfigured(\"Database pooling requires psycopg >= 3\")\n\n        server_side_binding = conn_params.pop(\"server_side_binding\", None)\n        conn_params.setdefault(\n            \"cursor_factory\",\n            (\n                ServerBindingCursor\n                if is_psycopg3 and server_side_binding is True\n                else Cursor\n            ),\n        )\n        if settings_dict[\"USER\"]:\n            conn_params[\"user\"] = settings_dict[\"USER\"]\n        if settings_dict[\"PASSWORD\"]:\n            conn_params[\"password\"] = settings_dict[\"PASSWORD\"]\n        if settings_dict[\"HOST\"]:\n            conn_params[\"host\"] = settings_dict[\"HOST\"]\n        if settings_dict[\"PORT\"]:\n            conn_params[\"port\"] = settings_dict[\"PORT\"]\n        if is_psycopg3:\n            conn_params[\"context\"] = get_adapters_template(\n                settings.USE_TZ, self.timezone\n            )\n            # Disable prepared statements by default to keep connection poolers\n            # working. Can be reenabled via OPTIONS in the settings dict.\n            conn_params[\"prepare_threshold\"] = conn_params.pop(\n                \"prepare_threshold\", None\n            )\n        return conn_params\n\n    @async_unsafe\n    def get_new_connection(self, conn_params):\n        # self.isolation_level must be set:\n        # - after connecting to the database in order to obtain the database's\n        #   default when no value is explicitly specified in options.\n        # - before calling _set_autocommit() because if autocommit is on, that\n        #   will set connection.isolation_level to ISOLATION_LEVEL_AUTOCOMMIT.\n        options = self.settings_dict[\"OPTIONS\"]\n        set_isolation_level = False\n        try:\n            isolation_level_value = options[\"isolation_level\"]\n        except KeyError:\n            self.isolation_level = IsolationLevel.READ_COMMITTED\n        else:\n            # Set the isolation level to the value from OPTIONS.\n            try:\n                self.isolation_level = IsolationLevel(isolation_level_value)\n                set_isolation_level = True\n            except ValueError:\n                raise ImproperlyConfigured(\n                    f\"Invalid transaction isolation level {isolation_level_value} \"\n                    f\"specified. Use one of the psycopg.IsolationLevel values.\"\n                )\n        if self.pool:\n            # If nothing else has opened the pool, open it now.\n            self.pool.open()\n            connection = self.pool.getconn()\n        else:\n            connection = self.Database.connect(**conn_params)\n        if set_isolation_level:\n            connection.isolation_level = self.isolation_level\n        if not is_psycopg3:\n            # Register dummy loads() to avoid a round trip from psycopg2's\n            # decode to json.dumps() to json.loads(), when using a custom\n            # decoder in JSONField.\n            psycopg2.extras.register_default_jsonb(\n                conn_or_curs=connection, loads=lambda x: x\n            )\n        return connection\n\n    def ensure_timezone(self):\n        # Close the pool so new connections pick up the correct timezone.\n        self.close_pool()\n        if self.connection is None:\n            return False\n        return self._configure_timezone(self.connection)\n\n    def _configure_timezone(self, connection):\n        conn_timezone_name = connection.info.parameter_status(\"TimeZone\")\n        timezone_name = self.timezone_name\n        if timezone_name and conn_timezone_name != timezone_name:\n            with connection.cursor() as cursor:\n                cursor.execute(self.ops.set_time_zone_sql(), [timezone_name])\n            return True\n        return False\n\n    def _configure_role(self, connection):\n        if new_role := self.settings_dict[\"OPTIONS\"].get(\"assume_role\"):\n            with connection.cursor() as cursor:\n                sql = self.ops.compose_sql(\"SET ROLE %s\", [new_role])\n                cursor.execute(sql)\n            return True\n        return False\n\n    def _configure_connection(self, connection):\n        # This function is called from init_connection_state and from the\n        # psycopg pool itself after a connection is opened.\n\n        # Commit after setting the time zone.\n        commit_tz = self._configure_timezone(connection)\n        # Set the role on the connection. This is useful if the credential used\n        # to login is not the same as the role that owns database resources. As\n        # can be the case when using temporary or ephemeral credentials.\n        commit_role = self._configure_role(connection)\n\n        return commit_role or commit_tz\n\n    def _close(self):\n        if self.connection is not None:\n            # `wrap_database_errors` only works for `putconn` as long as there\n            # is no `reset` function set in the pool because it is deferred\n            # into a thread and not directly executed.\n            with self.wrap_database_errors:\n                if self.pool:\n                    # Ensure the correct pool is returned. This is a workaround\n                    # for tests so a pool can be changed on setting changes\n                    # (e.g. USE_TZ, TIME_ZONE).\n                    self.connection._pool.putconn(self.connection)\n                    # Connection can no longer be used.\n                    self.connection = None\n                else:\n                    return self.connection.close()\n\n    def init_connection_state(self):\n        super().init_connection_state()\n\n        if self.connection is not None and not self.pool:\n            commit = self._configure_connection(self.connection)\n\n            if commit and not self.get_autocommit():\n                self.connection.commit()\n\n    @async_unsafe\n    def create_cursor(self, name=None):\n        if name:\n            if is_psycopg3 and (\n                self.settings_dict[\"OPTIONS\"].get(\"server_side_binding\") is not True\n            ):\n                # psycopg >= 3 forces the usage of server-side bindings for\n                # named cursors so a specialized class that implements\n                # server-side cursors while performing client-side bindings\n                # must be used if `server_side_binding` is disabled (default).\n                cursor = ServerSideCursor(\n                    self.connection,\n                    name=name,\n                    scrollable=False,\n                    withhold=self.connection.autocommit,\n                )\n            else:\n                # In autocommit mode, the cursor will be used outside of a\n                # transaction, hence use a holdable cursor.\n                cursor = self.connection.cursor(\n                    name, scrollable=False, withhold=self.connection.autocommit\n                )\n        else:\n            cursor = self.connection.cursor()\n\n        if is_psycopg3:\n            # Register the cursor timezone only if the connection disagrees, to\n            # avoid copying the adapter map.\n            tzloader = self.connection.adapters.get_loader(TIMESTAMPTZ_OID, Format.TEXT)\n            if self.timezone != tzloader.timezone:\n                register_tzloader(self.timezone, cursor)\n        else:\n            cursor.tzinfo_factory = self.tzinfo_factory if settings.USE_TZ else None\n        return cursor\n\n    def tzinfo_factory(self, offset):\n        return self.timezone\n\n    @async_unsafe\n    def chunked_cursor(self):\n        self._named_cursor_idx += 1\n        # Get the current async task\n        # Note that right now this is behind @async_unsafe, so this is\n        # unreachable, but in future we'll start loosening this restriction.\n        # For now, it's here so that every use of \"threading\" is\n        # also async-compatible.\n        try:\n            current_task = asyncio.current_task()\n        except RuntimeError:\n            current_task = None\n        # Current task can be none even if the current_task call didn't error\n        if current_task:\n            task_ident = str(id(current_task))\n        else:\n            task_ident = \"sync\"\n        # Use that and the thread ident to get a unique name\n        return self._cursor(\n            name=\"_django_curs_%d_%s_%d\"\n            % (\n                # Avoid reusing name in other threads / tasks\n                threading.current_thread().ident,\n                task_ident,\n                self._named_cursor_idx,\n            )\n        )\n\n    def _set_autocommit(self, autocommit):\n        with self.wrap_database_errors:\n            self.connection.autocommit = autocommit\n\n    def check_constraints(self, table_names=None):\n        \"\"\"\n        Check constraints by setting them to immediate. Return them to deferred\n        afterward.\n        \"\"\"\n        with self.cursor() as cursor:\n            cursor.execute(\"SET CONSTRAINTS ALL IMMEDIATE\")\n            cursor.execute(\"SET CONSTRAINTS ALL DEFERRED\")\n\n    def is_usable(self):\n        if self.connection is None:\n            return False\n        try:\n            # Use a psycopg cursor directly, bypassing Django's utilities.\n            with self.connection.cursor() as cursor:\n                cursor.execute(\"SELECT 1\")\n        except Database.Error:\n            return False\n        else:\n            return True\n\n    def close_if_health_check_failed(self):\n        if self.pool:\n            # The pool only returns healthy connections.\n            return\n        return super().close_if_health_check_failed()\n\n    @contextmanager\n    def _nodb_cursor(self):\n        cursor = None\n        try:\n            with super()._nodb_cursor() as cursor:\n                yield cursor\n        except (Database.DatabaseError, WrappedDatabaseError):\n            if cursor is not None:\n                raise\n            warnings.warn(\n                \"Normally Django will use a connection to the 'postgres' database \"\n                \"to avoid running initialization queries against the production \"\n                \"database when it's not needed (for example, when running tests). \"\n                \"Django was unable to create a connection to the 'postgres' database \"\n                \"and will use the first PostgreSQL database instead.\",\n                RuntimeWarning,\n            )\n            for connection in connections.all():\n                if (\n                    connection.vendor == \"postgresql\"\n                    and connection.settings_dict[\"NAME\"] != \"postgres\"\n                ):\n                    conn = self.__class__(\n                        {\n                            **self.settings_dict,\n                            \"NAME\": connection.settings_dict[\"NAME\"],\n                        },\n                        alias=self.alias,\n                    )\n                    try:\n                        with conn.cursor() as cursor:\n                            yield cursor\n                    finally:\n                        conn.close()\n                    break\n            else:\n                raise\n\n    @cached_property\n    def pg_version(self):\n        with self.temporary_connection():\n            return self.connection.info.server_version\n\n    def make_debug_cursor(self, cursor):\n        return CursorDebugWrapper(cursor, self)"}],"ground_truth":null,"score":null},
{"question":"Where can I find the implementation of the `convert_uuidfield_value` method in the `DatabaseOperations`?","answer":"","relative_code_list":[{"start_line":27,"end_line":422,"belongs_to":{"file_name":"operations.py","upper_path":"../django/django/db/backends/postgresql","module":"postgresql","define_class":["DatabaseOperations"],"imports":["json","functools.lru_cache","functools.partial","django.conf.settings","django.db.backends.base.operations.BaseDatabaseOperations","django.db.backends.postgresql.compiler.InsertUnnest","django.db.backends.postgresql.psycopg_any.Inet","django.db.backends.postgresql.psycopg_any.Jsonb","django.db.backends.postgresql.psycopg_any.errors","django.db.backends.postgresql.psycopg_any.is_psycopg3","django.db.backends.postgresql.psycopg_any.mogrify","django.db.backends.utils.split_tzname_delta","django.db.models.constants.OnConflict","django.db.models.functions.Cast","django.utils.regex_helper._lazy_re_compile","psycopg.types.numeric","django.db.models"]},"relative_function":[],"code":"class DatabaseOperations(BaseDatabaseOperations):\n    compiler_module = \"django.db.backends.postgresql.compiler\"\n    cast_char_field_without_max_length = \"varchar\"\n    explain_prefix = \"EXPLAIN\"\n    explain_options = frozenset(\n        [\n            \"ANALYZE\",\n            \"BUFFERS\",\n            \"COSTS\",\n            \"GENERIC_PLAN\",\n            \"MEMORY\",\n            \"SETTINGS\",\n            \"SERIALIZE\",\n            \"SUMMARY\",\n            \"TIMING\",\n            \"VERBOSE\",\n            \"WAL\",\n        ]\n    )\n    cast_data_types = {\n        \"AutoField\": \"integer\",\n        \"BigAutoField\": \"bigint\",\n        \"SmallAutoField\": \"smallint\",\n    }\n\n    if is_psycopg3:\n        from psycopg.types import numeric\n\n        integerfield_type_map = {\n            \"SmallIntegerField\": numeric.Int2,\n            \"IntegerField\": numeric.Int4,\n            \"BigIntegerField\": numeric.Int8,\n            \"PositiveSmallIntegerField\": numeric.Int2,\n            \"PositiveIntegerField\": numeric.Int4,\n            \"PositiveBigIntegerField\": numeric.Int8,\n        }\n\n    def unification_cast_sql(self, output_field):\n        internal_type = output_field.get_internal_type()\n        if internal_type in (\n            \"GenericIPAddressField\",\n            \"IPAddressField\",\n            \"TimeField\",\n            \"UUIDField\",\n        ):\n            # PostgreSQL will resolve a union as type 'text' if input types are\n            # 'unknown'.\n            # https://www.postgresql.org/docs/current/typeconv-union-case.html\n            # These fields cannot be implicitly cast back in the default\n            # PostgreSQL configuration so we need to explicitly cast them.\n            # We must also remove components of the type within brackets:\n            # varchar(255) -> varchar.\n            return (\n                \"CAST(%%s AS %s)\" % output_field.db_type(self.connection).split(\"(\")[0]\n            )\n        return \"%s\"\n\n    # EXTRACT format cannot be passed in parameters.\n    _extract_format_re = _lazy_re_compile(r\"[A-Z_]+\")\n\n    def date_extract_sql(self, lookup_type, sql, params):\n        # https://www.postgresql.org/docs/current/functions-datetime.html#FUNCTIONS-DATETIME-EXTRACT\n        if lookup_type == \"week_day\":\n            # For consistency across backends, we return Sunday=1, Saturday=7.\n            return f\"EXTRACT(DOW FROM {sql}) + 1\", params\n        elif lookup_type == \"iso_week_day\":\n            return f\"EXTRACT(ISODOW FROM {sql})\", params\n        elif lookup_type == \"iso_year\":\n            return f\"EXTRACT(ISOYEAR FROM {sql})\", params\n\n        lookup_type = lookup_type.upper()\n        if not self._extract_format_re.fullmatch(lookup_type):\n            raise ValueError(f\"Invalid lookup type: {lookup_type!r}\")\n        return f\"EXTRACT({lookup_type} FROM {sql})\", params\n\n    def date_trunc_sql(self, lookup_type, sql, params, tzname=None):\n        sql, params = self._convert_sql_to_tz(sql, params, tzname)\n        # https://www.postgresql.org/docs/current/functions-datetime.html#FUNCTIONS-DATETIME-TRUNC\n        return f\"DATE_TRUNC(%s, {sql})\", (lookup_type, *params)\n\n    def _prepare_tzname_delta(self, tzname):\n        tzname, sign, offset = split_tzname_delta(tzname)\n        if offset:\n            sign = \"-\" if sign == \"+\" else \"+\"\n            return f\"{tzname}{sign}{offset}\"\n        return tzname\n\n    def _convert_sql_to_tz(self, sql, params, tzname):\n        if tzname and settings.USE_TZ:\n            tzname_param = self._prepare_tzname_delta(tzname)\n            return f\"{sql} AT TIME ZONE %s\", (*params, tzname_param)\n        return sql, params\n\n    def datetime_cast_date_sql(self, sql, params, tzname):\n        sql, params = self._convert_sql_to_tz(sql, params, tzname)\n        return f\"({sql})::date\", params\n\n    def datetime_cast_time_sql(self, sql, params, tzname):\n        sql, params = self._convert_sql_to_tz(sql, params, tzname)\n        return f\"({sql})::time\", params\n\n    def datetime_extract_sql(self, lookup_type, sql, params, tzname):\n        sql, params = self._convert_sql_to_tz(sql, params, tzname)\n        if lookup_type == \"second\":\n            # Truncate fractional seconds.\n            return f\"EXTRACT(SECOND FROM DATE_TRUNC(%s, {sql}))\", (\"second\", *params)\n        return self.date_extract_sql(lookup_type, sql, params)\n\n    def datetime_trunc_sql(self, lookup_type, sql, params, tzname):\n        sql, params = self._convert_sql_to_tz(sql, params, tzname)\n        # https://www.postgresql.org/docs/current/functions-datetime.html#FUNCTIONS-DATETIME-TRUNC\n        return f\"DATE_TRUNC(%s, {sql})\", (lookup_type, *params)\n\n    def time_extract_sql(self, lookup_type, sql, params):\n        if lookup_type == \"second\":\n            # Truncate fractional seconds.\n            return f\"EXTRACT(SECOND FROM DATE_TRUNC(%s, {sql}))\", (\"second\", *params)\n        return self.date_extract_sql(lookup_type, sql, params)\n\n    def time_trunc_sql(self, lookup_type, sql, params, tzname=None):\n        sql, params = self._convert_sql_to_tz(sql, params, tzname)\n        return f\"DATE_TRUNC(%s, {sql})::time\", (lookup_type, *params)\n\n    def deferrable_sql(self):\n        return \" DEFERRABLE INITIALLY DEFERRED\"\n\n    def bulk_insert_sql(self, fields, placeholder_rows):\n        if isinstance(placeholder_rows, InsertUnnest):\n            return f\"SELECT * FROM {placeholder_rows}\"\n        return super().bulk_insert_sql(fields, placeholder_rows)\n\n    def fetch_returned_insert_rows(self, cursor):\n        \"\"\"\n        Given a cursor object that has just performed an INSERT...RETURNING\n        statement into a table, return the tuple of returned data.\n        \"\"\"\n        return cursor.fetchall()\n\n    def lookup_cast(self, lookup_type, internal_type=None):\n        lookup = \"%s\"\n        # Cast text lookups to text to allow things like filter(x__contains=4)\n        if lookup_type in (\n            \"iexact\",\n            \"contains\",\n            \"icontains\",\n            \"startswith\",\n            \"istartswith\",\n            \"endswith\",\n            \"iendswith\",\n            \"regex\",\n            \"iregex\",\n        ):\n            if internal_type in (\"IPAddressField\", \"GenericIPAddressField\"):\n                lookup = \"HOST(%s)\"\n            else:\n                lookup = \"%s::text\"\n\n        # Use UPPER(x) for case-insensitive lookups; it's faster.\n        if lookup_type in (\"iexact\", \"icontains\", \"istartswith\", \"iendswith\"):\n            lookup = \"UPPER(%s)\" % lookup\n\n        return lookup\n\n    def no_limit_value(self):\n        return None\n\n    def prepare_sql_script(self, sql):\n        return [sql]\n\n    def quote_name(self, name):\n        if name.startswith('\"') and name.endswith('\"'):\n            return name  # Quoting once is enough.\n        return '\"%s\"' % name\n\n    def compose_sql(self, sql, params):\n        return mogrify(sql, params, self.connection)\n\n    def set_time_zone_sql(self):\n        return \"SELECT set_config('TimeZone', %s, false)\"\n\n    def sql_flush(self, style, tables, *, reset_sequences=False, allow_cascade=False):\n        if not tables:\n            return []\n\n        # Perform a single SQL 'TRUNCATE x, y, z...;' statement. It allows us\n        # to truncate tables referenced by a foreign key in any other table.\n        sql_parts = [\n            style.SQL_KEYWORD(\"TRUNCATE\"),\n            \", \".join(style.SQL_FIELD(self.quote_name(table)) for table in tables),\n        ]\n        if reset_sequences:\n            sql_parts.append(style.SQL_KEYWORD(\"RESTART IDENTITY\"))\n        if allow_cascade:\n            sql_parts.append(style.SQL_KEYWORD(\"CASCADE\"))\n        return [\"%s;\" % \" \".join(sql_parts)]\n\n    def sequence_reset_by_name_sql(self, style, sequences):\n        # 'ALTER SEQUENCE sequence_name RESTART WITH 1;'... style SQL statements\n        # to reset sequence indices\n        sql = []\n        for sequence_info in sequences:\n            table_name = sequence_info[\"table\"]\n            # 'id' will be the case if it's an m2m using an autogenerated\n            # intermediate table (see BaseDatabaseIntrospection.sequence_list).\n            column_name = sequence_info[\"column\"] or \"id\"\n            sql.append(\n                \"%s setval(pg_get_serial_sequence('%s','%s'), 1, false);\"\n                % (\n                    style.SQL_KEYWORD(\"SELECT\"),\n                    style.SQL_TABLE(self.quote_name(table_name)),\n                    style.SQL_FIELD(column_name),\n                )\n            )\n        return sql\n\n    def tablespace_sql(self, tablespace, inline=False):\n        if inline:\n            return \"USING INDEX TABLESPACE %s\" % self.quote_name(tablespace)\n        else:\n            return \"TABLESPACE %s\" % self.quote_name(tablespace)\n\n    def sequence_reset_sql(self, style, model_list):\n        from django.db import models\n\n        output = []\n        qn = self.quote_name\n        for model in model_list:\n            # Use `coalesce` to set the sequence for each model to the max pk\n            # value if there are records, or 1 if there are none. Set the\n            # `is_called` property (the third argument to `setval`) to true if\n            # there are records (as the max pk value is already in use),\n            # otherwise set it to false. Use pg_get_serial_sequence to get the\n            # underlying sequence name from the table name and column name.\n\n            for f in model._meta.local_fields:\n                if isinstance(f, models.AutoField):\n                    output.append(\n                        \"%s setval(pg_get_serial_sequence('%s','%s'), \"\n                        \"coalesce(max(%s), 1), max(%s) %s null) %s %s;\"\n                        % (\n                            style.SQL_KEYWORD(\"SELECT\"),\n                            style.SQL_TABLE(qn(model._meta.db_table)),\n                            style.SQL_FIELD(f.column),\n                            style.SQL_FIELD(qn(f.column)),\n                            style.SQL_FIELD(qn(f.column)),\n                            style.SQL_KEYWORD(\"IS NOT\"),\n                            style.SQL_KEYWORD(\"FROM\"),\n                            style.SQL_TABLE(qn(model._meta.db_table)),\n                        )\n                    )\n                    # Only one AutoField is allowed per model, so don't bother\n                    # continuing.\n                    break\n        return output\n\n    def prep_for_iexact_query(self, x):\n        return x\n\n    def max_name_length(self):\n        \"\"\"\n        Return the maximum length of an identifier.\n\n        The maximum length of an identifier is 63 by default, but can be\n        changed by recompiling PostgreSQL after editing the NAMEDATALEN\n        macro in src/include/pg_config_manual.h.\n\n        This implementation returns 63, but can be overridden by a custom\n        database backend that inherits most of its behavior from this one.\n        \"\"\"\n        return 63\n\n    def distinct_sql(self, fields, params):\n        if fields:\n            params = [param for param_list in params for param in param_list]\n            return ([\"DISTINCT ON (%s)\" % \", \".join(fields)], params)\n        else:\n            return [\"DISTINCT\"], []\n\n    if is_psycopg3:\n\n        def last_executed_query(self, cursor, sql, params):\n            if self.connection.features.uses_server_side_binding:\n                try:\n                    return self.compose_sql(sql, params)\n                except errors.DataError:\n                    return None\n            else:\n                if cursor._query and cursor._query.query is not None:\n                    return cursor._query.query.decode()\n                return None\n\n    else:\n\n        def last_executed_query(self, cursor, sql, params):\n            # https://www.psycopg.org/docs/cursor.html#cursor.query\n            # The query attribute is a Psycopg extension to the DB API 2.0.\n            if cursor.query is not None:\n                return cursor.query.decode()\n            return None\n\n    def return_insert_columns(self, fields):\n        if not fields:\n            return \"\", ()\n        columns = [\n            \"%s.%s\"\n            % (\n                self.quote_name(field.model._meta.db_table),\n                self.quote_name(field.column),\n            )\n            for field in fields\n        ]\n        return \"RETURNING %s\" % \", \".join(columns), ()\n\n    if is_psycopg3:\n\n        def adapt_integerfield_value(self, value, internal_type):\n            if value is None or hasattr(value, \"resolve_expression\"):\n                return value\n            return self.integerfield_type_map[internal_type](value)\n\n    def adapt_datefield_value(self, value):\n        return value\n\n    def adapt_datetimefield_value(self, value):\n        return value\n\n    def adapt_timefield_value(self, value):\n        return value\n\n    def adapt_ipaddressfield_value(self, value):\n        if value:\n            return Inet(value)\n        return None\n\n    def adapt_json_value(self, value, encoder):\n        return Jsonb(value, dumps=get_json_dumps(encoder))\n\n    def subtract_temporals(self, internal_type, lhs, rhs):\n        if internal_type == \"DateField\":\n            lhs_sql, lhs_params = lhs\n            rhs_sql, rhs_params = rhs\n            params = (*lhs_params, *rhs_params)\n            return \"(interval '1 day' * (%s - %s))\" % (lhs_sql, rhs_sql), params\n        return super().subtract_temporals(internal_type, lhs, rhs)\n\n    def explain_query_prefix(self, format=None, **options):\n        extra = {}\n        if serialize := options.pop(\"serialize\", None):\n            if serialize.upper() in {\"TEXT\", \"BINARY\"}:\n                extra[\"SERIALIZE\"] = serialize.upper()\n        # Normalize options.\n        if options:\n            options = {\n                name.upper(): \"true\" if value else \"false\"\n                for name, value in options.items()\n            }\n            for valid_option in self.explain_options:\n                value = options.pop(valid_option, None)\n                if value is not None:\n                    extra[valid_option] = value\n        prefix = super().explain_query_prefix(format, **options)\n        if format:\n            extra[\"FORMAT\"] = format\n        if extra:\n            prefix += \" (%s)\" % \", \".join(\"%s %s\" % i for i in extra.items())\n        return prefix\n\n    def on_conflict_suffix_sql(self, fields, on_conflict, update_fields, unique_fields):\n        if on_conflict == OnConflict.IGNORE:\n            return \"ON CONFLICT DO NOTHING\"\n        if on_conflict == OnConflict.UPDATE:\n            return \"ON CONFLICT(%s) DO UPDATE SET %s\" % (\n                \", \".join(map(self.quote_name, unique_fields)),\n                \", \".join(\n                    [\n                        f\"{field} = EXCLUDED.{field}\"\n                        for field in map(self.quote_name, update_fields)\n                    ]\n                ),\n            )\n        return super().on_conflict_suffix_sql(\n            fields,\n            on_conflict,\n            update_fields,\n            unique_fields,\n        )\n\n    def prepare_join_on_clause(self, lhs_table, lhs_field, rhs_table, rhs_field):\n        lhs_expr, rhs_expr = super().prepare_join_on_clause(\n            lhs_table, lhs_field, rhs_table, rhs_field\n        )\n\n        if lhs_field.db_type(self.connection) != rhs_field.db_type(self.connection):\n            rhs_expr = Cast(rhs_expr, lhs_field)\n\n        return lhs_expr, rhs_expr"},{"start_line":285,"end_line":288,"belongs_to":{"file_name":"operations.py","upper_path":"../django/django/db/backends/oracle","module":"oracle","define_class":["DatabaseOperations"],"imports":["datetime","uuid","functools.lru_cache","itertools.chain","django.conf.settings","django.db.NotSupportedError","django.db.backends.base.operations.BaseDatabaseOperations","django.db.backends.utils.split_tzname_delta","django.db.backends.utils.strip_quotes","django.db.backends.utils.truncate_name","django.db.models.AutoField","django.db.models.CompositePrimaryKey","django.db.models.Exists","django.db.models.ExpressionWrapper","django.db.models.Lookup","django.db.models.expressions.RawSQL","django.db.models.sql.where.WhereNode","django.utils.timezone","django.utils.encoding.force_bytes","django.utils.encoding.force_str","django.utils.functional.cached_property","django.utils.regex_helper._lazy_re_compile","base.Database","utils.BulkInsertMapper","utils.InsertVar","utils.Oracle_datetime"]},"relative_function":[],"code":"def convert_uuidfield_value(self, value, expression, connection):\n        if value is not None:\n            value = uuid.UUID(value)\n        return value"}],"ground_truth":null,"score":null},
{"question":"What is the purpose of the `prohibits_null_characters_in_text_exception` attribute in `BaseDatabaseFeatures`?","answer":"","relative_code_list":[{"start_line":5,"end_line":432,"belongs_to":{"file_name":"features.py","upper_path":"../django/django/db/backends/base","module":"base","define_class":["BaseDatabaseFeatures"],"imports":["django.db.ProgrammingError","django.utils.functional.cached_property"]},"relative_function":[],"code":"class BaseDatabaseFeatures:\n    # An optional tuple indicating the minimum supported database version.\n    minimum_database_version = None\n    gis_enabled = False\n    # Oracle can't group by LOB (large object) data types.\n    allows_group_by_lob = True\n    allows_group_by_selected_pks = False\n    allows_group_by_select_index = True\n    empty_fetchmany_value = []\n    update_can_self_select = True\n    # Does the backend support self-reference subqueries in the DELETE\n    # statement?\n    delete_can_self_reference_subquery = True\n\n    # Does the backend distinguish between '' and None?\n    interprets_empty_strings_as_nulls = False\n\n    # Does the backend allow inserting duplicate NULL rows in a nullable\n    # unique field? All core backends implement this correctly, but other\n    # databases such as SQL Server do not.\n    supports_nullable_unique_constraints = True\n\n    # Does the backend allow inserting duplicate rows when a unique_together\n    # constraint exists and some fields are nullable but not all of them?\n    supports_partially_nullable_unique_constraints = True\n\n    # Does the backend supports specifying whether NULL values should be\n    # considered distinct in unique constraints?\n    supports_nulls_distinct_unique_constraints = False\n\n    # Does the backend support initially deferrable unique constraints?\n    supports_deferrable_unique_constraints = False\n\n    can_use_chunked_reads = True\n    can_return_columns_from_insert = False\n    can_return_rows_from_bulk_insert = False\n    has_bulk_insert = True\n    uses_savepoints = True\n    can_release_savepoints = False\n\n    # If True, don't use integer foreign keys referring to, e.g., positive\n    # integer primary keys.\n    related_fields_match_type = False\n    allow_sliced_subqueries_with_in = True\n    has_select_for_update = False\n    has_select_for_update_nowait = False\n    has_select_for_update_skip_locked = False\n    has_select_for_update_of = False\n    has_select_for_no_key_update = False\n    # Does the database's SELECT FOR UPDATE OF syntax require a column rather\n    # than a table?\n    select_for_update_of_column = False\n\n    # Does the default test database allow multiple connections?\n    # Usually an indication that the test database is in-memory\n    test_db_allows_multiple_connections = True\n\n    # Can an object be saved without an explicit primary key?\n    supports_unspecified_pk = False\n\n    # Can a fixture contain forward references? i.e., are\n    # FK constraints checked at the end of transaction, or\n    # at the end of each save operation?\n    supports_forward_references = True\n\n    # Does the backend truncate names properly when they are too long?\n    truncates_names = False\n\n    # Is there a REAL datatype in addition to floats/doubles?\n    has_real_datatype = False\n    supports_subqueries_in_group_by = True\n\n    # Does the backend ignore unnecessary ORDER BY clauses in subqueries?\n    ignores_unnecessary_order_by_in_subqueries = True\n\n    # Is there a true datatype for uuid?\n    has_native_uuid_field = False\n\n    # Is there a true datatype for timedeltas?\n    has_native_duration_field = False\n\n    # Does the database driver supports same type temporal data subtraction\n    # by returning the type used to store duration field?\n    supports_temporal_subtraction = False\n\n    # Does the __regex lookup support backreferencing and grouping?\n    supports_regex_backreferencing = True\n\n    # Can date/datetime lookups be performed using a string?\n    supports_date_lookup_using_string = True\n\n    # Can datetimes with timezones be used?\n    supports_timezones = True\n\n    # Does the database have a copy of the zoneinfo database?\n    has_zoneinfo_database = True\n\n    # When performing a GROUP BY, is an ORDER BY NULL required\n    # to remove any ordering?\n    requires_explicit_null_ordering_when_grouping = False\n\n    # Does the backend order NULL values as largest or smallest?\n    nulls_order_largest = False\n\n    # Does the backend support NULLS FIRST and NULLS LAST in ORDER BY?\n    supports_order_by_nulls_modifier = True\n\n    # Does the backend orders NULLS FIRST by default?\n    order_by_nulls_first = False\n\n    # The database's limit on the number of query parameters.\n    max_query_params = None\n\n    # Can an object have an autoincrement primary key of 0?\n    allows_auto_pk_0 = True\n\n    # Do we need to NULL a ForeignKey out, or can the constraint check be\n    # deferred\n    can_defer_constraint_checks = False\n\n    # Does the backend support tablespaces? Default to False because it isn't\n    # in the SQL standard.\n    supports_tablespaces = False\n\n    # Does the backend reset sequences between tests?\n    supports_sequence_reset = True\n\n    # Can the backend introspect the default value of a column?\n    can_introspect_default = True\n\n    # Confirm support for introspected foreign keys\n    # Every database can do this reliably, except MySQL,\n    # which can't do it for MyISAM tables\n    can_introspect_foreign_keys = True\n\n    # Map fields which some backends may not be able to differentiate to the\n    # field it's introspected as.\n    introspected_field_types = {\n        \"AutoField\": \"AutoField\",\n        \"BigAutoField\": \"BigAutoField\",\n        \"BigIntegerField\": \"BigIntegerField\",\n        \"BinaryField\": \"BinaryField\",\n        \"BooleanField\": \"BooleanField\",\n        \"CharField\": \"CharField\",\n        \"DurationField\": \"DurationField\",\n        \"GenericIPAddressField\": \"GenericIPAddressField\",\n        \"IntegerField\": \"IntegerField\",\n        \"PositiveBigIntegerField\": \"PositiveBigIntegerField\",\n        \"PositiveIntegerField\": \"PositiveIntegerField\",\n        \"PositiveSmallIntegerField\": \"PositiveSmallIntegerField\",\n        \"SmallAutoField\": \"SmallAutoField\",\n        \"SmallIntegerField\": \"SmallIntegerField\",\n        \"TimeField\": \"TimeField\",\n    }\n\n    # Can the backend introspect the column order (ASC/DESC) for indexes?\n    supports_index_column_ordering = True\n\n    # Does the backend support introspection of materialized views?\n    can_introspect_materialized_views = False\n\n    # Support for the DISTINCT ON clause\n    can_distinct_on_fields = False\n\n    # Does the backend prevent running SQL queries in broken transactions?\n    atomic_transactions = True\n\n    # Can we roll back DDL in a transaction?\n    can_rollback_ddl = False\n\n    schema_editor_uses_clientside_param_binding = False\n\n    # Can we issue more than one ALTER COLUMN clause in an ALTER TABLE?\n    supports_combined_alters = False\n\n    # Does it support foreign keys?\n    supports_foreign_keys = True\n\n    # Can it create foreign key constraints inline when adding columns?\n    can_create_inline_fk = True\n\n    # Can an index be renamed?\n    can_rename_index = False\n\n    # Does it automatically index foreign keys?\n    indexes_foreign_keys = True\n\n    # Does it support CHECK constraints?\n    supports_column_check_constraints = True\n    supports_table_check_constraints = True\n    # Does the backend support introspection of CHECK constraints?\n    can_introspect_check_constraints = True\n\n    # Does the backend support 'pyformat' style (\"... %(name)s ...\", {'name': value})\n    # parameter passing? Note this can be provided by the backend even if not\n    # supported by the Python driver\n    supports_paramstyle_pyformat = True\n\n    # Does the backend require literal defaults, rather than parameterized ones?\n    requires_literal_defaults = False\n\n    # Does the backend support functions in defaults?\n    supports_expression_defaults = True\n\n    # Does the backend support the DEFAULT keyword in insert queries?\n    supports_default_keyword_in_insert = True\n\n    # Does the backend support the DEFAULT keyword in bulk insert queries?\n    supports_default_keyword_in_bulk_insert = True\n\n    # Does the backend require a connection reset after each material schema change?\n    connection_persists_old_columns = False\n\n    # What kind of error does the backend throw when accessing closed cursor?\n    closed_cursor_error_class = ProgrammingError\n\n    # Does 'a' LIKE 'A' match?\n    has_case_insensitive_like = False\n\n    # Suffix for backends that don't support \"SELECT xxx;\" queries.\n    bare_select_suffix = \"\"\n\n    # If NULL is implied on columns without needing to be explicitly specified\n    implied_column_null = False\n\n    # Does the backend support \"select for update\" queries with limit (and offset)?\n    supports_select_for_update_with_limit = True\n\n    # Does the backend ignore null expressions in GREATEST and LEAST queries unless\n    # every expression is null?\n    greatest_least_ignores_nulls = False\n\n    # Can the backend clone databases for parallel test execution?\n    # Defaults to False to allow third-party backends to opt-in.\n    can_clone_databases = False\n\n    # Does the backend consider table names with different casing to\n    # be equal?\n    ignores_table_name_case = False\n\n    # Place FOR UPDATE right after FROM clause. Used on MSSQL.\n    for_update_after_from = False\n\n    # Combinatorial flags\n    supports_select_union = True\n    supports_select_intersection = True\n    supports_select_difference = True\n    supports_slicing_ordering_in_compound = False\n    supports_parentheses_in_compound = True\n    requires_compound_order_by_subquery = False\n\n    # Does the database support SQL 2003 FILTER (WHERE ...) in aggregate\n    # expressions?\n    supports_aggregate_filter_clause = False\n\n    # Does the database support ORDER BY in aggregate expressions?\n    supports_aggregate_order_by_clause = False\n\n    # Does the database backend support DISTINCT when using multiple arguments in an\n    # aggregate expression? For example, Sqlite treats the \"delimiter\" argument of\n    # STRING_AGG/GROUP_CONCAT as an extra argument and does not allow using a custom\n    # delimiter along with DISTINCT.\n    supports_aggregate_distinct_multiple_argument = True\n\n    # Does the backend support indexing a TextField?\n    supports_index_on_text_field = True\n\n    # Does the backend support window expressions (expression OVER (...))?\n    supports_over_clause = False\n    supports_frame_range_fixed_distance = False\n    supports_frame_exclusion = False\n    only_supports_unbounded_with_preceding_and_following = False\n\n    # Does the backend support CAST with precision?\n    supports_cast_with_precision = True\n\n    # How many second decimals does the database return when casting a value to\n    # a type with time?\n    time_cast_precision = 6\n\n    # SQL to create a procedure for use by the Django test suite. The\n    # functionality of the procedure isn't important.\n    create_test_procedure_without_params_sql = None\n    create_test_procedure_with_int_param_sql = None\n\n    # SQL to create a table with a composite primary key for use by the Django\n    # test suite.\n    create_test_table_with_composite_primary_key = None\n\n    # Does the backend support keyword parameters for cursor.callproc()?\n    supports_callproc_kwargs = False\n\n    # What formats does the backend EXPLAIN syntax support?\n    supported_explain_formats = set()\n\n    # Does the backend support the default parameter in lead() and lag()?\n    supports_default_in_lead_lag = True\n\n    # Does the backend support ignoring constraint or uniqueness errors during\n    # INSERT?\n    supports_ignore_conflicts = True\n    # Does the backend support updating rows on constraint or uniqueness errors\n    # during INSERT?\n    supports_update_conflicts = False\n    supports_update_conflicts_with_target = False\n\n    # Does this backend require casting the results of CASE expressions used\n    # in UPDATE statements to ensure the expression has the correct type?\n    requires_casted_case_in_updates = False\n\n    # Does the backend support partial indexes (CREATE INDEX ... WHERE ...)?\n    supports_partial_indexes = True\n    supports_functions_in_partial_indexes = True\n    # Does the backend support covering indexes (CREATE INDEX ... INCLUDE ...)?\n    supports_covering_indexes = False\n    # Does the backend support indexes on expressions?\n    supports_expression_indexes = True\n    # Does the backend treat COLLATE as an indexed expression?\n    collate_as_index_expression = False\n\n    # Does the database allow more than one constraint or index on the same\n    # field(s)?\n    allows_multiple_constraints_on_same_fields = True\n\n    # Does the backend support boolean expressions in SELECT and GROUP BY\n    # clauses?\n    supports_boolean_expr_in_select_clause = True\n    # Does the backend support comparing boolean expressions in WHERE clauses?\n    # Eg: WHERE (price > 0) IS NOT NULL\n    supports_comparing_boolean_expr = True\n\n    # Does the backend support JSONField?\n    supports_json_field = True\n    # Can the backend introspect a JSONField?\n    can_introspect_json_field = True\n    # Does the backend support primitives in JSONField?\n    supports_primitives_in_json_field = True\n    # Is there a true datatype for JSON?\n    has_native_json_field = False\n    # Does the backend use PostgreSQL-style JSON operators like '->'?\n    has_json_operators = False\n    # Does the backend support __contains and __contained_by lookups for\n    # a JSONField?\n    supports_json_field_contains = True\n    # Does value__d__contains={'f': 'g'} (without a list around the dict) match\n    # {'d': [{'f': 'g'}]}?\n    json_key_contains_list_matching_requires_list = False\n    # Does the backend support JSONObject() database function?\n    has_json_object_function = True\n\n    # Does the backend support column collations?\n    supports_collation_on_charfield = True\n    supports_collation_on_textfield = True\n    # Does the backend support non-deterministic collations?\n    supports_non_deterministic_collations = True\n\n    # Does the backend support column and table comments?\n    supports_comments = False\n    # Does the backend support column comments in ADD COLUMN statements?\n    supports_comments_inline = False\n\n    # Does the backend support stored generated columns?\n    supports_stored_generated_columns = False\n    # Does the backend support virtual generated columns?\n    supports_virtual_generated_columns = False\n\n    # Does the backend support the logical XOR operator?\n    supports_logical_xor = False\n\n    # Set to (exception, message) if null characters in text are disallowed.\n    prohibits_null_characters_in_text_exception = None\n\n    # Does the backend support unlimited character columns?\n    supports_unlimited_charfield = False\n\n    # Does the backend support native tuple lookups (=, >, <, IN)?\n    supports_tuple_lookups = True\n\n    # Collation names for use by the Django test suite.\n    test_collations = {\n        \"ci\": None,  # Case-insensitive.\n        \"cs\": None,  # Case-sensitive.\n        \"non_default\": None,  # Non-default.\n        \"swedish_ci\": None,  # Swedish case-insensitive.\n        \"virtual\": None,  # A collation that can be used for virtual columns.\n    }\n    # SQL template override for tests.aggregation.tests.NowUTC\n    test_now_utc_template = None\n\n    # SQL to create a model instance using the database defaults.\n    insert_test_table_with_defaults = None\n\n    # Does the Round() database function round to even?\n    rounds_to_even = False\n\n    # A set of dotted paths to tests in Django's test suite that are expected\n    # to fail on this database.\n    django_test_expected_failures = set()\n    # A map of reasons to sets of dotted paths to tests in Django's test suite\n    # that should be skipped for this database.\n    django_test_skips = {}\n\n    def __init__(self, connection):\n        self.connection = connection\n\n    @cached_property\n    def supports_explaining_query_execution(self):\n        \"\"\"Does this backend support explaining query execution?\"\"\"\n        return self.connection.ops.explain_prefix is not None\n\n    @cached_property\n    def supports_transactions(self):\n        \"\"\"Confirm support for transactions.\"\"\"\n        with self.connection.cursor() as cursor:\n            cursor.execute(\"CREATE TABLE ROLLBACK_TEST (X INT)\")\n            self.connection.set_autocommit(False)\n            cursor.execute(\"INSERT INTO ROLLBACK_TEST (X) VALUES (8)\")\n            self.connection.rollback()\n            self.connection.set_autocommit(True)\n            cursor.execute(\"SELECT COUNT(X) FROM ROLLBACK_TEST\")\n            (count,) = cursor.fetchone()\n            cursor.execute(\"DROP TABLE ROLLBACK_TEST\")\n        return count == 0\n\n    def allows_group_by_selected_pks_on_model(self, model):\n        if not self.allows_group_by_selected_pks:\n            return False\n        return model._meta.managed"}],"ground_truth":null,"score":null},
{"question":"Which API or library is responsible for `Given a lookup_type of 'hour', 'minute', or 'second', return the SQL\nthat extracts a value from the given time field field_name`, and what are its key parameters or methods?","answer":"","relative_code_list":[{"start_line":181,"end_line":186,"belongs_to":{"file_name":"operations.py","upper_path":"../django/django/db/backends/base","module":"base","define_class":["BaseDatabaseOperations"],"imports":["datetime","decimal","json","importlib.import_module","sqlparse","django.conf.settings","django.db.NotSupportedError","django.db.transaction","django.db.models.expressions.Col","django.utils.timezone","django.utils.encoding.force_str"]},"relative_function":[],"code":"def time_extract_sql(self, lookup_type, sql, params):\n        \"\"\"\n        Given a lookup_type of 'hour', 'minute', or 'second', return the SQL\n        that extracts a value from the given time field field_name.\n        \"\"\"\n        return self.date_extract_sql(lookup_type, sql, params)"},{"start_line":15,"end_line":791,"belongs_to":{"file_name":"operations.py","upper_path":"../django/django/db/backends/base","module":"base","define_class":["BaseDatabaseOperations"],"imports":["datetime","decimal","json","importlib.import_module","sqlparse","django.conf.settings","django.db.NotSupportedError","django.db.transaction","django.db.models.expressions.Col","django.utils.timezone","django.utils.encoding.force_str"]},"relative_function":[],"code":"class BaseDatabaseOperations:\n    \"\"\"\n    Encapsulate backend-specific differences, such as the way a backend\n    performs ordering or calculates the ID of a recently-inserted row.\n    \"\"\"\n\n    compiler_module = \"django.db.models.sql.compiler\"\n\n    # Integer field safe ranges by `internal_type` as documented\n    # in docs/ref/models/fields.txt.\n    integer_field_ranges = {\n        \"SmallIntegerField\": (-32768, 32767),\n        \"IntegerField\": (-2147483648, 2147483647),\n        \"BigIntegerField\": (-9223372036854775808, 9223372036854775807),\n        \"PositiveBigIntegerField\": (0, 9223372036854775807),\n        \"PositiveSmallIntegerField\": (0, 32767),\n        \"PositiveIntegerField\": (0, 2147483647),\n        \"SmallAutoField\": (-32768, 32767),\n        \"AutoField\": (-2147483648, 2147483647),\n        \"BigAutoField\": (-9223372036854775808, 9223372036854775807),\n    }\n    set_operators = {\n        \"union\": \"UNION\",\n        \"intersection\": \"INTERSECT\",\n        \"difference\": \"EXCEPT\",\n    }\n    # Mapping of Field.get_internal_type() (typically the model field's class\n    # name) to the data type to use for the Cast() function, if different from\n    # DatabaseWrapper.data_types.\n    cast_data_types = {}\n    # CharField data type if the max_length argument isn't provided.\n    cast_char_field_without_max_length = None\n\n    # Start and end points for window expressions.\n    PRECEDING = \"PRECEDING\"\n    FOLLOWING = \"FOLLOWING\"\n    UNBOUNDED_PRECEDING = \"UNBOUNDED \" + PRECEDING\n    UNBOUNDED_FOLLOWING = \"UNBOUNDED \" + FOLLOWING\n    CURRENT_ROW = \"CURRENT ROW\"\n\n    # Prefix for EXPLAIN queries, or None EXPLAIN isn't supported.\n    explain_prefix = None\n\n    def __init__(self, connection):\n        self.connection = connection\n        self._cache = None\n\n    def autoinc_sql(self, table, column):\n        \"\"\"\n        Return any SQL needed to support auto-incrementing primary keys, or\n        None if no SQL is necessary.\n\n        This SQL is executed when a table is created.\n        \"\"\"\n        return None\n\n    def bulk_batch_size(self, fields, objs):\n        \"\"\"\n        Return the maximum allowed batch size for the backend. The fields\n        are the fields going to be inserted in the batch, the objs contains\n        all the objects to be inserted.\n        \"\"\"\n        return len(objs)\n\n    def format_for_duration_arithmetic(self, sql):\n        raise NotImplementedError(\n            \"subclasses of BaseDatabaseOperations may require a \"\n            \"format_for_duration_arithmetic() method.\"\n        )\n\n    def cache_key_culling_sql(self):\n        \"\"\"\n        Return an SQL query that retrieves the first cache key greater than the\n        n smallest.\n\n        This is used by the 'db' cache backend to determine where to start\n        culling.\n        \"\"\"\n        cache_key = self.quote_name(\"cache_key\")\n        return f\"SELECT {cache_key} FROM %s ORDER BY {cache_key} LIMIT 1 OFFSET %%s\"\n\n    def unification_cast_sql(self, output_field):\n        \"\"\"\n        Given a field instance, return the SQL that casts the result of a union\n        to that type. The resulting string should contain a '%s' placeholder\n        for the expression being cast.\n        \"\"\"\n        return \"%s\"\n\n    def date_extract_sql(self, lookup_type, sql, params):\n        \"\"\"\n        Given a lookup_type of 'year', 'month', or 'day', return the SQL that\n        extracts a value from the given date field field_name.\n        \"\"\"\n        raise NotImplementedError(\n            \"subclasses of BaseDatabaseOperations may require a date_extract_sql() \"\n            \"method\"\n        )\n\n    def date_trunc_sql(self, lookup_type, sql, params, tzname=None):\n        \"\"\"\n        Given a lookup_type of 'year', 'month', or 'day', return the SQL that\n        truncates the given date or datetime field field_name to a date object\n        with only the given specificity.\n\n        If `tzname` is provided, the given value is truncated in a specific\n        timezone.\n        \"\"\"\n        raise NotImplementedError(\n            \"subclasses of BaseDatabaseOperations may require a date_trunc_sql() \"\n            \"method.\"\n        )\n\n    def datetime_cast_date_sql(self, sql, params, tzname):\n        \"\"\"\n        Return the SQL to cast a datetime value to date value.\n        \"\"\"\n        raise NotImplementedError(\n            \"subclasses of BaseDatabaseOperations may require a \"\n            \"datetime_cast_date_sql() method.\"\n        )\n\n    def datetime_cast_time_sql(self, sql, params, tzname):\n        \"\"\"\n        Return the SQL to cast a datetime value to time value.\n        \"\"\"\n        raise NotImplementedError(\n            \"subclasses of BaseDatabaseOperations may require a \"\n            \"datetime_cast_time_sql() method\"\n        )\n\n    def datetime_extract_sql(self, lookup_type, sql, params, tzname):\n        \"\"\"\n        Given a lookup_type of 'year', 'month', 'day', 'hour', 'minute', or\n        'second', return the SQL that extracts a value from the given\n        datetime field field_name.\n        \"\"\"\n        raise NotImplementedError(\n            \"subclasses of BaseDatabaseOperations may require a datetime_extract_sql() \"\n            \"method\"\n        )\n\n    def datetime_trunc_sql(self, lookup_type, sql, params, tzname):\n        \"\"\"\n        Given a lookup_type of 'year', 'month', 'day', 'hour', 'minute', or\n        'second', return the SQL that truncates the given datetime field\n        field_name to a datetime object with only the given specificity.\n        \"\"\"\n        raise NotImplementedError(\n            \"subclasses of BaseDatabaseOperations may require a datetime_trunc_sql() \"\n            \"method\"\n        )\n\n    def time_trunc_sql(self, lookup_type, sql, params, tzname=None):\n        \"\"\"\n        Given a lookup_type of 'hour', 'minute' or 'second', return the SQL\n        that truncates the given time or datetime field field_name to a time\n        object with only the given specificity.\n\n        If `tzname` is provided, the given value is truncated in a specific\n        timezone.\n        \"\"\"\n        raise NotImplementedError(\n            \"subclasses of BaseDatabaseOperations may require a time_trunc_sql() method\"\n        )\n\n    def time_extract_sql(self, lookup_type, sql, params):\n        \"\"\"\n        Given a lookup_type of 'hour', 'minute', or 'second', return the SQL\n        that extracts a value from the given time field field_name.\n        \"\"\"\n        return self.date_extract_sql(lookup_type, sql, params)\n\n    def deferrable_sql(self):\n        \"\"\"\n        Return the SQL to make a constraint \"initially deferred\" during a\n        CREATE TABLE statement.\n        \"\"\"\n        return \"\"\n\n    def distinct_sql(self, fields, params):\n        \"\"\"\n        Return an SQL DISTINCT clause which removes duplicate rows from the\n        result set. If any fields are given, only check the given fields for\n        duplicates.\n        \"\"\"\n        if fields:\n            raise NotSupportedError(\n                \"DISTINCT ON fields is not supported by this database backend\"\n            )\n        else:\n            return [\"DISTINCT\"], []\n\n    def fetch_returned_insert_columns(self, cursor, returning_params):\n        \"\"\"\n        Given a cursor object that has just performed an INSERT...RETURNING\n        statement into a table, return the newly created data.\n        \"\"\"\n        return cursor.fetchone()\n\n    def force_group_by(self):\n        \"\"\"\n        Return a GROUP BY clause to use with a HAVING clause when no grouping\n        is specified.\n        \"\"\"\n        return []\n\n    def force_no_ordering(self):\n        \"\"\"\n        Return a list used in the \"ORDER BY\" clause to force no ordering at\n        all. Return an empty list to include nothing in the ordering.\n        \"\"\"\n        return []\n\n    def for_update_sql(self, nowait=False, skip_locked=False, of=(), no_key=False):\n        \"\"\"\n        Return the FOR UPDATE SQL clause to lock rows for an update operation.\n        \"\"\"\n        return \"FOR%s UPDATE%s%s%s\" % (\n            \" NO KEY\" if no_key else \"\",\n            \" OF %s\" % \", \".join(of) if of else \"\",\n            \" NOWAIT\" if nowait else \"\",\n            \" SKIP LOCKED\" if skip_locked else \"\",\n        )\n\n    def _get_limit_offset_params(self, low_mark, high_mark):\n        offset = low_mark or 0\n        if high_mark is not None:\n            return (high_mark - offset), offset\n        elif offset:\n            return self.connection.ops.no_limit_value(), offset\n        return None, offset\n\n    def limit_offset_sql(self, low_mark, high_mark):\n        \"\"\"Return LIMIT/OFFSET SQL clause.\"\"\"\n        limit, offset = self._get_limit_offset_params(low_mark, high_mark)\n        return \" \".join(\n            sql\n            for sql in (\n                (\"LIMIT %d\" % limit) if limit else None,\n                (\"OFFSET %d\" % offset) if offset else None,\n            )\n            if sql\n        )\n\n    def bulk_insert_sql(self, fields, placeholder_rows):\n        placeholder_rows_sql = (\", \".join(row) for row in placeholder_rows)\n        values_sql = \", \".join([f\"({sql})\" for sql in placeholder_rows_sql])\n        return f\"VALUES {values_sql}\"\n\n    def last_executed_query(self, cursor, sql, params):\n        \"\"\"\n        Return a string of the query last executed by the given cursor, with\n        placeholders replaced with actual values.\n\n        `sql` is the raw query containing placeholders and `params` is the\n        sequence of parameters. These are used by default, but this method\n        exists for database backends to provide a better implementation\n        according to their own quoting schemes.\n        \"\"\"\n\n        # Convert params to contain string values.\n        def to_string(s):\n            return force_str(s, strings_only=True, errors=\"replace\")\n\n        if isinstance(params, (list, tuple)):\n            u_params = tuple(to_string(val) for val in params)\n        elif params is None:\n            u_params = ()\n        else:\n            u_params = {to_string(k): to_string(v) for k, v in params.items()}\n\n        return \"QUERY = %r - PARAMS = %r\" % (sql, u_params)\n\n    def last_insert_id(self, cursor, table_name, pk_name):\n        \"\"\"\n        Given a cursor object that has just performed an INSERT statement into\n        a table that has an auto-incrementing ID, return the newly created ID.\n\n        `pk_name` is the name of the primary-key column.\n        \"\"\"\n        return cursor.lastrowid\n\n    def lookup_cast(self, lookup_type, internal_type=None):\n        \"\"\"\n        Return the string to use in a query when performing lookups\n        (\"contains\", \"like\", etc.). It should contain a '%s' placeholder for\n        the column being searched against.\n        \"\"\"\n        return \"%s\"\n\n    def max_in_list_size(self):\n        \"\"\"\n        Return the maximum number of items that can be passed in a single 'IN'\n        list condition, or None if the backend does not impose a limit.\n        \"\"\"\n        return None\n\n    def max_name_length(self):\n        \"\"\"\n        Return the maximum length of table and column names, or None if there\n        is no limit.\n        \"\"\"\n        return None\n\n    def no_limit_value(self):\n        \"\"\"\n        Return the value to use for the LIMIT when we are wanting \"LIMIT\n        infinity\". Return None if the limit clause can be omitted in this case.\n        \"\"\"\n        raise NotImplementedError(\n            \"subclasses of BaseDatabaseOperations may require a no_limit_value() method\"\n        )\n\n    def pk_default_value(self):\n        \"\"\"\n        Return the value to use during an INSERT statement to specify that\n        the field should use its default value.\n        \"\"\"\n        return \"DEFAULT\"\n\n    def prepare_sql_script(self, sql):\n        \"\"\"\n        Take an SQL script that may contain multiple lines and return a list\n        of statements to feed to successive cursor.execute() calls.\n\n        Since few databases are able to process raw SQL scripts in a single\n        cursor.execute() call and PEP 249 doesn't talk about this use case,\n        the default implementation is conservative.\n        \"\"\"\n        return [\n            sqlparse.format(statement, strip_comments=True)\n            for statement in sqlparse.split(sql)\n            if statement\n        ]\n\n    def process_clob(self, value):\n        \"\"\"\n        Return the value of a CLOB column, for backends that return a locator\n        object that requires additional processing.\n        \"\"\"\n        return value\n\n    def return_insert_columns(self, fields):\n        \"\"\"\n        For backends that support returning columns as part of an insert query,\n        return the SQL and params to append to the INSERT query. The returned\n        fragment should contain a format string to hold the appropriate column.\n        \"\"\"\n        pass\n\n    def compiler(self, compiler_name):\n        \"\"\"\n        Return the SQLCompiler class corresponding to the given name,\n        in the namespace corresponding to the `compiler_module` attribute\n        on this backend.\n        \"\"\"\n        if self._cache is None:\n            self._cache = import_module(self.compiler_module)\n        return getattr(self._cache, compiler_name)\n\n    def quote_name(self, name):\n        \"\"\"\n        Return a quoted version of the given table, index, or column name. Do\n        not quote the given name if it's already been quoted.\n        \"\"\"\n        raise NotImplementedError(\n            \"subclasses of BaseDatabaseOperations may require a quote_name() method\"\n        )\n\n    def regex_lookup(self, lookup_type):\n        \"\"\"\n        Return the string to use in a query when performing regular expression\n        lookups (using \"regex\" or \"iregex\"). It should contain a '%s'\n        placeholder for the column being searched against.\n\n        If the feature is not supported (or part of it is not supported), raise\n        NotImplementedError.\n        \"\"\"\n        raise NotImplementedError(\n            \"subclasses of BaseDatabaseOperations may require a regex_lookup() method\"\n        )\n\n    def savepoint_create_sql(self, sid):\n        \"\"\"\n        Return the SQL for starting a new savepoint. Only required if the\n        \"uses_savepoints\" feature is True. The \"sid\" parameter is a string\n        for the savepoint id.\n        \"\"\"\n        return \"SAVEPOINT %s\" % self.quote_name(sid)\n\n    def savepoint_commit_sql(self, sid):\n        \"\"\"\n        Return the SQL for committing the given savepoint.\n        \"\"\"\n        return \"RELEASE SAVEPOINT %s\" % self.quote_name(sid)\n\n    def savepoint_rollback_sql(self, sid):\n        \"\"\"\n        Return the SQL for rolling back the given savepoint.\n        \"\"\"\n        return \"ROLLBACK TO SAVEPOINT %s\" % self.quote_name(sid)\n\n    def set_time_zone_sql(self):\n        \"\"\"\n        Return the SQL that will set the connection's time zone.\n\n        Return '' if the backend doesn't support time zones.\n        \"\"\"\n        return \"\"\n\n    def sql_flush(self, style, tables, *, reset_sequences=False, allow_cascade=False):\n        \"\"\"\n        Return a list of SQL statements required to remove all data from\n        the given database tables (without actually removing the tables\n        themselves).\n\n        The `style` argument is a Style object as returned by either\n        color_style() or no_style() in django.core.management.color.\n\n        If `reset_sequences` is True, the list includes SQL statements required\n        to reset the sequences.\n\n        The `allow_cascade` argument determines whether truncation may cascade\n        to tables with foreign keys pointing the tables being truncated.\n        PostgreSQL requires a cascade even if these tables are empty.\n        \"\"\"\n        raise NotImplementedError(\n            \"subclasses of BaseDatabaseOperations must provide an sql_flush() method\"\n        )\n\n    def execute_sql_flush(self, sql_list):\n        \"\"\"Execute a list of SQL statements to flush the database.\"\"\"\n        with transaction.atomic(\n            using=self.connection.alias,\n            savepoint=self.connection.features.can_rollback_ddl,\n        ):\n            with self.connection.cursor() as cursor:\n                for sql in sql_list:\n                    cursor.execute(sql)\n\n    def sequence_reset_by_name_sql(self, style, sequences):\n        \"\"\"\n        Return a list of the SQL statements required to reset sequences\n        passed in `sequences`.\n\n        The `style` argument is a Style object as returned by either\n        color_style() or no_style() in django.core.management.color.\n        \"\"\"\n        return []\n\n    def sequence_reset_sql(self, style, model_list):\n        \"\"\"\n        Return a list of the SQL statements required to reset sequences for\n        the given models.\n\n        The `style` argument is a Style object as returned by either\n        color_style() or no_style() in django.core.management.color.\n        \"\"\"\n        return []  # No sequence reset required by default.\n\n    def start_transaction_sql(self):\n        \"\"\"Return the SQL statement required to start a transaction.\"\"\"\n        return \"BEGIN;\"\n\n    def end_transaction_sql(self, success=True):\n        \"\"\"Return the SQL statement required to end a transaction.\"\"\"\n        if not success:\n            return \"ROLLBACK;\"\n        return \"COMMIT;\"\n\n    def tablespace_sql(self, tablespace, inline=False):\n        \"\"\"\n        Return the SQL that will be used in a query to define the tablespace.\n\n        Return '' if the backend doesn't support tablespaces.\n\n        If `inline` is True, append the SQL to a row; otherwise append it to\n        the entire CREATE TABLE or CREATE INDEX statement.\n        \"\"\"\n        return \"\"\n\n    def prep_for_like_query(self, x):\n        \"\"\"Prepare a value for use in a LIKE query.\"\"\"\n        return str(x).replace(\"\\\\\", \"\\\\\\\\\").replace(\"%\", r\"\\%\").replace(\"_\", r\"\\_\")\n\n    # Same as prep_for_like_query(), but called for \"iexact\" matches, which\n    # need not necessarily be implemented using \"LIKE\" in the backend.\n    prep_for_iexact_query = prep_for_like_query\n\n    def validate_autopk_value(self, value):\n        \"\"\"\n        Certain backends do not accept some values for \"serial\" fields\n        (for example zero in MySQL). Raise a ValueError if the value is\n        invalid, otherwise return the validated value.\n        \"\"\"\n        return value\n\n    def adapt_unknown_value(self, value):\n        \"\"\"\n        Transform a value to something compatible with the backend driver.\n\n        This method only depends on the type of the value. It's designed for\n        cases where the target type isn't known, such as .raw() SQL queries.\n        As a consequence it may not work perfectly in all circumstances.\n        \"\"\"\n        if isinstance(value, datetime.datetime):  # must be before date\n            return self.adapt_datetimefield_value(value)\n        elif isinstance(value, datetime.date):\n            return self.adapt_datefield_value(value)\n        elif isinstance(value, datetime.time):\n            return self.adapt_timefield_value(value)\n        elif isinstance(value, decimal.Decimal):\n            return self.adapt_decimalfield_value(value)\n        else:\n            return value\n\n    def adapt_integerfield_value(self, value, internal_type):\n        return value\n\n    def adapt_datefield_value(self, value):\n        \"\"\"\n        Transform a date value to an object compatible with what is expected\n        by the backend driver for date columns.\n        \"\"\"\n        if value is None:\n            return None\n        return str(value)\n\n    def adapt_datetimefield_value(self, value):\n        \"\"\"\n        Transform a datetime value to an object compatible with what is expected\n        by the backend driver for datetime columns.\n        \"\"\"\n        if value is None:\n            return None\n        return str(value)\n\n    def adapt_timefield_value(self, value):\n        \"\"\"\n        Transform a time value to an object compatible with what is expected\n        by the backend driver for time columns.\n        \"\"\"\n        if value is None:\n            return None\n        if timezone.is_aware(value):\n            raise ValueError(\"Django does not support timezone-aware times.\")\n        return str(value)\n\n    def adapt_decimalfield_value(self, value, max_digits=None, decimal_places=None):\n        \"\"\"\n        Transform a decimal.Decimal value to an object compatible with what is\n        expected by the backend driver for decimal (numeric) columns.\n        \"\"\"\n        return value\n\n    def adapt_ipaddressfield_value(self, value):\n        \"\"\"\n        Transform a string representation of an IP address into the expected\n        type for the backend driver.\n        \"\"\"\n        return value or None\n\n    def adapt_json_value(self, value, encoder):\n        return json.dumps(value, cls=encoder)\n\n    def year_lookup_bounds_for_date_field(self, value, iso_year=False):\n        \"\"\"\n        Return a two-elements list with the lower and upper bound to be used\n        with a BETWEEN operator to query a DateField value using a year\n        lookup.\n\n        `value` is an int, containing the looked-up year.\n        If `iso_year` is True, return bounds for ISO-8601 week-numbering years.\n        \"\"\"\n        if iso_year:\n            first = datetime.date.fromisocalendar(value, 1, 1)\n            second = datetime.date.fromisocalendar(\n                value + 1, 1, 1\n            ) - datetime.timedelta(days=1)\n        else:\n            first = datetime.date(value, 1, 1)\n            second = datetime.date(value, 12, 31)\n        first = self.adapt_datefield_value(first)\n        second = self.adapt_datefield_value(second)\n        return [first, second]\n\n    def year_lookup_bounds_for_datetime_field(self, value, iso_year=False):\n        \"\"\"\n        Return a two-elements list with the lower and upper bound to be used\n        with a BETWEEN operator to query a DateTimeField value using a year\n        lookup.\n\n        `value` is an int, containing the looked-up year.\n        If `iso_year` is True, return bounds for ISO-8601 week-numbering years.\n        \"\"\"\n        if iso_year:\n            first = datetime.datetime.fromisocalendar(value, 1, 1)\n            second = datetime.datetime.fromisocalendar(\n                value + 1, 1, 1\n            ) - datetime.timedelta(microseconds=1)\n        else:\n            first = datetime.datetime(value, 1, 1)\n            second = datetime.datetime(value, 12, 31, 23, 59, 59, 999999)\n        if settings.USE_TZ:\n            tz = timezone.get_current_timezone()\n            first = timezone.make_aware(first, tz)\n            second = timezone.make_aware(second, tz)\n        first = self.adapt_datetimefield_value(first)\n        second = self.adapt_datetimefield_value(second)\n        return [first, second]\n\n    def get_db_converters(self, expression):\n        \"\"\"\n        Return a list of functions needed to convert field data.\n\n        Some field types on some backends do not provide data in the correct\n        format, this is the hook for converter functions.\n        \"\"\"\n        return []\n\n    def convert_durationfield_value(self, value, expression, connection):\n        if value is not None:\n            return datetime.timedelta(0, 0, value)\n\n    def check_expression_support(self, expression):\n        \"\"\"\n        Check that the backend supports the provided expression.\n\n        This is used on specific backends to rule out known expressions\n        that have problematic or nonexistent implementations. If the\n        expression has a known problem, the backend should raise\n        NotSupportedError.\n        \"\"\"\n        pass\n\n    def conditional_expression_supported_in_where_clause(self, expression):\n        \"\"\"\n        Return True, if the conditional expression is supported in the WHERE\n        clause.\n        \"\"\"\n        return True\n\n    def combine_expression(self, connector, sub_expressions):\n        \"\"\"\n        Combine a list of subexpressions into a single expression, using\n        the provided connecting operator. This is required because operators\n        can vary between backends (e.g., Oracle with %% and &) and between\n        subexpression types (e.g., date expressions).\n        \"\"\"\n        conn = \" %s \" % connector\n        return conn.join(sub_expressions)\n\n    def combine_duration_expression(self, connector, sub_expressions):\n        return self.combine_expression(connector, sub_expressions)\n\n    def binary_placeholder_sql(self, value):\n        \"\"\"\n        Some backends require special syntax to insert binary content (MySQL\n        for example uses '_binary %s').\n        \"\"\"\n        return \"%s\"\n\n    def modify_insert_params(self, placeholder, params):\n        \"\"\"\n        Allow modification of insert parameters. Needed for Oracle Spatial\n        backend due to #10888.\n        \"\"\"\n        return params\n\n    def integer_field_range(self, internal_type):\n        \"\"\"\n        Given an integer field internal type (e.g. 'PositiveIntegerField'),\n        return a tuple of the (min_value, max_value) form representing the\n        range of the column type bound to the field.\n        \"\"\"\n        return self.integer_field_ranges[internal_type]\n\n    def subtract_temporals(self, internal_type, lhs, rhs):\n        if self.connection.features.supports_temporal_subtraction:\n            lhs_sql, lhs_params = lhs\n            rhs_sql, rhs_params = rhs\n            return \"(%s - %s)\" % (lhs_sql, rhs_sql), (*lhs_params, *rhs_params)\n        raise NotSupportedError(\n            \"This backend does not support %s subtraction.\" % internal_type\n        )\n\n    def window_frame_value(self, value):\n        if isinstance(value, int):\n            if value == 0:\n                return self.CURRENT_ROW\n            elif value < 0:\n                return \"%d %s\" % (abs(value), self.PRECEDING)\n            else:\n                return \"%d %s\" % (value, self.FOLLOWING)\n\n    def window_frame_rows_start_end(self, start=None, end=None):\n        \"\"\"\n        Return SQL for start and end points in an OVER clause window frame.\n        \"\"\"\n        if isinstance(start, int) and isinstance(end, int) and start > end:\n            raise ValueError(\"start cannot be greater than end.\")\n        if start is not None and not isinstance(start, int):\n            raise ValueError(\n                f\"start argument must be an integer, zero, or None, but got '{start}'.\"\n            )\n        if end is not None and not isinstance(end, int):\n            raise ValueError(\n                f\"end argument must be an integer, zero, or None, but got '{end}'.\"\n            )\n        start_ = self.window_frame_value(start) or self.UNBOUNDED_PRECEDING\n        end_ = self.window_frame_value(end) or self.UNBOUNDED_FOLLOWING\n        return start_, end_\n\n    def window_frame_range_start_end(self, start=None, end=None):\n        if (start is not None and not isinstance(start, int)) or (\n            isinstance(start, int) and start > 0\n        ):\n            raise ValueError(\n                \"start argument must be a negative integer, zero, or None, \"\n                \"but got '%s'.\" % start\n            )\n        if (end is not None and not isinstance(end, int)) or (\n            isinstance(end, int) and end < 0\n        ):\n            raise ValueError(\n                \"end argument must be a positive integer, zero, or None, but got '%s'.\"\n                % end\n            )\n        start_ = self.window_frame_value(start) or self.UNBOUNDED_PRECEDING\n        end_ = self.window_frame_value(end) or self.UNBOUNDED_FOLLOWING\n        features = self.connection.features\n        if features.only_supports_unbounded_with_preceding_and_following and (\n            (start and start < 0) or (end and end > 0)\n        ):\n            raise NotSupportedError(\n                \"%s only supports UNBOUNDED together with PRECEDING and \"\n                \"FOLLOWING.\" % self.connection.display_name\n            )\n        return start_, end_\n\n    def explain_query_prefix(self, format=None, **options):\n        if not self.connection.features.supports_explaining_query_execution:\n            raise NotSupportedError(\n                \"This backend does not support explaining query execution.\"\n            )\n        if format:\n            supported_formats = self.connection.features.supported_explain_formats\n            normalized_format = format.upper()\n            if normalized_format not in supported_formats:\n                msg = \"%s is not a recognized format.\" % normalized_format\n                if supported_formats:\n                    msg += \" Allowed formats: %s\" % \", \".join(sorted(supported_formats))\n                else:\n                    msg += (\n                        f\" {self.connection.display_name} does not support any formats.\"\n                    )\n                raise ValueError(msg)\n        if options:\n            raise ValueError(\"Unknown options: %s\" % \", \".join(sorted(options.keys())))\n        return self.explain_prefix\n\n    def insert_statement(self, on_conflict=None):\n        return \"INSERT INTO\"\n\n    def on_conflict_suffix_sql(self, fields, on_conflict, update_fields, unique_fields):\n        return \"\"\n\n    def prepare_join_on_clause(self, lhs_table, lhs_field, rhs_table, rhs_field):\n        lhs_expr = Col(lhs_table, lhs_field)\n        rhs_expr = Col(rhs_table, rhs_field)\n\n        return lhs_expr, rhs_expr\n\n    def format_debug_sql(self, sql):\n        # Hook for backends (e.g. NoSQL) to customize formatting.\n        return sqlparse.format(sql, reindent=True, keyword_case=\"upper\")"}],"ground_truth":null,"score":null},
{"question":"How is the `_alter_column_default_sql` currently being used in the `BaseDatabaseSchemaEditor`?","answer":"","relative_code_list":[{"start_line":77,"end_line":2046,"belongs_to":{"file_name":"schema.py","upper_path":"../django/django/db/backends/base","module":"base","define_class":["BaseDatabaseSchemaEditor"],"imports":["logging","operator","datetime.datetime","django.conf.settings","django.core.exceptions.FieldError","django.db.backends.ddl_references.Columns","django.db.backends.ddl_references.Expressions","django.db.backends.ddl_references.ForeignKeyName","django.db.backends.ddl_references.IndexName","django.db.backends.ddl_references.Statement","django.db.backends.ddl_references.Table","django.db.backends.utils.names_digest","django.db.backends.utils.split_identifier","django.db.backends.utils.truncate_name","django.db.models.Deferrable","django.db.models.Index","django.db.models.fields.composite.CompositePrimaryKey","django.db.models.sql.Query","django.db.transaction.TransactionManagementError","django.db.transaction.atomic","django.utils.timezone","django.db.models.expressions.Value"]},"relative_function":[],"code":"class BaseDatabaseSchemaEditor:\n    \"\"\"\n    This class and its subclasses are responsible for emitting schema-changing\n    statements to the databases - model creation/removal/alteration, field\n    renaming, index fiddling, and so on.\n    \"\"\"\n\n    # Overrideable SQL templates\n    sql_create_table = \"CREATE TABLE %(table)s (%(definition)s)\"\n    sql_rename_table = \"ALTER TABLE %(old_table)s RENAME TO %(new_table)s\"\n    sql_retablespace_table = \"ALTER TABLE %(table)s SET TABLESPACE %(new_tablespace)s\"\n    sql_delete_table = \"DROP TABLE %(table)s CASCADE\"\n\n    sql_create_column = \"ALTER TABLE %(table)s ADD COLUMN %(column)s %(definition)s\"\n    sql_alter_column = \"ALTER TABLE %(table)s %(changes)s\"\n    sql_alter_column_type = \"ALTER COLUMN %(column)s TYPE %(type)s%(collation)s\"\n    sql_alter_column_null = \"ALTER COLUMN %(column)s DROP NOT NULL\"\n    sql_alter_column_not_null = \"ALTER COLUMN %(column)s SET NOT NULL\"\n    sql_alter_column_default = \"ALTER COLUMN %(column)s SET DEFAULT %(default)s\"\n    sql_alter_column_no_default = \"ALTER COLUMN %(column)s DROP DEFAULT\"\n    sql_alter_column_no_default_null = sql_alter_column_no_default\n    sql_delete_column = \"ALTER TABLE %(table)s DROP COLUMN %(column)s CASCADE\"\n    sql_rename_column = (\n        \"ALTER TABLE %(table)s RENAME COLUMN %(old_column)s TO %(new_column)s\"\n    )\n    sql_update_with_default = (\n        \"UPDATE %(table)s SET %(column)s = %(default)s WHERE %(column)s IS NULL\"\n    )\n\n    sql_unique_constraint = \"UNIQUE (%(columns)s)%(deferrable)s\"\n    sql_check_constraint = \"CHECK (%(check)s)\"\n    sql_delete_constraint = \"ALTER TABLE %(table)s DROP CONSTRAINT %(name)s\"\n    sql_constraint = \"CONSTRAINT %(name)s %(constraint)s\"\n    sql_pk_constraint = \"PRIMARY KEY (%(columns)s)\"\n\n    sql_create_check = \"ALTER TABLE %(table)s ADD CONSTRAINT %(name)s CHECK (%(check)s)\"\n    sql_delete_check = sql_delete_constraint\n\n    sql_create_unique = (\n        \"ALTER TABLE %(table)s ADD CONSTRAINT %(name)s \"\n        \"UNIQUE%(nulls_distinct)s (%(columns)s)%(deferrable)s\"\n    )\n    sql_delete_unique = sql_delete_constraint\n\n    sql_create_fk = (\n        \"ALTER TABLE %(table)s ADD CONSTRAINT %(name)s FOREIGN KEY (%(column)s) \"\n        \"REFERENCES %(to_table)s (%(to_column)s)%(deferrable)s\"\n    )\n    sql_create_inline_fk = None\n    sql_create_column_inline_fk = None\n    sql_delete_fk = sql_delete_constraint\n\n    sql_create_index = (\n        \"CREATE INDEX %(name)s ON %(table)s \"\n        \"(%(columns)s)%(include)s%(extra)s%(condition)s\"\n    )\n    sql_create_unique_index = (\n        \"CREATE UNIQUE INDEX %(name)s ON %(table)s \"\n        \"(%(columns)s)%(include)s%(nulls_distinct)s%(condition)s\"\n    )\n    sql_rename_index = \"ALTER INDEX %(old_name)s RENAME TO %(new_name)s\"\n    sql_delete_index = \"DROP INDEX %(name)s\"\n\n    sql_create_pk = (\n        \"ALTER TABLE %(table)s ADD CONSTRAINT %(name)s PRIMARY KEY (%(columns)s)\"\n    )\n    sql_delete_pk = sql_delete_constraint\n\n    sql_delete_procedure = \"DROP PROCEDURE %(procedure)s\"\n\n    sql_alter_table_comment = \"COMMENT ON TABLE %(table)s IS %(comment)s\"\n    sql_alter_column_comment = \"COMMENT ON COLUMN %(table)s.%(column)s IS %(comment)s\"\n\n    def __init__(self, connection, collect_sql=False, atomic=True):\n        self.connection = connection\n        self.collect_sql = collect_sql\n        if self.collect_sql:\n            self.collected_sql = []\n        self.atomic_migration = self.connection.features.can_rollback_ddl and atomic\n\n    # State-managing methods\n\n    def __enter__(self):\n        self.deferred_sql = []\n        if self.atomic_migration:\n            self.atomic = atomic(self.connection.alias)\n            self.atomic.__enter__()\n        return self\n\n    def __exit__(self, exc_type, exc_value, traceback):\n        if exc_type is None:\n            for sql in self.deferred_sql:\n                self.execute(sql, None)\n        if self.atomic_migration:\n            self.atomic.__exit__(exc_type, exc_value, traceback)\n\n    # Core utility functions\n\n    def execute(self, sql, params=()):\n        \"\"\"Execute the given SQL statement, with optional parameters.\"\"\"\n        # Don't perform the transactional DDL check if SQL is being collected\n        # as it's not going to be executed anyway.\n        if (\n            not self.collect_sql\n            and self.connection.in_atomic_block\n            and not self.connection.features.can_rollback_ddl\n        ):\n            raise TransactionManagementError(\n                \"Executing DDL statements while in a transaction on databases \"\n                \"that can't perform a rollback is prohibited.\"\n            )\n        # Account for non-string statement objects.\n        sql = str(sql)\n        # Log the command we're running, then run it\n        logger.debug(\n            \"%s; (params %r)\", sql, params, extra={\"params\": params, \"sql\": sql}\n        )\n        if self.collect_sql:\n            ending = \"\" if sql.rstrip().endswith(\";\") else \";\"\n            if params is not None:\n                self.collected_sql.append(\n                    (sql % tuple(map(self.quote_value, params))) + ending\n                )\n            else:\n                self.collected_sql.append(sql + ending)\n        else:\n            with self.connection.cursor() as cursor:\n                cursor.execute(sql, params)\n\n    def quote_name(self, name):\n        return self.connection.ops.quote_name(name)\n\n    def table_sql(self, model):\n        \"\"\"Take a model and return its table definition.\"\"\"\n        # Add any unique_togethers (always deferred, as some fields might be\n        # created afterward, like geometry fields with some backends).\n        for field_names in model._meta.unique_together:\n            fields = [model._meta.get_field(field) for field in field_names]\n            self.deferred_sql.append(self._create_unique_sql(model, fields))\n        # Create column SQL, add FK deferreds if needed.\n        column_sqls = []\n        params = []\n        for field in model._meta.local_fields:\n            # SQL.\n            definition, extra_params = self.column_sql(model, field)\n            if definition is None:\n                continue\n            # Check constraints can go on the column SQL here.\n            db_params = field.db_parameters(connection=self.connection)\n            if db_params[\"check\"]:\n                definition += \" \" + self.sql_check_constraint % db_params\n            # Autoincrement SQL (for backends with inline variant).\n            col_type_suffix = field.db_type_suffix(connection=self.connection)\n            if col_type_suffix:\n                definition += \" %s\" % col_type_suffix\n            params.extend(extra_params)\n            # FK.\n            if field.remote_field and field.db_constraint:\n                to_table = field.remote_field.model._meta.db_table\n                to_column = field.remote_field.model._meta.get_field(\n                    field.remote_field.field_name\n                ).column\n                if self.sql_create_inline_fk:\n                    definition += \" \" + self.sql_create_inline_fk % {\n                        \"to_table\": self.quote_name(to_table),\n                        \"to_column\": self.quote_name(to_column),\n                    }\n                elif self.connection.features.supports_foreign_keys:\n                    self.deferred_sql.append(\n                        self._create_fk_sql(\n                            model, field, \"_fk_%(to_table)s_%(to_column)s\"\n                        )\n                    )\n            # Add the SQL to our big list.\n            column_sqls.append(\n                \"%s %s\"\n                % (\n                    self.quote_name(field.column),\n                    definition,\n                )\n            )\n            # Autoincrement SQL (for backends with post table definition\n            # variant).\n            if field.get_internal_type() in (\n                \"AutoField\",\n                \"BigAutoField\",\n                \"SmallAutoField\",\n            ):\n                autoinc_sql = self.connection.ops.autoinc_sql(\n                    model._meta.db_table, field.column\n                )\n                if autoinc_sql:\n                    self.deferred_sql.extend(autoinc_sql)\n        # The BaseConstraint DDL creation methods such as constraint_sql(),\n        # create_sql(), and delete_sql(), were not designed in a way that\n        # separate SQL from parameters which make their generated SQL unfit to\n        # be used in a context where parametrization is delegated to the\n        # backend.\n        constraint_sqls = []\n        if params:\n            # If parameters are present (e.g. a DEFAULT clause on backends that\n            # allow parametrization) defer constraint creation so they are not\n            # mixed with SQL meant to be parametrized.\n            for constraint in model._meta.constraints:\n                self.deferred_sql.append(constraint.create_sql(model, self))\n        else:\n            constraint_sqls.extend(\n                constraint.constraint_sql(model, self)\n                for constraint in model._meta.constraints\n            )\n\n        pk = model._meta.pk\n        if isinstance(pk, CompositePrimaryKey):\n            constraint_sqls.append(self._pk_constraint_sql(pk.columns))\n\n        sql = self.sql_create_table % {\n            \"table\": self.quote_name(model._meta.db_table),\n            \"definition\": \", \".join(\n                str(statement)\n                for statement in (*column_sqls, *constraint_sqls)\n                if statement\n            ),\n        }\n        if model._meta.db_tablespace:\n            tablespace_sql = self.connection.ops.tablespace_sql(\n                model._meta.db_tablespace\n            )\n            if tablespace_sql:\n                sql += \" \" + tablespace_sql\n        return sql, params\n\n    # Field <-> database mapping functions\n\n    def _iter_column_sql(\n        self, column_db_type, params, model, field, field_db_params, include_default\n    ):\n        yield column_db_type\n        if collation := field_db_params.get(\"collation\"):\n            yield self._collate_sql(collation)\n        # Work out nullability.\n        null = field.null\n        # Add database default.\n        if field.has_db_default():\n            default_sql, default_params = self.db_default_sql(field)\n            yield f\"DEFAULT {default_sql}\"\n            params.extend(default_params)\n            include_default = False\n        # Include a default value, if requested.\n        include_default = (\n            include_default\n            and not self.skip_default(field)\n            and\n            # Don't include a default value if it's a nullable field and the\n            # default cannot be dropped in the ALTER COLUMN statement (e.g.\n            # MySQL longtext and longblob).\n            not (null and self.skip_default_on_alter(field))\n        )\n        if include_default:\n            default_value = self.effective_default(field)\n            if default_value is not None:\n                column_default = \"DEFAULT \" + self._column_default_sql(field)\n                if self.connection.features.requires_literal_defaults:\n                    # Some databases can't take defaults as a parameter\n                    # (Oracle, SQLite). If this is the case, the individual\n                    # schema backend should implement prepare_default().\n                    yield column_default % self.prepare_default(default_value)\n                else:\n                    yield column_default\n                    params.append(default_value)\n        # Oracle treats the empty string ('') as null, so coerce the null\n        # option whenever '' is a possible value.\n        if (\n            field.empty_strings_allowed\n            and not field.primary_key\n            and self.connection.features.interprets_empty_strings_as_nulls\n        ):\n            null = True\n        if field.generated:\n            generated_sql, generated_params = self._column_generated_sql(field)\n            params.extend(generated_params)\n            yield generated_sql\n        elif not null:\n            yield \"NOT NULL\"\n        elif not self.connection.features.implied_column_null:\n            yield \"NULL\"\n        if field.primary_key:\n            yield \"PRIMARY KEY\"\n        elif field.unique:\n            yield \"UNIQUE\"\n        # Optionally add the tablespace if it's an implicitly indexed column.\n        tablespace = field.db_tablespace or model._meta.db_tablespace\n        if (\n            tablespace\n            and self.connection.features.supports_tablespaces\n            and field.unique\n        ):\n            yield self.connection.ops.tablespace_sql(tablespace, inline=True)\n        if self.connection.features.supports_comments_inline and field.db_comment:\n            yield self._comment_sql(field.db_comment)\n\n    def column_sql(self, model, field, include_default=False):\n        \"\"\"\n        Return the column definition for a field. The field must already have\n        had set_attributes_from_name() called.\n        \"\"\"\n        # Get the column's type and use that as the basis of the SQL.\n        field_db_params = field.db_parameters(connection=self.connection)\n        column_db_type = field_db_params[\"type\"]\n        # Check for fields that aren't actually columns (e.g. M2M).\n        if column_db_type is None:\n            return None, None\n        params = []\n        return (\n            \" \".join(\n                # This appends to the params being returned.\n                self._iter_column_sql(\n                    column_db_type,\n                    params,\n                    model,\n                    field,\n                    field_db_params,\n                    include_default,\n                )\n            ),\n            params,\n        )\n\n    def skip_default(self, field):\n        \"\"\"\n        Some backends don't accept default values for certain columns types\n        (i.e. MySQL longtext and longblob).\n        \"\"\"\n        return False\n\n    def skip_default_on_alter(self, field):\n        \"\"\"\n        Some backends don't accept default values for certain columns types\n        (i.e. MySQL longtext and longblob) in the ALTER COLUMN statement.\n        \"\"\"\n        return False\n\n    def prepare_default(self, value):\n        \"\"\"\n        Only used for backends which have requires_literal_defaults feature\n        \"\"\"\n        raise NotImplementedError(\n            \"subclasses of BaseDatabaseSchemaEditor for backends which have \"\n            \"requires_literal_defaults must provide a prepare_default() method\"\n        )\n\n    def _column_default_sql(self, field):\n        \"\"\"\n        Return the SQL to use in a DEFAULT clause. The resulting string should\n        contain a '%s' placeholder for a default value.\n        \"\"\"\n        return \"%s\"\n\n    def db_default_sql(self, field):\n        \"\"\"Return the sql and params for the field's database default.\"\"\"\n        from django.db.models.expressions import Value\n\n        db_default = field._db_default_expression\n        sql = (\n            self._column_default_sql(field) if isinstance(db_default, Value) else \"(%s)\"\n        )\n        query = Query(model=field.model)\n        compiler = query.get_compiler(connection=self.connection)\n        default_sql, params = compiler.compile(db_default)\n        if self.connection.features.requires_literal_defaults:\n            # Some databases don't support parameterized defaults (Oracle,\n            # SQLite). If this is the case, the individual schema backend\n            # should implement prepare_default().\n            default_sql %= tuple(self.prepare_default(p) for p in params)\n            params = []\n        return sql % default_sql, params\n\n    def _column_generated_sql(self, field):\n        \"\"\"Return the SQL to use in a GENERATED ALWAYS clause.\"\"\"\n        expression_sql, params = field.generated_sql(self.connection)\n        persistency_sql = \"STORED\" if field.db_persist else \"VIRTUAL\"\n        if self.connection.features.requires_literal_defaults:\n            expression_sql = expression_sql % tuple(self.quote_value(p) for p in params)\n            params = ()\n        return f\"GENERATED ALWAYS AS ({expression_sql}) {persistency_sql}\", params\n\n    @staticmethod\n    def _effective_default(field):\n        # This method allows testing its logic without a connection.\n        if field.has_default():\n            default = field.get_default()\n        elif field.generated:\n            default = None\n        elif not field.null and field.blank and field.empty_strings_allowed:\n            if field.get_internal_type() == \"BinaryField\":\n                default = b\"\"\n            else:\n                default = \"\"\n        elif getattr(field, \"auto_now\", False) or getattr(field, \"auto_now_add\", False):\n            internal_type = field.get_internal_type()\n            if internal_type == \"DateTimeField\":\n                default = timezone.now()\n            else:\n                default = datetime.now()\n                if internal_type == \"DateField\":\n                    default = default.date()\n                elif internal_type == \"TimeField\":\n                    default = default.time()\n        else:\n            default = None\n        return default\n\n    def effective_default(self, field):\n        \"\"\"Return a field's effective database default value.\"\"\"\n        return field.get_db_prep_save(self._effective_default(field), self.connection)\n\n    def quote_value(self, value):\n        \"\"\"\n        Return a quoted version of the value so it's safe to use in an SQL\n        string. This is not safe against injection from user code; it is\n        intended only for use in making SQL scripts or preparing default values\n        for particularly tricky backends (defaults are not user-defined, though,\n        so this is safe).\n        \"\"\"\n        raise NotImplementedError()\n\n    # Actions\n\n    def create_model(self, model):\n        \"\"\"\n        Create a table and any accompanying indexes or unique constraints for\n        the given `model`.\n        \"\"\"\n        sql, params = self.table_sql(model)\n        # Prevent using [] as params, in the case a literal '%' is used in the\n        # definition on backends that don't support parametrized DDL.\n        self.execute(sql, params or None)\n\n        if self.connection.features.supports_comments:\n            # Add table comment.\n            if model._meta.db_table_comment:\n                self.alter_db_table_comment(model, None, model._meta.db_table_comment)\n            # Add column comments.\n            if not self.connection.features.supports_comments_inline:\n                for field in model._meta.local_fields:\n                    if field.db_comment:\n                        field_db_params = field.db_parameters(\n                            connection=self.connection\n                        )\n                        field_type = field_db_params[\"type\"]\n                        self.execute(\n                            *self._alter_column_comment_sql(\n                                model, field, field_type, field.db_comment\n                            )\n                        )\n        # Add any field index (deferred as SQLite _remake_table needs it).\n        self.deferred_sql.extend(self._model_indexes_sql(model))\n\n        # Make M2M tables\n        for field in model._meta.local_many_to_many:\n            if field.remote_field.through._meta.auto_created:\n                self.create_model(field.remote_field.through)\n\n    def delete_model(self, model):\n        \"\"\"Delete a model from the database.\"\"\"\n        # Handle auto-created intermediary models\n        for field in model._meta.local_many_to_many:\n            if field.remote_field.through._meta.auto_created:\n                self.delete_model(field.remote_field.through)\n\n        # Delete the table\n        self.execute(\n            self.sql_delete_table\n            % {\n                \"table\": self.quote_name(model._meta.db_table),\n            }\n        )\n        # Remove all deferred statements referencing the deleted table.\n        for sql in list(self.deferred_sql):\n            if isinstance(sql, Statement) and sql.references_table(\n                model._meta.db_table\n            ):\n                self.deferred_sql.remove(sql)\n\n    def add_index(self, model, index):\n        \"\"\"Add an index on a model.\"\"\"\n        if (\n            index.contains_expressions\n            and not self.connection.features.supports_expression_indexes\n        ):\n            return None\n        # Index.create_sql returns interpolated SQL which makes params=None a\n        # necessity to avoid escaping attempts on execution.\n        self.execute(index.create_sql(model, self), params=None)\n\n    def remove_index(self, model, index):\n        \"\"\"Remove an index from a model.\"\"\"\n        if (\n            index.contains_expressions\n            and not self.connection.features.supports_expression_indexes\n        ):\n            return None\n        self.execute(index.remove_sql(model, self))\n\n    def rename_index(self, model, old_index, new_index):\n        if self.connection.features.can_rename_index:\n            self.execute(\n                self._rename_index_sql(model, old_index.name, new_index.name),\n                params=None,\n            )\n        else:\n            self.remove_index(model, old_index)\n            self.add_index(model, new_index)\n\n    def add_constraint(self, model, constraint):\n        \"\"\"Add a constraint to a model.\"\"\"\n        sql = constraint.create_sql(model, self)\n        if sql:\n            # Constraint.create_sql returns interpolated SQL which makes\n            # params=None a necessity to avoid escaping attempts on execution.\n            self.execute(sql, params=None)\n\n    def remove_constraint(self, model, constraint):\n        \"\"\"Remove a constraint from a model.\"\"\"\n        sql = constraint.remove_sql(model, self)\n        if sql:\n            self.execute(sql)\n\n    def alter_unique_together(self, model, old_unique_together, new_unique_together):\n        \"\"\"\n        Deal with a model changing its unique_together. The input\n        unique_togethers must be doubly-nested, not the single-nested\n        [\"foo\", \"bar\"] format.\n        \"\"\"\n        olds = {tuple(fields) for fields in old_unique_together}\n        news = {tuple(fields) for fields in new_unique_together}\n        # Deleted uniques\n        for fields in olds.difference(news):\n            self._delete_composed_index(\n                model,\n                fields,\n                {\"unique\": True, \"primary_key\": False},\n                self.sql_delete_unique,\n            )\n        # Created uniques\n        for field_names in news.difference(olds):\n            fields = [model._meta.get_field(field) for field in field_names]\n            self.execute(self._create_unique_sql(model, fields))\n\n    def alter_index_together(self, model, old_index_together, new_index_together):\n        \"\"\"\n        Deal with a model changing its index_together. The input\n        index_togethers must be doubly-nested, not the single-nested\n        [\"foo\", \"bar\"] format.\n        \"\"\"\n        olds = {tuple(fields) for fields in old_index_together}\n        news = {tuple(fields) for fields in new_index_together}\n        # Deleted indexes\n        for fields in olds.difference(news):\n            self._delete_composed_index(\n                model,\n                fields,\n                {\"index\": True, \"unique\": False},\n                self.sql_delete_index,\n            )\n        # Created indexes\n        for field_names in news.difference(olds):\n            fields = [model._meta.get_field(field) for field in field_names]\n            self.execute(self._create_index_sql(model, fields=fields, suffix=\"_idx\"))\n\n    def _delete_composed_index(self, model, fields, constraint_kwargs, sql):\n        meta_constraint_names = {\n            constraint.name for constraint in model._meta.constraints\n        }\n        meta_index_names = {constraint.name for constraint in model._meta.indexes}\n        columns = [model._meta.get_field(field).column for field in fields]\n        constraint_names = self._constraint_names(\n            model,\n            columns,\n            exclude=meta_constraint_names | meta_index_names,\n            **constraint_kwargs,\n        )\n        if (\n            constraint_kwargs.get(\"unique\") is True\n            and constraint_names\n            and self.connection.features.allows_multiple_constraints_on_same_fields\n        ):\n            # Constraint matching the unique_together name.\n            default_name = str(\n                self._unique_constraint_name(model._meta.db_table, columns, quote=False)\n            )\n            if default_name in constraint_names:\n                constraint_names = [default_name]\n        if len(constraint_names) != 1:\n            raise ValueError(\n                \"Found wrong number (%s) of constraints for %s(%s)\"\n                % (\n                    len(constraint_names),\n                    model._meta.db_table,\n                    \", \".join(columns),\n                )\n            )\n        self.execute(self._delete_constraint_sql(sql, model, constraint_names[0]))\n\n    def alter_db_table(self, model, old_db_table, new_db_table):\n        \"\"\"Rename the table a model points to.\"\"\"\n        if old_db_table == new_db_table or (\n            self.connection.features.ignores_table_name_case\n            and old_db_table.lower() == new_db_table.lower()\n        ):\n            return\n        self.execute(\n            self.sql_rename_table\n            % {\n                \"old_table\": self.quote_name(old_db_table),\n                \"new_table\": self.quote_name(new_db_table),\n            }\n        )\n        # Rename all references to the old table name.\n        for sql in self.deferred_sql:\n            if isinstance(sql, Statement):\n                sql.rename_table_references(old_db_table, new_db_table)\n\n    def alter_db_table_comment(self, model, old_db_table_comment, new_db_table_comment):\n        if self.sql_alter_table_comment and self.connection.features.supports_comments:\n            self.execute(\n                self.sql_alter_table_comment\n                % {\n                    \"table\": self.quote_name(model._meta.db_table),\n                    \"comment\": self.quote_value(new_db_table_comment or \"\"),\n                }\n            )\n\n    def alter_db_tablespace(self, model, old_db_tablespace, new_db_tablespace):\n        \"\"\"Move a model's table between tablespaces.\"\"\"\n        self.execute(\n            self.sql_retablespace_table\n            % {\n                \"table\": self.quote_name(model._meta.db_table),\n                \"old_tablespace\": self.quote_name(old_db_tablespace),\n                \"new_tablespace\": self.quote_name(new_db_tablespace),\n            }\n        )\n\n    def add_field(self, model, field):\n        \"\"\"\n        Create a field on a model. Usually involves adding a column, but may\n        involve adding a table instead (for M2M fields).\n        \"\"\"\n        # Special-case implicit M2M tables\n        if field.many_to_many and field.remote_field.through._meta.auto_created:\n            return self.create_model(field.remote_field.through)\n        # Get the column's definition\n        definition, params = self.column_sql(model, field, include_default=True)\n        # It might not actually have a column behind it\n        if definition is None:\n            return\n        if col_type_suffix := field.db_type_suffix(connection=self.connection):\n            definition += f\" {col_type_suffix}\"\n        # Check constraints can go on the column SQL here\n        db_params = field.db_parameters(connection=self.connection)\n        if db_params[\"check\"]:\n            definition += \" \" + self.sql_check_constraint % db_params\n        if (\n            field.remote_field\n            and self.connection.features.supports_foreign_keys\n            and field.db_constraint\n        ):\n            constraint_suffix = \"_fk_%(to_table)s_%(to_column)s\"\n            # Add FK constraint inline, if supported.\n            if self.sql_create_column_inline_fk:\n                to_table = field.remote_field.model._meta.db_table\n                to_column = field.remote_field.model._meta.get_field(\n                    field.remote_field.field_name\n                ).column\n                namespace, _ = split_identifier(model._meta.db_table)\n                definition += \" \" + self.sql_create_column_inline_fk % {\n                    \"name\": self._fk_constraint_name(model, field, constraint_suffix),\n                    \"namespace\": (\n                        \"%s.\" % self.quote_name(namespace) if namespace else \"\"\n                    ),\n                    \"column\": self.quote_name(field.column),\n                    \"to_table\": self.quote_name(to_table),\n                    \"to_column\": self.quote_name(to_column),\n                    \"deferrable\": self.connection.ops.deferrable_sql(),\n                }\n            # Otherwise, add FK constraints later.\n            else:\n                self.deferred_sql.append(\n                    self._create_fk_sql(model, field, constraint_suffix)\n                )\n        # Build the SQL and run it\n        sql = self.sql_create_column % {\n            \"table\": self.quote_name(model._meta.db_table),\n            \"column\": self.quote_name(field.column),\n            \"definition\": definition,\n        }\n        # Prevent using [] as params, in the case a literal '%' is used in the\n        # definition on backends that don't support parametrized DDL.\n        self.execute(sql, params or None)\n        # Drop the default if we need to\n        if (\n            not field.has_db_default()\n            and not self.skip_default_on_alter(field)\n            and self.effective_default(field) is not None\n        ):\n            changes_sql, params = self._alter_column_default_sql(\n                model, None, field, drop=True\n            )\n            sql = self.sql_alter_column % {\n                \"table\": self.quote_name(model._meta.db_table),\n                \"changes\": changes_sql,\n            }\n            self.execute(sql, params)\n        # Add field comment, if required.\n        if (\n            field.db_comment\n            and self.connection.features.supports_comments\n            and not self.connection.features.supports_comments_inline\n        ):\n            field_type = db_params[\"type\"]\n            self.execute(\n                *self._alter_column_comment_sql(\n                    model, field, field_type, field.db_comment\n                )\n            )\n        # Add an index, if required\n        self.deferred_sql.extend(self._field_indexes_sql(model, field))\n        # Reset connection if required\n        if self.connection.features.connection_persists_old_columns:\n            self.connection.close()\n\n    def remove_field(self, model, field):\n        \"\"\"\n        Remove a field from a model. Usually involves deleting a column,\n        but for M2Ms may involve deleting a table.\n        \"\"\"\n        # Special-case implicit M2M tables\n        if field.many_to_many and field.remote_field.through._meta.auto_created:\n            return self.delete_model(field.remote_field.through)\n        # It might not actually have a column behind it\n        if field.db_parameters(connection=self.connection)[\"type\"] is None:\n            return\n        # Drop any FK constraints, MySQL requires explicit deletion\n        if field.remote_field:\n            fk_names = self._constraint_names(model, [field.column], foreign_key=True)\n            for fk_name in fk_names:\n                self.execute(self._delete_fk_sql(model, fk_name))\n        # Delete the column\n        sql = self.sql_delete_column % {\n            \"table\": self.quote_name(model._meta.db_table),\n            \"column\": self.quote_name(field.column),\n        }\n        self.execute(sql)\n        # Reset connection if required\n        if self.connection.features.connection_persists_old_columns:\n            self.connection.close()\n        # Remove all deferred statements referencing the deleted column.\n        for sql in list(self.deferred_sql):\n            if isinstance(sql, Statement) and sql.references_column(\n                model._meta.db_table, field.column\n            ):\n                self.deferred_sql.remove(sql)\n\n    def alter_field(self, model, old_field, new_field, strict=False):\n        \"\"\"\n        Allow a field's type, uniqueness, nullability, default, column,\n        constraints, etc. to be modified.\n        `old_field` is required to compute the necessary changes.\n        If `strict` is True, raise errors if the old column does not match\n        `old_field` precisely.\n        \"\"\"\n        if not self._field_should_be_altered(old_field, new_field):\n            return\n        # Ensure this field is even column-based\n        old_db_params = old_field.db_parameters(connection=self.connection)\n        old_type = old_db_params[\"type\"]\n        new_db_params = new_field.db_parameters(connection=self.connection)\n        new_type = new_db_params[\"type\"]\n        modifying_generated_field = False\n        if (old_type is None and old_field.remote_field is None) or (\n            new_type is None and new_field.remote_field is None\n        ):\n            raise ValueError(\n                \"Cannot alter field %s into %s - they do not properly define \"\n                \"db_type (are you using a badly-written custom field?)\"\n                % (old_field, new_field),\n            )\n        elif (\n            old_type is None\n            and new_type is None\n            and (\n                old_field.remote_field.through\n                and new_field.remote_field.through\n                and old_field.remote_field.through._meta.auto_created\n                and new_field.remote_field.through._meta.auto_created\n            )\n        ):\n            return self._alter_many_to_many(model, old_field, new_field, strict)\n        elif (\n            old_type is None\n            and new_type is None\n            and (\n                old_field.remote_field.through\n                and new_field.remote_field.through\n                and not old_field.remote_field.through._meta.auto_created\n                and not new_field.remote_field.through._meta.auto_created\n            )\n        ):\n            # Both sides have through models; this is a no-op.\n            return\n        elif old_type is None or new_type is None:\n            raise ValueError(\n                \"Cannot alter field %s into %s - they are not compatible types \"\n                \"(you cannot alter to or from M2M fields, or add or remove \"\n                \"through= on M2M fields)\" % (old_field, new_field)\n            )\n        elif old_field.generated != new_field.generated or (\n            new_field.generated and old_field.db_persist != new_field.db_persist\n        ):\n            modifying_generated_field = True\n        elif new_field.generated:\n            try:\n                old_field_sql = old_field.generated_sql(self.connection)\n            except FieldError:\n                # Field used in a generated field was renamed.\n                modifying_generated_field = True\n            else:\n                new_field_sql = new_field.generated_sql(self.connection)\n                modifying_generated_field = old_field_sql != new_field_sql\n        if modifying_generated_field:\n            raise ValueError(\n                f\"Modifying GeneratedFields is not supported - the field {new_field} \"\n                \"must be removed and re-added with the new definition.\"\n            )\n\n        self._alter_field(\n            model,\n            old_field,\n            new_field,\n            old_type,\n            new_type,\n            old_db_params,\n            new_db_params,\n            strict,\n        )\n\n    def _field_db_check(self, field, field_db_params):\n        # Always check constraints with the same mocked column name to avoid\n        # recreating constrains when the column is renamed.\n        check_constraints = self.connection.data_type_check_constraints\n        data = field.db_type_parameters(self.connection)\n        data[\"column\"] = \"__column_name__\"\n        try:\n            return check_constraints[field.get_internal_type()] % data\n        except KeyError:\n            return None\n\n    def _alter_field(\n        self,\n        model,\n        old_field,\n        new_field,\n        old_type,\n        new_type,\n        old_db_params,\n        new_db_params,\n        strict=False,\n    ):\n        \"\"\"Perform a \"physical\" (non-ManyToMany) field update.\"\"\"\n        # Drop any FK constraints, we'll remake them later\n        fks_dropped = set()\n        if (\n            self.connection.features.supports_foreign_keys\n            and old_field.remote_field\n            and old_field.db_constraint\n            and self._field_should_be_altered(\n                old_field,\n                new_field,\n                ignore={\"db_comment\"},\n            )\n        ):\n            fk_names = self._constraint_names(\n                model, [old_field.column], foreign_key=True\n            )\n            if strict and len(fk_names) != 1:\n                raise ValueError(\n                    \"Found wrong number (%s) of foreign key constraints for %s.%s\"\n                    % (\n                        len(fk_names),\n                        model._meta.db_table,\n                        old_field.column,\n                    )\n                )\n            for fk_name in fk_names:\n                fks_dropped.add((old_field.column,))\n                self.execute(self._delete_fk_sql(model, fk_name))\n        # Has unique been removed?\n        if old_field.unique and (\n            not new_field.unique or self._field_became_primary_key(old_field, new_field)\n        ):\n            # Find the unique constraint for this field\n            meta_constraint_names = {\n                constraint.name for constraint in model._meta.constraints\n            }\n            constraint_names = self._constraint_names(\n                model,\n                [old_field.column],\n                unique=True,\n                primary_key=False,\n                exclude=meta_constraint_names,\n            )\n            if strict and len(constraint_names) != 1:\n                raise ValueError(\n                    \"Found wrong number (%s) of unique constraints for %s.%s\"\n                    % (\n                        len(constraint_names),\n                        model._meta.db_table,\n                        old_field.column,\n                    )\n                )\n            for constraint_name in constraint_names:\n                self.execute(self._delete_unique_sql(model, constraint_name))\n        # Drop incoming FK constraints if the field is a primary key or unique,\n        # which might be a to_field target, and things are going to change.\n        old_collation = old_db_params.get(\"collation\")\n        new_collation = new_db_params.get(\"collation\")\n        drop_foreign_keys = (\n            self.connection.features.supports_foreign_keys\n            and (\n                (old_field.primary_key and new_field.primary_key)\n                or (old_field.unique and new_field.unique)\n            )\n            and ((old_type != new_type) or (old_collation != new_collation))\n        )\n        if drop_foreign_keys:\n            # '_meta.related_field' also contains M2M reverse fields, these\n            # will be filtered out\n            for _old_rel, new_rel in _related_non_m2m_objects(old_field, new_field):\n                rel_fk_names = self._constraint_names(\n                    new_rel.related_model, [new_rel.field.column], foreign_key=True\n                )\n                for fk_name in rel_fk_names:\n                    self.execute(self._delete_fk_sql(new_rel.related_model, fk_name))\n        # Removed an index? (no strict check, as multiple indexes are possible)\n        # Remove indexes if db_index switched to False or a unique constraint\n        # will now be used in lieu of an index. The following lines from the\n        # truth table show all True cases; the rest are False:\n        #\n        # old_field.db_index | old_field.unique | new_field.db_index | new_field.unique\n        # ------------------------------------------------------------------------------\n        # True               | False            | False              | False\n        # True               | False            | False              | True\n        # True               | False            | True               | True\n        if (\n            old_field.db_index\n            and not old_field.unique\n            and (not new_field.db_index or new_field.unique)\n        ):\n            # Find the index for this field\n            meta_index_names = {index.name for index in model._meta.indexes}\n            # Retrieve only BTREE indexes since this is what's created with\n            # db_index=True.\n            index_names = self._constraint_names(\n                model,\n                [old_field.column],\n                index=True,\n                type_=Index.suffix,\n                exclude=meta_index_names,\n            )\n            for index_name in index_names:\n                # The only way to check if an index was created with\n                # db_index=True or with Index(['field'], name='foo')\n                # is to look at its name (refs #28053).\n                self.execute(self._delete_index_sql(model, index_name))\n        # Change check constraints?\n        old_db_check = self._field_db_check(old_field, old_db_params)\n        new_db_check = self._field_db_check(new_field, new_db_params)\n        if old_db_check != new_db_check and old_db_check:\n            meta_constraint_names = {\n                constraint.name for constraint in model._meta.constraints\n            }\n            constraint_names = self._constraint_names(\n                model,\n                [old_field.column],\n                check=True,\n                exclude=meta_constraint_names,\n            )\n            if strict and len(constraint_names) != 1:\n                raise ValueError(\n                    \"Found wrong number (%s) of check constraints for %s.%s\"\n                    % (\n                        len(constraint_names),\n                        model._meta.db_table,\n                        old_field.column,\n                    )\n                )\n            for constraint_name in constraint_names:\n                self.execute(self._delete_check_sql(model, constraint_name))\n        # Have they renamed the column?\n        if old_field.column != new_field.column:\n            self.execute(\n                self._rename_field_sql(\n                    model._meta.db_table, old_field, new_field, new_type\n                )\n            )\n            # Rename all references to the renamed column.\n            for sql in self.deferred_sql:\n                if isinstance(sql, Statement):\n                    sql.rename_column_references(\n                        model._meta.db_table, old_field.column, new_field.column\n                    )\n        # Next, start accumulating actions to do\n        actions = []\n        null_actions = []\n        post_actions = []\n        # Type suffix change? (e.g. auto increment).\n        old_type_suffix = old_field.db_type_suffix(connection=self.connection)\n        new_type_suffix = new_field.db_type_suffix(connection=self.connection)\n        # Type, collation, or comment change?\n        if (\n            old_type != new_type\n            or old_type_suffix != new_type_suffix\n            or old_collation != new_collation\n            or (\n                self.connection.features.supports_comments\n                and old_field.db_comment != new_field.db_comment\n            )\n        ):\n            fragment, other_actions = self._alter_column_type_sql(\n                model, old_field, new_field, new_type, old_collation, new_collation\n            )\n            actions.append(fragment)\n            post_actions.extend(other_actions)\n\n        if new_field.has_db_default():\n            if (\n                not old_field.has_db_default()\n                or new_field.db_default != old_field.db_default\n            ):\n                actions.append(\n                    self._alter_column_database_default_sql(model, old_field, new_field)\n                )\n        elif old_field.has_db_default():\n            actions.append(\n                self._alter_column_database_default_sql(\n                    model, old_field, new_field, drop=True\n                )\n            )\n        # When changing a column NULL constraint to NOT NULL with a given\n        # default value, we need to perform 4 steps:\n        #  1. Add a default for new incoming writes\n        #  2. Update existing NULL rows with new default\n        #  3. Replace NULL constraint with NOT NULL\n        #  4. Drop the default again.\n        # Default change?\n        needs_database_default = False\n        if old_field.null and not new_field.null and not new_field.has_db_default():\n            old_default = self.effective_default(old_field)\n            new_default = self.effective_default(new_field)\n            if (\n                not self.skip_default_on_alter(new_field)\n                and old_default != new_default\n                and new_default is not None\n            ):\n                needs_database_default = True\n                actions.append(\n                    self._alter_column_default_sql(model, old_field, new_field)\n                )\n        # Nullability change?\n        if old_field.null != new_field.null:\n            fragment = self._alter_column_null_sql(model, old_field, new_field)\n            if fragment:\n                null_actions.append(fragment)\n        # Only if we have a default and there is a change from NULL to NOT NULL\n        four_way_default_alteration = (\n            new_field.has_default() or new_field.has_db_default()\n        ) and (old_field.null and not new_field.null)\n        if actions or null_actions:\n            if not four_way_default_alteration:\n                # If we don't have to do a 4-way default alteration we can\n                # directly run a (NOT) NULL alteration\n                actions += null_actions\n            # Combine actions together if we can (e.g. postgres)\n            if self.connection.features.supports_combined_alters and actions:\n                sql, params = tuple(zip(*actions))\n                actions = [(\", \".join(sql), sum(params, []))]\n            # Apply those actions\n            for sql, params in actions:\n                self.execute(\n                    self.sql_alter_column\n                    % {\n                        \"table\": self.quote_name(model._meta.db_table),\n                        \"changes\": sql,\n                    },\n                    params,\n                )\n            if four_way_default_alteration:\n                if not new_field.has_db_default():\n                    default_sql = \"%s\"\n                    params = [new_default]\n                else:\n                    default_sql, params = self.db_default_sql(new_field)\n                # Update existing rows with default value\n                self.execute(\n                    self.sql_update_with_default\n                    % {\n                        \"table\": self.quote_name(model._meta.db_table),\n                        \"column\": self.quote_name(new_field.column),\n                        \"default\": default_sql,\n                    },\n                    params,\n                )\n                # Since we didn't run a NOT NULL change before we need to do it\n                # now\n                for sql, params in null_actions:\n                    self.execute(\n                        self.sql_alter_column\n                        % {\n                            \"table\": self.quote_name(model._meta.db_table),\n                            \"changes\": sql,\n                        },\n                        params,\n                    )\n        if post_actions:\n            for sql, params in post_actions:\n                self.execute(sql, params)\n        # If primary_key changed to False, delete the primary key constraint.\n        if old_field.primary_key and not new_field.primary_key:\n            self._delete_primary_key(model, strict)\n        # Added a unique?\n        if self._unique_should_be_added(old_field, new_field):\n            self.execute(self._create_unique_sql(model, [new_field]))\n        # Added an index? Add an index if db_index switched to True or a unique\n        # constraint will no longer be used in lieu of an index. The following\n        # lines from the truth table show all True cases; the rest are False:\n        #\n        # old_field.db_index | old_field.unique | new_field.db_index | new_field.unique\n        # ------------------------------------------------------------------------------\n        # False              | False            | True               | False\n        # False              | True             | True               | False\n        # True               | True             | True               | False\n        if (\n            (not old_field.db_index or old_field.unique)\n            and new_field.db_index\n            and not new_field.unique\n        ):\n            self.execute(self._create_index_sql(model, fields=[new_field]))\n        # Type alteration on primary key? Then we need to alter the column\n        # referring to us.\n        rels_to_update = []\n        if drop_foreign_keys:\n            rels_to_update.extend(_related_non_m2m_objects(old_field, new_field))\n        # Changed to become primary key?\n        if self._field_became_primary_key(old_field, new_field):\n            # Make the new one\n            self.execute(self._create_primary_key_sql(model, new_field))\n            # Update all referencing columns\n            rels_to_update.extend(_related_non_m2m_objects(old_field, new_field))\n        # Handle our type alters on the other end of rels from the PK stuff above\n        for old_rel, new_rel in rels_to_update:\n            rel_db_params = new_rel.field.db_parameters(connection=self.connection)\n            rel_type = rel_db_params[\"type\"]\n            rel_collation = rel_db_params.get(\"collation\")\n            old_rel_db_params = old_rel.field.db_parameters(connection=self.connection)\n            old_rel_collation = old_rel_db_params.get(\"collation\")\n            fragment, other_actions = self._alter_column_type_sql(\n                new_rel.related_model,\n                old_rel.field,\n                new_rel.field,\n                rel_type,\n                old_rel_collation,\n                rel_collation,\n            )\n            self.execute(\n                self.sql_alter_column\n                % {\n                    \"table\": self.quote_name(new_rel.related_model._meta.db_table),\n                    \"changes\": fragment[0],\n                },\n                fragment[1],\n            )\n            for sql, params in other_actions:\n                self.execute(sql, params)\n        # Does it have a foreign key?\n        if (\n            self.connection.features.supports_foreign_keys\n            and new_field.remote_field\n            and (\n                fks_dropped or not old_field.remote_field or not old_field.db_constraint\n            )\n            and new_field.db_constraint\n        ):\n            self.execute(\n                self._create_fk_sql(model, new_field, \"_fk_%(to_table)s_%(to_column)s\")\n            )\n        # Rebuild FKs that pointed to us if we previously had to drop them\n        if drop_foreign_keys:\n            for _, rel in rels_to_update:\n                if rel.field.db_constraint:\n                    self.execute(\n                        self._create_fk_sql(rel.related_model, rel.field, \"_fk\")\n                    )\n        # Does it have check constraints we need to add?\n        if old_db_check != new_db_check and new_db_check:\n            constraint_name = self._create_index_name(\n                model._meta.db_table, [new_field.column], suffix=\"_check\"\n            )\n            self.execute(\n                self._create_check_sql(model, constraint_name, new_db_params[\"check\"])\n            )\n        # Drop the default if we need to\n        # (Django usually does not use in-database defaults)\n        if needs_database_default:\n            changes_sql, params = self._alter_column_default_sql(\n                model, old_field, new_field, drop=True\n            )\n            sql = self.sql_alter_column % {\n                \"table\": self.quote_name(model._meta.db_table),\n                \"changes\": changes_sql,\n            }\n            self.execute(sql, params)\n        # Reset connection if required\n        if self.connection.features.connection_persists_old_columns:\n            self.connection.close()\n\n    def _alter_column_null_sql(self, model, old_field, new_field):\n        \"\"\"\n        Hook to specialize column null alteration.\n\n        Return a (sql, params) fragment to set a column to null or non-null\n        as required by new_field, or None if no changes are required.\n        \"\"\"\n        if (\n            self.connection.features.interprets_empty_strings_as_nulls\n            and new_field.empty_strings_allowed\n        ):\n            # The field is nullable in the database anyway, leave it alone.\n            return\n        else:\n            new_db_params = new_field.db_parameters(connection=self.connection)\n            sql = (\n                self.sql_alter_column_null\n                if new_field.null\n                else self.sql_alter_column_not_null\n            )\n            return (\n                sql\n                % {\n                    \"column\": self.quote_name(new_field.column),\n                    \"type\": new_db_params[\"type\"],\n                },\n                [],\n            )\n\n    def _alter_column_default_sql(self, model, old_field, new_field, drop=False):\n        \"\"\"\n        Hook to specialize column default alteration.\n\n        Return a (sql, params) fragment to add or drop (depending on the drop\n        argument) a default to new_field's column.\n        \"\"\"\n        new_default = self.effective_default(new_field)\n        default = self._column_default_sql(new_field)\n        params = [new_default]\n\n        if drop:\n            params = []\n        elif self.connection.features.requires_literal_defaults:\n            # Some databases (Oracle) can't take defaults as a parameter\n            # If this is the case, the SchemaEditor for that database should\n            # implement prepare_default().\n            default = self.prepare_default(new_default)\n            params = []\n\n        new_db_params = new_field.db_parameters(connection=self.connection)\n        if drop:\n            if new_field.null:\n                sql = self.sql_alter_column_no_default_null\n            else:\n                sql = self.sql_alter_column_no_default\n        else:\n            sql = self.sql_alter_column_default\n        return (\n            sql\n            % {\n                \"column\": self.quote_name(new_field.column),\n                \"type\": new_db_params[\"type\"],\n                \"default\": default,\n            },\n            params,\n        )\n\n    def _alter_column_database_default_sql(\n        self, model, old_field, new_field, drop=False\n    ):\n        \"\"\"\n        Hook to specialize column database default alteration.\n\n        Return a (sql, params) fragment to add or drop (depending on the drop\n        argument) a default to new_field's column.\n        \"\"\"\n        if drop:\n            sql = self.sql_alter_column_no_default\n            default_sql = \"\"\n            params = []\n        else:\n            sql = self.sql_alter_column_default\n            default_sql, params = self.db_default_sql(new_field)\n\n        new_db_params = new_field.db_parameters(connection=self.connection)\n        return (\n            sql\n            % {\n                \"column\": self.quote_name(new_field.column),\n                \"type\": new_db_params[\"type\"],\n                \"default\": default_sql,\n            },\n            params,\n        )\n\n    def _alter_column_type_sql(\n        self, model, old_field, new_field, new_type, old_collation, new_collation\n    ):\n        \"\"\"\n        Hook to specialize column type alteration for different backends,\n        for cases when a creation type is different to an alteration type\n        (e.g. SERIAL in PostgreSQL, PostGIS fields).\n\n        Return a 2-tuple of: an SQL fragment of (sql, params) to insert into\n        an ALTER TABLE statement and a list of extra (sql, params) tuples to\n        run once the field is altered.\n        \"\"\"\n        other_actions = []\n        if collate_sql := self._collate_sql(\n            new_collation, old_collation, model._meta.db_table\n        ):\n            collate_sql = f\" {collate_sql}\"\n        else:\n            collate_sql = \"\"\n        # Comment change?\n        comment_sql = \"\"\n        if self.connection.features.supports_comments and not new_field.many_to_many:\n            if old_field.db_comment != new_field.db_comment:\n                # PostgreSQL and Oracle can't execute 'ALTER COLUMN ...' and\n                # 'COMMENT ON ...' at the same time.\n                sql, params = self._alter_column_comment_sql(\n                    model, new_field, new_type, new_field.db_comment\n                )\n                if sql:\n                    other_actions.append((sql, params))\n            if new_field.db_comment:\n                comment_sql = self._comment_sql(new_field.db_comment)\n        return (\n            (\n                self.sql_alter_column_type\n                % {\n                    \"column\": self.quote_name(new_field.column),\n                    \"type\": new_type,\n                    \"collation\": collate_sql,\n                    \"comment\": comment_sql,\n                },\n                [],\n            ),\n            other_actions,\n        )\n\n    def _alter_column_comment_sql(self, model, new_field, new_type, new_db_comment):\n        return (\n            self.sql_alter_column_comment\n            % {\n                \"table\": self.quote_name(model._meta.db_table),\n                \"column\": self.quote_name(new_field.column),\n                \"comment\": self._comment_sql(new_db_comment),\n            },\n            [],\n        )\n\n    def _comment_sql(self, comment):\n        return self.quote_value(comment or \"\")\n\n    def _alter_many_to_many(self, model, old_field, new_field, strict):\n        \"\"\"Alter M2Ms to repoint their to= endpoints.\"\"\"\n        # Rename the through table\n        if (\n            old_field.remote_field.through._meta.db_table\n            != new_field.remote_field.through._meta.db_table\n        ):\n            self.alter_db_table(\n                old_field.remote_field.through,\n                old_field.remote_field.through._meta.db_table,\n                new_field.remote_field.through._meta.db_table,\n            )\n        # Repoint the FK to the other side\n        self.alter_field(\n            new_field.remote_field.through,\n            # The field that points to the target model is needed, so we can\n            # tell alter_field to change it - this is m2m_reverse_field_name()\n            # (as opposed to m2m_field_name(), which points to our model).\n            old_field.remote_field.through._meta.get_field(\n                old_field.m2m_reverse_field_name()\n            ),\n            new_field.remote_field.through._meta.get_field(\n                new_field.m2m_reverse_field_name()\n            ),\n        )\n        self.alter_field(\n            new_field.remote_field.through,\n            # for self-referential models we need to alter field from the other end too\n            old_field.remote_field.through._meta.get_field(old_field.m2m_field_name()),\n            new_field.remote_field.through._meta.get_field(new_field.m2m_field_name()),\n        )\n\n    def _create_index_name(self, table_name, column_names, suffix=\"\"):\n        \"\"\"\n        Generate a unique name for an index/unique constraint.\n\n        The name is divided into 3 parts: the table name, the column names,\n        and a unique digest and suffix.\n        \"\"\"\n        _, table_name = split_identifier(table_name)\n        hash_suffix_part = \"%s%s\" % (\n            names_digest(table_name, *column_names, length=8),\n            suffix,\n        )\n        max_length = self.connection.ops.max_name_length() or 200\n        # If everything fits into max_length, use that name.\n        index_name = \"%s_%s_%s\" % (table_name, \"_\".join(column_names), hash_suffix_part)\n        if len(index_name) <= max_length:\n            return index_name\n        # Shorten a long suffix.\n        if len(hash_suffix_part) > max_length / 3:\n            hash_suffix_part = hash_suffix_part[: max_length // 3]\n        other_length = (max_length - len(hash_suffix_part)) // 2 - 1\n        index_name = \"%s_%s_%s\" % (\n            table_name[:other_length],\n            \"_\".join(column_names)[:other_length],\n            hash_suffix_part,\n        )\n        # Prepend D if needed to prevent the name from starting with an\n        # underscore or a number (not permitted on Oracle).\n        if index_name[0] == \"_\" or index_name[0].isdigit():\n            index_name = \"D%s\" % index_name[:-1]\n        return index_name\n\n    def _get_index_tablespace_sql(self, model, fields, db_tablespace=None):\n        if db_tablespace is None:\n            if len(fields) == 1 and fields[0].db_tablespace:\n                db_tablespace = fields[0].db_tablespace\n            elif settings.DEFAULT_INDEX_TABLESPACE:\n                db_tablespace = settings.DEFAULT_INDEX_TABLESPACE\n            elif model._meta.db_tablespace:\n                db_tablespace = model._meta.db_tablespace\n        if db_tablespace is not None:\n            return \" \" + self.connection.ops.tablespace_sql(db_tablespace)\n        return \"\"\n\n    def _index_condition_sql(self, condition):\n        if condition:\n            return \" WHERE \" + condition\n        return \"\"\n\n    def _index_include_sql(self, model, columns):\n        if not columns or not self.connection.features.supports_covering_indexes:\n            return \"\"\n        return Statement(\n            \" INCLUDE (%(columns)s)\",\n            columns=Columns(model._meta.db_table, columns, self.quote_name),\n        )\n\n    def _create_index_sql(\n        self,\n        model,\n        *,\n        fields=None,\n        name=None,\n        suffix=\"\",\n        using=\"\",\n        db_tablespace=None,\n        col_suffixes=(),\n        sql=None,\n        opclasses=(),\n        condition=None,\n        include=None,\n        expressions=None,\n    ):\n        \"\"\"\n        Return the SQL statement to create the index for one or several fields\n        or expressions. `sql` can be specified if the syntax differs from the\n        standard (GIS indexes, ...).\n        \"\"\"\n        fields = fields or []\n        expressions = expressions or []\n        compiler = Query(model, alias_cols=False).get_compiler(\n            connection=self.connection,\n        )\n        tablespace_sql = self._get_index_tablespace_sql(\n            model, fields, db_tablespace=db_tablespace\n        )\n        columns = [field.column for field in fields]\n        sql_create_index = sql or self.sql_create_index\n        table = model._meta.db_table\n\n        def create_index_name(*args, **kwargs):\n            nonlocal name\n            if name is None:\n                name = self._create_index_name(*args, **kwargs)\n            return self.quote_name(name)\n\n        return Statement(\n            sql_create_index,\n            table=Table(table, self.quote_name),\n            name=IndexName(table, columns, suffix, create_index_name),\n            using=using,\n            columns=(\n                self._index_columns(table, columns, col_suffixes, opclasses)\n                if columns\n                else Expressions(table, expressions, compiler, self.quote_value)\n            ),\n            extra=tablespace_sql,\n            condition=self._index_condition_sql(condition),\n            include=self._index_include_sql(model, include),\n        )\n\n    def _delete_index_sql(self, model, name, sql=None):\n        statement = Statement(\n            sql or self.sql_delete_index,\n            table=Table(model._meta.db_table, self.quote_name),\n            name=self.quote_name(name),\n        )\n\n        # Remove all deferred statements referencing the deleted index.\n        table_name = statement.parts[\"table\"].table\n        index_name = statement.parts[\"name\"]\n        for sql in list(self.deferred_sql):\n            if isinstance(sql, Statement) and sql.references_index(\n                table_name, index_name\n            ):\n                self.deferred_sql.remove(sql)\n\n        return statement\n\n    def _rename_index_sql(self, model, old_name, new_name):\n        return Statement(\n            self.sql_rename_index,\n            table=Table(model._meta.db_table, self.quote_name),\n            old_name=self.quote_name(old_name),\n            new_name=self.quote_name(new_name),\n        )\n\n    def _index_columns(self, table, columns, col_suffixes, opclasses):\n        return Columns(table, columns, self.quote_name, col_suffixes=col_suffixes)\n\n    def _model_indexes_sql(self, model):\n        \"\"\"\n        Return a list of all index SQL statements (field indexes, Meta.indexes)\n        for the specified model.\n        \"\"\"\n        if not model._meta.managed or model._meta.proxy or model._meta.swapped:\n            return []\n        output = []\n        for field in model._meta.local_fields:\n            output.extend(self._field_indexes_sql(model, field))\n\n        for index in model._meta.indexes:\n            if (\n                not index.contains_expressions\n                or self.connection.features.supports_expression_indexes\n            ):\n                output.append(index.create_sql(model, self))\n        return output\n\n    def _field_indexes_sql(self, model, field):\n        \"\"\"\n        Return a list of all index SQL statements for the specified field.\n        \"\"\"\n        output = []\n        if self._field_should_be_indexed(model, field):\n            output.append(self._create_index_sql(model, fields=[field]))\n        return output\n\n    def _field_should_be_altered(self, old_field, new_field, ignore=None):\n        if not old_field.concrete and not new_field.concrete:\n            return False\n        ignore = ignore or set()\n        _, old_path, old_args, old_kwargs = old_field.deconstruct()\n        _, new_path, new_args, new_kwargs = new_field.deconstruct()\n        # Don't alter when:\n        # - changing only a field name\n        # - changing an attribute that doesn't affect the schema\n        # - changing an attribute in the provided set of ignored attributes\n        # - adding only a db_column and the column name is not changed\n        # - db_table does not change for model referenced by foreign keys\n        for attr in ignore.union(old_field.non_db_attrs):\n            old_kwargs.pop(attr, None)\n        for attr in ignore.union(new_field.non_db_attrs):\n            new_kwargs.pop(attr, None)\n        if (\n            not new_field.many_to_many\n            and old_field.remote_field\n            and new_field.remote_field\n            and old_field.remote_field.model._meta.db_table\n            == new_field.remote_field.model._meta.db_table\n        ):\n            old_kwargs.pop(\"to\", None)\n            new_kwargs.pop(\"to\", None)\n        # db_default can take many form but result in the same SQL.\n        if (\n            old_kwargs.get(\"db_default\")\n            and new_kwargs.get(\"db_default\")\n            and self.db_default_sql(old_field) == self.db_default_sql(new_field)\n        ):\n            old_kwargs.pop(\"db_default\")\n            new_kwargs.pop(\"db_default\")\n        return self.quote_name(old_field.column) != self.quote_name(\n            new_field.column\n        ) or (old_path, old_args, old_kwargs) != (new_path, new_args, new_kwargs)\n\n    def _field_should_be_indexed(self, model, field):\n        return field.db_index and not field.unique\n\n    def _field_became_primary_key(self, old_field, new_field):\n        return not old_field.primary_key and new_field.primary_key\n\n    def _unique_should_be_added(self, old_field, new_field):\n        return (\n            not new_field.primary_key\n            and new_field.unique\n            and (not old_field.unique or old_field.primary_key)\n        )\n\n    def _rename_field_sql(self, table, old_field, new_field, new_type):\n        return self.sql_rename_column % {\n            \"table\": self.quote_name(table),\n            \"old_column\": self.quote_name(old_field.column),\n            \"new_column\": self.quote_name(new_field.column),\n            \"type\": new_type,\n        }\n\n    def _create_fk_sql(self, model, field, suffix):\n        table = Table(model._meta.db_table, self.quote_name)\n        name = self._fk_constraint_name(model, field, suffix)\n        column = Columns(model._meta.db_table, [field.column], self.quote_name)\n        to_table = Table(field.target_field.model._meta.db_table, self.quote_name)\n        to_column = Columns(\n            field.target_field.model._meta.db_table,\n            [field.target_field.column],\n            self.quote_name,\n        )\n        deferrable = self.connection.ops.deferrable_sql()\n        return Statement(\n            self.sql_create_fk,\n            table=table,\n            name=name,\n            column=column,\n            to_table=to_table,\n            to_column=to_column,\n            deferrable=deferrable,\n        )\n\n    def _fk_constraint_name(self, model, field, suffix):\n        def create_fk_name(*args, **kwargs):\n            return self.quote_name(self._create_index_name(*args, **kwargs))\n\n        return ForeignKeyName(\n            model._meta.db_table,\n            [field.column],\n            split_identifier(field.target_field.model._meta.db_table)[1],\n            [field.target_field.column],\n            suffix,\n            create_fk_name,\n        )\n\n    def _delete_fk_sql(self, model, name):\n        return self._delete_constraint_sql(self.sql_delete_fk, model, name)\n\n    def _deferrable_constraint_sql(self, deferrable):\n        if deferrable is None:\n            return \"\"\n        if deferrable == Deferrable.DEFERRED:\n            return \" DEFERRABLE INITIALLY DEFERRED\"\n        if deferrable == Deferrable.IMMEDIATE:\n            return \" DEFERRABLE INITIALLY IMMEDIATE\"\n\n    def _unique_index_nulls_distinct_sql(self, nulls_distinct):\n        if nulls_distinct is False:\n            return \" NULLS NOT DISTINCT\"\n        elif nulls_distinct is True:\n            return \" NULLS DISTINCT\"\n        return \"\"\n\n    def _unique_supported(\n        self,\n        condition=None,\n        deferrable=None,\n        include=None,\n        expressions=None,\n        nulls_distinct=None,\n    ):\n        return (\n            (not condition or self.connection.features.supports_partial_indexes)\n            and (\n                not deferrable\n                or self.connection.features.supports_deferrable_unique_constraints\n            )\n            and (not include or self.connection.features.supports_covering_indexes)\n            and (\n                not expressions or self.connection.features.supports_expression_indexes\n            )\n            and (\n                nulls_distinct is None\n                or self.connection.features.supports_nulls_distinct_unique_constraints\n            )\n        )\n\n    def _unique_sql(\n        self,\n        model,\n        fields,\n        name,\n        condition=None,\n        deferrable=None,\n        include=None,\n        opclasses=None,\n        expressions=None,\n        nulls_distinct=None,\n    ):\n        if not self._unique_supported(\n            condition=condition,\n            deferrable=deferrable,\n            include=include,\n            expressions=expressions,\n            nulls_distinct=nulls_distinct,\n        ):\n            return None\n\n        if (\n            condition\n            or include\n            or opclasses\n            or expressions\n            or nulls_distinct is not None\n        ):\n            # Databases support conditional, covering, functional unique,\n            # and nulls distinct constraints via a unique index.\n            sql = self._create_unique_sql(\n                model,\n                fields,\n                name=name,\n                condition=condition,\n                include=include,\n                opclasses=opclasses,\n                expressions=expressions,\n                nulls_distinct=nulls_distinct,\n            )\n            if sql:\n                self.deferred_sql.append(sql)\n            return None\n        constraint = self.sql_unique_constraint % {\n            \"columns\": \", \".join([self.quote_name(field.column) for field in fields]),\n            \"deferrable\": self._deferrable_constraint_sql(deferrable),\n        }\n        return self.sql_constraint % {\n            \"name\": self.quote_name(name),\n            \"constraint\": constraint,\n        }\n\n    def _create_unique_sql(\n        self,\n        model,\n        fields,\n        name=None,\n        condition=None,\n        deferrable=None,\n        include=None,\n        opclasses=None,\n        expressions=None,\n        nulls_distinct=None,\n    ):\n        if not self._unique_supported(\n            condition=condition,\n            deferrable=deferrable,\n            include=include,\n            expressions=expressions,\n            nulls_distinct=nulls_distinct,\n        ):\n            return None\n\n        compiler = Query(model, alias_cols=False).get_compiler(\n            connection=self.connection\n        )\n        table = model._meta.db_table\n        columns = [field.column for field in fields]\n        if name is None:\n            name = self._unique_constraint_name(table, columns, quote=True)\n        else:\n            name = self.quote_name(name)\n        if condition or include or opclasses or expressions:\n            sql = self.sql_create_unique_index\n        else:\n            sql = self.sql_create_unique\n        if columns:\n            columns = self._index_columns(\n                table, columns, col_suffixes=(), opclasses=opclasses\n            )\n        else:\n            columns = Expressions(table, expressions, compiler, self.quote_value)\n        return Statement(\n            sql,\n            table=Table(table, self.quote_name),\n            name=name,\n            columns=columns,\n            condition=self._index_condition_sql(condition),\n            deferrable=self._deferrable_constraint_sql(deferrable),\n            include=self._index_include_sql(model, include),\n            nulls_distinct=self._unique_index_nulls_distinct_sql(nulls_distinct),\n        )\n\n    def _unique_constraint_name(self, table, columns, quote=True):\n        if quote:\n\n            def create_unique_name(*args, **kwargs):\n                return self.quote_name(self._create_index_name(*args, **kwargs))\n\n        else:\n            create_unique_name = self._create_index_name\n\n        return IndexName(table, columns, \"_uniq\", create_unique_name)\n\n    def _delete_unique_sql(\n        self,\n        model,\n        name,\n        condition=None,\n        deferrable=None,\n        include=None,\n        opclasses=None,\n        expressions=None,\n        nulls_distinct=None,\n    ):\n        if not self._unique_supported(\n            condition=condition,\n            deferrable=deferrable,\n            include=include,\n            expressions=expressions,\n            nulls_distinct=nulls_distinct,\n        ):\n            return None\n        if condition or include or opclasses or expressions:\n            sql = self.sql_delete_index\n        else:\n            sql = self.sql_delete_unique\n        return self._delete_constraint_sql(sql, model, name)\n\n    def _check_sql(self, name, check):\n        return self.sql_constraint % {\n            \"name\": self.quote_name(name),\n            \"constraint\": self.sql_check_constraint % {\"check\": check},\n        }\n\n    def _create_check_sql(self, model, name, check):\n        if not self.connection.features.supports_table_check_constraints:\n            return None\n        return Statement(\n            self.sql_create_check,\n            table=Table(model._meta.db_table, self.quote_name),\n            name=self.quote_name(name),\n            check=check,\n        )\n\n    def _delete_check_sql(self, model, name):\n        if not self.connection.features.supports_table_check_constraints:\n            return None\n        return self._delete_constraint_sql(self.sql_delete_check, model, name)\n\n    def _delete_constraint_sql(self, template, model, name):\n        return Statement(\n            template,\n            table=Table(model._meta.db_table, self.quote_name),\n            name=self.quote_name(name),\n        )\n\n    def _constraint_names(\n        self,\n        model,\n        column_names=None,\n        unique=None,\n        primary_key=None,\n        index=None,\n        foreign_key=None,\n        check=None,\n        type_=None,\n        exclude=None,\n    ):\n        \"\"\"Return all constraint names matching the columns and conditions.\"\"\"\n        if column_names is not None:\n            column_names = [\n                (\n                    self.connection.introspection.identifier_converter(\n                        truncate_name(name, self.connection.ops.max_name_length())\n                    )\n                    if self.connection.features.truncates_names\n                    else self.connection.introspection.identifier_converter(name)\n                )\n                for name in column_names\n            ]\n        with self.connection.cursor() as cursor:\n            constraints = self.connection.introspection.get_constraints(\n                cursor, model._meta.db_table\n            )\n        result = []\n        for name, infodict in constraints.items():\n            if column_names is None or column_names == infodict[\"columns\"]:\n                if unique is not None and infodict[\"unique\"] != unique:\n                    continue\n                if primary_key is not None and infodict[\"primary_key\"] != primary_key:\n                    continue\n                if index is not None and infodict[\"index\"] != index:\n                    continue\n                if check is not None and infodict[\"check\"] != check:\n                    continue\n                if foreign_key is not None and not infodict[\"foreign_key\"]:\n                    continue\n                if type_ is not None and infodict[\"type\"] != type_:\n                    continue\n                if not exclude or name not in exclude:\n                    result.append(name)\n        return result\n\n    def _pk_constraint_sql(self, columns):\n        return self.sql_pk_constraint % {\n            \"columns\": \", \".join(self.quote_name(column) for column in columns)\n        }\n\n    def _delete_primary_key(self, model, strict=False):\n        constraint_names = self._constraint_names(model, primary_key=True)\n        if strict and len(constraint_names) != 1:\n            raise ValueError(\n                \"Found wrong number (%s) of PK constraints for %s\"\n                % (\n                    len(constraint_names),\n                    model._meta.db_table,\n                )\n            )\n        for constraint_name in constraint_names:\n            self.execute(self._delete_primary_key_sql(model, constraint_name))\n\n    def _create_primary_key_sql(self, model, field):\n        return Statement(\n            self.sql_create_pk,\n            table=Table(model._meta.db_table, self.quote_name),\n            name=self.quote_name(\n                self._create_index_name(\n                    model._meta.db_table, [field.column], suffix=\"_pk\"\n                )\n            ),\n            columns=Columns(model._meta.db_table, [field.column], self.quote_name),\n        )\n\n    def _delete_primary_key_sql(self, model, name):\n        return self._delete_constraint_sql(self.sql_delete_pk, model, name)\n\n    def _collate_sql(self, collation, old_collation=None, table_name=None):\n        return \"COLLATE \" + self.quote_name(collation) if collation else \"\"\n\n    def remove_procedure(self, procedure_name, param_types=()):\n        sql = self.sql_delete_procedure % {\n            \"procedure\": self.quote_name(procedure_name),\n            \"param_types\": \",\".join(param_types),\n        }\n        self.execute(sql)"},{"start_line":1331,"end_line":1367,"belongs_to":{"file_name":"schema.py","upper_path":"../django/django/db/backends/base","module":"base","define_class":["BaseDatabaseSchemaEditor"],"imports":["logging","operator","datetime.datetime","django.conf.settings","django.core.exceptions.FieldError","django.db.backends.ddl_references.Columns","django.db.backends.ddl_references.Expressions","django.db.backends.ddl_references.ForeignKeyName","django.db.backends.ddl_references.IndexName","django.db.backends.ddl_references.Statement","django.db.backends.ddl_references.Table","django.db.backends.utils.names_digest","django.db.backends.utils.split_identifier","django.db.backends.utils.truncate_name","django.db.models.Deferrable","django.db.models.Index","django.db.models.fields.composite.CompositePrimaryKey","django.db.models.sql.Query","django.db.transaction.TransactionManagementError","django.db.transaction.atomic","django.utils.timezone","django.db.models.expressions.Value"]},"relative_function":[],"code":"def _alter_column_default_sql(self, model, old_field, new_field, drop=False):\n        \"\"\"\n        Hook to specialize column default alteration.\n\n        Return a (sql, params) fragment to add or drop (depending on the drop\n        argument) a default to new_field's column.\n        \"\"\"\n        new_default = self.effective_default(new_field)\n        default = self._column_default_sql(new_field)\n        params = [new_default]\n\n        if drop:\n            params = []\n        elif self.connection.features.requires_literal_defaults:\n            # Some databases (Oracle) can't take defaults as a parameter\n            # If this is the case, the SchemaEditor for that database should\n            # implement prepare_default().\n            default = self.prepare_default(new_default)\n            params = []\n\n        new_db_params = new_field.db_parameters(connection=self.connection)\n        if drop:\n            if new_field.null:\n                sql = self.sql_alter_column_no_default_null\n            else:\n                sql = self.sql_alter_column_no_default\n        else:\n            sql = self.sql_alter_column_default\n        return (\n            sql\n            % {\n                \"column\": self.quote_name(new_field.column),\n                \"type\": new_db_params[\"type\"],\n                \"default\": default,\n            },\n            params,\n        )"}],"ground_truth":null,"score":null},
{"question":"What is the purpose of the `SchemaEditorClass` attribute in the `DatabaseWrapper`, and how is it intended to be used?","answer":"","relative_code_list":[{"start_line":89,"end_line":547,"belongs_to":{"file_name":"base.py","upper_path":"../django/django/db/backends/postgresql","module":"postgresql","define_class":["DatabaseWrapper","CursorMixin","ServerBindingCursor","Cursor","ServerSideCursor","CursorDebugWrapper","CursorDebugWrapper"],"imports":["asyncio","threading","warnings","contextlib.contextmanager","django.conf.settings","django.core.exceptions.ImproperlyConfigured","django.db.DatabaseError","django.db.connections","django.db.backends.base.base.NO_DB_ALIAS","django.db.backends.base.base.BaseDatabaseWrapper","django.db.backends.utils.CursorDebugWrapper","django.utils.asyncio.async_unsafe","django.utils.functional.cached_property","django.utils.safestring.SafeString","django.utils.version.get_version_tuple","psycopg_any.IsolationLevel","psycopg_any.is_psycopg3","client.DatabaseClient","creation.DatabaseCreation","features.DatabaseFeatures","introspection.DatabaseIntrospection","operations.DatabaseOperations","schema.DatabaseSchemaEditor","psycopg.adapters","psycopg.sql","psycopg.pq.Format","psycopg_any.get_adapters_template","psycopg_any.register_tzloader","psycopg2.extensions","psycopg2.extras","psycopg","psycopg2","psycopg_pool.ConnectionPool"]},"relative_function":[],"code":"class DatabaseWrapper(BaseDatabaseWrapper):\n    vendor = \"postgresql\"\n    display_name = \"PostgreSQL\"\n    # This dictionary maps Field objects to their associated PostgreSQL column\n    # types, as strings. Column-type strings can contain format strings; they'll\n    # be interpolated against the values of Field.__dict__ before being output.\n    # If a column type is set to None, it won't be included in the output.\n    data_types = {\n        \"AutoField\": \"integer\",\n        \"BigAutoField\": \"bigint\",\n        \"BinaryField\": \"bytea\",\n        \"BooleanField\": \"boolean\",\n        \"CharField\": _get_varchar_column,\n        \"DateField\": \"date\",\n        \"DateTimeField\": \"timestamp with time zone\",\n        \"DecimalField\": \"numeric(%(max_digits)s, %(decimal_places)s)\",\n        \"DurationField\": \"interval\",\n        \"FileField\": \"varchar(%(max_length)s)\",\n        \"FilePathField\": \"varchar(%(max_length)s)\",\n        \"FloatField\": \"double precision\",\n        \"IntegerField\": \"integer\",\n        \"BigIntegerField\": \"bigint\",\n        \"IPAddressField\": \"inet\",\n        \"GenericIPAddressField\": \"inet\",\n        \"JSONField\": \"jsonb\",\n        \"OneToOneField\": \"integer\",\n        \"PositiveBigIntegerField\": \"bigint\",\n        \"PositiveIntegerField\": \"integer\",\n        \"PositiveSmallIntegerField\": \"smallint\",\n        \"SlugField\": \"varchar(%(max_length)s)\",\n        \"SmallAutoField\": \"smallint\",\n        \"SmallIntegerField\": \"smallint\",\n        \"TextField\": \"text\",\n        \"TimeField\": \"time\",\n        \"UUIDField\": \"uuid\",\n    }\n    data_type_check_constraints = {\n        \"PositiveBigIntegerField\": '\"%(column)s\" >= 0',\n        \"PositiveIntegerField\": '\"%(column)s\" >= 0',\n        \"PositiveSmallIntegerField\": '\"%(column)s\" >= 0',\n    }\n    data_types_suffix = {\n        \"AutoField\": \"GENERATED BY DEFAULT AS IDENTITY\",\n        \"BigAutoField\": \"GENERATED BY DEFAULT AS IDENTITY\",\n        \"SmallAutoField\": \"GENERATED BY DEFAULT AS IDENTITY\",\n    }\n    operators = {\n        \"exact\": \"= %s\",\n        \"iexact\": \"= UPPER(%s)\",\n        \"contains\": \"LIKE %s\",\n        \"icontains\": \"LIKE UPPER(%s)\",\n        \"regex\": \"~ %s\",\n        \"iregex\": \"~* %s\",\n        \"gt\": \"> %s\",\n        \"gte\": \">= %s\",\n        \"lt\": \"< %s\",\n        \"lte\": \"<= %s\",\n        \"startswith\": \"LIKE %s\",\n        \"endswith\": \"LIKE %s\",\n        \"istartswith\": \"LIKE UPPER(%s)\",\n        \"iendswith\": \"LIKE UPPER(%s)\",\n    }\n\n    # The patterns below are used to generate SQL pattern lookup clauses when\n    # the right-hand side of the lookup isn't a raw string (it might be an expression\n    # or the result of a bilateral transformation).\n    # In those cases, special characters for LIKE operators (e.g. \\, *, _) should be\n    # escaped on database side.\n    #\n    # Note: we use str.format() here for readability as '%' is used as a wildcard for\n    # the LIKE operator.\n    pattern_esc = (\n        r\"REPLACE(REPLACE(REPLACE({}, E'\\\\', E'\\\\\\\\'), E'%%', E'\\\\%%'), E'_', E'\\\\_')\"\n    )\n    pattern_ops = {\n        \"contains\": \"LIKE '%%' || {} || '%%'\",\n        \"icontains\": \"LIKE '%%' || UPPER({}) || '%%'\",\n        \"startswith\": \"LIKE {} || '%%'\",\n        \"istartswith\": \"LIKE UPPER({}) || '%%'\",\n        \"endswith\": \"LIKE '%%' || {}\",\n        \"iendswith\": \"LIKE '%%' || UPPER({})\",\n    }\n\n    Database = Database\n    SchemaEditorClass = DatabaseSchemaEditor\n    # Classes instantiated in __init__().\n    client_class = DatabaseClient\n    creation_class = DatabaseCreation\n    features_class = DatabaseFeatures\n    introspection_class = DatabaseIntrospection\n    ops_class = DatabaseOperations\n    # PostgreSQL backend-specific attributes.\n    _named_cursor_idx = 0\n    _connection_pools = {}\n\n    @property\n    def pool(self):\n        pool_options = self.settings_dict[\"OPTIONS\"].get(\"pool\")\n        if self.alias == NO_DB_ALIAS or not pool_options:\n            return None\n\n        if self.alias not in self._connection_pools:\n            if self.settings_dict.get(\"CONN_MAX_AGE\", 0) != 0:\n                raise ImproperlyConfigured(\n                    \"Pooling doesn't support persistent connections.\"\n                )\n            # Set the default options.\n            if pool_options is True:\n                pool_options = {}\n\n            try:\n                from psycopg_pool import ConnectionPool\n            except ImportError as err:\n                raise ImproperlyConfigured(\n                    \"Error loading psycopg_pool module.\\nDid you install psycopg[pool]?\"\n                ) from err\n\n            connect_kwargs = self.get_connection_params()\n            # Ensure we run in autocommit, Django properly sets it later on.\n            connect_kwargs[\"autocommit\"] = True\n            enable_checks = self.settings_dict[\"CONN_HEALTH_CHECKS\"]\n            pool = ConnectionPool(\n                kwargs=connect_kwargs,\n                open=False,  # Do not open the pool during startup.\n                configure=self._configure_connection,\n                check=ConnectionPool.check_connection if enable_checks else None,\n                **pool_options,\n            )\n            # setdefault() ensures that multiple threads don't set this in\n            # parallel. Since we do not open the pool during it's init above,\n            # this means that at worst during startup multiple threads generate\n            # pool objects and the first to set it wins.\n            self._connection_pools.setdefault(self.alias, pool)\n\n        return self._connection_pools[self.alias]\n\n    def close_pool(self):\n        if self.pool:\n            self.pool.close()\n            del self._connection_pools[self.alias]\n\n    def get_database_version(self):\n        \"\"\"\n        Return a tuple of the database's version.\n        E.g. for pg_version 120004, return (12, 4).\n        \"\"\"\n        return divmod(self.pg_version, 10000)\n\n    def get_connection_params(self):\n        settings_dict = self.settings_dict\n        # None may be used to connect to the default 'postgres' db\n        if settings_dict[\"NAME\"] == \"\" and not settings_dict[\"OPTIONS\"].get(\"service\"):\n            raise ImproperlyConfigured(\n                \"settings.DATABASES is improperly configured. \"\n                \"Please supply the NAME or OPTIONS['service'] value.\"\n            )\n        if len(settings_dict[\"NAME\"] or \"\") > self.ops.max_name_length():\n            raise ImproperlyConfigured(\n                \"The database name '%s' (%d characters) is longer than \"\n                \"PostgreSQL's limit of %d characters. Supply a shorter NAME \"\n                \"in settings.DATABASES.\"\n                % (\n                    settings_dict[\"NAME\"],\n                    len(settings_dict[\"NAME\"]),\n                    self.ops.max_name_length(),\n                )\n            )\n        if settings_dict[\"NAME\"]:\n            conn_params = {\n                \"dbname\": settings_dict[\"NAME\"],\n                **settings_dict[\"OPTIONS\"],\n            }\n        elif settings_dict[\"NAME\"] is None:\n            # Connect to the default 'postgres' db.\n            settings_dict[\"OPTIONS\"].pop(\"service\", None)\n            conn_params = {\"dbname\": \"postgres\", **settings_dict[\"OPTIONS\"]}\n        else:\n            conn_params = {**settings_dict[\"OPTIONS\"]}\n        conn_params[\"client_encoding\"] = \"UTF8\"\n\n        conn_params.pop(\"assume_role\", None)\n        conn_params.pop(\"isolation_level\", None)\n\n        pool_options = conn_params.pop(\"pool\", None)\n        if pool_options and not is_psycopg3:\n            raise ImproperlyConfigured(\"Database pooling requires psycopg >= 3\")\n\n        server_side_binding = conn_params.pop(\"server_side_binding\", None)\n        conn_params.setdefault(\n            \"cursor_factory\",\n            (\n                ServerBindingCursor\n                if is_psycopg3 and server_side_binding is True\n                else Cursor\n            ),\n        )\n        if settings_dict[\"USER\"]:\n            conn_params[\"user\"] = settings_dict[\"USER\"]\n        if settings_dict[\"PASSWORD\"]:\n            conn_params[\"password\"] = settings_dict[\"PASSWORD\"]\n        if settings_dict[\"HOST\"]:\n            conn_params[\"host\"] = settings_dict[\"HOST\"]\n        if settings_dict[\"PORT\"]:\n            conn_params[\"port\"] = settings_dict[\"PORT\"]\n        if is_psycopg3:\n            conn_params[\"context\"] = get_adapters_template(\n                settings.USE_TZ, self.timezone\n            )\n            # Disable prepared statements by default to keep connection poolers\n            # working. Can be reenabled via OPTIONS in the settings dict.\n            conn_params[\"prepare_threshold\"] = conn_params.pop(\n                \"prepare_threshold\", None\n            )\n        return conn_params\n\n    @async_unsafe\n    def get_new_connection(self, conn_params):\n        # self.isolation_level must be set:\n        # - after connecting to the database in order to obtain the database's\n        #   default when no value is explicitly specified in options.\n        # - before calling _set_autocommit() because if autocommit is on, that\n        #   will set connection.isolation_level to ISOLATION_LEVEL_AUTOCOMMIT.\n        options = self.settings_dict[\"OPTIONS\"]\n        set_isolation_level = False\n        try:\n            isolation_level_value = options[\"isolation_level\"]\n        except KeyError:\n            self.isolation_level = IsolationLevel.READ_COMMITTED\n        else:\n            # Set the isolation level to the value from OPTIONS.\n            try:\n                self.isolation_level = IsolationLevel(isolation_level_value)\n                set_isolation_level = True\n            except ValueError:\n                raise ImproperlyConfigured(\n                    f\"Invalid transaction isolation level {isolation_level_value} \"\n                    f\"specified. Use one of the psycopg.IsolationLevel values.\"\n                )\n        if self.pool:\n            # If nothing else has opened the pool, open it now.\n            self.pool.open()\n            connection = self.pool.getconn()\n        else:\n            connection = self.Database.connect(**conn_params)\n        if set_isolation_level:\n            connection.isolation_level = self.isolation_level\n        if not is_psycopg3:\n            # Register dummy loads() to avoid a round trip from psycopg2's\n            # decode to json.dumps() to json.loads(), when using a custom\n            # decoder in JSONField.\n            psycopg2.extras.register_default_jsonb(\n                conn_or_curs=connection, loads=lambda x: x\n            )\n        return connection\n\n    def ensure_timezone(self):\n        # Close the pool so new connections pick up the correct timezone.\n        self.close_pool()\n        if self.connection is None:\n            return False\n        return self._configure_timezone(self.connection)\n\n    def _configure_timezone(self, connection):\n        conn_timezone_name = connection.info.parameter_status(\"TimeZone\")\n        timezone_name = self.timezone_name\n        if timezone_name and conn_timezone_name != timezone_name:\n            with connection.cursor() as cursor:\n                cursor.execute(self.ops.set_time_zone_sql(), [timezone_name])\n            return True\n        return False\n\n    def _configure_role(self, connection):\n        if new_role := self.settings_dict[\"OPTIONS\"].get(\"assume_role\"):\n            with connection.cursor() as cursor:\n                sql = self.ops.compose_sql(\"SET ROLE %s\", [new_role])\n                cursor.execute(sql)\n            return True\n        return False\n\n    def _configure_connection(self, connection):\n        # This function is called from init_connection_state and from the\n        # psycopg pool itself after a connection is opened.\n\n        # Commit after setting the time zone.\n        commit_tz = self._configure_timezone(connection)\n        # Set the role on the connection. This is useful if the credential used\n        # to login is not the same as the role that owns database resources. As\n        # can be the case when using temporary or ephemeral credentials.\n        commit_role = self._configure_role(connection)\n\n        return commit_role or commit_tz\n\n    def _close(self):\n        if self.connection is not None:\n            # `wrap_database_errors` only works for `putconn` as long as there\n            # is no `reset` function set in the pool because it is deferred\n            # into a thread and not directly executed.\n            with self.wrap_database_errors:\n                if self.pool:\n                    # Ensure the correct pool is returned. This is a workaround\n                    # for tests so a pool can be changed on setting changes\n                    # (e.g. USE_TZ, TIME_ZONE).\n                    self.connection._pool.putconn(self.connection)\n                    # Connection can no longer be used.\n                    self.connection = None\n                else:\n                    return self.connection.close()\n\n    def init_connection_state(self):\n        super().init_connection_state()\n\n        if self.connection is not None and not self.pool:\n            commit = self._configure_connection(self.connection)\n\n            if commit and not self.get_autocommit():\n                self.connection.commit()\n\n    @async_unsafe\n    def create_cursor(self, name=None):\n        if name:\n            if is_psycopg3 and (\n                self.settings_dict[\"OPTIONS\"].get(\"server_side_binding\") is not True\n            ):\n                # psycopg >= 3 forces the usage of server-side bindings for\n                # named cursors so a specialized class that implements\n                # server-side cursors while performing client-side bindings\n                # must be used if `server_side_binding` is disabled (default).\n                cursor = ServerSideCursor(\n                    self.connection,\n                    name=name,\n                    scrollable=False,\n                    withhold=self.connection.autocommit,\n                )\n            else:\n                # In autocommit mode, the cursor will be used outside of a\n                # transaction, hence use a holdable cursor.\n                cursor = self.connection.cursor(\n                    name, scrollable=False, withhold=self.connection.autocommit\n                )\n        else:\n            cursor = self.connection.cursor()\n\n        if is_psycopg3:\n            # Register the cursor timezone only if the connection disagrees, to\n            # avoid copying the adapter map.\n            tzloader = self.connection.adapters.get_loader(TIMESTAMPTZ_OID, Format.TEXT)\n            if self.timezone != tzloader.timezone:\n                register_tzloader(self.timezone, cursor)\n        else:\n            cursor.tzinfo_factory = self.tzinfo_factory if settings.USE_TZ else None\n        return cursor\n\n    def tzinfo_factory(self, offset):\n        return self.timezone\n\n    @async_unsafe\n    def chunked_cursor(self):\n        self._named_cursor_idx += 1\n        # Get the current async task\n        # Note that right now this is behind @async_unsafe, so this is\n        # unreachable, but in future we'll start loosening this restriction.\n        # For now, it's here so that every use of \"threading\" is\n        # also async-compatible.\n        try:\n            current_task = asyncio.current_task()\n        except RuntimeError:\n            current_task = None\n        # Current task can be none even if the current_task call didn't error\n        if current_task:\n            task_ident = str(id(current_task))\n        else:\n            task_ident = \"sync\"\n        # Use that and the thread ident to get a unique name\n        return self._cursor(\n            name=\"_django_curs_%d_%s_%d\"\n            % (\n                # Avoid reusing name in other threads / tasks\n                threading.current_thread().ident,\n                task_ident,\n                self._named_cursor_idx,\n            )\n        )\n\n    def _set_autocommit(self, autocommit):\n        with self.wrap_database_errors:\n            self.connection.autocommit = autocommit\n\n    def check_constraints(self, table_names=None):\n        \"\"\"\n        Check constraints by setting them to immediate. Return them to deferred\n        afterward.\n        \"\"\"\n        with self.cursor() as cursor:\n            cursor.execute(\"SET CONSTRAINTS ALL IMMEDIATE\")\n            cursor.execute(\"SET CONSTRAINTS ALL DEFERRED\")\n\n    def is_usable(self):\n        if self.connection is None:\n            return False\n        try:\n            # Use a psycopg cursor directly, bypassing Django's utilities.\n            with self.connection.cursor() as cursor:\n                cursor.execute(\"SELECT 1\")\n        except Database.Error:\n            return False\n        else:\n            return True\n\n    def close_if_health_check_failed(self):\n        if self.pool:\n            # The pool only returns healthy connections.\n            return\n        return super().close_if_health_check_failed()\n\n    @contextmanager\n    def _nodb_cursor(self):\n        cursor = None\n        try:\n            with super()._nodb_cursor() as cursor:\n                yield cursor\n        except (Database.DatabaseError, WrappedDatabaseError):\n            if cursor is not None:\n                raise\n            warnings.warn(\n                \"Normally Django will use a connection to the 'postgres' database \"\n                \"to avoid running initialization queries against the production \"\n                \"database when it's not needed (for example, when running tests). \"\n                \"Django was unable to create a connection to the 'postgres' database \"\n                \"and will use the first PostgreSQL database instead.\",\n                RuntimeWarning,\n            )\n            for connection in connections.all():\n                if (\n                    connection.vendor == \"postgresql\"\n                    and connection.settings_dict[\"NAME\"] != \"postgres\"\n                ):\n                    conn = self.__class__(\n                        {\n                            **self.settings_dict,\n                            \"NAME\": connection.settings_dict[\"NAME\"],\n                        },\n                        alias=self.alias,\n                    )\n                    try:\n                        with conn.cursor() as cursor:\n                            yield cursor\n                    finally:\n                        conn.close()\n                    break\n            else:\n                raise\n\n    @cached_property\n    def pg_version(self):\n        with self.temporary_connection():\n            return self.connection.info.server_version\n\n    def make_debug_cursor(self, cursor):\n        return CursorDebugWrapper(cursor, self)"}],"ground_truth":null,"score":null},
{"question":"How does the class `Reference` handle `Rename all references to the old_column to the new_column`?","answer":"","relative_code_list":[{"start_line":36,"end_line":40,"belongs_to":{"file_name":"ddl_references.py","upper_path":"../django/django/db/backends","module":"backends","define_class":["Reference","Table","TableColumns","Columns","IndexName","IndexColumns","ForeignKeyName","Statement","Expressions"],"imports":["copy.deepcopy"]},"relative_function":[],"code":"def rename_column_references(self, table, old_column, new_column):\n        \"\"\"\n        Rename all references to the old_column to the new_column.\n        \"\"\"\n        pass"},{"start_line":9,"end_line":48,"belongs_to":{"file_name":"ddl_references.py","upper_path":"../django/django/db/backends","module":"backends","define_class":["Reference","Table","TableColumns","Columns","IndexName","IndexColumns","ForeignKeyName","Statement","Expressions"],"imports":["copy.deepcopy"]},"relative_function":[],"code":"class Reference:\n    \"\"\"Base class that defines the reference interface.\"\"\"\n\n    def references_table(self, table):\n        \"\"\"\n        Return whether or not this instance references the specified table.\n        \"\"\"\n        return False\n\n    def references_column(self, table, column):\n        \"\"\"\n        Return whether or not this instance references the specified column.\n        \"\"\"\n        return False\n\n    def references_index(self, table, index):\n        \"\"\"\n        Return whether or not this instance references the specified index.\n        \"\"\"\n        return False\n\n    def rename_table_references(self, old_table, new_table):\n        \"\"\"\n        Rename all references to the old_name to the new_table.\n        \"\"\"\n        pass\n\n    def rename_column_references(self, table, old_column, new_column):\n        \"\"\"\n        Rename all references to the old_column to the new_column.\n        \"\"\"\n        pass\n\n    def __repr__(self):\n        return \"<%s %r>\" % (self.__class__.__name__, str(self))\n\n    def __str__(self):\n        raise NotImplementedError(\n            \"Subclasses must define how they should be converted to string.\"\n        )"}],"ground_truth":null,"score":null},
{"question":"How is the `get_database_version` currently being used in the `DatabaseWrapper`?","answer":"","relative_code_list":[{"start_line":89,"end_line":547,"belongs_to":{"file_name":"base.py","upper_path":"../django/django/db/backends/postgresql","module":"postgresql","define_class":["DatabaseWrapper","CursorMixin","ServerBindingCursor","Cursor","ServerSideCursor","CursorDebugWrapper","CursorDebugWrapper"],"imports":["asyncio","threading","warnings","contextlib.contextmanager","django.conf.settings","django.core.exceptions.ImproperlyConfigured","django.db.DatabaseError","django.db.connections","django.db.backends.base.base.NO_DB_ALIAS","django.db.backends.base.base.BaseDatabaseWrapper","django.db.backends.utils.CursorDebugWrapper","django.utils.asyncio.async_unsafe","django.utils.functional.cached_property","django.utils.safestring.SafeString","django.utils.version.get_version_tuple","psycopg_any.IsolationLevel","psycopg_any.is_psycopg3","client.DatabaseClient","creation.DatabaseCreation","features.DatabaseFeatures","introspection.DatabaseIntrospection","operations.DatabaseOperations","schema.DatabaseSchemaEditor","psycopg.adapters","psycopg.sql","psycopg.pq.Format","psycopg_any.get_adapters_template","psycopg_any.register_tzloader","psycopg2.extensions","psycopg2.extras","psycopg","psycopg2","psycopg_pool.ConnectionPool"]},"relative_function":[],"code":"class DatabaseWrapper(BaseDatabaseWrapper):\n    vendor = \"postgresql\"\n    display_name = \"PostgreSQL\"\n    # This dictionary maps Field objects to their associated PostgreSQL column\n    # types, as strings. Column-type strings can contain format strings; they'll\n    # be interpolated against the values of Field.__dict__ before being output.\n    # If a column type is set to None, it won't be included in the output.\n    data_types = {\n        \"AutoField\": \"integer\",\n        \"BigAutoField\": \"bigint\",\n        \"BinaryField\": \"bytea\",\n        \"BooleanField\": \"boolean\",\n        \"CharField\": _get_varchar_column,\n        \"DateField\": \"date\",\n        \"DateTimeField\": \"timestamp with time zone\",\n        \"DecimalField\": \"numeric(%(max_digits)s, %(decimal_places)s)\",\n        \"DurationField\": \"interval\",\n        \"FileField\": \"varchar(%(max_length)s)\",\n        \"FilePathField\": \"varchar(%(max_length)s)\",\n        \"FloatField\": \"double precision\",\n        \"IntegerField\": \"integer\",\n        \"BigIntegerField\": \"bigint\",\n        \"IPAddressField\": \"inet\",\n        \"GenericIPAddressField\": \"inet\",\n        \"JSONField\": \"jsonb\",\n        \"OneToOneField\": \"integer\",\n        \"PositiveBigIntegerField\": \"bigint\",\n        \"PositiveIntegerField\": \"integer\",\n        \"PositiveSmallIntegerField\": \"smallint\",\n        \"SlugField\": \"varchar(%(max_length)s)\",\n        \"SmallAutoField\": \"smallint\",\n        \"SmallIntegerField\": \"smallint\",\n        \"TextField\": \"text\",\n        \"TimeField\": \"time\",\n        \"UUIDField\": \"uuid\",\n    }\n    data_type_check_constraints = {\n        \"PositiveBigIntegerField\": '\"%(column)s\" >= 0',\n        \"PositiveIntegerField\": '\"%(column)s\" >= 0',\n        \"PositiveSmallIntegerField\": '\"%(column)s\" >= 0',\n    }\n    data_types_suffix = {\n        \"AutoField\": \"GENERATED BY DEFAULT AS IDENTITY\",\n        \"BigAutoField\": \"GENERATED BY DEFAULT AS IDENTITY\",\n        \"SmallAutoField\": \"GENERATED BY DEFAULT AS IDENTITY\",\n    }\n    operators = {\n        \"exact\": \"= %s\",\n        \"iexact\": \"= UPPER(%s)\",\n        \"contains\": \"LIKE %s\",\n        \"icontains\": \"LIKE UPPER(%s)\",\n        \"regex\": \"~ %s\",\n        \"iregex\": \"~* %s\",\n        \"gt\": \"> %s\",\n        \"gte\": \">= %s\",\n        \"lt\": \"< %s\",\n        \"lte\": \"<= %s\",\n        \"startswith\": \"LIKE %s\",\n        \"endswith\": \"LIKE %s\",\n        \"istartswith\": \"LIKE UPPER(%s)\",\n        \"iendswith\": \"LIKE UPPER(%s)\",\n    }\n\n    # The patterns below are used to generate SQL pattern lookup clauses when\n    # the right-hand side of the lookup isn't a raw string (it might be an expression\n    # or the result of a bilateral transformation).\n    # In those cases, special characters for LIKE operators (e.g. \\, *, _) should be\n    # escaped on database side.\n    #\n    # Note: we use str.format() here for readability as '%' is used as a wildcard for\n    # the LIKE operator.\n    pattern_esc = (\n        r\"REPLACE(REPLACE(REPLACE({}, E'\\\\', E'\\\\\\\\'), E'%%', E'\\\\%%'), E'_', E'\\\\_')\"\n    )\n    pattern_ops = {\n        \"contains\": \"LIKE '%%' || {} || '%%'\",\n        \"icontains\": \"LIKE '%%' || UPPER({}) || '%%'\",\n        \"startswith\": \"LIKE {} || '%%'\",\n        \"istartswith\": \"LIKE UPPER({}) || '%%'\",\n        \"endswith\": \"LIKE '%%' || {}\",\n        \"iendswith\": \"LIKE '%%' || UPPER({})\",\n    }\n\n    Database = Database\n    SchemaEditorClass = DatabaseSchemaEditor\n    # Classes instantiated in __init__().\n    client_class = DatabaseClient\n    creation_class = DatabaseCreation\n    features_class = DatabaseFeatures\n    introspection_class = DatabaseIntrospection\n    ops_class = DatabaseOperations\n    # PostgreSQL backend-specific attributes.\n    _named_cursor_idx = 0\n    _connection_pools = {}\n\n    @property\n    def pool(self):\n        pool_options = self.settings_dict[\"OPTIONS\"].get(\"pool\")\n        if self.alias == NO_DB_ALIAS or not pool_options:\n            return None\n\n        if self.alias not in self._connection_pools:\n            if self.settings_dict.get(\"CONN_MAX_AGE\", 0) != 0:\n                raise ImproperlyConfigured(\n                    \"Pooling doesn't support persistent connections.\"\n                )\n            # Set the default options.\n            if pool_options is True:\n                pool_options = {}\n\n            try:\n                from psycopg_pool import ConnectionPool\n            except ImportError as err:\n                raise ImproperlyConfigured(\n                    \"Error loading psycopg_pool module.\\nDid you install psycopg[pool]?\"\n                ) from err\n\n            connect_kwargs = self.get_connection_params()\n            # Ensure we run in autocommit, Django properly sets it later on.\n            connect_kwargs[\"autocommit\"] = True\n            enable_checks = self.settings_dict[\"CONN_HEALTH_CHECKS\"]\n            pool = ConnectionPool(\n                kwargs=connect_kwargs,\n                open=False,  # Do not open the pool during startup.\n                configure=self._configure_connection,\n                check=ConnectionPool.check_connection if enable_checks else None,\n                **pool_options,\n            )\n            # setdefault() ensures that multiple threads don't set this in\n            # parallel. Since we do not open the pool during it's init above,\n            # this means that at worst during startup multiple threads generate\n            # pool objects and the first to set it wins.\n            self._connection_pools.setdefault(self.alias, pool)\n\n        return self._connection_pools[self.alias]\n\n    def close_pool(self):\n        if self.pool:\n            self.pool.close()\n            del self._connection_pools[self.alias]\n\n    def get_database_version(self):\n        \"\"\"\n        Return a tuple of the database's version.\n        E.g. for pg_version 120004, return (12, 4).\n        \"\"\"\n        return divmod(self.pg_version, 10000)\n\n    def get_connection_params(self):\n        settings_dict = self.settings_dict\n        # None may be used to connect to the default 'postgres' db\n        if settings_dict[\"NAME\"] == \"\" and not settings_dict[\"OPTIONS\"].get(\"service\"):\n            raise ImproperlyConfigured(\n                \"settings.DATABASES is improperly configured. \"\n                \"Please supply the NAME or OPTIONS['service'] value.\"\n            )\n        if len(settings_dict[\"NAME\"] or \"\") > self.ops.max_name_length():\n            raise ImproperlyConfigured(\n                \"The database name '%s' (%d characters) is longer than \"\n                \"PostgreSQL's limit of %d characters. Supply a shorter NAME \"\n                \"in settings.DATABASES.\"\n                % (\n                    settings_dict[\"NAME\"],\n                    len(settings_dict[\"NAME\"]),\n                    self.ops.max_name_length(),\n                )\n            )\n        if settings_dict[\"NAME\"]:\n            conn_params = {\n                \"dbname\": settings_dict[\"NAME\"],\n                **settings_dict[\"OPTIONS\"],\n            }\n        elif settings_dict[\"NAME\"] is None:\n            # Connect to the default 'postgres' db.\n            settings_dict[\"OPTIONS\"].pop(\"service\", None)\n            conn_params = {\"dbname\": \"postgres\", **settings_dict[\"OPTIONS\"]}\n        else:\n            conn_params = {**settings_dict[\"OPTIONS\"]}\n        conn_params[\"client_encoding\"] = \"UTF8\"\n\n        conn_params.pop(\"assume_role\", None)\n        conn_params.pop(\"isolation_level\", None)\n\n        pool_options = conn_params.pop(\"pool\", None)\n        if pool_options and not is_psycopg3:\n            raise ImproperlyConfigured(\"Database pooling requires psycopg >= 3\")\n\n        server_side_binding = conn_params.pop(\"server_side_binding\", None)\n        conn_params.setdefault(\n            \"cursor_factory\",\n            (\n                ServerBindingCursor\n                if is_psycopg3 and server_side_binding is True\n                else Cursor\n            ),\n        )\n        if settings_dict[\"USER\"]:\n            conn_params[\"user\"] = settings_dict[\"USER\"]\n        if settings_dict[\"PASSWORD\"]:\n            conn_params[\"password\"] = settings_dict[\"PASSWORD\"]\n        if settings_dict[\"HOST\"]:\n            conn_params[\"host\"] = settings_dict[\"HOST\"]\n        if settings_dict[\"PORT\"]:\n            conn_params[\"port\"] = settings_dict[\"PORT\"]\n        if is_psycopg3:\n            conn_params[\"context\"] = get_adapters_template(\n                settings.USE_TZ, self.timezone\n            )\n            # Disable prepared statements by default to keep connection poolers\n            # working. Can be reenabled via OPTIONS in the settings dict.\n            conn_params[\"prepare_threshold\"] = conn_params.pop(\n                \"prepare_threshold\", None\n            )\n        return conn_params\n\n    @async_unsafe\n    def get_new_connection(self, conn_params):\n        # self.isolation_level must be set:\n        # - after connecting to the database in order to obtain the database's\n        #   default when no value is explicitly specified in options.\n        # - before calling _set_autocommit() because if autocommit is on, that\n        #   will set connection.isolation_level to ISOLATION_LEVEL_AUTOCOMMIT.\n        options = self.settings_dict[\"OPTIONS\"]\n        set_isolation_level = False\n        try:\n            isolation_level_value = options[\"isolation_level\"]\n        except KeyError:\n            self.isolation_level = IsolationLevel.READ_COMMITTED\n        else:\n            # Set the isolation level to the value from OPTIONS.\n            try:\n                self.isolation_level = IsolationLevel(isolation_level_value)\n                set_isolation_level = True\n            except ValueError:\n                raise ImproperlyConfigured(\n                    f\"Invalid transaction isolation level {isolation_level_value} \"\n                    f\"specified. Use one of the psycopg.IsolationLevel values.\"\n                )\n        if self.pool:\n            # If nothing else has opened the pool, open it now.\n            self.pool.open()\n            connection = self.pool.getconn()\n        else:\n            connection = self.Database.connect(**conn_params)\n        if set_isolation_level:\n            connection.isolation_level = self.isolation_level\n        if not is_psycopg3:\n            # Register dummy loads() to avoid a round trip from psycopg2's\n            # decode to json.dumps() to json.loads(), when using a custom\n            # decoder in JSONField.\n            psycopg2.extras.register_default_jsonb(\n                conn_or_curs=connection, loads=lambda x: x\n            )\n        return connection\n\n    def ensure_timezone(self):\n        # Close the pool so new connections pick up the correct timezone.\n        self.close_pool()\n        if self.connection is None:\n            return False\n        return self._configure_timezone(self.connection)\n\n    def _configure_timezone(self, connection):\n        conn_timezone_name = connection.info.parameter_status(\"TimeZone\")\n        timezone_name = self.timezone_name\n        if timezone_name and conn_timezone_name != timezone_name:\n            with connection.cursor() as cursor:\n                cursor.execute(self.ops.set_time_zone_sql(), [timezone_name])\n            return True\n        return False\n\n    def _configure_role(self, connection):\n        if new_role := self.settings_dict[\"OPTIONS\"].get(\"assume_role\"):\n            with connection.cursor() as cursor:\n                sql = self.ops.compose_sql(\"SET ROLE %s\", [new_role])\n                cursor.execute(sql)\n            return True\n        return False\n\n    def _configure_connection(self, connection):\n        # This function is called from init_connection_state and from the\n        # psycopg pool itself after a connection is opened.\n\n        # Commit after setting the time zone.\n        commit_tz = self._configure_timezone(connection)\n        # Set the role on the connection. This is useful if the credential used\n        # to login is not the same as the role that owns database resources. As\n        # can be the case when using temporary or ephemeral credentials.\n        commit_role = self._configure_role(connection)\n\n        return commit_role or commit_tz\n\n    def _close(self):\n        if self.connection is not None:\n            # `wrap_database_errors` only works for `putconn` as long as there\n            # is no `reset` function set in the pool because it is deferred\n            # into a thread and not directly executed.\n            with self.wrap_database_errors:\n                if self.pool:\n                    # Ensure the correct pool is returned. This is a workaround\n                    # for tests so a pool can be changed on setting changes\n                    # (e.g. USE_TZ, TIME_ZONE).\n                    self.connection._pool.putconn(self.connection)\n                    # Connection can no longer be used.\n                    self.connection = None\n                else:\n                    return self.connection.close()\n\n    def init_connection_state(self):\n        super().init_connection_state()\n\n        if self.connection is not None and not self.pool:\n            commit = self._configure_connection(self.connection)\n\n            if commit and not self.get_autocommit():\n                self.connection.commit()\n\n    @async_unsafe\n    def create_cursor(self, name=None):\n        if name:\n            if is_psycopg3 and (\n                self.settings_dict[\"OPTIONS\"].get(\"server_side_binding\") is not True\n            ):\n                # psycopg >= 3 forces the usage of server-side bindings for\n                # named cursors so a specialized class that implements\n                # server-side cursors while performing client-side bindings\n                # must be used if `server_side_binding` is disabled (default).\n                cursor = ServerSideCursor(\n                    self.connection,\n                    name=name,\n                    scrollable=False,\n                    withhold=self.connection.autocommit,\n                )\n            else:\n                # In autocommit mode, the cursor will be used outside of a\n                # transaction, hence use a holdable cursor.\n                cursor = self.connection.cursor(\n                    name, scrollable=False, withhold=self.connection.autocommit\n                )\n        else:\n            cursor = self.connection.cursor()\n\n        if is_psycopg3:\n            # Register the cursor timezone only if the connection disagrees, to\n            # avoid copying the adapter map.\n            tzloader = self.connection.adapters.get_loader(TIMESTAMPTZ_OID, Format.TEXT)\n            if self.timezone != tzloader.timezone:\n                register_tzloader(self.timezone, cursor)\n        else:\n            cursor.tzinfo_factory = self.tzinfo_factory if settings.USE_TZ else None\n        return cursor\n\n    def tzinfo_factory(self, offset):\n        return self.timezone\n\n    @async_unsafe\n    def chunked_cursor(self):\n        self._named_cursor_idx += 1\n        # Get the current async task\n        # Note that right now this is behind @async_unsafe, so this is\n        # unreachable, but in future we'll start loosening this restriction.\n        # For now, it's here so that every use of \"threading\" is\n        # also async-compatible.\n        try:\n            current_task = asyncio.current_task()\n        except RuntimeError:\n            current_task = None\n        # Current task can be none even if the current_task call didn't error\n        if current_task:\n            task_ident = str(id(current_task))\n        else:\n            task_ident = \"sync\"\n        # Use that and the thread ident to get a unique name\n        return self._cursor(\n            name=\"_django_curs_%d_%s_%d\"\n            % (\n                # Avoid reusing name in other threads / tasks\n                threading.current_thread().ident,\n                task_ident,\n                self._named_cursor_idx,\n            )\n        )\n\n    def _set_autocommit(self, autocommit):\n        with self.wrap_database_errors:\n            self.connection.autocommit = autocommit\n\n    def check_constraints(self, table_names=None):\n        \"\"\"\n        Check constraints by setting them to immediate. Return them to deferred\n        afterward.\n        \"\"\"\n        with self.cursor() as cursor:\n            cursor.execute(\"SET CONSTRAINTS ALL IMMEDIATE\")\n            cursor.execute(\"SET CONSTRAINTS ALL DEFERRED\")\n\n    def is_usable(self):\n        if self.connection is None:\n            return False\n        try:\n            # Use a psycopg cursor directly, bypassing Django's utilities.\n            with self.connection.cursor() as cursor:\n                cursor.execute(\"SELECT 1\")\n        except Database.Error:\n            return False\n        else:\n            return True\n\n    def close_if_health_check_failed(self):\n        if self.pool:\n            # The pool only returns healthy connections.\n            return\n        return super().close_if_health_check_failed()\n\n    @contextmanager\n    def _nodb_cursor(self):\n        cursor = None\n        try:\n            with super()._nodb_cursor() as cursor:\n                yield cursor\n        except (Database.DatabaseError, WrappedDatabaseError):\n            if cursor is not None:\n                raise\n            warnings.warn(\n                \"Normally Django will use a connection to the 'postgres' database \"\n                \"to avoid running initialization queries against the production \"\n                \"database when it's not needed (for example, when running tests). \"\n                \"Django was unable to create a connection to the 'postgres' database \"\n                \"and will use the first PostgreSQL database instead.\",\n                RuntimeWarning,\n            )\n            for connection in connections.all():\n                if (\n                    connection.vendor == \"postgresql\"\n                    and connection.settings_dict[\"NAME\"] != \"postgres\"\n                ):\n                    conn = self.__class__(\n                        {\n                            **self.settings_dict,\n                            \"NAME\": connection.settings_dict[\"NAME\"],\n                        },\n                        alias=self.alias,\n                    )\n                    try:\n                        with conn.cursor() as cursor:\n                            yield cursor\n                    finally:\n                        conn.close()\n                    break\n            else:\n                raise\n\n    @cached_property\n    def pg_version(self):\n        with self.temporary_connection():\n            return self.connection.info.server_version\n\n    def make_debug_cursor(self, cursor):\n        return CursorDebugWrapper(cursor, self)"},{"start_line":201,"end_line":202,"belongs_to":{"file_name":"base.py","upper_path":"../django/django/db/backends/sqlite3","module":"sqlite3","define_class":["DatabaseWrapper","SQLiteCursorWrapper"],"imports":["datetime","decimal","warnings","collections.abc.Mapping","itertools.chain","itertools.tee","sqlite3.dbapi2","django.core.exceptions.ImproperlyConfigured","django.db.IntegrityError","django.db.backends.base.base.BaseDatabaseWrapper","django.utils.asyncio.async_unsafe","django.utils.dateparse.parse_date","django.utils.dateparse.parse_datetime","django.utils.dateparse.parse_time","django.utils.regex_helper._lazy_re_compile","_functions.register","client.DatabaseClient","creation.DatabaseCreation","features.DatabaseFeatures","introspection.DatabaseIntrospection","operations.DatabaseOperations","schema.DatabaseSchemaEditor"]},"relative_function":[],"code":"def get_database_version(self):\n        return self.Database.sqlite_version_info"}],"ground_truth":null,"score":null},
{"question":"What are the expected parameters and return values for the `_create_unique_sql` method in the context of `BaseDatabaseSchemaEditor`?","answer":"","relative_code_list":[{"start_line":77,"end_line":2046,"belongs_to":{"file_name":"schema.py","upper_path":"../django/django/db/backends/base","module":"base","define_class":["BaseDatabaseSchemaEditor"],"imports":["logging","operator","datetime.datetime","django.conf.settings","django.core.exceptions.FieldError","django.db.backends.ddl_references.Columns","django.db.backends.ddl_references.Expressions","django.db.backends.ddl_references.ForeignKeyName","django.db.backends.ddl_references.IndexName","django.db.backends.ddl_references.Statement","django.db.backends.ddl_references.Table","django.db.backends.utils.names_digest","django.db.backends.utils.split_identifier","django.db.backends.utils.truncate_name","django.db.models.Deferrable","django.db.models.Index","django.db.models.fields.composite.CompositePrimaryKey","django.db.models.sql.Query","django.db.transaction.TransactionManagementError","django.db.transaction.atomic","django.utils.timezone","django.db.models.expressions.Value"]},"relative_function":[],"code":"class BaseDatabaseSchemaEditor:\n    \"\"\"\n    This class and its subclasses are responsible for emitting schema-changing\n    statements to the databases - model creation/removal/alteration, field\n    renaming, index fiddling, and so on.\n    \"\"\"\n\n    # Overrideable SQL templates\n    sql_create_table = \"CREATE TABLE %(table)s (%(definition)s)\"\n    sql_rename_table = \"ALTER TABLE %(old_table)s RENAME TO %(new_table)s\"\n    sql_retablespace_table = \"ALTER TABLE %(table)s SET TABLESPACE %(new_tablespace)s\"\n    sql_delete_table = \"DROP TABLE %(table)s CASCADE\"\n\n    sql_create_column = \"ALTER TABLE %(table)s ADD COLUMN %(column)s %(definition)s\"\n    sql_alter_column = \"ALTER TABLE %(table)s %(changes)s\"\n    sql_alter_column_type = \"ALTER COLUMN %(column)s TYPE %(type)s%(collation)s\"\n    sql_alter_column_null = \"ALTER COLUMN %(column)s DROP NOT NULL\"\n    sql_alter_column_not_null = \"ALTER COLUMN %(column)s SET NOT NULL\"\n    sql_alter_column_default = \"ALTER COLUMN %(column)s SET DEFAULT %(default)s\"\n    sql_alter_column_no_default = \"ALTER COLUMN %(column)s DROP DEFAULT\"\n    sql_alter_column_no_default_null = sql_alter_column_no_default\n    sql_delete_column = \"ALTER TABLE %(table)s DROP COLUMN %(column)s CASCADE\"\n    sql_rename_column = (\n        \"ALTER TABLE %(table)s RENAME COLUMN %(old_column)s TO %(new_column)s\"\n    )\n    sql_update_with_default = (\n        \"UPDATE %(table)s SET %(column)s = %(default)s WHERE %(column)s IS NULL\"\n    )\n\n    sql_unique_constraint = \"UNIQUE (%(columns)s)%(deferrable)s\"\n    sql_check_constraint = \"CHECK (%(check)s)\"\n    sql_delete_constraint = \"ALTER TABLE %(table)s DROP CONSTRAINT %(name)s\"\n    sql_constraint = \"CONSTRAINT %(name)s %(constraint)s\"\n    sql_pk_constraint = \"PRIMARY KEY (%(columns)s)\"\n\n    sql_create_check = \"ALTER TABLE %(table)s ADD CONSTRAINT %(name)s CHECK (%(check)s)\"\n    sql_delete_check = sql_delete_constraint\n\n    sql_create_unique = (\n        \"ALTER TABLE %(table)s ADD CONSTRAINT %(name)s \"\n        \"UNIQUE%(nulls_distinct)s (%(columns)s)%(deferrable)s\"\n    )\n    sql_delete_unique = sql_delete_constraint\n\n    sql_create_fk = (\n        \"ALTER TABLE %(table)s ADD CONSTRAINT %(name)s FOREIGN KEY (%(column)s) \"\n        \"REFERENCES %(to_table)s (%(to_column)s)%(deferrable)s\"\n    )\n    sql_create_inline_fk = None\n    sql_create_column_inline_fk = None\n    sql_delete_fk = sql_delete_constraint\n\n    sql_create_index = (\n        \"CREATE INDEX %(name)s ON %(table)s \"\n        \"(%(columns)s)%(include)s%(extra)s%(condition)s\"\n    )\n    sql_create_unique_index = (\n        \"CREATE UNIQUE INDEX %(name)s ON %(table)s \"\n        \"(%(columns)s)%(include)s%(nulls_distinct)s%(condition)s\"\n    )\n    sql_rename_index = \"ALTER INDEX %(old_name)s RENAME TO %(new_name)s\"\n    sql_delete_index = \"DROP INDEX %(name)s\"\n\n    sql_create_pk = (\n        \"ALTER TABLE %(table)s ADD CONSTRAINT %(name)s PRIMARY KEY (%(columns)s)\"\n    )\n    sql_delete_pk = sql_delete_constraint\n\n    sql_delete_procedure = \"DROP PROCEDURE %(procedure)s\"\n\n    sql_alter_table_comment = \"COMMENT ON TABLE %(table)s IS %(comment)s\"\n    sql_alter_column_comment = \"COMMENT ON COLUMN %(table)s.%(column)s IS %(comment)s\"\n\n    def __init__(self, connection, collect_sql=False, atomic=True):\n        self.connection = connection\n        self.collect_sql = collect_sql\n        if self.collect_sql:\n            self.collected_sql = []\n        self.atomic_migration = self.connection.features.can_rollback_ddl and atomic\n\n    # State-managing methods\n\n    def __enter__(self):\n        self.deferred_sql = []\n        if self.atomic_migration:\n            self.atomic = atomic(self.connection.alias)\n            self.atomic.__enter__()\n        return self\n\n    def __exit__(self, exc_type, exc_value, traceback):\n        if exc_type is None:\n            for sql in self.deferred_sql:\n                self.execute(sql, None)\n        if self.atomic_migration:\n            self.atomic.__exit__(exc_type, exc_value, traceback)\n\n    # Core utility functions\n\n    def execute(self, sql, params=()):\n        \"\"\"Execute the given SQL statement, with optional parameters.\"\"\"\n        # Don't perform the transactional DDL check if SQL is being collected\n        # as it's not going to be executed anyway.\n        if (\n            not self.collect_sql\n            and self.connection.in_atomic_block\n            and not self.connection.features.can_rollback_ddl\n        ):\n            raise TransactionManagementError(\n                \"Executing DDL statements while in a transaction on databases \"\n                \"that can't perform a rollback is prohibited.\"\n            )\n        # Account for non-string statement objects.\n        sql = str(sql)\n        # Log the command we're running, then run it\n        logger.debug(\n            \"%s; (params %r)\", sql, params, extra={\"params\": params, \"sql\": sql}\n        )\n        if self.collect_sql:\n            ending = \"\" if sql.rstrip().endswith(\";\") else \";\"\n            if params is not None:\n                self.collected_sql.append(\n                    (sql % tuple(map(self.quote_value, params))) + ending\n                )\n            else:\n                self.collected_sql.append(sql + ending)\n        else:\n            with self.connection.cursor() as cursor:\n                cursor.execute(sql, params)\n\n    def quote_name(self, name):\n        return self.connection.ops.quote_name(name)\n\n    def table_sql(self, model):\n        \"\"\"Take a model and return its table definition.\"\"\"\n        # Add any unique_togethers (always deferred, as some fields might be\n        # created afterward, like geometry fields with some backends).\n        for field_names in model._meta.unique_together:\n            fields = [model._meta.get_field(field) for field in field_names]\n            self.deferred_sql.append(self._create_unique_sql(model, fields))\n        # Create column SQL, add FK deferreds if needed.\n        column_sqls = []\n        params = []\n        for field in model._meta.local_fields:\n            # SQL.\n            definition, extra_params = self.column_sql(model, field)\n            if definition is None:\n                continue\n            # Check constraints can go on the column SQL here.\n            db_params = field.db_parameters(connection=self.connection)\n            if db_params[\"check\"]:\n                definition += \" \" + self.sql_check_constraint % db_params\n            # Autoincrement SQL (for backends with inline variant).\n            col_type_suffix = field.db_type_suffix(connection=self.connection)\n            if col_type_suffix:\n                definition += \" %s\" % col_type_suffix\n            params.extend(extra_params)\n            # FK.\n            if field.remote_field and field.db_constraint:\n                to_table = field.remote_field.model._meta.db_table\n                to_column = field.remote_field.model._meta.get_field(\n                    field.remote_field.field_name\n                ).column\n                if self.sql_create_inline_fk:\n                    definition += \" \" + self.sql_create_inline_fk % {\n                        \"to_table\": self.quote_name(to_table),\n                        \"to_column\": self.quote_name(to_column),\n                    }\n                elif self.connection.features.supports_foreign_keys:\n                    self.deferred_sql.append(\n                        self._create_fk_sql(\n                            model, field, \"_fk_%(to_table)s_%(to_column)s\"\n                        )\n                    )\n            # Add the SQL to our big list.\n            column_sqls.append(\n                \"%s %s\"\n                % (\n                    self.quote_name(field.column),\n                    definition,\n                )\n            )\n            # Autoincrement SQL (for backends with post table definition\n            # variant).\n            if field.get_internal_type() in (\n                \"AutoField\",\n                \"BigAutoField\",\n                \"SmallAutoField\",\n            ):\n                autoinc_sql = self.connection.ops.autoinc_sql(\n                    model._meta.db_table, field.column\n                )\n                if autoinc_sql:\n                    self.deferred_sql.extend(autoinc_sql)\n        # The BaseConstraint DDL creation methods such as constraint_sql(),\n        # create_sql(), and delete_sql(), were not designed in a way that\n        # separate SQL from parameters which make their generated SQL unfit to\n        # be used in a context where parametrization is delegated to the\n        # backend.\n        constraint_sqls = []\n        if params:\n            # If parameters are present (e.g. a DEFAULT clause on backends that\n            # allow parametrization) defer constraint creation so they are not\n            # mixed with SQL meant to be parametrized.\n            for constraint in model._meta.constraints:\n                self.deferred_sql.append(constraint.create_sql(model, self))\n        else:\n            constraint_sqls.extend(\n                constraint.constraint_sql(model, self)\n                for constraint in model._meta.constraints\n            )\n\n        pk = model._meta.pk\n        if isinstance(pk, CompositePrimaryKey):\n            constraint_sqls.append(self._pk_constraint_sql(pk.columns))\n\n        sql = self.sql_create_table % {\n            \"table\": self.quote_name(model._meta.db_table),\n            \"definition\": \", \".join(\n                str(statement)\n                for statement in (*column_sqls, *constraint_sqls)\n                if statement\n            ),\n        }\n        if model._meta.db_tablespace:\n            tablespace_sql = self.connection.ops.tablespace_sql(\n                model._meta.db_tablespace\n            )\n            if tablespace_sql:\n                sql += \" \" + tablespace_sql\n        return sql, params\n\n    # Field <-> database mapping functions\n\n    def _iter_column_sql(\n        self, column_db_type, params, model, field, field_db_params, include_default\n    ):\n        yield column_db_type\n        if collation := field_db_params.get(\"collation\"):\n            yield self._collate_sql(collation)\n        # Work out nullability.\n        null = field.null\n        # Add database default.\n        if field.has_db_default():\n            default_sql, default_params = self.db_default_sql(field)\n            yield f\"DEFAULT {default_sql}\"\n            params.extend(default_params)\n            include_default = False\n        # Include a default value, if requested.\n        include_default = (\n            include_default\n            and not self.skip_default(field)\n            and\n            # Don't include a default value if it's a nullable field and the\n            # default cannot be dropped in the ALTER COLUMN statement (e.g.\n            # MySQL longtext and longblob).\n            not (null and self.skip_default_on_alter(field))\n        )\n        if include_default:\n            default_value = self.effective_default(field)\n            if default_value is not None:\n                column_default = \"DEFAULT \" + self._column_default_sql(field)\n                if self.connection.features.requires_literal_defaults:\n                    # Some databases can't take defaults as a parameter\n                    # (Oracle, SQLite). If this is the case, the individual\n                    # schema backend should implement prepare_default().\n                    yield column_default % self.prepare_default(default_value)\n                else:\n                    yield column_default\n                    params.append(default_value)\n        # Oracle treats the empty string ('') as null, so coerce the null\n        # option whenever '' is a possible value.\n        if (\n            field.empty_strings_allowed\n            and not field.primary_key\n            and self.connection.features.interprets_empty_strings_as_nulls\n        ):\n            null = True\n        if field.generated:\n            generated_sql, generated_params = self._column_generated_sql(field)\n            params.extend(generated_params)\n            yield generated_sql\n        elif not null:\n            yield \"NOT NULL\"\n        elif not self.connection.features.implied_column_null:\n            yield \"NULL\"\n        if field.primary_key:\n            yield \"PRIMARY KEY\"\n        elif field.unique:\n            yield \"UNIQUE\"\n        # Optionally add the tablespace if it's an implicitly indexed column.\n        tablespace = field.db_tablespace or model._meta.db_tablespace\n        if (\n            tablespace\n            and self.connection.features.supports_tablespaces\n            and field.unique\n        ):\n            yield self.connection.ops.tablespace_sql(tablespace, inline=True)\n        if self.connection.features.supports_comments_inline and field.db_comment:\n            yield self._comment_sql(field.db_comment)\n\n    def column_sql(self, model, field, include_default=False):\n        \"\"\"\n        Return the column definition for a field. The field must already have\n        had set_attributes_from_name() called.\n        \"\"\"\n        # Get the column's type and use that as the basis of the SQL.\n        field_db_params = field.db_parameters(connection=self.connection)\n        column_db_type = field_db_params[\"type\"]\n        # Check for fields that aren't actually columns (e.g. M2M).\n        if column_db_type is None:\n            return None, None\n        params = []\n        return (\n            \" \".join(\n                # This appends to the params being returned.\n                self._iter_column_sql(\n                    column_db_type,\n                    params,\n                    model,\n                    field,\n                    field_db_params,\n                    include_default,\n                )\n            ),\n            params,\n        )\n\n    def skip_default(self, field):\n        \"\"\"\n        Some backends don't accept default values for certain columns types\n        (i.e. MySQL longtext and longblob).\n        \"\"\"\n        return False\n\n    def skip_default_on_alter(self, field):\n        \"\"\"\n        Some backends don't accept default values for certain columns types\n        (i.e. MySQL longtext and longblob) in the ALTER COLUMN statement.\n        \"\"\"\n        return False\n\n    def prepare_default(self, value):\n        \"\"\"\n        Only used for backends which have requires_literal_defaults feature\n        \"\"\"\n        raise NotImplementedError(\n            \"subclasses of BaseDatabaseSchemaEditor for backends which have \"\n            \"requires_literal_defaults must provide a prepare_default() method\"\n        )\n\n    def _column_default_sql(self, field):\n        \"\"\"\n        Return the SQL to use in a DEFAULT clause. The resulting string should\n        contain a '%s' placeholder for a default value.\n        \"\"\"\n        return \"%s\"\n\n    def db_default_sql(self, field):\n        \"\"\"Return the sql and params for the field's database default.\"\"\"\n        from django.db.models.expressions import Value\n\n        db_default = field._db_default_expression\n        sql = (\n            self._column_default_sql(field) if isinstance(db_default, Value) else \"(%s)\"\n        )\n        query = Query(model=field.model)\n        compiler = query.get_compiler(connection=self.connection)\n        default_sql, params = compiler.compile(db_default)\n        if self.connection.features.requires_literal_defaults:\n            # Some databases don't support parameterized defaults (Oracle,\n            # SQLite). If this is the case, the individual schema backend\n            # should implement prepare_default().\n            default_sql %= tuple(self.prepare_default(p) for p in params)\n            params = []\n        return sql % default_sql, params\n\n    def _column_generated_sql(self, field):\n        \"\"\"Return the SQL to use in a GENERATED ALWAYS clause.\"\"\"\n        expression_sql, params = field.generated_sql(self.connection)\n        persistency_sql = \"STORED\" if field.db_persist else \"VIRTUAL\"\n        if self.connection.features.requires_literal_defaults:\n            expression_sql = expression_sql % tuple(self.quote_value(p) for p in params)\n            params = ()\n        return f\"GENERATED ALWAYS AS ({expression_sql}) {persistency_sql}\", params\n\n    @staticmethod\n    def _effective_default(field):\n        # This method allows testing its logic without a connection.\n        if field.has_default():\n            default = field.get_default()\n        elif field.generated:\n            default = None\n        elif not field.null and field.blank and field.empty_strings_allowed:\n            if field.get_internal_type() == \"BinaryField\":\n                default = b\"\"\n            else:\n                default = \"\"\n        elif getattr(field, \"auto_now\", False) or getattr(field, \"auto_now_add\", False):\n            internal_type = field.get_internal_type()\n            if internal_type == \"DateTimeField\":\n                default = timezone.now()\n            else:\n                default = datetime.now()\n                if internal_type == \"DateField\":\n                    default = default.date()\n                elif internal_type == \"TimeField\":\n                    default = default.time()\n        else:\n            default = None\n        return default\n\n    def effective_default(self, field):\n        \"\"\"Return a field's effective database default value.\"\"\"\n        return field.get_db_prep_save(self._effective_default(field), self.connection)\n\n    def quote_value(self, value):\n        \"\"\"\n        Return a quoted version of the value so it's safe to use in an SQL\n        string. This is not safe against injection from user code; it is\n        intended only for use in making SQL scripts or preparing default values\n        for particularly tricky backends (defaults are not user-defined, though,\n        so this is safe).\n        \"\"\"\n        raise NotImplementedError()\n\n    # Actions\n\n    def create_model(self, model):\n        \"\"\"\n        Create a table and any accompanying indexes or unique constraints for\n        the given `model`.\n        \"\"\"\n        sql, params = self.table_sql(model)\n        # Prevent using [] as params, in the case a literal '%' is used in the\n        # definition on backends that don't support parametrized DDL.\n        self.execute(sql, params or None)\n\n        if self.connection.features.supports_comments:\n            # Add table comment.\n            if model._meta.db_table_comment:\n                self.alter_db_table_comment(model, None, model._meta.db_table_comment)\n            # Add column comments.\n            if not self.connection.features.supports_comments_inline:\n                for field in model._meta.local_fields:\n                    if field.db_comment:\n                        field_db_params = field.db_parameters(\n                            connection=self.connection\n                        )\n                        field_type = field_db_params[\"type\"]\n                        self.execute(\n                            *self._alter_column_comment_sql(\n                                model, field, field_type, field.db_comment\n                            )\n                        )\n        # Add any field index (deferred as SQLite _remake_table needs it).\n        self.deferred_sql.extend(self._model_indexes_sql(model))\n\n        # Make M2M tables\n        for field in model._meta.local_many_to_many:\n            if field.remote_field.through._meta.auto_created:\n                self.create_model(field.remote_field.through)\n\n    def delete_model(self, model):\n        \"\"\"Delete a model from the database.\"\"\"\n        # Handle auto-created intermediary models\n        for field in model._meta.local_many_to_many:\n            if field.remote_field.through._meta.auto_created:\n                self.delete_model(field.remote_field.through)\n\n        # Delete the table\n        self.execute(\n            self.sql_delete_table\n            % {\n                \"table\": self.quote_name(model._meta.db_table),\n            }\n        )\n        # Remove all deferred statements referencing the deleted table.\n        for sql in list(self.deferred_sql):\n            if isinstance(sql, Statement) and sql.references_table(\n                model._meta.db_table\n            ):\n                self.deferred_sql.remove(sql)\n\n    def add_index(self, model, index):\n        \"\"\"Add an index on a model.\"\"\"\n        if (\n            index.contains_expressions\n            and not self.connection.features.supports_expression_indexes\n        ):\n            return None\n        # Index.create_sql returns interpolated SQL which makes params=None a\n        # necessity to avoid escaping attempts on execution.\n        self.execute(index.create_sql(model, self), params=None)\n\n    def remove_index(self, model, index):\n        \"\"\"Remove an index from a model.\"\"\"\n        if (\n            index.contains_expressions\n            and not self.connection.features.supports_expression_indexes\n        ):\n            return None\n        self.execute(index.remove_sql(model, self))\n\n    def rename_index(self, model, old_index, new_index):\n        if self.connection.features.can_rename_index:\n            self.execute(\n                self._rename_index_sql(model, old_index.name, new_index.name),\n                params=None,\n            )\n        else:\n            self.remove_index(model, old_index)\n            self.add_index(model, new_index)\n\n    def add_constraint(self, model, constraint):\n        \"\"\"Add a constraint to a model.\"\"\"\n        sql = constraint.create_sql(model, self)\n        if sql:\n            # Constraint.create_sql returns interpolated SQL which makes\n            # params=None a necessity to avoid escaping attempts on execution.\n            self.execute(sql, params=None)\n\n    def remove_constraint(self, model, constraint):\n        \"\"\"Remove a constraint from a model.\"\"\"\n        sql = constraint.remove_sql(model, self)\n        if sql:\n            self.execute(sql)\n\n    def alter_unique_together(self, model, old_unique_together, new_unique_together):\n        \"\"\"\n        Deal with a model changing its unique_together. The input\n        unique_togethers must be doubly-nested, not the single-nested\n        [\"foo\", \"bar\"] format.\n        \"\"\"\n        olds = {tuple(fields) for fields in old_unique_together}\n        news = {tuple(fields) for fields in new_unique_together}\n        # Deleted uniques\n        for fields in olds.difference(news):\n            self._delete_composed_index(\n                model,\n                fields,\n                {\"unique\": True, \"primary_key\": False},\n                self.sql_delete_unique,\n            )\n        # Created uniques\n        for field_names in news.difference(olds):\n            fields = [model._meta.get_field(field) for field in field_names]\n            self.execute(self._create_unique_sql(model, fields))\n\n    def alter_index_together(self, model, old_index_together, new_index_together):\n        \"\"\"\n        Deal with a model changing its index_together. The input\n        index_togethers must be doubly-nested, not the single-nested\n        [\"foo\", \"bar\"] format.\n        \"\"\"\n        olds = {tuple(fields) for fields in old_index_together}\n        news = {tuple(fields) for fields in new_index_together}\n        # Deleted indexes\n        for fields in olds.difference(news):\n            self._delete_composed_index(\n                model,\n                fields,\n                {\"index\": True, \"unique\": False},\n                self.sql_delete_index,\n            )\n        # Created indexes\n        for field_names in news.difference(olds):\n            fields = [model._meta.get_field(field) for field in field_names]\n            self.execute(self._create_index_sql(model, fields=fields, suffix=\"_idx\"))\n\n    def _delete_composed_index(self, model, fields, constraint_kwargs, sql):\n        meta_constraint_names = {\n            constraint.name for constraint in model._meta.constraints\n        }\n        meta_index_names = {constraint.name for constraint in model._meta.indexes}\n        columns = [model._meta.get_field(field).column for field in fields]\n        constraint_names = self._constraint_names(\n            model,\n            columns,\n            exclude=meta_constraint_names | meta_index_names,\n            **constraint_kwargs,\n        )\n        if (\n            constraint_kwargs.get(\"unique\") is True\n            and constraint_names\n            and self.connection.features.allows_multiple_constraints_on_same_fields\n        ):\n            # Constraint matching the unique_together name.\n            default_name = str(\n                self._unique_constraint_name(model._meta.db_table, columns, quote=False)\n            )\n            if default_name in constraint_names:\n                constraint_names = [default_name]\n        if len(constraint_names) != 1:\n            raise ValueError(\n                \"Found wrong number (%s) of constraints for %s(%s)\"\n                % (\n                    len(constraint_names),\n                    model._meta.db_table,\n                    \", \".join(columns),\n                )\n            )\n        self.execute(self._delete_constraint_sql(sql, model, constraint_names[0]))\n\n    def alter_db_table(self, model, old_db_table, new_db_table):\n        \"\"\"Rename the table a model points to.\"\"\"\n        if old_db_table == new_db_table or (\n            self.connection.features.ignores_table_name_case\n            and old_db_table.lower() == new_db_table.lower()\n        ):\n            return\n        self.execute(\n            self.sql_rename_table\n            % {\n                \"old_table\": self.quote_name(old_db_table),\n                \"new_table\": self.quote_name(new_db_table),\n            }\n        )\n        # Rename all references to the old table name.\n        for sql in self.deferred_sql:\n            if isinstance(sql, Statement):\n                sql.rename_table_references(old_db_table, new_db_table)\n\n    def alter_db_table_comment(self, model, old_db_table_comment, new_db_table_comment):\n        if self.sql_alter_table_comment and self.connection.features.supports_comments:\n            self.execute(\n                self.sql_alter_table_comment\n                % {\n                    \"table\": self.quote_name(model._meta.db_table),\n                    \"comment\": self.quote_value(new_db_table_comment or \"\"),\n                }\n            )\n\n    def alter_db_tablespace(self, model, old_db_tablespace, new_db_tablespace):\n        \"\"\"Move a model's table between tablespaces.\"\"\"\n        self.execute(\n            self.sql_retablespace_table\n            % {\n                \"table\": self.quote_name(model._meta.db_table),\n                \"old_tablespace\": self.quote_name(old_db_tablespace),\n                \"new_tablespace\": self.quote_name(new_db_tablespace),\n            }\n        )\n\n    def add_field(self, model, field):\n        \"\"\"\n        Create a field on a model. Usually involves adding a column, but may\n        involve adding a table instead (for M2M fields).\n        \"\"\"\n        # Special-case implicit M2M tables\n        if field.many_to_many and field.remote_field.through._meta.auto_created:\n            return self.create_model(field.remote_field.through)\n        # Get the column's definition\n        definition, params = self.column_sql(model, field, include_default=True)\n        # It might not actually have a column behind it\n        if definition is None:\n            return\n        if col_type_suffix := field.db_type_suffix(connection=self.connection):\n            definition += f\" {col_type_suffix}\"\n        # Check constraints can go on the column SQL here\n        db_params = field.db_parameters(connection=self.connection)\n        if db_params[\"check\"]:\n            definition += \" \" + self.sql_check_constraint % db_params\n        if (\n            field.remote_field\n            and self.connection.features.supports_foreign_keys\n            and field.db_constraint\n        ):\n            constraint_suffix = \"_fk_%(to_table)s_%(to_column)s\"\n            # Add FK constraint inline, if supported.\n            if self.sql_create_column_inline_fk:\n                to_table = field.remote_field.model._meta.db_table\n                to_column = field.remote_field.model._meta.get_field(\n                    field.remote_field.field_name\n                ).column\n                namespace, _ = split_identifier(model._meta.db_table)\n                definition += \" \" + self.sql_create_column_inline_fk % {\n                    \"name\": self._fk_constraint_name(model, field, constraint_suffix),\n                    \"namespace\": (\n                        \"%s.\" % self.quote_name(namespace) if namespace else \"\"\n                    ),\n                    \"column\": self.quote_name(field.column),\n                    \"to_table\": self.quote_name(to_table),\n                    \"to_column\": self.quote_name(to_column),\n                    \"deferrable\": self.connection.ops.deferrable_sql(),\n                }\n            # Otherwise, add FK constraints later.\n            else:\n                self.deferred_sql.append(\n                    self._create_fk_sql(model, field, constraint_suffix)\n                )\n        # Build the SQL and run it\n        sql = self.sql_create_column % {\n            \"table\": self.quote_name(model._meta.db_table),\n            \"column\": self.quote_name(field.column),\n            \"definition\": definition,\n        }\n        # Prevent using [] as params, in the case a literal '%' is used in the\n        # definition on backends that don't support parametrized DDL.\n        self.execute(sql, params or None)\n        # Drop the default if we need to\n        if (\n            not field.has_db_default()\n            and not self.skip_default_on_alter(field)\n            and self.effective_default(field) is not None\n        ):\n            changes_sql, params = self._alter_column_default_sql(\n                model, None, field, drop=True\n            )\n            sql = self.sql_alter_column % {\n                \"table\": self.quote_name(model._meta.db_table),\n                \"changes\": changes_sql,\n            }\n            self.execute(sql, params)\n        # Add field comment, if required.\n        if (\n            field.db_comment\n            and self.connection.features.supports_comments\n            and not self.connection.features.supports_comments_inline\n        ):\n            field_type = db_params[\"type\"]\n            self.execute(\n                *self._alter_column_comment_sql(\n                    model, field, field_type, field.db_comment\n                )\n            )\n        # Add an index, if required\n        self.deferred_sql.extend(self._field_indexes_sql(model, field))\n        # Reset connection if required\n        if self.connection.features.connection_persists_old_columns:\n            self.connection.close()\n\n    def remove_field(self, model, field):\n        \"\"\"\n        Remove a field from a model. Usually involves deleting a column,\n        but for M2Ms may involve deleting a table.\n        \"\"\"\n        # Special-case implicit M2M tables\n        if field.many_to_many and field.remote_field.through._meta.auto_created:\n            return self.delete_model(field.remote_field.through)\n        # It might not actually have a column behind it\n        if field.db_parameters(connection=self.connection)[\"type\"] is None:\n            return\n        # Drop any FK constraints, MySQL requires explicit deletion\n        if field.remote_field:\n            fk_names = self._constraint_names(model, [field.column], foreign_key=True)\n            for fk_name in fk_names:\n                self.execute(self._delete_fk_sql(model, fk_name))\n        # Delete the column\n        sql = self.sql_delete_column % {\n            \"table\": self.quote_name(model._meta.db_table),\n            \"column\": self.quote_name(field.column),\n        }\n        self.execute(sql)\n        # Reset connection if required\n        if self.connection.features.connection_persists_old_columns:\n            self.connection.close()\n        # Remove all deferred statements referencing the deleted column.\n        for sql in list(self.deferred_sql):\n            if isinstance(sql, Statement) and sql.references_column(\n                model._meta.db_table, field.column\n            ):\n                self.deferred_sql.remove(sql)\n\n    def alter_field(self, model, old_field, new_field, strict=False):\n        \"\"\"\n        Allow a field's type, uniqueness, nullability, default, column,\n        constraints, etc. to be modified.\n        `old_field` is required to compute the necessary changes.\n        If `strict` is True, raise errors if the old column does not match\n        `old_field` precisely.\n        \"\"\"\n        if not self._field_should_be_altered(old_field, new_field):\n            return\n        # Ensure this field is even column-based\n        old_db_params = old_field.db_parameters(connection=self.connection)\n        old_type = old_db_params[\"type\"]\n        new_db_params = new_field.db_parameters(connection=self.connection)\n        new_type = new_db_params[\"type\"]\n        modifying_generated_field = False\n        if (old_type is None and old_field.remote_field is None) or (\n            new_type is None and new_field.remote_field is None\n        ):\n            raise ValueError(\n                \"Cannot alter field %s into %s - they do not properly define \"\n                \"db_type (are you using a badly-written custom field?)\"\n                % (old_field, new_field),\n            )\n        elif (\n            old_type is None\n            and new_type is None\n            and (\n                old_field.remote_field.through\n                and new_field.remote_field.through\n                and old_field.remote_field.through._meta.auto_created\n                and new_field.remote_field.through._meta.auto_created\n            )\n        ):\n            return self._alter_many_to_many(model, old_field, new_field, strict)\n        elif (\n            old_type is None\n            and new_type is None\n            and (\n                old_field.remote_field.through\n                and new_field.remote_field.through\n                and not old_field.remote_field.through._meta.auto_created\n                and not new_field.remote_field.through._meta.auto_created\n            )\n        ):\n            # Both sides have through models; this is a no-op.\n            return\n        elif old_type is None or new_type is None:\n            raise ValueError(\n                \"Cannot alter field %s into %s - they are not compatible types \"\n                \"(you cannot alter to or from M2M fields, or add or remove \"\n                \"through= on M2M fields)\" % (old_field, new_field)\n            )\n        elif old_field.generated != new_field.generated or (\n            new_field.generated and old_field.db_persist != new_field.db_persist\n        ):\n            modifying_generated_field = True\n        elif new_field.generated:\n            try:\n                old_field_sql = old_field.generated_sql(self.connection)\n            except FieldError:\n                # Field used in a generated field was renamed.\n                modifying_generated_field = True\n            else:\n                new_field_sql = new_field.generated_sql(self.connection)\n                modifying_generated_field = old_field_sql != new_field_sql\n        if modifying_generated_field:\n            raise ValueError(\n                f\"Modifying GeneratedFields is not supported - the field {new_field} \"\n                \"must be removed and re-added with the new definition.\"\n            )\n\n        self._alter_field(\n            model,\n            old_field,\n            new_field,\n            old_type,\n            new_type,\n            old_db_params,\n            new_db_params,\n            strict,\n        )\n\n    def _field_db_check(self, field, field_db_params):\n        # Always check constraints with the same mocked column name to avoid\n        # recreating constrains when the column is renamed.\n        check_constraints = self.connection.data_type_check_constraints\n        data = field.db_type_parameters(self.connection)\n        data[\"column\"] = \"__column_name__\"\n        try:\n            return check_constraints[field.get_internal_type()] % data\n        except KeyError:\n            return None\n\n    def _alter_field(\n        self,\n        model,\n        old_field,\n        new_field,\n        old_type,\n        new_type,\n        old_db_params,\n        new_db_params,\n        strict=False,\n    ):\n        \"\"\"Perform a \"physical\" (non-ManyToMany) field update.\"\"\"\n        # Drop any FK constraints, we'll remake them later\n        fks_dropped = set()\n        if (\n            self.connection.features.supports_foreign_keys\n            and old_field.remote_field\n            and old_field.db_constraint\n            and self._field_should_be_altered(\n                old_field,\n                new_field,\n                ignore={\"db_comment\"},\n            )\n        ):\n            fk_names = self._constraint_names(\n                model, [old_field.column], foreign_key=True\n            )\n            if strict and len(fk_names) != 1:\n                raise ValueError(\n                    \"Found wrong number (%s) of foreign key constraints for %s.%s\"\n                    % (\n                        len(fk_names),\n                        model._meta.db_table,\n                        old_field.column,\n                    )\n                )\n            for fk_name in fk_names:\n                fks_dropped.add((old_field.column,))\n                self.execute(self._delete_fk_sql(model, fk_name))\n        # Has unique been removed?\n        if old_field.unique and (\n            not new_field.unique or self._field_became_primary_key(old_field, new_field)\n        ):\n            # Find the unique constraint for this field\n            meta_constraint_names = {\n                constraint.name for constraint in model._meta.constraints\n            }\n            constraint_names = self._constraint_names(\n                model,\n                [old_field.column],\n                unique=True,\n                primary_key=False,\n                exclude=meta_constraint_names,\n            )\n            if strict and len(constraint_names) != 1:\n                raise ValueError(\n                    \"Found wrong number (%s) of unique constraints for %s.%s\"\n                    % (\n                        len(constraint_names),\n                        model._meta.db_table,\n                        old_field.column,\n                    )\n                )\n            for constraint_name in constraint_names:\n                self.execute(self._delete_unique_sql(model, constraint_name))\n        # Drop incoming FK constraints if the field is a primary key or unique,\n        # which might be a to_field target, and things are going to change.\n        old_collation = old_db_params.get(\"collation\")\n        new_collation = new_db_params.get(\"collation\")\n        drop_foreign_keys = (\n            self.connection.features.supports_foreign_keys\n            and (\n                (old_field.primary_key and new_field.primary_key)\n                or (old_field.unique and new_field.unique)\n            )\n            and ((old_type != new_type) or (old_collation != new_collation))\n        )\n        if drop_foreign_keys:\n            # '_meta.related_field' also contains M2M reverse fields, these\n            # will be filtered out\n            for _old_rel, new_rel in _related_non_m2m_objects(old_field, new_field):\n                rel_fk_names = self._constraint_names(\n                    new_rel.related_model, [new_rel.field.column], foreign_key=True\n                )\n                for fk_name in rel_fk_names:\n                    self.execute(self._delete_fk_sql(new_rel.related_model, fk_name))\n        # Removed an index? (no strict check, as multiple indexes are possible)\n        # Remove indexes if db_index switched to False or a unique constraint\n        # will now be used in lieu of an index. The following lines from the\n        # truth table show all True cases; the rest are False:\n        #\n        # old_field.db_index | old_field.unique | new_field.db_index | new_field.unique\n        # ------------------------------------------------------------------------------\n        # True               | False            | False              | False\n        # True               | False            | False              | True\n        # True               | False            | True               | True\n        if (\n            old_field.db_index\n            and not old_field.unique\n            and (not new_field.db_index or new_field.unique)\n        ):\n            # Find the index for this field\n            meta_index_names = {index.name for index in model._meta.indexes}\n            # Retrieve only BTREE indexes since this is what's created with\n            # db_index=True.\n            index_names = self._constraint_names(\n                model,\n                [old_field.column],\n                index=True,\n                type_=Index.suffix,\n                exclude=meta_index_names,\n            )\n            for index_name in index_names:\n                # The only way to check if an index was created with\n                # db_index=True or with Index(['field'], name='foo')\n                # is to look at its name (refs #28053).\n                self.execute(self._delete_index_sql(model, index_name))\n        # Change check constraints?\n        old_db_check = self._field_db_check(old_field, old_db_params)\n        new_db_check = self._field_db_check(new_field, new_db_params)\n        if old_db_check != new_db_check and old_db_check:\n            meta_constraint_names = {\n                constraint.name for constraint in model._meta.constraints\n            }\n            constraint_names = self._constraint_names(\n                model,\n                [old_field.column],\n                check=True,\n                exclude=meta_constraint_names,\n            )\n            if strict and len(constraint_names) != 1:\n                raise ValueError(\n                    \"Found wrong number (%s) of check constraints for %s.%s\"\n                    % (\n                        len(constraint_names),\n                        model._meta.db_table,\n                        old_field.column,\n                    )\n                )\n            for constraint_name in constraint_names:\n                self.execute(self._delete_check_sql(model, constraint_name))\n        # Have they renamed the column?\n        if old_field.column != new_field.column:\n            self.execute(\n                self._rename_field_sql(\n                    model._meta.db_table, old_field, new_field, new_type\n                )\n            )\n            # Rename all references to the renamed column.\n            for sql in self.deferred_sql:\n                if isinstance(sql, Statement):\n                    sql.rename_column_references(\n                        model._meta.db_table, old_field.column, new_field.column\n                    )\n        # Next, start accumulating actions to do\n        actions = []\n        null_actions = []\n        post_actions = []\n        # Type suffix change? (e.g. auto increment).\n        old_type_suffix = old_field.db_type_suffix(connection=self.connection)\n        new_type_suffix = new_field.db_type_suffix(connection=self.connection)\n        # Type, collation, or comment change?\n        if (\n            old_type != new_type\n            or old_type_suffix != new_type_suffix\n            or old_collation != new_collation\n            or (\n                self.connection.features.supports_comments\n                and old_field.db_comment != new_field.db_comment\n            )\n        ):\n            fragment, other_actions = self._alter_column_type_sql(\n                model, old_field, new_field, new_type, old_collation, new_collation\n            )\n            actions.append(fragment)\n            post_actions.extend(other_actions)\n\n        if new_field.has_db_default():\n            if (\n                not old_field.has_db_default()\n                or new_field.db_default != old_field.db_default\n            ):\n                actions.append(\n                    self._alter_column_database_default_sql(model, old_field, new_field)\n                )\n        elif old_field.has_db_default():\n            actions.append(\n                self._alter_column_database_default_sql(\n                    model, old_field, new_field, drop=True\n                )\n            )\n        # When changing a column NULL constraint to NOT NULL with a given\n        # default value, we need to perform 4 steps:\n        #  1. Add a default for new incoming writes\n        #  2. Update existing NULL rows with new default\n        #  3. Replace NULL constraint with NOT NULL\n        #  4. Drop the default again.\n        # Default change?\n        needs_database_default = False\n        if old_field.null and not new_field.null and not new_field.has_db_default():\n            old_default = self.effective_default(old_field)\n            new_default = self.effective_default(new_field)\n            if (\n                not self.skip_default_on_alter(new_field)\n                and old_default != new_default\n                and new_default is not None\n            ):\n                needs_database_default = True\n                actions.append(\n                    self._alter_column_default_sql(model, old_field, new_field)\n                )\n        # Nullability change?\n        if old_field.null != new_field.null:\n            fragment = self._alter_column_null_sql(model, old_field, new_field)\n            if fragment:\n                null_actions.append(fragment)\n        # Only if we have a default and there is a change from NULL to NOT NULL\n        four_way_default_alteration = (\n            new_field.has_default() or new_field.has_db_default()\n        ) and (old_field.null and not new_field.null)\n        if actions or null_actions:\n            if not four_way_default_alteration:\n                # If we don't have to do a 4-way default alteration we can\n                # directly run a (NOT) NULL alteration\n                actions += null_actions\n            # Combine actions together if we can (e.g. postgres)\n            if self.connection.features.supports_combined_alters and actions:\n                sql, params = tuple(zip(*actions))\n                actions = [(\", \".join(sql), sum(params, []))]\n            # Apply those actions\n            for sql, params in actions:\n                self.execute(\n                    self.sql_alter_column\n                    % {\n                        \"table\": self.quote_name(model._meta.db_table),\n                        \"changes\": sql,\n                    },\n                    params,\n                )\n            if four_way_default_alteration:\n                if not new_field.has_db_default():\n                    default_sql = \"%s\"\n                    params = [new_default]\n                else:\n                    default_sql, params = self.db_default_sql(new_field)\n                # Update existing rows with default value\n                self.execute(\n                    self.sql_update_with_default\n                    % {\n                        \"table\": self.quote_name(model._meta.db_table),\n                        \"column\": self.quote_name(new_field.column),\n                        \"default\": default_sql,\n                    },\n                    params,\n                )\n                # Since we didn't run a NOT NULL change before we need to do it\n                # now\n                for sql, params in null_actions:\n                    self.execute(\n                        self.sql_alter_column\n                        % {\n                            \"table\": self.quote_name(model._meta.db_table),\n                            \"changes\": sql,\n                        },\n                        params,\n                    )\n        if post_actions:\n            for sql, params in post_actions:\n                self.execute(sql, params)\n        # If primary_key changed to False, delete the primary key constraint.\n        if old_field.primary_key and not new_field.primary_key:\n            self._delete_primary_key(model, strict)\n        # Added a unique?\n        if self._unique_should_be_added(old_field, new_field):\n            self.execute(self._create_unique_sql(model, [new_field]))\n        # Added an index? Add an index if db_index switched to True or a unique\n        # constraint will no longer be used in lieu of an index. The following\n        # lines from the truth table show all True cases; the rest are False:\n        #\n        # old_field.db_index | old_field.unique | new_field.db_index | new_field.unique\n        # ------------------------------------------------------------------------------\n        # False              | False            | True               | False\n        # False              | True             | True               | False\n        # True               | True             | True               | False\n        if (\n            (not old_field.db_index or old_field.unique)\n            and new_field.db_index\n            and not new_field.unique\n        ):\n            self.execute(self._create_index_sql(model, fields=[new_field]))\n        # Type alteration on primary key? Then we need to alter the column\n        # referring to us.\n        rels_to_update = []\n        if drop_foreign_keys:\n            rels_to_update.extend(_related_non_m2m_objects(old_field, new_field))\n        # Changed to become primary key?\n        if self._field_became_primary_key(old_field, new_field):\n            # Make the new one\n            self.execute(self._create_primary_key_sql(model, new_field))\n            # Update all referencing columns\n            rels_to_update.extend(_related_non_m2m_objects(old_field, new_field))\n        # Handle our type alters on the other end of rels from the PK stuff above\n        for old_rel, new_rel in rels_to_update:\n            rel_db_params = new_rel.field.db_parameters(connection=self.connection)\n            rel_type = rel_db_params[\"type\"]\n            rel_collation = rel_db_params.get(\"collation\")\n            old_rel_db_params = old_rel.field.db_parameters(connection=self.connection)\n            old_rel_collation = old_rel_db_params.get(\"collation\")\n            fragment, other_actions = self._alter_column_type_sql(\n                new_rel.related_model,\n                old_rel.field,\n                new_rel.field,\n                rel_type,\n                old_rel_collation,\n                rel_collation,\n            )\n            self.execute(\n                self.sql_alter_column\n                % {\n                    \"table\": self.quote_name(new_rel.related_model._meta.db_table),\n                    \"changes\": fragment[0],\n                },\n                fragment[1],\n            )\n            for sql, params in other_actions:\n                self.execute(sql, params)\n        # Does it have a foreign key?\n        if (\n            self.connection.features.supports_foreign_keys\n            and new_field.remote_field\n            and (\n                fks_dropped or not old_field.remote_field or not old_field.db_constraint\n            )\n            and new_field.db_constraint\n        ):\n            self.execute(\n                self._create_fk_sql(model, new_field, \"_fk_%(to_table)s_%(to_column)s\")\n            )\n        # Rebuild FKs that pointed to us if we previously had to drop them\n        if drop_foreign_keys:\n            for _, rel in rels_to_update:\n                if rel.field.db_constraint:\n                    self.execute(\n                        self._create_fk_sql(rel.related_model, rel.field, \"_fk\")\n                    )\n        # Does it have check constraints we need to add?\n        if old_db_check != new_db_check and new_db_check:\n            constraint_name = self._create_index_name(\n                model._meta.db_table, [new_field.column], suffix=\"_check\"\n            )\n            self.execute(\n                self._create_check_sql(model, constraint_name, new_db_params[\"check\"])\n            )\n        # Drop the default if we need to\n        # (Django usually does not use in-database defaults)\n        if needs_database_default:\n            changes_sql, params = self._alter_column_default_sql(\n                model, old_field, new_field, drop=True\n            )\n            sql = self.sql_alter_column % {\n                \"table\": self.quote_name(model._meta.db_table),\n                \"changes\": changes_sql,\n            }\n            self.execute(sql, params)\n        # Reset connection if required\n        if self.connection.features.connection_persists_old_columns:\n            self.connection.close()\n\n    def _alter_column_null_sql(self, model, old_field, new_field):\n        \"\"\"\n        Hook to specialize column null alteration.\n\n        Return a (sql, params) fragment to set a column to null or non-null\n        as required by new_field, or None if no changes are required.\n        \"\"\"\n        if (\n            self.connection.features.interprets_empty_strings_as_nulls\n            and new_field.empty_strings_allowed\n        ):\n            # The field is nullable in the database anyway, leave it alone.\n            return\n        else:\n            new_db_params = new_field.db_parameters(connection=self.connection)\n            sql = (\n                self.sql_alter_column_null\n                if new_field.null\n                else self.sql_alter_column_not_null\n            )\n            return (\n                sql\n                % {\n                    \"column\": self.quote_name(new_field.column),\n                    \"type\": new_db_params[\"type\"],\n                },\n                [],\n            )\n\n    def _alter_column_default_sql(self, model, old_field, new_field, drop=False):\n        \"\"\"\n        Hook to specialize column default alteration.\n\n        Return a (sql, params) fragment to add or drop (depending on the drop\n        argument) a default to new_field's column.\n        \"\"\"\n        new_default = self.effective_default(new_field)\n        default = self._column_default_sql(new_field)\n        params = [new_default]\n\n        if drop:\n            params = []\n        elif self.connection.features.requires_literal_defaults:\n            # Some databases (Oracle) can't take defaults as a parameter\n            # If this is the case, the SchemaEditor for that database should\n            # implement prepare_default().\n            default = self.prepare_default(new_default)\n            params = []\n\n        new_db_params = new_field.db_parameters(connection=self.connection)\n        if drop:\n            if new_field.null:\n                sql = self.sql_alter_column_no_default_null\n            else:\n                sql = self.sql_alter_column_no_default\n        else:\n            sql = self.sql_alter_column_default\n        return (\n            sql\n            % {\n                \"column\": self.quote_name(new_field.column),\n                \"type\": new_db_params[\"type\"],\n                \"default\": default,\n            },\n            params,\n        )\n\n    def _alter_column_database_default_sql(\n        self, model, old_field, new_field, drop=False\n    ):\n        \"\"\"\n        Hook to specialize column database default alteration.\n\n        Return a (sql, params) fragment to add or drop (depending on the drop\n        argument) a default to new_field's column.\n        \"\"\"\n        if drop:\n            sql = self.sql_alter_column_no_default\n            default_sql = \"\"\n            params = []\n        else:\n            sql = self.sql_alter_column_default\n            default_sql, params = self.db_default_sql(new_field)\n\n        new_db_params = new_field.db_parameters(connection=self.connection)\n        return (\n            sql\n            % {\n                \"column\": self.quote_name(new_field.column),\n                \"type\": new_db_params[\"type\"],\n                \"default\": default_sql,\n            },\n            params,\n        )\n\n    def _alter_column_type_sql(\n        self, model, old_field, new_field, new_type, old_collation, new_collation\n    ):\n        \"\"\"\n        Hook to specialize column type alteration for different backends,\n        for cases when a creation type is different to an alteration type\n        (e.g. SERIAL in PostgreSQL, PostGIS fields).\n\n        Return a 2-tuple of: an SQL fragment of (sql, params) to insert into\n        an ALTER TABLE statement and a list of extra (sql, params) tuples to\n        run once the field is altered.\n        \"\"\"\n        other_actions = []\n        if collate_sql := self._collate_sql(\n            new_collation, old_collation, model._meta.db_table\n        ):\n            collate_sql = f\" {collate_sql}\"\n        else:\n            collate_sql = \"\"\n        # Comment change?\n        comment_sql = \"\"\n        if self.connection.features.supports_comments and not new_field.many_to_many:\n            if old_field.db_comment != new_field.db_comment:\n                # PostgreSQL and Oracle can't execute 'ALTER COLUMN ...' and\n                # 'COMMENT ON ...' at the same time.\n                sql, params = self._alter_column_comment_sql(\n                    model, new_field, new_type, new_field.db_comment\n                )\n                if sql:\n                    other_actions.append((sql, params))\n            if new_field.db_comment:\n                comment_sql = self._comment_sql(new_field.db_comment)\n        return (\n            (\n                self.sql_alter_column_type\n                % {\n                    \"column\": self.quote_name(new_field.column),\n                    \"type\": new_type,\n                    \"collation\": collate_sql,\n                    \"comment\": comment_sql,\n                },\n                [],\n            ),\n            other_actions,\n        )\n\n    def _alter_column_comment_sql(self, model, new_field, new_type, new_db_comment):\n        return (\n            self.sql_alter_column_comment\n            % {\n                \"table\": self.quote_name(model._meta.db_table),\n                \"column\": self.quote_name(new_field.column),\n                \"comment\": self._comment_sql(new_db_comment),\n            },\n            [],\n        )\n\n    def _comment_sql(self, comment):\n        return self.quote_value(comment or \"\")\n\n    def _alter_many_to_many(self, model, old_field, new_field, strict):\n        \"\"\"Alter M2Ms to repoint their to= endpoints.\"\"\"\n        # Rename the through table\n        if (\n            old_field.remote_field.through._meta.db_table\n            != new_field.remote_field.through._meta.db_table\n        ):\n            self.alter_db_table(\n                old_field.remote_field.through,\n                old_field.remote_field.through._meta.db_table,\n                new_field.remote_field.through._meta.db_table,\n            )\n        # Repoint the FK to the other side\n        self.alter_field(\n            new_field.remote_field.through,\n            # The field that points to the target model is needed, so we can\n            # tell alter_field to change it - this is m2m_reverse_field_name()\n            # (as opposed to m2m_field_name(), which points to our model).\n            old_field.remote_field.through._meta.get_field(\n                old_field.m2m_reverse_field_name()\n            ),\n            new_field.remote_field.through._meta.get_field(\n                new_field.m2m_reverse_field_name()\n            ),\n        )\n        self.alter_field(\n            new_field.remote_field.through,\n            # for self-referential models we need to alter field from the other end too\n            old_field.remote_field.through._meta.get_field(old_field.m2m_field_name()),\n            new_field.remote_field.through._meta.get_field(new_field.m2m_field_name()),\n        )\n\n    def _create_index_name(self, table_name, column_names, suffix=\"\"):\n        \"\"\"\n        Generate a unique name for an index/unique constraint.\n\n        The name is divided into 3 parts: the table name, the column names,\n        and a unique digest and suffix.\n        \"\"\"\n        _, table_name = split_identifier(table_name)\n        hash_suffix_part = \"%s%s\" % (\n            names_digest(table_name, *column_names, length=8),\n            suffix,\n        )\n        max_length = self.connection.ops.max_name_length() or 200\n        # If everything fits into max_length, use that name.\n        index_name = \"%s_%s_%s\" % (table_name, \"_\".join(column_names), hash_suffix_part)\n        if len(index_name) <= max_length:\n            return index_name\n        # Shorten a long suffix.\n        if len(hash_suffix_part) > max_length / 3:\n            hash_suffix_part = hash_suffix_part[: max_length // 3]\n        other_length = (max_length - len(hash_suffix_part)) // 2 - 1\n        index_name = \"%s_%s_%s\" % (\n            table_name[:other_length],\n            \"_\".join(column_names)[:other_length],\n            hash_suffix_part,\n        )\n        # Prepend D if needed to prevent the name from starting with an\n        # underscore or a number (not permitted on Oracle).\n        if index_name[0] == \"_\" or index_name[0].isdigit():\n            index_name = \"D%s\" % index_name[:-1]\n        return index_name\n\n    def _get_index_tablespace_sql(self, model, fields, db_tablespace=None):\n        if db_tablespace is None:\n            if len(fields) == 1 and fields[0].db_tablespace:\n                db_tablespace = fields[0].db_tablespace\n            elif settings.DEFAULT_INDEX_TABLESPACE:\n                db_tablespace = settings.DEFAULT_INDEX_TABLESPACE\n            elif model._meta.db_tablespace:\n                db_tablespace = model._meta.db_tablespace\n        if db_tablespace is not None:\n            return \" \" + self.connection.ops.tablespace_sql(db_tablespace)\n        return \"\"\n\n    def _index_condition_sql(self, condition):\n        if condition:\n            return \" WHERE \" + condition\n        return \"\"\n\n    def _index_include_sql(self, model, columns):\n        if not columns or not self.connection.features.supports_covering_indexes:\n            return \"\"\n        return Statement(\n            \" INCLUDE (%(columns)s)\",\n            columns=Columns(model._meta.db_table, columns, self.quote_name),\n        )\n\n    def _create_index_sql(\n        self,\n        model,\n        *,\n        fields=None,\n        name=None,\n        suffix=\"\",\n        using=\"\",\n        db_tablespace=None,\n        col_suffixes=(),\n        sql=None,\n        opclasses=(),\n        condition=None,\n        include=None,\n        expressions=None,\n    ):\n        \"\"\"\n        Return the SQL statement to create the index for one or several fields\n        or expressions. `sql` can be specified if the syntax differs from the\n        standard (GIS indexes, ...).\n        \"\"\"\n        fields = fields or []\n        expressions = expressions or []\n        compiler = Query(model, alias_cols=False).get_compiler(\n            connection=self.connection,\n        )\n        tablespace_sql = self._get_index_tablespace_sql(\n            model, fields, db_tablespace=db_tablespace\n        )\n        columns = [field.column for field in fields]\n        sql_create_index = sql or self.sql_create_index\n        table = model._meta.db_table\n\n        def create_index_name(*args, **kwargs):\n            nonlocal name\n            if name is None:\n                name = self._create_index_name(*args, **kwargs)\n            return self.quote_name(name)\n\n        return Statement(\n            sql_create_index,\n            table=Table(table, self.quote_name),\n            name=IndexName(table, columns, suffix, create_index_name),\n            using=using,\n            columns=(\n                self._index_columns(table, columns, col_suffixes, opclasses)\n                if columns\n                else Expressions(table, expressions, compiler, self.quote_value)\n            ),\n            extra=tablespace_sql,\n            condition=self._index_condition_sql(condition),\n            include=self._index_include_sql(model, include),\n        )\n\n    def _delete_index_sql(self, model, name, sql=None):\n        statement = Statement(\n            sql or self.sql_delete_index,\n            table=Table(model._meta.db_table, self.quote_name),\n            name=self.quote_name(name),\n        )\n\n        # Remove all deferred statements referencing the deleted index.\n        table_name = statement.parts[\"table\"].table\n        index_name = statement.parts[\"name\"]\n        for sql in list(self.deferred_sql):\n            if isinstance(sql, Statement) and sql.references_index(\n                table_name, index_name\n            ):\n                self.deferred_sql.remove(sql)\n\n        return statement\n\n    def _rename_index_sql(self, model, old_name, new_name):\n        return Statement(\n            self.sql_rename_index,\n            table=Table(model._meta.db_table, self.quote_name),\n            old_name=self.quote_name(old_name),\n            new_name=self.quote_name(new_name),\n        )\n\n    def _index_columns(self, table, columns, col_suffixes, opclasses):\n        return Columns(table, columns, self.quote_name, col_suffixes=col_suffixes)\n\n    def _model_indexes_sql(self, model):\n        \"\"\"\n        Return a list of all index SQL statements (field indexes, Meta.indexes)\n        for the specified model.\n        \"\"\"\n        if not model._meta.managed or model._meta.proxy or model._meta.swapped:\n            return []\n        output = []\n        for field in model._meta.local_fields:\n            output.extend(self._field_indexes_sql(model, field))\n\n        for index in model._meta.indexes:\n            if (\n                not index.contains_expressions\n                or self.connection.features.supports_expression_indexes\n            ):\n                output.append(index.create_sql(model, self))\n        return output\n\n    def _field_indexes_sql(self, model, field):\n        \"\"\"\n        Return a list of all index SQL statements for the specified field.\n        \"\"\"\n        output = []\n        if self._field_should_be_indexed(model, field):\n            output.append(self._create_index_sql(model, fields=[field]))\n        return output\n\n    def _field_should_be_altered(self, old_field, new_field, ignore=None):\n        if not old_field.concrete and not new_field.concrete:\n            return False\n        ignore = ignore or set()\n        _, old_path, old_args, old_kwargs = old_field.deconstruct()\n        _, new_path, new_args, new_kwargs = new_field.deconstruct()\n        # Don't alter when:\n        # - changing only a field name\n        # - changing an attribute that doesn't affect the schema\n        # - changing an attribute in the provided set of ignored attributes\n        # - adding only a db_column and the column name is not changed\n        # - db_table does not change for model referenced by foreign keys\n        for attr in ignore.union(old_field.non_db_attrs):\n            old_kwargs.pop(attr, None)\n        for attr in ignore.union(new_field.non_db_attrs):\n            new_kwargs.pop(attr, None)\n        if (\n            not new_field.many_to_many\n            and old_field.remote_field\n            and new_field.remote_field\n            and old_field.remote_field.model._meta.db_table\n            == new_field.remote_field.model._meta.db_table\n        ):\n            old_kwargs.pop(\"to\", None)\n            new_kwargs.pop(\"to\", None)\n        # db_default can take many form but result in the same SQL.\n        if (\n            old_kwargs.get(\"db_default\")\n            and new_kwargs.get(\"db_default\")\n            and self.db_default_sql(old_field) == self.db_default_sql(new_field)\n        ):\n            old_kwargs.pop(\"db_default\")\n            new_kwargs.pop(\"db_default\")\n        return self.quote_name(old_field.column) != self.quote_name(\n            new_field.column\n        ) or (old_path, old_args, old_kwargs) != (new_path, new_args, new_kwargs)\n\n    def _field_should_be_indexed(self, model, field):\n        return field.db_index and not field.unique\n\n    def _field_became_primary_key(self, old_field, new_field):\n        return not old_field.primary_key and new_field.primary_key\n\n    def _unique_should_be_added(self, old_field, new_field):\n        return (\n            not new_field.primary_key\n            and new_field.unique\n            and (not old_field.unique or old_field.primary_key)\n        )\n\n    def _rename_field_sql(self, table, old_field, new_field, new_type):\n        return self.sql_rename_column % {\n            \"table\": self.quote_name(table),\n            \"old_column\": self.quote_name(old_field.column),\n            \"new_column\": self.quote_name(new_field.column),\n            \"type\": new_type,\n        }\n\n    def _create_fk_sql(self, model, field, suffix):\n        table = Table(model._meta.db_table, self.quote_name)\n        name = self._fk_constraint_name(model, field, suffix)\n        column = Columns(model._meta.db_table, [field.column], self.quote_name)\n        to_table = Table(field.target_field.model._meta.db_table, self.quote_name)\n        to_column = Columns(\n            field.target_field.model._meta.db_table,\n            [field.target_field.column],\n            self.quote_name,\n        )\n        deferrable = self.connection.ops.deferrable_sql()\n        return Statement(\n            self.sql_create_fk,\n            table=table,\n            name=name,\n            column=column,\n            to_table=to_table,\n            to_column=to_column,\n            deferrable=deferrable,\n        )\n\n    def _fk_constraint_name(self, model, field, suffix):\n        def create_fk_name(*args, **kwargs):\n            return self.quote_name(self._create_index_name(*args, **kwargs))\n\n        return ForeignKeyName(\n            model._meta.db_table,\n            [field.column],\n            split_identifier(field.target_field.model._meta.db_table)[1],\n            [field.target_field.column],\n            suffix,\n            create_fk_name,\n        )\n\n    def _delete_fk_sql(self, model, name):\n        return self._delete_constraint_sql(self.sql_delete_fk, model, name)\n\n    def _deferrable_constraint_sql(self, deferrable):\n        if deferrable is None:\n            return \"\"\n        if deferrable == Deferrable.DEFERRED:\n            return \" DEFERRABLE INITIALLY DEFERRED\"\n        if deferrable == Deferrable.IMMEDIATE:\n            return \" DEFERRABLE INITIALLY IMMEDIATE\"\n\n    def _unique_index_nulls_distinct_sql(self, nulls_distinct):\n        if nulls_distinct is False:\n            return \" NULLS NOT DISTINCT\"\n        elif nulls_distinct is True:\n            return \" NULLS DISTINCT\"\n        return \"\"\n\n    def _unique_supported(\n        self,\n        condition=None,\n        deferrable=None,\n        include=None,\n        expressions=None,\n        nulls_distinct=None,\n    ):\n        return (\n            (not condition or self.connection.features.supports_partial_indexes)\n            and (\n                not deferrable\n                or self.connection.features.supports_deferrable_unique_constraints\n            )\n            and (not include or self.connection.features.supports_covering_indexes)\n            and (\n                not expressions or self.connection.features.supports_expression_indexes\n            )\n            and (\n                nulls_distinct is None\n                or self.connection.features.supports_nulls_distinct_unique_constraints\n            )\n        )\n\n    def _unique_sql(\n        self,\n        model,\n        fields,\n        name,\n        condition=None,\n        deferrable=None,\n        include=None,\n        opclasses=None,\n        expressions=None,\n        nulls_distinct=None,\n    ):\n        if not self._unique_supported(\n            condition=condition,\n            deferrable=deferrable,\n            include=include,\n            expressions=expressions,\n            nulls_distinct=nulls_distinct,\n        ):\n            return None\n\n        if (\n            condition\n            or include\n            or opclasses\n            or expressions\n            or nulls_distinct is not None\n        ):\n            # Databases support conditional, covering, functional unique,\n            # and nulls distinct constraints via a unique index.\n            sql = self._create_unique_sql(\n                model,\n                fields,\n                name=name,\n                condition=condition,\n                include=include,\n                opclasses=opclasses,\n                expressions=expressions,\n                nulls_distinct=nulls_distinct,\n            )\n            if sql:\n                self.deferred_sql.append(sql)\n            return None\n        constraint = self.sql_unique_constraint % {\n            \"columns\": \", \".join([self.quote_name(field.column) for field in fields]),\n            \"deferrable\": self._deferrable_constraint_sql(deferrable),\n        }\n        return self.sql_constraint % {\n            \"name\": self.quote_name(name),\n            \"constraint\": constraint,\n        }\n\n    def _create_unique_sql(\n        self,\n        model,\n        fields,\n        name=None,\n        condition=None,\n        deferrable=None,\n        include=None,\n        opclasses=None,\n        expressions=None,\n        nulls_distinct=None,\n    ):\n        if not self._unique_supported(\n            condition=condition,\n            deferrable=deferrable,\n            include=include,\n            expressions=expressions,\n            nulls_distinct=nulls_distinct,\n        ):\n            return None\n\n        compiler = Query(model, alias_cols=False).get_compiler(\n            connection=self.connection\n        )\n        table = model._meta.db_table\n        columns = [field.column for field in fields]\n        if name is None:\n            name = self._unique_constraint_name(table, columns, quote=True)\n        else:\n            name = self.quote_name(name)\n        if condition or include or opclasses or expressions:\n            sql = self.sql_create_unique_index\n        else:\n            sql = self.sql_create_unique\n        if columns:\n            columns = self._index_columns(\n                table, columns, col_suffixes=(), opclasses=opclasses\n            )\n        else:\n            columns = Expressions(table, expressions, compiler, self.quote_value)\n        return Statement(\n            sql,\n            table=Table(table, self.quote_name),\n            name=name,\n            columns=columns,\n            condition=self._index_condition_sql(condition),\n            deferrable=self._deferrable_constraint_sql(deferrable),\n            include=self._index_include_sql(model, include),\n            nulls_distinct=self._unique_index_nulls_distinct_sql(nulls_distinct),\n        )\n\n    def _unique_constraint_name(self, table, columns, quote=True):\n        if quote:\n\n            def create_unique_name(*args, **kwargs):\n                return self.quote_name(self._create_index_name(*args, **kwargs))\n\n        else:\n            create_unique_name = self._create_index_name\n\n        return IndexName(table, columns, \"_uniq\", create_unique_name)\n\n    def _delete_unique_sql(\n        self,\n        model,\n        name,\n        condition=None,\n        deferrable=None,\n        include=None,\n        opclasses=None,\n        expressions=None,\n        nulls_distinct=None,\n    ):\n        if not self._unique_supported(\n            condition=condition,\n            deferrable=deferrable,\n            include=include,\n            expressions=expressions,\n            nulls_distinct=nulls_distinct,\n        ):\n            return None\n        if condition or include or opclasses or expressions:\n            sql = self.sql_delete_index\n        else:\n            sql = self.sql_delete_unique\n        return self._delete_constraint_sql(sql, model, name)\n\n    def _check_sql(self, name, check):\n        return self.sql_constraint % {\n            \"name\": self.quote_name(name),\n            \"constraint\": self.sql_check_constraint % {\"check\": check},\n        }\n\n    def _create_check_sql(self, model, name, check):\n        if not self.connection.features.supports_table_check_constraints:\n            return None\n        return Statement(\n            self.sql_create_check,\n            table=Table(model._meta.db_table, self.quote_name),\n            name=self.quote_name(name),\n            check=check,\n        )\n\n    def _delete_check_sql(self, model, name):\n        if not self.connection.features.supports_table_check_constraints:\n            return None\n        return self._delete_constraint_sql(self.sql_delete_check, model, name)\n\n    def _delete_constraint_sql(self, template, model, name):\n        return Statement(\n            template,\n            table=Table(model._meta.db_table, self.quote_name),\n            name=self.quote_name(name),\n        )\n\n    def _constraint_names(\n        self,\n        model,\n        column_names=None,\n        unique=None,\n        primary_key=None,\n        index=None,\n        foreign_key=None,\n        check=None,\n        type_=None,\n        exclude=None,\n    ):\n        \"\"\"Return all constraint names matching the columns and conditions.\"\"\"\n        if column_names is not None:\n            column_names = [\n                (\n                    self.connection.introspection.identifier_converter(\n                        truncate_name(name, self.connection.ops.max_name_length())\n                    )\n                    if self.connection.features.truncates_names\n                    else self.connection.introspection.identifier_converter(name)\n                )\n                for name in column_names\n            ]\n        with self.connection.cursor() as cursor:\n            constraints = self.connection.introspection.get_constraints(\n                cursor, model._meta.db_table\n            )\n        result = []\n        for name, infodict in constraints.items():\n            if column_names is None or column_names == infodict[\"columns\"]:\n                if unique is not None and infodict[\"unique\"] != unique:\n                    continue\n                if primary_key is not None and infodict[\"primary_key\"] != primary_key:\n                    continue\n                if index is not None and infodict[\"index\"] != index:\n                    continue\n                if check is not None and infodict[\"check\"] != check:\n                    continue\n                if foreign_key is not None and not infodict[\"foreign_key\"]:\n                    continue\n                if type_ is not None and infodict[\"type\"] != type_:\n                    continue\n                if not exclude or name not in exclude:\n                    result.append(name)\n        return result\n\n    def _pk_constraint_sql(self, columns):\n        return self.sql_pk_constraint % {\n            \"columns\": \", \".join(self.quote_name(column) for column in columns)\n        }\n\n    def _delete_primary_key(self, model, strict=False):\n        constraint_names = self._constraint_names(model, primary_key=True)\n        if strict and len(constraint_names) != 1:\n            raise ValueError(\n                \"Found wrong number (%s) of PK constraints for %s\"\n                % (\n                    len(constraint_names),\n                    model._meta.db_table,\n                )\n            )\n        for constraint_name in constraint_names:\n            self.execute(self._delete_primary_key_sql(model, constraint_name))\n\n    def _create_primary_key_sql(self, model, field):\n        return Statement(\n            self.sql_create_pk,\n            table=Table(model._meta.db_table, self.quote_name),\n            name=self.quote_name(\n                self._create_index_name(\n                    model._meta.db_table, [field.column], suffix=\"_pk\"\n                )\n            ),\n            columns=Columns(model._meta.db_table, [field.column], self.quote_name),\n        )\n\n    def _delete_primary_key_sql(self, model, name):\n        return self._delete_constraint_sql(self.sql_delete_pk, model, name)\n\n    def _collate_sql(self, collation, old_collation=None, table_name=None):\n        return \"COLLATE \" + self.quote_name(collation) if collation else \"\"\n\n    def remove_procedure(self, procedure_name, param_types=()):\n        sql = self.sql_delete_procedure % {\n            \"procedure\": self.quote_name(procedure_name),\n            \"param_types\": \",\".join(param_types),\n        }\n        self.execute(sql)"},{"start_line":1843,"end_line":1892,"belongs_to":{"file_name":"schema.py","upper_path":"../django/django/db/backends/base","module":"base","define_class":["BaseDatabaseSchemaEditor"],"imports":["logging","operator","datetime.datetime","django.conf.settings","django.core.exceptions.FieldError","django.db.backends.ddl_references.Columns","django.db.backends.ddl_references.Expressions","django.db.backends.ddl_references.ForeignKeyName","django.db.backends.ddl_references.IndexName","django.db.backends.ddl_references.Statement","django.db.backends.ddl_references.Table","django.db.backends.utils.names_digest","django.db.backends.utils.split_identifier","django.db.backends.utils.truncate_name","django.db.models.Deferrable","django.db.models.Index","django.db.models.fields.composite.CompositePrimaryKey","django.db.models.sql.Query","django.db.transaction.TransactionManagementError","django.db.transaction.atomic","django.utils.timezone","django.db.models.expressions.Value"]},"relative_function":[],"code":"def _create_unique_sql(\n        self,\n        model,\n        fields,\n        name=None,\n        condition=None,\n        deferrable=None,\n        include=None,\n        opclasses=None,\n        expressions=None,\n        nulls_distinct=None,\n    ):\n        if not self._unique_supported(\n            condition=condition,\n            deferrable=deferrable,\n            include=include,\n            expressions=expressions,\n            nulls_distinct=nulls_distinct,\n        ):\n            return None\n\n        compiler = Query(model, alias_cols=False).get_compiler(\n            connection=self.connection\n        )\n        table = model._meta.db_table\n        columns = [field.column for field in fields]\n        if name is None:\n            name = self._unique_constraint_name(table, columns, quote=True)\n        else:\n            name = self.quote_name(name)\n        if condition or include or opclasses or expressions:\n            sql = self.sql_create_unique_index\n        else:\n            sql = self.sql_create_unique\n        if columns:\n            columns = self._index_columns(\n                table, columns, col_suffixes=(), opclasses=opclasses\n            )\n        else:\n            columns = Expressions(table, expressions, compiler, self.quote_value)\n        return Statement(\n            sql,\n            table=Table(table, self.quote_name),\n            name=name,\n            columns=columns,\n            condition=self._index_condition_sql(condition),\n            deferrable=self._deferrable_constraint_sql(deferrable),\n            include=self._index_include_sql(model, include),\n            nulls_distinct=self._unique_index_nulls_distinct_sql(nulls_distinct),\n        )"}],"ground_truth":null,"score":null},
{"question":"What are the expected parameters and behavior of the `<Method>` method when used in `Return the value to use during an INSERT statement to specify that\nthe field should use its default value`?","answer":"","relative_code_list":[{"start_line":329,"end_line":334,"belongs_to":{"file_name":"operations.py","upper_path":"../django/django/db/backends/base","module":"base","define_class":["BaseDatabaseOperations"],"imports":["datetime","decimal","json","importlib.import_module","sqlparse","django.conf.settings","django.db.NotSupportedError","django.db.transaction","django.db.models.expressions.Col","django.utils.timezone","django.utils.encoding.force_str"]},"relative_function":[],"code":"def pk_default_value(self):\n        \"\"\"\n        Return the value to use during an INSERT statement to specify that\n        the field should use its default value.\n        \"\"\"\n        return \"DEFAULT\""},{"start_line":15,"end_line":791,"belongs_to":{"file_name":"operations.py","upper_path":"../django/django/db/backends/base","module":"base","define_class":["BaseDatabaseOperations"],"imports":["datetime","decimal","json","importlib.import_module","sqlparse","django.conf.settings","django.db.NotSupportedError","django.db.transaction","django.db.models.expressions.Col","django.utils.timezone","django.utils.encoding.force_str"]},"relative_function":[],"code":"class BaseDatabaseOperations:\n    \"\"\"\n    Encapsulate backend-specific differences, such as the way a backend\n    performs ordering or calculates the ID of a recently-inserted row.\n    \"\"\"\n\n    compiler_module = \"django.db.models.sql.compiler\"\n\n    # Integer field safe ranges by `internal_type` as documented\n    # in docs/ref/models/fields.txt.\n    integer_field_ranges = {\n        \"SmallIntegerField\": (-32768, 32767),\n        \"IntegerField\": (-2147483648, 2147483647),\n        \"BigIntegerField\": (-9223372036854775808, 9223372036854775807),\n        \"PositiveBigIntegerField\": (0, 9223372036854775807),\n        \"PositiveSmallIntegerField\": (0, 32767),\n        \"PositiveIntegerField\": (0, 2147483647),\n        \"SmallAutoField\": (-32768, 32767),\n        \"AutoField\": (-2147483648, 2147483647),\n        \"BigAutoField\": (-9223372036854775808, 9223372036854775807),\n    }\n    set_operators = {\n        \"union\": \"UNION\",\n        \"intersection\": \"INTERSECT\",\n        \"difference\": \"EXCEPT\",\n    }\n    # Mapping of Field.get_internal_type() (typically the model field's class\n    # name) to the data type to use for the Cast() function, if different from\n    # DatabaseWrapper.data_types.\n    cast_data_types = {}\n    # CharField data type if the max_length argument isn't provided.\n    cast_char_field_without_max_length = None\n\n    # Start and end points for window expressions.\n    PRECEDING = \"PRECEDING\"\n    FOLLOWING = \"FOLLOWING\"\n    UNBOUNDED_PRECEDING = \"UNBOUNDED \" + PRECEDING\n    UNBOUNDED_FOLLOWING = \"UNBOUNDED \" + FOLLOWING\n    CURRENT_ROW = \"CURRENT ROW\"\n\n    # Prefix for EXPLAIN queries, or None EXPLAIN isn't supported.\n    explain_prefix = None\n\n    def __init__(self, connection):\n        self.connection = connection\n        self._cache = None\n\n    def autoinc_sql(self, table, column):\n        \"\"\"\n        Return any SQL needed to support auto-incrementing primary keys, or\n        None if no SQL is necessary.\n\n        This SQL is executed when a table is created.\n        \"\"\"\n        return None\n\n    def bulk_batch_size(self, fields, objs):\n        \"\"\"\n        Return the maximum allowed batch size for the backend. The fields\n        are the fields going to be inserted in the batch, the objs contains\n        all the objects to be inserted.\n        \"\"\"\n        return len(objs)\n\n    def format_for_duration_arithmetic(self, sql):\n        raise NotImplementedError(\n            \"subclasses of BaseDatabaseOperations may require a \"\n            \"format_for_duration_arithmetic() method.\"\n        )\n\n    def cache_key_culling_sql(self):\n        \"\"\"\n        Return an SQL query that retrieves the first cache key greater than the\n        n smallest.\n\n        This is used by the 'db' cache backend to determine where to start\n        culling.\n        \"\"\"\n        cache_key = self.quote_name(\"cache_key\")\n        return f\"SELECT {cache_key} FROM %s ORDER BY {cache_key} LIMIT 1 OFFSET %%s\"\n\n    def unification_cast_sql(self, output_field):\n        \"\"\"\n        Given a field instance, return the SQL that casts the result of a union\n        to that type. The resulting string should contain a '%s' placeholder\n        for the expression being cast.\n        \"\"\"\n        return \"%s\"\n\n    def date_extract_sql(self, lookup_type, sql, params):\n        \"\"\"\n        Given a lookup_type of 'year', 'month', or 'day', return the SQL that\n        extracts a value from the given date field field_name.\n        \"\"\"\n        raise NotImplementedError(\n            \"subclasses of BaseDatabaseOperations may require a date_extract_sql() \"\n            \"method\"\n        )\n\n    def date_trunc_sql(self, lookup_type, sql, params, tzname=None):\n        \"\"\"\n        Given a lookup_type of 'year', 'month', or 'day', return the SQL that\n        truncates the given date or datetime field field_name to a date object\n        with only the given specificity.\n\n        If `tzname` is provided, the given value is truncated in a specific\n        timezone.\n        \"\"\"\n        raise NotImplementedError(\n            \"subclasses of BaseDatabaseOperations may require a date_trunc_sql() \"\n            \"method.\"\n        )\n\n    def datetime_cast_date_sql(self, sql, params, tzname):\n        \"\"\"\n        Return the SQL to cast a datetime value to date value.\n        \"\"\"\n        raise NotImplementedError(\n            \"subclasses of BaseDatabaseOperations may require a \"\n            \"datetime_cast_date_sql() method.\"\n        )\n\n    def datetime_cast_time_sql(self, sql, params, tzname):\n        \"\"\"\n        Return the SQL to cast a datetime value to time value.\n        \"\"\"\n        raise NotImplementedError(\n            \"subclasses of BaseDatabaseOperations may require a \"\n            \"datetime_cast_time_sql() method\"\n        )\n\n    def datetime_extract_sql(self, lookup_type, sql, params, tzname):\n        \"\"\"\n        Given a lookup_type of 'year', 'month', 'day', 'hour', 'minute', or\n        'second', return the SQL that extracts a value from the given\n        datetime field field_name.\n        \"\"\"\n        raise NotImplementedError(\n            \"subclasses of BaseDatabaseOperations may require a datetime_extract_sql() \"\n            \"method\"\n        )\n\n    def datetime_trunc_sql(self, lookup_type, sql, params, tzname):\n        \"\"\"\n        Given a lookup_type of 'year', 'month', 'day', 'hour', 'minute', or\n        'second', return the SQL that truncates the given datetime field\n        field_name to a datetime object with only the given specificity.\n        \"\"\"\n        raise NotImplementedError(\n            \"subclasses of BaseDatabaseOperations may require a datetime_trunc_sql() \"\n            \"method\"\n        )\n\n    def time_trunc_sql(self, lookup_type, sql, params, tzname=None):\n        \"\"\"\n        Given a lookup_type of 'hour', 'minute' or 'second', return the SQL\n        that truncates the given time or datetime field field_name to a time\n        object with only the given specificity.\n\n        If `tzname` is provided, the given value is truncated in a specific\n        timezone.\n        \"\"\"\n        raise NotImplementedError(\n            \"subclasses of BaseDatabaseOperations may require a time_trunc_sql() method\"\n        )\n\n    def time_extract_sql(self, lookup_type, sql, params):\n        \"\"\"\n        Given a lookup_type of 'hour', 'minute', or 'second', return the SQL\n        that extracts a value from the given time field field_name.\n        \"\"\"\n        return self.date_extract_sql(lookup_type, sql, params)\n\n    def deferrable_sql(self):\n        \"\"\"\n        Return the SQL to make a constraint \"initially deferred\" during a\n        CREATE TABLE statement.\n        \"\"\"\n        return \"\"\n\n    def distinct_sql(self, fields, params):\n        \"\"\"\n        Return an SQL DISTINCT clause which removes duplicate rows from the\n        result set. If any fields are given, only check the given fields for\n        duplicates.\n        \"\"\"\n        if fields:\n            raise NotSupportedError(\n                \"DISTINCT ON fields is not supported by this database backend\"\n            )\n        else:\n            return [\"DISTINCT\"], []\n\n    def fetch_returned_insert_columns(self, cursor, returning_params):\n        \"\"\"\n        Given a cursor object that has just performed an INSERT...RETURNING\n        statement into a table, return the newly created data.\n        \"\"\"\n        return cursor.fetchone()\n\n    def force_group_by(self):\n        \"\"\"\n        Return a GROUP BY clause to use with a HAVING clause when no grouping\n        is specified.\n        \"\"\"\n        return []\n\n    def force_no_ordering(self):\n        \"\"\"\n        Return a list used in the \"ORDER BY\" clause to force no ordering at\n        all. Return an empty list to include nothing in the ordering.\n        \"\"\"\n        return []\n\n    def for_update_sql(self, nowait=False, skip_locked=False, of=(), no_key=False):\n        \"\"\"\n        Return the FOR UPDATE SQL clause to lock rows for an update operation.\n        \"\"\"\n        return \"FOR%s UPDATE%s%s%s\" % (\n            \" NO KEY\" if no_key else \"\",\n            \" OF %s\" % \", \".join(of) if of else \"\",\n            \" NOWAIT\" if nowait else \"\",\n            \" SKIP LOCKED\" if skip_locked else \"\",\n        )\n\n    def _get_limit_offset_params(self, low_mark, high_mark):\n        offset = low_mark or 0\n        if high_mark is not None:\n            return (high_mark - offset), offset\n        elif offset:\n            return self.connection.ops.no_limit_value(), offset\n        return None, offset\n\n    def limit_offset_sql(self, low_mark, high_mark):\n        \"\"\"Return LIMIT/OFFSET SQL clause.\"\"\"\n        limit, offset = self._get_limit_offset_params(low_mark, high_mark)\n        return \" \".join(\n            sql\n            for sql in (\n                (\"LIMIT %d\" % limit) if limit else None,\n                (\"OFFSET %d\" % offset) if offset else None,\n            )\n            if sql\n        )\n\n    def bulk_insert_sql(self, fields, placeholder_rows):\n        placeholder_rows_sql = (\", \".join(row) for row in placeholder_rows)\n        values_sql = \", \".join([f\"({sql})\" for sql in placeholder_rows_sql])\n        return f\"VALUES {values_sql}\"\n\n    def last_executed_query(self, cursor, sql, params):\n        \"\"\"\n        Return a string of the query last executed by the given cursor, with\n        placeholders replaced with actual values.\n\n        `sql` is the raw query containing placeholders and `params` is the\n        sequence of parameters. These are used by default, but this method\n        exists for database backends to provide a better implementation\n        according to their own quoting schemes.\n        \"\"\"\n\n        # Convert params to contain string values.\n        def to_string(s):\n            return force_str(s, strings_only=True, errors=\"replace\")\n\n        if isinstance(params, (list, tuple)):\n            u_params = tuple(to_string(val) for val in params)\n        elif params is None:\n            u_params = ()\n        else:\n            u_params = {to_string(k): to_string(v) for k, v in params.items()}\n\n        return \"QUERY = %r - PARAMS = %r\" % (sql, u_params)\n\n    def last_insert_id(self, cursor, table_name, pk_name):\n        \"\"\"\n        Given a cursor object that has just performed an INSERT statement into\n        a table that has an auto-incrementing ID, return the newly created ID.\n\n        `pk_name` is the name of the primary-key column.\n        \"\"\"\n        return cursor.lastrowid\n\n    def lookup_cast(self, lookup_type, internal_type=None):\n        \"\"\"\n        Return the string to use in a query when performing lookups\n        (\"contains\", \"like\", etc.). It should contain a '%s' placeholder for\n        the column being searched against.\n        \"\"\"\n        return \"%s\"\n\n    def max_in_list_size(self):\n        \"\"\"\n        Return the maximum number of items that can be passed in a single 'IN'\n        list condition, or None if the backend does not impose a limit.\n        \"\"\"\n        return None\n\n    def max_name_length(self):\n        \"\"\"\n        Return the maximum length of table and column names, or None if there\n        is no limit.\n        \"\"\"\n        return None\n\n    def no_limit_value(self):\n        \"\"\"\n        Return the value to use for the LIMIT when we are wanting \"LIMIT\n        infinity\". Return None if the limit clause can be omitted in this case.\n        \"\"\"\n        raise NotImplementedError(\n            \"subclasses of BaseDatabaseOperations may require a no_limit_value() method\"\n        )\n\n    def pk_default_value(self):\n        \"\"\"\n        Return the value to use during an INSERT statement to specify that\n        the field should use its default value.\n        \"\"\"\n        return \"DEFAULT\"\n\n    def prepare_sql_script(self, sql):\n        \"\"\"\n        Take an SQL script that may contain multiple lines and return a list\n        of statements to feed to successive cursor.execute() calls.\n\n        Since few databases are able to process raw SQL scripts in a single\n        cursor.execute() call and PEP 249 doesn't talk about this use case,\n        the default implementation is conservative.\n        \"\"\"\n        return [\n            sqlparse.format(statement, strip_comments=True)\n            for statement in sqlparse.split(sql)\n            if statement\n        ]\n\n    def process_clob(self, value):\n        \"\"\"\n        Return the value of a CLOB column, for backends that return a locator\n        object that requires additional processing.\n        \"\"\"\n        return value\n\n    def return_insert_columns(self, fields):\n        \"\"\"\n        For backends that support returning columns as part of an insert query,\n        return the SQL and params to append to the INSERT query. The returned\n        fragment should contain a format string to hold the appropriate column.\n        \"\"\"\n        pass\n\n    def compiler(self, compiler_name):\n        \"\"\"\n        Return the SQLCompiler class corresponding to the given name,\n        in the namespace corresponding to the `compiler_module` attribute\n        on this backend.\n        \"\"\"\n        if self._cache is None:\n            self._cache = import_module(self.compiler_module)\n        return getattr(self._cache, compiler_name)\n\n    def quote_name(self, name):\n        \"\"\"\n        Return a quoted version of the given table, index, or column name. Do\n        not quote the given name if it's already been quoted.\n        \"\"\"\n        raise NotImplementedError(\n            \"subclasses of BaseDatabaseOperations may require a quote_name() method\"\n        )\n\n    def regex_lookup(self, lookup_type):\n        \"\"\"\n        Return the string to use in a query when performing regular expression\n        lookups (using \"regex\" or \"iregex\"). It should contain a '%s'\n        placeholder for the column being searched against.\n\n        If the feature is not supported (or part of it is not supported), raise\n        NotImplementedError.\n        \"\"\"\n        raise NotImplementedError(\n            \"subclasses of BaseDatabaseOperations may require a regex_lookup() method\"\n        )\n\n    def savepoint_create_sql(self, sid):\n        \"\"\"\n        Return the SQL for starting a new savepoint. Only required if the\n        \"uses_savepoints\" feature is True. The \"sid\" parameter is a string\n        for the savepoint id.\n        \"\"\"\n        return \"SAVEPOINT %s\" % self.quote_name(sid)\n\n    def savepoint_commit_sql(self, sid):\n        \"\"\"\n        Return the SQL for committing the given savepoint.\n        \"\"\"\n        return \"RELEASE SAVEPOINT %s\" % self.quote_name(sid)\n\n    def savepoint_rollback_sql(self, sid):\n        \"\"\"\n        Return the SQL for rolling back the given savepoint.\n        \"\"\"\n        return \"ROLLBACK TO SAVEPOINT %s\" % self.quote_name(sid)\n\n    def set_time_zone_sql(self):\n        \"\"\"\n        Return the SQL that will set the connection's time zone.\n\n        Return '' if the backend doesn't support time zones.\n        \"\"\"\n        return \"\"\n\n    def sql_flush(self, style, tables, *, reset_sequences=False, allow_cascade=False):\n        \"\"\"\n        Return a list of SQL statements required to remove all data from\n        the given database tables (without actually removing the tables\n        themselves).\n\n        The `style` argument is a Style object as returned by either\n        color_style() or no_style() in django.core.management.color.\n\n        If `reset_sequences` is True, the list includes SQL statements required\n        to reset the sequences.\n\n        The `allow_cascade` argument determines whether truncation may cascade\n        to tables with foreign keys pointing the tables being truncated.\n        PostgreSQL requires a cascade even if these tables are empty.\n        \"\"\"\n        raise NotImplementedError(\n            \"subclasses of BaseDatabaseOperations must provide an sql_flush() method\"\n        )\n\n    def execute_sql_flush(self, sql_list):\n        \"\"\"Execute a list of SQL statements to flush the database.\"\"\"\n        with transaction.atomic(\n            using=self.connection.alias,\n            savepoint=self.connection.features.can_rollback_ddl,\n        ):\n            with self.connection.cursor() as cursor:\n                for sql in sql_list:\n                    cursor.execute(sql)\n\n    def sequence_reset_by_name_sql(self, style, sequences):\n        \"\"\"\n        Return a list of the SQL statements required to reset sequences\n        passed in `sequences`.\n\n        The `style` argument is a Style object as returned by either\n        color_style() or no_style() in django.core.management.color.\n        \"\"\"\n        return []\n\n    def sequence_reset_sql(self, style, model_list):\n        \"\"\"\n        Return a list of the SQL statements required to reset sequences for\n        the given models.\n\n        The `style` argument is a Style object as returned by either\n        color_style() or no_style() in django.core.management.color.\n        \"\"\"\n        return []  # No sequence reset required by default.\n\n    def start_transaction_sql(self):\n        \"\"\"Return the SQL statement required to start a transaction.\"\"\"\n        return \"BEGIN;\"\n\n    def end_transaction_sql(self, success=True):\n        \"\"\"Return the SQL statement required to end a transaction.\"\"\"\n        if not success:\n            return \"ROLLBACK;\"\n        return \"COMMIT;\"\n\n    def tablespace_sql(self, tablespace, inline=False):\n        \"\"\"\n        Return the SQL that will be used in a query to define the tablespace.\n\n        Return '' if the backend doesn't support tablespaces.\n\n        If `inline` is True, append the SQL to a row; otherwise append it to\n        the entire CREATE TABLE or CREATE INDEX statement.\n        \"\"\"\n        return \"\"\n\n    def prep_for_like_query(self, x):\n        \"\"\"Prepare a value for use in a LIKE query.\"\"\"\n        return str(x).replace(\"\\\\\", \"\\\\\\\\\").replace(\"%\", r\"\\%\").replace(\"_\", r\"\\_\")\n\n    # Same as prep_for_like_query(), but called for \"iexact\" matches, which\n    # need not necessarily be implemented using \"LIKE\" in the backend.\n    prep_for_iexact_query = prep_for_like_query\n\n    def validate_autopk_value(self, value):\n        \"\"\"\n        Certain backends do not accept some values for \"serial\" fields\n        (for example zero in MySQL). Raise a ValueError if the value is\n        invalid, otherwise return the validated value.\n        \"\"\"\n        return value\n\n    def adapt_unknown_value(self, value):\n        \"\"\"\n        Transform a value to something compatible with the backend driver.\n\n        This method only depends on the type of the value. It's designed for\n        cases where the target type isn't known, such as .raw() SQL queries.\n        As a consequence it may not work perfectly in all circumstances.\n        \"\"\"\n        if isinstance(value, datetime.datetime):  # must be before date\n            return self.adapt_datetimefield_value(value)\n        elif isinstance(value, datetime.date):\n            return self.adapt_datefield_value(value)\n        elif isinstance(value, datetime.time):\n            return self.adapt_timefield_value(value)\n        elif isinstance(value, decimal.Decimal):\n            return self.adapt_decimalfield_value(value)\n        else:\n            return value\n\n    def adapt_integerfield_value(self, value, internal_type):\n        return value\n\n    def adapt_datefield_value(self, value):\n        \"\"\"\n        Transform a date value to an object compatible with what is expected\n        by the backend driver for date columns.\n        \"\"\"\n        if value is None:\n            return None\n        return str(value)\n\n    def adapt_datetimefield_value(self, value):\n        \"\"\"\n        Transform a datetime value to an object compatible with what is expected\n        by the backend driver for datetime columns.\n        \"\"\"\n        if value is None:\n            return None\n        return str(value)\n\n    def adapt_timefield_value(self, value):\n        \"\"\"\n        Transform a time value to an object compatible with what is expected\n        by the backend driver for time columns.\n        \"\"\"\n        if value is None:\n            return None\n        if timezone.is_aware(value):\n            raise ValueError(\"Django does not support timezone-aware times.\")\n        return str(value)\n\n    def adapt_decimalfield_value(self, value, max_digits=None, decimal_places=None):\n        \"\"\"\n        Transform a decimal.Decimal value to an object compatible with what is\n        expected by the backend driver for decimal (numeric) columns.\n        \"\"\"\n        return value\n\n    def adapt_ipaddressfield_value(self, value):\n        \"\"\"\n        Transform a string representation of an IP address into the expected\n        type for the backend driver.\n        \"\"\"\n        return value or None\n\n    def adapt_json_value(self, value, encoder):\n        return json.dumps(value, cls=encoder)\n\n    def year_lookup_bounds_for_date_field(self, value, iso_year=False):\n        \"\"\"\n        Return a two-elements list with the lower and upper bound to be used\n        with a BETWEEN operator to query a DateField value using a year\n        lookup.\n\n        `value` is an int, containing the looked-up year.\n        If `iso_year` is True, return bounds for ISO-8601 week-numbering years.\n        \"\"\"\n        if iso_year:\n            first = datetime.date.fromisocalendar(value, 1, 1)\n            second = datetime.date.fromisocalendar(\n                value + 1, 1, 1\n            ) - datetime.timedelta(days=1)\n        else:\n            first = datetime.date(value, 1, 1)\n            second = datetime.date(value, 12, 31)\n        first = self.adapt_datefield_value(first)\n        second = self.adapt_datefield_value(second)\n        return [first, second]\n\n    def year_lookup_bounds_for_datetime_field(self, value, iso_year=False):\n        \"\"\"\n        Return a two-elements list with the lower and upper bound to be used\n        with a BETWEEN operator to query a DateTimeField value using a year\n        lookup.\n\n        `value` is an int, containing the looked-up year.\n        If `iso_year` is True, return bounds for ISO-8601 week-numbering years.\n        \"\"\"\n        if iso_year:\n            first = datetime.datetime.fromisocalendar(value, 1, 1)\n            second = datetime.datetime.fromisocalendar(\n                value + 1, 1, 1\n            ) - datetime.timedelta(microseconds=1)\n        else:\n            first = datetime.datetime(value, 1, 1)\n            second = datetime.datetime(value, 12, 31, 23, 59, 59, 999999)\n        if settings.USE_TZ:\n            tz = timezone.get_current_timezone()\n            first = timezone.make_aware(first, tz)\n            second = timezone.make_aware(second, tz)\n        first = self.adapt_datetimefield_value(first)\n        second = self.adapt_datetimefield_value(second)\n        return [first, second]\n\n    def get_db_converters(self, expression):\n        \"\"\"\n        Return a list of functions needed to convert field data.\n\n        Some field types on some backends do not provide data in the correct\n        format, this is the hook for converter functions.\n        \"\"\"\n        return []\n\n    def convert_durationfield_value(self, value, expression, connection):\n        if value is not None:\n            return datetime.timedelta(0, 0, value)\n\n    def check_expression_support(self, expression):\n        \"\"\"\n        Check that the backend supports the provided expression.\n\n        This is used on specific backends to rule out known expressions\n        that have problematic or nonexistent implementations. If the\n        expression has a known problem, the backend should raise\n        NotSupportedError.\n        \"\"\"\n        pass\n\n    def conditional_expression_supported_in_where_clause(self, expression):\n        \"\"\"\n        Return True, if the conditional expression is supported in the WHERE\n        clause.\n        \"\"\"\n        return True\n\n    def combine_expression(self, connector, sub_expressions):\n        \"\"\"\n        Combine a list of subexpressions into a single expression, using\n        the provided connecting operator. This is required because operators\n        can vary between backends (e.g., Oracle with %% and &) and between\n        subexpression types (e.g., date expressions).\n        \"\"\"\n        conn = \" %s \" % connector\n        return conn.join(sub_expressions)\n\n    def combine_duration_expression(self, connector, sub_expressions):\n        return self.combine_expression(connector, sub_expressions)\n\n    def binary_placeholder_sql(self, value):\n        \"\"\"\n        Some backends require special syntax to insert binary content (MySQL\n        for example uses '_binary %s').\n        \"\"\"\n        return \"%s\"\n\n    def modify_insert_params(self, placeholder, params):\n        \"\"\"\n        Allow modification of insert parameters. Needed for Oracle Spatial\n        backend due to #10888.\n        \"\"\"\n        return params\n\n    def integer_field_range(self, internal_type):\n        \"\"\"\n        Given an integer field internal type (e.g. 'PositiveIntegerField'),\n        return a tuple of the (min_value, max_value) form representing the\n        range of the column type bound to the field.\n        \"\"\"\n        return self.integer_field_ranges[internal_type]\n\n    def subtract_temporals(self, internal_type, lhs, rhs):\n        if self.connection.features.supports_temporal_subtraction:\n            lhs_sql, lhs_params = lhs\n            rhs_sql, rhs_params = rhs\n            return \"(%s - %s)\" % (lhs_sql, rhs_sql), (*lhs_params, *rhs_params)\n        raise NotSupportedError(\n            \"This backend does not support %s subtraction.\" % internal_type\n        )\n\n    def window_frame_value(self, value):\n        if isinstance(value, int):\n            if value == 0:\n                return self.CURRENT_ROW\n            elif value < 0:\n                return \"%d %s\" % (abs(value), self.PRECEDING)\n            else:\n                return \"%d %s\" % (value, self.FOLLOWING)\n\n    def window_frame_rows_start_end(self, start=None, end=None):\n        \"\"\"\n        Return SQL for start and end points in an OVER clause window frame.\n        \"\"\"\n        if isinstance(start, int) and isinstance(end, int) and start > end:\n            raise ValueError(\"start cannot be greater than end.\")\n        if start is not None and not isinstance(start, int):\n            raise ValueError(\n                f\"start argument must be an integer, zero, or None, but got '{start}'.\"\n            )\n        if end is not None and not isinstance(end, int):\n            raise ValueError(\n                f\"end argument must be an integer, zero, or None, but got '{end}'.\"\n            )\n        start_ = self.window_frame_value(start) or self.UNBOUNDED_PRECEDING\n        end_ = self.window_frame_value(end) or self.UNBOUNDED_FOLLOWING\n        return start_, end_\n\n    def window_frame_range_start_end(self, start=None, end=None):\n        if (start is not None and not isinstance(start, int)) or (\n            isinstance(start, int) and start > 0\n        ):\n            raise ValueError(\n                \"start argument must be a negative integer, zero, or None, \"\n                \"but got '%s'.\" % start\n            )\n        if (end is not None and not isinstance(end, int)) or (\n            isinstance(end, int) and end < 0\n        ):\n            raise ValueError(\n                \"end argument must be a positive integer, zero, or None, but got '%s'.\"\n                % end\n            )\n        start_ = self.window_frame_value(start) or self.UNBOUNDED_PRECEDING\n        end_ = self.window_frame_value(end) or self.UNBOUNDED_FOLLOWING\n        features = self.connection.features\n        if features.only_supports_unbounded_with_preceding_and_following and (\n            (start and start < 0) or (end and end > 0)\n        ):\n            raise NotSupportedError(\n                \"%s only supports UNBOUNDED together with PRECEDING and \"\n                \"FOLLOWING.\" % self.connection.display_name\n            )\n        return start_, end_\n\n    def explain_query_prefix(self, format=None, **options):\n        if not self.connection.features.supports_explaining_query_execution:\n            raise NotSupportedError(\n                \"This backend does not support explaining query execution.\"\n            )\n        if format:\n            supported_formats = self.connection.features.supported_explain_formats\n            normalized_format = format.upper()\n            if normalized_format not in supported_formats:\n                msg = \"%s is not a recognized format.\" % normalized_format\n                if supported_formats:\n                    msg += \" Allowed formats: %s\" % \", \".join(sorted(supported_formats))\n                else:\n                    msg += (\n                        f\" {self.connection.display_name} does not support any formats.\"\n                    )\n                raise ValueError(msg)\n        if options:\n            raise ValueError(\"Unknown options: %s\" % \", \".join(sorted(options.keys())))\n        return self.explain_prefix\n\n    def insert_statement(self, on_conflict=None):\n        return \"INSERT INTO\"\n\n    def on_conflict_suffix_sql(self, fields, on_conflict, update_fields, unique_fields):\n        return \"\"\n\n    def prepare_join_on_clause(self, lhs_table, lhs_field, rhs_table, rhs_field):\n        lhs_expr = Col(lhs_table, lhs_field)\n        rhs_expr = Col(rhs_table, rhs_field)\n\n        return lhs_expr, rhs_expr\n\n    def format_debug_sql(self, sql):\n        # Hook for backends (e.g. NoSQL) to customize formatting.\n        return sqlparse.format(sql, reindent=True, keyword_case=\"upper\")"}],"ground_truth":null,"score":null},
{"question":"What is the purpose of the `data_types` attribute in the `BaseDatabaseWrapper`, and how is it intended to be used?","answer":"","relative_code_list":[{"start_line":30,"end_line":793,"belongs_to":{"file_name":"base.py","upper_path":"../django/django/db/backends/base","module":"base","define_class":["BaseDatabaseWrapper"],"imports":["_thread","copy","datetime","logging","threading","time","warnings","zoneinfo","collections.deque","contextlib.contextmanager","django.conf.settings","django.core.exceptions.ImproperlyConfigured","django.db.DEFAULT_DB_ALIAS","django.db.DatabaseError","django.db.NotSupportedError","django.db.backends.utils","django.db.backends.base.validation.BaseDatabaseValidation","django.db.backends.signals.connection_created","django.db.backends.utils.debug_transaction","django.db.transaction.TransactionManagementError","django.db.utils.DatabaseErrorWrapper","django.db.utils.ProgrammingError","django.utils.asyncio.async_unsafe","django.utils.functional.cached_property"]},"relative_function":[],"code":"class BaseDatabaseWrapper:\n    \"\"\"Represent a database connection.\"\"\"\n\n    # Mapping of Field objects to their column types.\n    data_types = {}\n    # Mapping of Field objects to their SQL suffix such as AUTOINCREMENT.\n    data_types_suffix = {}\n    # Mapping of Field objects to their SQL for CHECK constraints.\n    data_type_check_constraints = {}\n    ops = None\n    vendor = \"unknown\"\n    display_name = \"unknown\"\n    SchemaEditorClass = None\n    # Classes instantiated in __init__().\n    client_class = None\n    creation_class = None\n    features_class = None\n    introspection_class = None\n    ops_class = None\n    validation_class = BaseDatabaseValidation\n\n    queries_limit = 9000\n\n    def __init__(self, settings_dict, alias=DEFAULT_DB_ALIAS):\n        # Connection related attributes.\n        # The underlying database connection.\n        self.connection = None\n        # `settings_dict` should be a dictionary containing keys such as\n        # NAME, USER, etc. It's called `settings_dict` instead of `settings`\n        # to disambiguate it from Django settings modules.\n        self.settings_dict = settings_dict\n        self.alias = alias\n        # Query logging in debug mode or when explicitly enabled.\n        self.queries_log = deque(maxlen=self.queries_limit)\n        self.force_debug_cursor = False\n\n        # Transaction related attributes.\n        # Tracks if the connection is in autocommit mode. Per PEP 249, by\n        # default, it isn't.\n        self.autocommit = False\n        # Tracks if the connection is in a transaction managed by 'atomic'.\n        self.in_atomic_block = False\n        # Increment to generate unique savepoint ids.\n        self.savepoint_state = 0\n        # List of savepoints created by 'atomic'.\n        self.savepoint_ids = []\n        # Stack of active 'atomic' blocks.\n        self.atomic_blocks = []\n        # Tracks if the outermost 'atomic' block should commit on exit,\n        # ie. if autocommit was active on entry.\n        self.commit_on_exit = True\n        # Tracks if the transaction should be rolled back to the next\n        # available savepoint because of an exception in an inner block.\n        self.needs_rollback = False\n        self.rollback_exc = None\n\n        # Connection termination related attributes.\n        self.close_at = None\n        self.closed_in_transaction = False\n        self.errors_occurred = False\n        self.health_check_enabled = False\n        self.health_check_done = False\n\n        # Thread-safety related attributes.\n        self._thread_sharing_lock = threading.Lock()\n        self._thread_sharing_count = 0\n        self._thread_ident = _thread.get_ident()\n\n        # A list of no-argument functions to run when the transaction commits.\n        # Each entry is an (sids, func, robust) tuple, where sids is a set of\n        # the active savepoint IDs when this function was registered and robust\n        # specifies whether it's allowed for the function to fail.\n        self.run_on_commit = []\n\n        # Should we run the on-commit hooks the next time set_autocommit(True)\n        # is called?\n        self.run_commit_hooks_on_set_autocommit_on = False\n\n        # A stack of wrappers to be invoked around execute()/executemany()\n        # calls. Each entry is a function taking five arguments: execute, sql,\n        # params, many, and context. It's the function's responsibility to\n        # call execute(sql, params, many, context).\n        self.execute_wrappers = []\n\n        self.client = self.client_class(self)\n        self.creation = self.creation_class(self)\n        self.features = self.features_class(self)\n        self.introspection = self.introspection_class(self)\n        self.ops = self.ops_class(self)\n        self.validation = self.validation_class(self)\n\n    def __repr__(self):\n        return (\n            f\"<{self.__class__.__qualname__} \"\n            f\"vendor={self.vendor!r} alias={self.alias!r}>\"\n        )\n\n    def ensure_timezone(self):\n        \"\"\"\n        Ensure the connection's timezone is set to `self.timezone_name` and\n        return whether it changed or not.\n        \"\"\"\n        return False\n\n    @cached_property\n    def timezone(self):\n        \"\"\"\n        Return a tzinfo of the database connection time zone.\n\n        This is only used when time zone support is enabled. When a datetime is\n        read from the database, it is always returned in this time zone.\n\n        When the database backend supports time zones, it doesn't matter which\n        time zone Django uses, as long as aware datetimes are used everywhere.\n        Other users connecting to the database can choose their own time zone.\n\n        When the database backend doesn't support time zones, the time zone\n        Django uses may be constrained by the requirements of other users of\n        the database.\n        \"\"\"\n        if not settings.USE_TZ:\n            return None\n        elif self.settings_dict[\"TIME_ZONE\"] is None:\n            return datetime.UTC\n        else:\n            return zoneinfo.ZoneInfo(self.settings_dict[\"TIME_ZONE\"])\n\n    @cached_property\n    def timezone_name(self):\n        \"\"\"\n        Name of the time zone of the database connection.\n        \"\"\"\n        if not settings.USE_TZ:\n            return settings.TIME_ZONE\n        elif self.settings_dict[\"TIME_ZONE\"] is None:\n            return \"UTC\"\n        else:\n            return self.settings_dict[\"TIME_ZONE\"]\n\n    @property\n    def queries_logged(self):\n        return self.force_debug_cursor or settings.DEBUG\n\n    @property\n    def queries(self):\n        if len(self.queries_log) == self.queries_log.maxlen:\n            warnings.warn(\n                \"Limit for query logging exceeded, only the last {} queries \"\n                \"will be returned.\".format(self.queries_log.maxlen),\n                stacklevel=2,\n            )\n        return list(self.queries_log)\n\n    def get_database_version(self):\n        \"\"\"Return a tuple of the database's version.\"\"\"\n        raise NotImplementedError(\n            \"subclasses of BaseDatabaseWrapper may require a get_database_version() \"\n            \"method.\"\n        )\n\n    def check_database_version_supported(self):\n        \"\"\"\n        Raise an error if the database version isn't supported by this\n        version of Django.\n        \"\"\"\n        if (\n            self.features.minimum_database_version is not None\n            and self.get_database_version() < self.features.minimum_database_version\n        ):\n            db_version = \".\".join(map(str, self.get_database_version()))\n            min_db_version = \".\".join(map(str, self.features.minimum_database_version))\n            raise NotSupportedError(\n                f\"{self.display_name} {min_db_version} or later is required \"\n                f\"(found {db_version}).\"\n            )\n\n    # ##### Backend-specific methods for creating connections and cursors #####\n\n    def get_connection_params(self):\n        \"\"\"Return a dict of parameters suitable for get_new_connection.\"\"\"\n        raise NotImplementedError(\n            \"subclasses of BaseDatabaseWrapper may require a get_connection_params() \"\n            \"method\"\n        )\n\n    def get_new_connection(self, conn_params):\n        \"\"\"Open a connection to the database.\"\"\"\n        raise NotImplementedError(\n            \"subclasses of BaseDatabaseWrapper may require a get_new_connection() \"\n            \"method\"\n        )\n\n    def init_connection_state(self):\n        \"\"\"Initialize the database connection settings.\"\"\"\n        global RAN_DB_VERSION_CHECK\n        if self.alias not in RAN_DB_VERSION_CHECK:\n            self.check_database_version_supported()\n            RAN_DB_VERSION_CHECK.add(self.alias)\n\n    def create_cursor(self, name=None):\n        \"\"\"Create a cursor. Assume that a connection is established.\"\"\"\n        raise NotImplementedError(\n            \"subclasses of BaseDatabaseWrapper may require a create_cursor() method\"\n        )\n\n    # ##### Backend-specific methods for creating connections #####\n\n    @async_unsafe\n    def connect(self):\n        \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n        # Check for invalid configurations.\n        self.check_settings()\n        # In case the previous connection was closed while in an atomic block\n        self.in_atomic_block = False\n        self.savepoint_ids = []\n        self.atomic_blocks = []\n        self.needs_rollback = False\n        # Reset parameters defining when to close/health-check the connection.\n        self.health_check_enabled = self.settings_dict[\"CONN_HEALTH_CHECKS\"]\n        max_age = self.settings_dict[\"CONN_MAX_AGE\"]\n        self.close_at = None if max_age is None else time.monotonic() + max_age\n        self.closed_in_transaction = False\n        self.errors_occurred = False\n        # New connections are healthy.\n        self.health_check_done = True\n        # Establish the connection\n        conn_params = self.get_connection_params()\n        self.connection = self.get_new_connection(conn_params)\n        self.set_autocommit(self.settings_dict[\"AUTOCOMMIT\"])\n        self.init_connection_state()\n        connection_created.send(sender=self.__class__, connection=self)\n\n        self.run_on_commit = []\n\n    def check_settings(self):\n        if self.settings_dict[\"TIME_ZONE\"] is not None and not settings.USE_TZ:\n            raise ImproperlyConfigured(\n                \"Connection '%s' cannot set TIME_ZONE because USE_TZ is False.\"\n                % self.alias\n            )\n\n    @async_unsafe\n    def ensure_connection(self):\n        \"\"\"Guarantee that a connection to the database is established.\"\"\"\n        if self.connection is None:\n            if self.in_atomic_block and self.closed_in_transaction:\n                raise ProgrammingError(\n                    \"Cannot open a new connection in an atomic block.\"\n                )\n            with self.wrap_database_errors:\n                self.connect()\n\n    # ##### Backend-specific wrappers for PEP-249 connection methods #####\n\n    def _prepare_cursor(self, cursor):\n        \"\"\"\n        Validate the connection is usable and perform database cursor wrapping.\n        \"\"\"\n        self.validate_thread_sharing()\n        if self.queries_logged:\n            wrapped_cursor = self.make_debug_cursor(cursor)\n        else:\n            wrapped_cursor = self.make_cursor(cursor)\n        return wrapped_cursor\n\n    def _cursor(self, name=None):\n        self.close_if_health_check_failed()\n        self.ensure_connection()\n        with self.wrap_database_errors:\n            return self._prepare_cursor(self.create_cursor(name))\n\n    def _commit(self):\n        if self.connection is not None:\n            with debug_transaction(self, \"COMMIT\"), self.wrap_database_errors:\n                return self.connection.commit()\n\n    def _rollback(self):\n        if self.connection is not None:\n            with debug_transaction(self, \"ROLLBACK\"), self.wrap_database_errors:\n                return self.connection.rollback()\n\n    def _close(self):\n        if self.connection is not None:\n            with self.wrap_database_errors:\n                return self.connection.close()\n\n    # ##### Generic wrappers for PEP-249 connection methods #####\n\n    @async_unsafe\n    def cursor(self):\n        \"\"\"Create a cursor, opening a connection if necessary.\"\"\"\n        return self._cursor()\n\n    @async_unsafe\n    def commit(self):\n        \"\"\"Commit a transaction and reset the dirty flag.\"\"\"\n        self.validate_thread_sharing()\n        self.validate_no_atomic_block()\n        self._commit()\n        # A successful commit means that the database connection works.\n        self.errors_occurred = False\n        self.run_commit_hooks_on_set_autocommit_on = True\n\n    @async_unsafe\n    def rollback(self):\n        \"\"\"Roll back a transaction and reset the dirty flag.\"\"\"\n        self.validate_thread_sharing()\n        self.validate_no_atomic_block()\n        self._rollback()\n        # A successful rollback means that the database connection works.\n        self.errors_occurred = False\n        self.needs_rollback = False\n        self.run_on_commit = []\n\n    @async_unsafe\n    def close(self):\n        \"\"\"Close the connection to the database.\"\"\"\n        self.validate_thread_sharing()\n        self.run_on_commit = []\n\n        # Don't call validate_no_atomic_block() to avoid making it difficult\n        # to get rid of a connection in an invalid state. The next connect()\n        # will reset the transaction state anyway.\n        if self.closed_in_transaction or self.connection is None:\n            return\n        try:\n            self._close()\n        finally:\n            if self.in_atomic_block:\n                self.closed_in_transaction = True\n                self.needs_rollback = True\n            else:\n                self.connection = None\n\n    # ##### Backend-specific savepoint management methods #####\n\n    def _savepoint(self, sid):\n        with self.cursor() as cursor:\n            cursor.execute(self.ops.savepoint_create_sql(sid))\n\n    def _savepoint_rollback(self, sid):\n        with self.cursor() as cursor:\n            cursor.execute(self.ops.savepoint_rollback_sql(sid))\n\n    def _savepoint_commit(self, sid):\n        with self.cursor() as cursor:\n            cursor.execute(self.ops.savepoint_commit_sql(sid))\n\n    def _savepoint_allowed(self):\n        # Savepoints cannot be created outside a transaction\n        return self.features.uses_savepoints and not self.get_autocommit()\n\n    # ##### Generic savepoint management methods #####\n\n    @async_unsafe\n    def savepoint(self):\n        \"\"\"\n        Create a savepoint inside the current transaction. Return an\n        identifier for the savepoint that will be used for the subsequent\n        rollback or commit. Do nothing if savepoints are not supported.\n        \"\"\"\n        if not self._savepoint_allowed():\n            return\n\n        thread_ident = _thread.get_ident()\n        tid = str(thread_ident).replace(\"-\", \"\")\n\n        self.savepoint_state += 1\n        sid = \"s%s_x%d\" % (tid, self.savepoint_state)\n\n        self.validate_thread_sharing()\n        self._savepoint(sid)\n\n        return sid\n\n    @async_unsafe\n    def savepoint_rollback(self, sid):\n        \"\"\"\n        Roll back to a savepoint. Do nothing if savepoints are not supported.\n        \"\"\"\n        if not self._savepoint_allowed():\n            return\n\n        self.validate_thread_sharing()\n        self._savepoint_rollback(sid)\n\n        # Remove any callbacks registered while this savepoint was active.\n        self.run_on_commit = [\n            (sids, func, robust)\n            for (sids, func, robust) in self.run_on_commit\n            if sid not in sids\n        ]\n\n    @async_unsafe\n    def savepoint_commit(self, sid):\n        \"\"\"\n        Release a savepoint. Do nothing if savepoints are not supported.\n        \"\"\"\n        if not self._savepoint_allowed():\n            return\n\n        self.validate_thread_sharing()\n        self._savepoint_commit(sid)\n\n    @async_unsafe\n    def clean_savepoints(self):\n        \"\"\"\n        Reset the counter used to generate unique savepoint ids in this thread.\n        \"\"\"\n        self.savepoint_state = 0\n\n    # ##### Backend-specific transaction management methods #####\n\n    def _set_autocommit(self, autocommit):\n        \"\"\"\n        Backend-specific implementation to enable or disable autocommit.\n        \"\"\"\n        raise NotImplementedError(\n            \"subclasses of BaseDatabaseWrapper may require a _set_autocommit() method\"\n        )\n\n    # ##### Generic transaction management methods #####\n\n    def get_autocommit(self):\n        \"\"\"Get the autocommit state.\"\"\"\n        self.ensure_connection()\n        return self.autocommit\n\n    def set_autocommit(\n        self, autocommit, force_begin_transaction_with_broken_autocommit=False\n    ):\n        \"\"\"\n        Enable or disable autocommit.\n\n        The usual way to start a transaction is to turn autocommit off.\n        SQLite does not properly start a transaction when disabling\n        autocommit. To avoid this buggy behavior and to actually enter a new\n        transaction, an explicit BEGIN is required. Using\n        force_begin_transaction_with_broken_autocommit=True will issue an\n        explicit BEGIN with SQLite. This option will be ignored for other\n        backends.\n        \"\"\"\n        self.validate_no_atomic_block()\n        self.close_if_health_check_failed()\n        self.ensure_connection()\n\n        start_transaction_under_autocommit = (\n            force_begin_transaction_with_broken_autocommit\n            and not autocommit\n            and hasattr(self, \"_start_transaction_under_autocommit\")\n        )\n\n        if start_transaction_under_autocommit:\n            self._start_transaction_under_autocommit()\n        elif autocommit:\n            self._set_autocommit(autocommit)\n        else:\n            with debug_transaction(self, \"BEGIN\"):\n                self._set_autocommit(autocommit)\n        self.autocommit = autocommit\n\n        if autocommit and self.run_commit_hooks_on_set_autocommit_on:\n            self.run_and_clear_commit_hooks()\n            self.run_commit_hooks_on_set_autocommit_on = False\n\n    def get_rollback(self):\n        \"\"\"Get the \"needs rollback\" flag -- for *advanced use* only.\"\"\"\n        if not self.in_atomic_block:\n            raise TransactionManagementError(\n                \"The rollback flag doesn't work outside of an 'atomic' block.\"\n            )\n        return self.needs_rollback\n\n    def set_rollback(self, rollback):\n        \"\"\"\n        Set or unset the \"needs rollback\" flag -- for *advanced use* only.\n        \"\"\"\n        if not self.in_atomic_block:\n            raise TransactionManagementError(\n                \"The rollback flag doesn't work outside of an 'atomic' block.\"\n            )\n        self.needs_rollback = rollback\n\n    def validate_no_atomic_block(self):\n        \"\"\"Raise an error if an atomic block is active.\"\"\"\n        if self.in_atomic_block:\n            raise TransactionManagementError(\n                \"This is forbidden when an 'atomic' block is active.\"\n            )\n\n    def validate_no_broken_transaction(self):\n        if self.needs_rollback:\n            raise TransactionManagementError(\n                \"An error occurred in the current transaction. You can't \"\n                \"execute queries until the end of the 'atomic' block.\"\n            ) from self.rollback_exc\n\n    # ##### Foreign key constraints checks handling #####\n\n    @contextmanager\n    def constraint_checks_disabled(self):\n        \"\"\"\n        Disable foreign key constraint checking.\n        \"\"\"\n        disabled = self.disable_constraint_checking()\n        try:\n            yield\n        finally:\n            if disabled:\n                self.enable_constraint_checking()\n\n    def disable_constraint_checking(self):\n        \"\"\"\n        Backends can implement as needed to temporarily disable foreign key\n        constraint checking. Should return True if the constraints were\n        disabled and will need to be reenabled.\n        \"\"\"\n        return False\n\n    def enable_constraint_checking(self):\n        \"\"\"\n        Backends can implement as needed to re-enable foreign key constraint\n        checking.\n        \"\"\"\n        pass\n\n    def check_constraints(self, table_names=None):\n        \"\"\"\n        Backends can override this method if they can apply constraint\n        checking (e.g. via \"SET CONSTRAINTS ALL IMMEDIATE\"). Should raise an\n        IntegrityError if any invalid foreign key references are encountered.\n        \"\"\"\n        pass\n\n    # ##### Connection termination handling #####\n\n    def is_usable(self):\n        \"\"\"\n        Test if the database connection is usable.\n\n        This method may assume that self.connection is not None.\n\n        Actual implementations should take care not to raise exceptions\n        as that may prevent Django from recycling unusable connections.\n        \"\"\"\n        raise NotImplementedError(\n            \"subclasses of BaseDatabaseWrapper may require an is_usable() method\"\n        )\n\n    def close_if_health_check_failed(self):\n        \"\"\"Close existing connection if it fails a health check.\"\"\"\n        if (\n            self.connection is None\n            or not self.health_check_enabled\n            or self.health_check_done\n        ):\n            return\n\n        if not self.is_usable():\n            self.close()\n        self.health_check_done = True\n\n    def close_if_unusable_or_obsolete(self):\n        \"\"\"\n        Close the current connection if unrecoverable errors have occurred\n        or if it outlived its maximum age.\n        \"\"\"\n        if self.connection is not None:\n            self.health_check_done = False\n            # If the application didn't restore the original autocommit setting,\n            # don't take chances, drop the connection.\n            if self.get_autocommit() != self.settings_dict[\"AUTOCOMMIT\"]:\n                self.close()\n                return\n\n            # If an exception other than DataError or IntegrityError occurred\n            # since the last commit / rollback, check if the connection works.\n            if self.errors_occurred:\n                if self.is_usable():\n                    self.errors_occurred = False\n                    self.health_check_done = True\n                else:\n                    self.close()\n                    return\n\n            if self.close_at is not None and time.monotonic() >= self.close_at:\n                self.close()\n                return\n\n    # ##### Thread safety handling #####\n\n    @property\n    def allow_thread_sharing(self):\n        with self._thread_sharing_lock:\n            return self._thread_sharing_count > 0\n\n    def inc_thread_sharing(self):\n        with self._thread_sharing_lock:\n            self._thread_sharing_count += 1\n\n    def dec_thread_sharing(self):\n        with self._thread_sharing_lock:\n            if self._thread_sharing_count <= 0:\n                raise RuntimeError(\n                    \"Cannot decrement the thread sharing count below zero.\"\n                )\n            self._thread_sharing_count -= 1\n\n    def validate_thread_sharing(self):\n        \"\"\"\n        Validate that the connection isn't accessed by another thread than the\n        one which originally created it, unless the connection was explicitly\n        authorized to be shared between threads (via the `inc_thread_sharing()`\n        method). Raise an exception if the validation fails.\n        \"\"\"\n        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):\n            raise DatabaseError(\n                \"DatabaseWrapper objects created in a \"\n                \"thread can only be used in that same thread. The object \"\n                \"with alias '%s' was created in thread id %s and this is \"\n                \"thread id %s.\" % (self.alias, self._thread_ident, _thread.get_ident())\n            )\n\n    # ##### Miscellaneous #####\n\n    def prepare_database(self):\n        \"\"\"\n        Hook to do any database check or preparation, generally called before\n        migrating a project or an app.\n        \"\"\"\n        pass\n\n    @cached_property\n    def wrap_database_errors(self):\n        \"\"\"\n        Context manager and decorator that re-throws backend-specific database\n        exceptions using Django's common wrappers.\n        \"\"\"\n        return DatabaseErrorWrapper(self)\n\n    def chunked_cursor(self):\n        \"\"\"\n        Return a cursor that tries to avoid caching in the database (if\n        supported by the database), otherwise return a regular cursor.\n        \"\"\"\n        return self.cursor()\n\n    def make_debug_cursor(self, cursor):\n        \"\"\"Create a cursor that logs all queries in self.queries_log.\"\"\"\n        return utils.CursorDebugWrapper(cursor, self)\n\n    def make_cursor(self, cursor):\n        \"\"\"Create a cursor without debug logging.\"\"\"\n        return utils.CursorWrapper(cursor, self)\n\n    @contextmanager\n    def temporary_connection(self):\n        \"\"\"\n        Context manager that ensures that a connection is established, and\n        if it opened one, closes it to avoid leaving a dangling connection.\n        This is useful for operations outside of the request-response cycle.\n\n        Provide a cursor: with self.temporary_connection() as cursor: ...\n        \"\"\"\n        must_close = self.connection is None\n        try:\n            with self.cursor() as cursor:\n                yield cursor\n        finally:\n            if must_close:\n                self.close()\n\n    @contextmanager\n    def _nodb_cursor(self):\n        \"\"\"\n        Return a cursor from an alternative connection to be used when there is\n        no need to access the main database, specifically for test db\n        creation/deletion. This also prevents the production database from\n        being exposed to potential child threads while (or after) the test\n        database is destroyed. Refs #10868, #17786, #16969.\n        \"\"\"\n        conn = self.__class__({**self.settings_dict, \"NAME\": None}, alias=NO_DB_ALIAS)\n        try:\n            with conn.cursor() as cursor:\n                yield cursor\n        finally:\n            conn.close()\n\n    def schema_editor(self, *args, **kwargs):\n        \"\"\"\n        Return a new instance of this backend's SchemaEditor.\n        \"\"\"\n        if self.SchemaEditorClass is None:\n            raise NotImplementedError(\n                \"The SchemaEditorClass attribute of this database wrapper is still None\"\n            )\n        return self.SchemaEditorClass(self, *args, **kwargs)\n\n    def on_commit(self, func, robust=False):\n        if not callable(func):\n            raise TypeError(\"on_commit()'s callback must be a callable.\")\n        if self.in_atomic_block:\n            # Transaction in progress; save for execution on commit.\n            self.run_on_commit.append((set(self.savepoint_ids), func, robust))\n        elif not self.get_autocommit():\n            raise TransactionManagementError(\n                \"on_commit() cannot be used in manual transaction management\"\n            )\n        else:\n            # No transaction in progress and in autocommit mode; execute\n            # immediately.\n            if robust:\n                try:\n                    func()\n                except Exception as e:\n                    logger.error(\n                        f\"Error calling {func.__qualname__} in on_commit() (%s).\",\n                        e,\n                        exc_info=True,\n                    )\n            else:\n                func()\n\n    def run_and_clear_commit_hooks(self):\n        self.validate_no_atomic_block()\n        current_run_on_commit = self.run_on_commit\n        self.run_on_commit = []\n        while current_run_on_commit:\n            _, func, robust = current_run_on_commit.pop(0)\n            if robust:\n                try:\n                    func()\n                except Exception as e:\n                    logger.error(\n                        f\"Error calling {func.__qualname__} in on_commit() during \"\n                        f\"transaction (%s).\",\n                        e,\n                        exc_info=True,\n                    )\n            else:\n                func()\n\n    @contextmanager\n    def execute_wrapper(self, wrapper):\n        \"\"\"\n        Return a context manager under which the wrapper is applied to suitable\n        database query executions.\n        \"\"\"\n        self.execute_wrappers.append(wrapper)\n        try:\n            yield\n        finally:\n            self.execute_wrappers.pop()\n\n    def copy(self, alias=None):\n        \"\"\"\n        Return a copy of this connection.\n\n        For tests that require two connections to the same database.\n        \"\"\"\n        settings_dict = copy.deepcopy(self.settings_dict)\n        if alias is None:\n            alias = self.alias\n        return type(self)(settings_dict, alias)"}],"ground_truth":null,"score":null},
{"question":"What is the purpose of the `explain_prefix` attribute in the `DatabaseOperations`, and how does it affect other features?","answer":"","relative_code_list":[{"start_line":27,"end_line":422,"belongs_to":{"file_name":"operations.py","upper_path":"../django/django/db/backends/postgresql","module":"postgresql","define_class":["DatabaseOperations"],"imports":["json","functools.lru_cache","functools.partial","django.conf.settings","django.db.backends.base.operations.BaseDatabaseOperations","django.db.backends.postgresql.compiler.InsertUnnest","django.db.backends.postgresql.psycopg_any.Inet","django.db.backends.postgresql.psycopg_any.Jsonb","django.db.backends.postgresql.psycopg_any.errors","django.db.backends.postgresql.psycopg_any.is_psycopg3","django.db.backends.postgresql.psycopg_any.mogrify","django.db.backends.utils.split_tzname_delta","django.db.models.constants.OnConflict","django.db.models.functions.Cast","django.utils.regex_helper._lazy_re_compile","psycopg.types.numeric","django.db.models"]},"relative_function":[],"code":"class DatabaseOperations(BaseDatabaseOperations):\n    compiler_module = \"django.db.backends.postgresql.compiler\"\n    cast_char_field_without_max_length = \"varchar\"\n    explain_prefix = \"EXPLAIN\"\n    explain_options = frozenset(\n        [\n            \"ANALYZE\",\n            \"BUFFERS\",\n            \"COSTS\",\n            \"GENERIC_PLAN\",\n            \"MEMORY\",\n            \"SETTINGS\",\n            \"SERIALIZE\",\n            \"SUMMARY\",\n            \"TIMING\",\n            \"VERBOSE\",\n            \"WAL\",\n        ]\n    )\n    cast_data_types = {\n        \"AutoField\": \"integer\",\n        \"BigAutoField\": \"bigint\",\n        \"SmallAutoField\": \"smallint\",\n    }\n\n    if is_psycopg3:\n        from psycopg.types import numeric\n\n        integerfield_type_map = {\n            \"SmallIntegerField\": numeric.Int2,\n            \"IntegerField\": numeric.Int4,\n            \"BigIntegerField\": numeric.Int8,\n            \"PositiveSmallIntegerField\": numeric.Int2,\n            \"PositiveIntegerField\": numeric.Int4,\n            \"PositiveBigIntegerField\": numeric.Int8,\n        }\n\n    def unification_cast_sql(self, output_field):\n        internal_type = output_field.get_internal_type()\n        if internal_type in (\n            \"GenericIPAddressField\",\n            \"IPAddressField\",\n            \"TimeField\",\n            \"UUIDField\",\n        ):\n            # PostgreSQL will resolve a union as type 'text' if input types are\n            # 'unknown'.\n            # https://www.postgresql.org/docs/current/typeconv-union-case.html\n            # These fields cannot be implicitly cast back in the default\n            # PostgreSQL configuration so we need to explicitly cast them.\n            # We must also remove components of the type within brackets:\n            # varchar(255) -> varchar.\n            return (\n                \"CAST(%%s AS %s)\" % output_field.db_type(self.connection).split(\"(\")[0]\n            )\n        return \"%s\"\n\n    # EXTRACT format cannot be passed in parameters.\n    _extract_format_re = _lazy_re_compile(r\"[A-Z_]+\")\n\n    def date_extract_sql(self, lookup_type, sql, params):\n        # https://www.postgresql.org/docs/current/functions-datetime.html#FUNCTIONS-DATETIME-EXTRACT\n        if lookup_type == \"week_day\":\n            # For consistency across backends, we return Sunday=1, Saturday=7.\n            return f\"EXTRACT(DOW FROM {sql}) + 1\", params\n        elif lookup_type == \"iso_week_day\":\n            return f\"EXTRACT(ISODOW FROM {sql})\", params\n        elif lookup_type == \"iso_year\":\n            return f\"EXTRACT(ISOYEAR FROM {sql})\", params\n\n        lookup_type = lookup_type.upper()\n        if not self._extract_format_re.fullmatch(lookup_type):\n            raise ValueError(f\"Invalid lookup type: {lookup_type!r}\")\n        return f\"EXTRACT({lookup_type} FROM {sql})\", params\n\n    def date_trunc_sql(self, lookup_type, sql, params, tzname=None):\n        sql, params = self._convert_sql_to_tz(sql, params, tzname)\n        # https://www.postgresql.org/docs/current/functions-datetime.html#FUNCTIONS-DATETIME-TRUNC\n        return f\"DATE_TRUNC(%s, {sql})\", (lookup_type, *params)\n\n    def _prepare_tzname_delta(self, tzname):\n        tzname, sign, offset = split_tzname_delta(tzname)\n        if offset:\n            sign = \"-\" if sign == \"+\" else \"+\"\n            return f\"{tzname}{sign}{offset}\"\n        return tzname\n\n    def _convert_sql_to_tz(self, sql, params, tzname):\n        if tzname and settings.USE_TZ:\n            tzname_param = self._prepare_tzname_delta(tzname)\n            return f\"{sql} AT TIME ZONE %s\", (*params, tzname_param)\n        return sql, params\n\n    def datetime_cast_date_sql(self, sql, params, tzname):\n        sql, params = self._convert_sql_to_tz(sql, params, tzname)\n        return f\"({sql})::date\", params\n\n    def datetime_cast_time_sql(self, sql, params, tzname):\n        sql, params = self._convert_sql_to_tz(sql, params, tzname)\n        return f\"({sql})::time\", params\n\n    def datetime_extract_sql(self, lookup_type, sql, params, tzname):\n        sql, params = self._convert_sql_to_tz(sql, params, tzname)\n        if lookup_type == \"second\":\n            # Truncate fractional seconds.\n            return f\"EXTRACT(SECOND FROM DATE_TRUNC(%s, {sql}))\", (\"second\", *params)\n        return self.date_extract_sql(lookup_type, sql, params)\n\n    def datetime_trunc_sql(self, lookup_type, sql, params, tzname):\n        sql, params = self._convert_sql_to_tz(sql, params, tzname)\n        # https://www.postgresql.org/docs/current/functions-datetime.html#FUNCTIONS-DATETIME-TRUNC\n        return f\"DATE_TRUNC(%s, {sql})\", (lookup_type, *params)\n\n    def time_extract_sql(self, lookup_type, sql, params):\n        if lookup_type == \"second\":\n            # Truncate fractional seconds.\n            return f\"EXTRACT(SECOND FROM DATE_TRUNC(%s, {sql}))\", (\"second\", *params)\n        return self.date_extract_sql(lookup_type, sql, params)\n\n    def time_trunc_sql(self, lookup_type, sql, params, tzname=None):\n        sql, params = self._convert_sql_to_tz(sql, params, tzname)\n        return f\"DATE_TRUNC(%s, {sql})::time\", (lookup_type, *params)\n\n    def deferrable_sql(self):\n        return \" DEFERRABLE INITIALLY DEFERRED\"\n\n    def bulk_insert_sql(self, fields, placeholder_rows):\n        if isinstance(placeholder_rows, InsertUnnest):\n            return f\"SELECT * FROM {placeholder_rows}\"\n        return super().bulk_insert_sql(fields, placeholder_rows)\n\n    def fetch_returned_insert_rows(self, cursor):\n        \"\"\"\n        Given a cursor object that has just performed an INSERT...RETURNING\n        statement into a table, return the tuple of returned data.\n        \"\"\"\n        return cursor.fetchall()\n\n    def lookup_cast(self, lookup_type, internal_type=None):\n        lookup = \"%s\"\n        # Cast text lookups to text to allow things like filter(x__contains=4)\n        if lookup_type in (\n            \"iexact\",\n            \"contains\",\n            \"icontains\",\n            \"startswith\",\n            \"istartswith\",\n            \"endswith\",\n            \"iendswith\",\n            \"regex\",\n            \"iregex\",\n        ):\n            if internal_type in (\"IPAddressField\", \"GenericIPAddressField\"):\n                lookup = \"HOST(%s)\"\n            else:\n                lookup = \"%s::text\"\n\n        # Use UPPER(x) for case-insensitive lookups; it's faster.\n        if lookup_type in (\"iexact\", \"icontains\", \"istartswith\", \"iendswith\"):\n            lookup = \"UPPER(%s)\" % lookup\n\n        return lookup\n\n    def no_limit_value(self):\n        return None\n\n    def prepare_sql_script(self, sql):\n        return [sql]\n\n    def quote_name(self, name):\n        if name.startswith('\"') and name.endswith('\"'):\n            return name  # Quoting once is enough.\n        return '\"%s\"' % name\n\n    def compose_sql(self, sql, params):\n        return mogrify(sql, params, self.connection)\n\n    def set_time_zone_sql(self):\n        return \"SELECT set_config('TimeZone', %s, false)\"\n\n    def sql_flush(self, style, tables, *, reset_sequences=False, allow_cascade=False):\n        if not tables:\n            return []\n\n        # Perform a single SQL 'TRUNCATE x, y, z...;' statement. It allows us\n        # to truncate tables referenced by a foreign key in any other table.\n        sql_parts = [\n            style.SQL_KEYWORD(\"TRUNCATE\"),\n            \", \".join(style.SQL_FIELD(self.quote_name(table)) for table in tables),\n        ]\n        if reset_sequences:\n            sql_parts.append(style.SQL_KEYWORD(\"RESTART IDENTITY\"))\n        if allow_cascade:\n            sql_parts.append(style.SQL_KEYWORD(\"CASCADE\"))\n        return [\"%s;\" % \" \".join(sql_parts)]\n\n    def sequence_reset_by_name_sql(self, style, sequences):\n        # 'ALTER SEQUENCE sequence_name RESTART WITH 1;'... style SQL statements\n        # to reset sequence indices\n        sql = []\n        for sequence_info in sequences:\n            table_name = sequence_info[\"table\"]\n            # 'id' will be the case if it's an m2m using an autogenerated\n            # intermediate table (see BaseDatabaseIntrospection.sequence_list).\n            column_name = sequence_info[\"column\"] or \"id\"\n            sql.append(\n                \"%s setval(pg_get_serial_sequence('%s','%s'), 1, false);\"\n                % (\n                    style.SQL_KEYWORD(\"SELECT\"),\n                    style.SQL_TABLE(self.quote_name(table_name)),\n                    style.SQL_FIELD(column_name),\n                )\n            )\n        return sql\n\n    def tablespace_sql(self, tablespace, inline=False):\n        if inline:\n            return \"USING INDEX TABLESPACE %s\" % self.quote_name(tablespace)\n        else:\n            return \"TABLESPACE %s\" % self.quote_name(tablespace)\n\n    def sequence_reset_sql(self, style, model_list):\n        from django.db import models\n\n        output = []\n        qn = self.quote_name\n        for model in model_list:\n            # Use `coalesce` to set the sequence for each model to the max pk\n            # value if there are records, or 1 if there are none. Set the\n            # `is_called` property (the third argument to `setval`) to true if\n            # there are records (as the max pk value is already in use),\n            # otherwise set it to false. Use pg_get_serial_sequence to get the\n            # underlying sequence name from the table name and column name.\n\n            for f in model._meta.local_fields:\n                if isinstance(f, models.AutoField):\n                    output.append(\n                        \"%s setval(pg_get_serial_sequence('%s','%s'), \"\n                        \"coalesce(max(%s), 1), max(%s) %s null) %s %s;\"\n                        % (\n                            style.SQL_KEYWORD(\"SELECT\"),\n                            style.SQL_TABLE(qn(model._meta.db_table)),\n                            style.SQL_FIELD(f.column),\n                            style.SQL_FIELD(qn(f.column)),\n                            style.SQL_FIELD(qn(f.column)),\n                            style.SQL_KEYWORD(\"IS NOT\"),\n                            style.SQL_KEYWORD(\"FROM\"),\n                            style.SQL_TABLE(qn(model._meta.db_table)),\n                        )\n                    )\n                    # Only one AutoField is allowed per model, so don't bother\n                    # continuing.\n                    break\n        return output\n\n    def prep_for_iexact_query(self, x):\n        return x\n\n    def max_name_length(self):\n        \"\"\"\n        Return the maximum length of an identifier.\n\n        The maximum length of an identifier is 63 by default, but can be\n        changed by recompiling PostgreSQL after editing the NAMEDATALEN\n        macro in src/include/pg_config_manual.h.\n\n        This implementation returns 63, but can be overridden by a custom\n        database backend that inherits most of its behavior from this one.\n        \"\"\"\n        return 63\n\n    def distinct_sql(self, fields, params):\n        if fields:\n            params = [param for param_list in params for param in param_list]\n            return ([\"DISTINCT ON (%s)\" % \", \".join(fields)], params)\n        else:\n            return [\"DISTINCT\"], []\n\n    if is_psycopg3:\n\n        def last_executed_query(self, cursor, sql, params):\n            if self.connection.features.uses_server_side_binding:\n                try:\n                    return self.compose_sql(sql, params)\n                except errors.DataError:\n                    return None\n            else:\n                if cursor._query and cursor._query.query is not None:\n                    return cursor._query.query.decode()\n                return None\n\n    else:\n\n        def last_executed_query(self, cursor, sql, params):\n            # https://www.psycopg.org/docs/cursor.html#cursor.query\n            # The query attribute is a Psycopg extension to the DB API 2.0.\n            if cursor.query is not None:\n                return cursor.query.decode()\n            return None\n\n    def return_insert_columns(self, fields):\n        if not fields:\n            return \"\", ()\n        columns = [\n            \"%s.%s\"\n            % (\n                self.quote_name(field.model._meta.db_table),\n                self.quote_name(field.column),\n            )\n            for field in fields\n        ]\n        return \"RETURNING %s\" % \", \".join(columns), ()\n\n    if is_psycopg3:\n\n        def adapt_integerfield_value(self, value, internal_type):\n            if value is None or hasattr(value, \"resolve_expression\"):\n                return value\n            return self.integerfield_type_map[internal_type](value)\n\n    def adapt_datefield_value(self, value):\n        return value\n\n    def adapt_datetimefield_value(self, value):\n        return value\n\n    def adapt_timefield_value(self, value):\n        return value\n\n    def adapt_ipaddressfield_value(self, value):\n        if value:\n            return Inet(value)\n        return None\n\n    def adapt_json_value(self, value, encoder):\n        return Jsonb(value, dumps=get_json_dumps(encoder))\n\n    def subtract_temporals(self, internal_type, lhs, rhs):\n        if internal_type == \"DateField\":\n            lhs_sql, lhs_params = lhs\n            rhs_sql, rhs_params = rhs\n            params = (*lhs_params, *rhs_params)\n            return \"(interval '1 day' * (%s - %s))\" % (lhs_sql, rhs_sql), params\n        return super().subtract_temporals(internal_type, lhs, rhs)\n\n    def explain_query_prefix(self, format=None, **options):\n        extra = {}\n        if serialize := options.pop(\"serialize\", None):\n            if serialize.upper() in {\"TEXT\", \"BINARY\"}:\n                extra[\"SERIALIZE\"] = serialize.upper()\n        # Normalize options.\n        if options:\n            options = {\n                name.upper(): \"true\" if value else \"false\"\n                for name, value in options.items()\n            }\n            for valid_option in self.explain_options:\n                value = options.pop(valid_option, None)\n                if value is not None:\n                    extra[valid_option] = value\n        prefix = super().explain_query_prefix(format, **options)\n        if format:\n            extra[\"FORMAT\"] = format\n        if extra:\n            prefix += \" (%s)\" % \", \".join(\"%s %s\" % i for i in extra.items())\n        return prefix\n\n    def on_conflict_suffix_sql(self, fields, on_conflict, update_fields, unique_fields):\n        if on_conflict == OnConflict.IGNORE:\n            return \"ON CONFLICT DO NOTHING\"\n        if on_conflict == OnConflict.UPDATE:\n            return \"ON CONFLICT(%s) DO UPDATE SET %s\" % (\n                \", \".join(map(self.quote_name, unique_fields)),\n                \", \".join(\n                    [\n                        f\"{field} = EXCLUDED.{field}\"\n                        for field in map(self.quote_name, update_fields)\n                    ]\n                ),\n            )\n        return super().on_conflict_suffix_sql(\n            fields,\n            on_conflict,\n            update_fields,\n            unique_fields,\n        )\n\n    def prepare_join_on_clause(self, lhs_table, lhs_field, rhs_table, rhs_field):\n        lhs_expr, rhs_expr = super().prepare_join_on_clause(\n            lhs_table, lhs_field, rhs_table, rhs_field\n        )\n\n        if lhs_field.db_type(self.connection) != rhs_field.db_type(self.connection):\n            rhs_expr = Cast(rhs_expr, lhs_field)\n\n        return lhs_expr, rhs_expr"}],"ground_truth":null,"score":null},
{"question":"What are the parameters and expected behavior of the `_savepoint_rollback` method in the `BaseDatabaseWrapper`?","answer":"","relative_code_list":[{"start_line":30,"end_line":793,"belongs_to":{"file_name":"base.py","upper_path":"../django/django/db/backends/base","module":"base","define_class":["BaseDatabaseWrapper"],"imports":["_thread","copy","datetime","logging","threading","time","warnings","zoneinfo","collections.deque","contextlib.contextmanager","django.conf.settings","django.core.exceptions.ImproperlyConfigured","django.db.DEFAULT_DB_ALIAS","django.db.DatabaseError","django.db.NotSupportedError","django.db.backends.utils","django.db.backends.base.validation.BaseDatabaseValidation","django.db.backends.signals.connection_created","django.db.backends.utils.debug_transaction","django.db.transaction.TransactionManagementError","django.db.utils.DatabaseErrorWrapper","django.db.utils.ProgrammingError","django.utils.asyncio.async_unsafe","django.utils.functional.cached_property"]},"relative_function":[],"code":"class BaseDatabaseWrapper:\n    \"\"\"Represent a database connection.\"\"\"\n\n    # Mapping of Field objects to their column types.\n    data_types = {}\n    # Mapping of Field objects to their SQL suffix such as AUTOINCREMENT.\n    data_types_suffix = {}\n    # Mapping of Field objects to their SQL for CHECK constraints.\n    data_type_check_constraints = {}\n    ops = None\n    vendor = \"unknown\"\n    display_name = \"unknown\"\n    SchemaEditorClass = None\n    # Classes instantiated in __init__().\n    client_class = None\n    creation_class = None\n    features_class = None\n    introspection_class = None\n    ops_class = None\n    validation_class = BaseDatabaseValidation\n\n    queries_limit = 9000\n\n    def __init__(self, settings_dict, alias=DEFAULT_DB_ALIAS):\n        # Connection related attributes.\n        # The underlying database connection.\n        self.connection = None\n        # `settings_dict` should be a dictionary containing keys such as\n        # NAME, USER, etc. It's called `settings_dict` instead of `settings`\n        # to disambiguate it from Django settings modules.\n        self.settings_dict = settings_dict\n        self.alias = alias\n        # Query logging in debug mode or when explicitly enabled.\n        self.queries_log = deque(maxlen=self.queries_limit)\n        self.force_debug_cursor = False\n\n        # Transaction related attributes.\n        # Tracks if the connection is in autocommit mode. Per PEP 249, by\n        # default, it isn't.\n        self.autocommit = False\n        # Tracks if the connection is in a transaction managed by 'atomic'.\n        self.in_atomic_block = False\n        # Increment to generate unique savepoint ids.\n        self.savepoint_state = 0\n        # List of savepoints created by 'atomic'.\n        self.savepoint_ids = []\n        # Stack of active 'atomic' blocks.\n        self.atomic_blocks = []\n        # Tracks if the outermost 'atomic' block should commit on exit,\n        # ie. if autocommit was active on entry.\n        self.commit_on_exit = True\n        # Tracks if the transaction should be rolled back to the next\n        # available savepoint because of an exception in an inner block.\n        self.needs_rollback = False\n        self.rollback_exc = None\n\n        # Connection termination related attributes.\n        self.close_at = None\n        self.closed_in_transaction = False\n        self.errors_occurred = False\n        self.health_check_enabled = False\n        self.health_check_done = False\n\n        # Thread-safety related attributes.\n        self._thread_sharing_lock = threading.Lock()\n        self._thread_sharing_count = 0\n        self._thread_ident = _thread.get_ident()\n\n        # A list of no-argument functions to run when the transaction commits.\n        # Each entry is an (sids, func, robust) tuple, where sids is a set of\n        # the active savepoint IDs when this function was registered and robust\n        # specifies whether it's allowed for the function to fail.\n        self.run_on_commit = []\n\n        # Should we run the on-commit hooks the next time set_autocommit(True)\n        # is called?\n        self.run_commit_hooks_on_set_autocommit_on = False\n\n        # A stack of wrappers to be invoked around execute()/executemany()\n        # calls. Each entry is a function taking five arguments: execute, sql,\n        # params, many, and context. It's the function's responsibility to\n        # call execute(sql, params, many, context).\n        self.execute_wrappers = []\n\n        self.client = self.client_class(self)\n        self.creation = self.creation_class(self)\n        self.features = self.features_class(self)\n        self.introspection = self.introspection_class(self)\n        self.ops = self.ops_class(self)\n        self.validation = self.validation_class(self)\n\n    def __repr__(self):\n        return (\n            f\"<{self.__class__.__qualname__} \"\n            f\"vendor={self.vendor!r} alias={self.alias!r}>\"\n        )\n\n    def ensure_timezone(self):\n        \"\"\"\n        Ensure the connection's timezone is set to `self.timezone_name` and\n        return whether it changed or not.\n        \"\"\"\n        return False\n\n    @cached_property\n    def timezone(self):\n        \"\"\"\n        Return a tzinfo of the database connection time zone.\n\n        This is only used when time zone support is enabled. When a datetime is\n        read from the database, it is always returned in this time zone.\n\n        When the database backend supports time zones, it doesn't matter which\n        time zone Django uses, as long as aware datetimes are used everywhere.\n        Other users connecting to the database can choose their own time zone.\n\n        When the database backend doesn't support time zones, the time zone\n        Django uses may be constrained by the requirements of other users of\n        the database.\n        \"\"\"\n        if not settings.USE_TZ:\n            return None\n        elif self.settings_dict[\"TIME_ZONE\"] is None:\n            return datetime.UTC\n        else:\n            return zoneinfo.ZoneInfo(self.settings_dict[\"TIME_ZONE\"])\n\n    @cached_property\n    def timezone_name(self):\n        \"\"\"\n        Name of the time zone of the database connection.\n        \"\"\"\n        if not settings.USE_TZ:\n            return settings.TIME_ZONE\n        elif self.settings_dict[\"TIME_ZONE\"] is None:\n            return \"UTC\"\n        else:\n            return self.settings_dict[\"TIME_ZONE\"]\n\n    @property\n    def queries_logged(self):\n        return self.force_debug_cursor or settings.DEBUG\n\n    @property\n    def queries(self):\n        if len(self.queries_log) == self.queries_log.maxlen:\n            warnings.warn(\n                \"Limit for query logging exceeded, only the last {} queries \"\n                \"will be returned.\".format(self.queries_log.maxlen),\n                stacklevel=2,\n            )\n        return list(self.queries_log)\n\n    def get_database_version(self):\n        \"\"\"Return a tuple of the database's version.\"\"\"\n        raise NotImplementedError(\n            \"subclasses of BaseDatabaseWrapper may require a get_database_version() \"\n            \"method.\"\n        )\n\n    def check_database_version_supported(self):\n        \"\"\"\n        Raise an error if the database version isn't supported by this\n        version of Django.\n        \"\"\"\n        if (\n            self.features.minimum_database_version is not None\n            and self.get_database_version() < self.features.minimum_database_version\n        ):\n            db_version = \".\".join(map(str, self.get_database_version()))\n            min_db_version = \".\".join(map(str, self.features.minimum_database_version))\n            raise NotSupportedError(\n                f\"{self.display_name} {min_db_version} or later is required \"\n                f\"(found {db_version}).\"\n            )\n\n    # ##### Backend-specific methods for creating connections and cursors #####\n\n    def get_connection_params(self):\n        \"\"\"Return a dict of parameters suitable for get_new_connection.\"\"\"\n        raise NotImplementedError(\n            \"subclasses of BaseDatabaseWrapper may require a get_connection_params() \"\n            \"method\"\n        )\n\n    def get_new_connection(self, conn_params):\n        \"\"\"Open a connection to the database.\"\"\"\n        raise NotImplementedError(\n            \"subclasses of BaseDatabaseWrapper may require a get_new_connection() \"\n            \"method\"\n        )\n\n    def init_connection_state(self):\n        \"\"\"Initialize the database connection settings.\"\"\"\n        global RAN_DB_VERSION_CHECK\n        if self.alias not in RAN_DB_VERSION_CHECK:\n            self.check_database_version_supported()\n            RAN_DB_VERSION_CHECK.add(self.alias)\n\n    def create_cursor(self, name=None):\n        \"\"\"Create a cursor. Assume that a connection is established.\"\"\"\n        raise NotImplementedError(\n            \"subclasses of BaseDatabaseWrapper may require a create_cursor() method\"\n        )\n\n    # ##### Backend-specific methods for creating connections #####\n\n    @async_unsafe\n    def connect(self):\n        \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n        # Check for invalid configurations.\n        self.check_settings()\n        # In case the previous connection was closed while in an atomic block\n        self.in_atomic_block = False\n        self.savepoint_ids = []\n        self.atomic_blocks = []\n        self.needs_rollback = False\n        # Reset parameters defining when to close/health-check the connection.\n        self.health_check_enabled = self.settings_dict[\"CONN_HEALTH_CHECKS\"]\n        max_age = self.settings_dict[\"CONN_MAX_AGE\"]\n        self.close_at = None if max_age is None else time.monotonic() + max_age\n        self.closed_in_transaction = False\n        self.errors_occurred = False\n        # New connections are healthy.\n        self.health_check_done = True\n        # Establish the connection\n        conn_params = self.get_connection_params()\n        self.connection = self.get_new_connection(conn_params)\n        self.set_autocommit(self.settings_dict[\"AUTOCOMMIT\"])\n        self.init_connection_state()\n        connection_created.send(sender=self.__class__, connection=self)\n\n        self.run_on_commit = []\n\n    def check_settings(self):\n        if self.settings_dict[\"TIME_ZONE\"] is not None and not settings.USE_TZ:\n            raise ImproperlyConfigured(\n                \"Connection '%s' cannot set TIME_ZONE because USE_TZ is False.\"\n                % self.alias\n            )\n\n    @async_unsafe\n    def ensure_connection(self):\n        \"\"\"Guarantee that a connection to the database is established.\"\"\"\n        if self.connection is None:\n            if self.in_atomic_block and self.closed_in_transaction:\n                raise ProgrammingError(\n                    \"Cannot open a new connection in an atomic block.\"\n                )\n            with self.wrap_database_errors:\n                self.connect()\n\n    # ##### Backend-specific wrappers for PEP-249 connection methods #####\n\n    def _prepare_cursor(self, cursor):\n        \"\"\"\n        Validate the connection is usable and perform database cursor wrapping.\n        \"\"\"\n        self.validate_thread_sharing()\n        if self.queries_logged:\n            wrapped_cursor = self.make_debug_cursor(cursor)\n        else:\n            wrapped_cursor = self.make_cursor(cursor)\n        return wrapped_cursor\n\n    def _cursor(self, name=None):\n        self.close_if_health_check_failed()\n        self.ensure_connection()\n        with self.wrap_database_errors:\n            return self._prepare_cursor(self.create_cursor(name))\n\n    def _commit(self):\n        if self.connection is not None:\n            with debug_transaction(self, \"COMMIT\"), self.wrap_database_errors:\n                return self.connection.commit()\n\n    def _rollback(self):\n        if self.connection is not None:\n            with debug_transaction(self, \"ROLLBACK\"), self.wrap_database_errors:\n                return self.connection.rollback()\n\n    def _close(self):\n        if self.connection is not None:\n            with self.wrap_database_errors:\n                return self.connection.close()\n\n    # ##### Generic wrappers for PEP-249 connection methods #####\n\n    @async_unsafe\n    def cursor(self):\n        \"\"\"Create a cursor, opening a connection if necessary.\"\"\"\n        return self._cursor()\n\n    @async_unsafe\n    def commit(self):\n        \"\"\"Commit a transaction and reset the dirty flag.\"\"\"\n        self.validate_thread_sharing()\n        self.validate_no_atomic_block()\n        self._commit()\n        # A successful commit means that the database connection works.\n        self.errors_occurred = False\n        self.run_commit_hooks_on_set_autocommit_on = True\n\n    @async_unsafe\n    def rollback(self):\n        \"\"\"Roll back a transaction and reset the dirty flag.\"\"\"\n        self.validate_thread_sharing()\n        self.validate_no_atomic_block()\n        self._rollback()\n        # A successful rollback means that the database connection works.\n        self.errors_occurred = False\n        self.needs_rollback = False\n        self.run_on_commit = []\n\n    @async_unsafe\n    def close(self):\n        \"\"\"Close the connection to the database.\"\"\"\n        self.validate_thread_sharing()\n        self.run_on_commit = []\n\n        # Don't call validate_no_atomic_block() to avoid making it difficult\n        # to get rid of a connection in an invalid state. The next connect()\n        # will reset the transaction state anyway.\n        if self.closed_in_transaction or self.connection is None:\n            return\n        try:\n            self._close()\n        finally:\n            if self.in_atomic_block:\n                self.closed_in_transaction = True\n                self.needs_rollback = True\n            else:\n                self.connection = None\n\n    # ##### Backend-specific savepoint management methods #####\n\n    def _savepoint(self, sid):\n        with self.cursor() as cursor:\n            cursor.execute(self.ops.savepoint_create_sql(sid))\n\n    def _savepoint_rollback(self, sid):\n        with self.cursor() as cursor:\n            cursor.execute(self.ops.savepoint_rollback_sql(sid))\n\n    def _savepoint_commit(self, sid):\n        with self.cursor() as cursor:\n            cursor.execute(self.ops.savepoint_commit_sql(sid))\n\n    def _savepoint_allowed(self):\n        # Savepoints cannot be created outside a transaction\n        return self.features.uses_savepoints and not self.get_autocommit()\n\n    # ##### Generic savepoint management methods #####\n\n    @async_unsafe\n    def savepoint(self):\n        \"\"\"\n        Create a savepoint inside the current transaction. Return an\n        identifier for the savepoint that will be used for the subsequent\n        rollback or commit. Do nothing if savepoints are not supported.\n        \"\"\"\n        if not self._savepoint_allowed():\n            return\n\n        thread_ident = _thread.get_ident()\n        tid = str(thread_ident).replace(\"-\", \"\")\n\n        self.savepoint_state += 1\n        sid = \"s%s_x%d\" % (tid, self.savepoint_state)\n\n        self.validate_thread_sharing()\n        self._savepoint(sid)\n\n        return sid\n\n    @async_unsafe\n    def savepoint_rollback(self, sid):\n        \"\"\"\n        Roll back to a savepoint. Do nothing if savepoints are not supported.\n        \"\"\"\n        if not self._savepoint_allowed():\n            return\n\n        self.validate_thread_sharing()\n        self._savepoint_rollback(sid)\n\n        # Remove any callbacks registered while this savepoint was active.\n        self.run_on_commit = [\n            (sids, func, robust)\n            for (sids, func, robust) in self.run_on_commit\n            if sid not in sids\n        ]\n\n    @async_unsafe\n    def savepoint_commit(self, sid):\n        \"\"\"\n        Release a savepoint. Do nothing if savepoints are not supported.\n        \"\"\"\n        if not self._savepoint_allowed():\n            return\n\n        self.validate_thread_sharing()\n        self._savepoint_commit(sid)\n\n    @async_unsafe\n    def clean_savepoints(self):\n        \"\"\"\n        Reset the counter used to generate unique savepoint ids in this thread.\n        \"\"\"\n        self.savepoint_state = 0\n\n    # ##### Backend-specific transaction management methods #####\n\n    def _set_autocommit(self, autocommit):\n        \"\"\"\n        Backend-specific implementation to enable or disable autocommit.\n        \"\"\"\n        raise NotImplementedError(\n            \"subclasses of BaseDatabaseWrapper may require a _set_autocommit() method\"\n        )\n\n    # ##### Generic transaction management methods #####\n\n    def get_autocommit(self):\n        \"\"\"Get the autocommit state.\"\"\"\n        self.ensure_connection()\n        return self.autocommit\n\n    def set_autocommit(\n        self, autocommit, force_begin_transaction_with_broken_autocommit=False\n    ):\n        \"\"\"\n        Enable or disable autocommit.\n\n        The usual way to start a transaction is to turn autocommit off.\n        SQLite does not properly start a transaction when disabling\n        autocommit. To avoid this buggy behavior and to actually enter a new\n        transaction, an explicit BEGIN is required. Using\n        force_begin_transaction_with_broken_autocommit=True will issue an\n        explicit BEGIN with SQLite. This option will be ignored for other\n        backends.\n        \"\"\"\n        self.validate_no_atomic_block()\n        self.close_if_health_check_failed()\n        self.ensure_connection()\n\n        start_transaction_under_autocommit = (\n            force_begin_transaction_with_broken_autocommit\n            and not autocommit\n            and hasattr(self, \"_start_transaction_under_autocommit\")\n        )\n\n        if start_transaction_under_autocommit:\n            self._start_transaction_under_autocommit()\n        elif autocommit:\n            self._set_autocommit(autocommit)\n        else:\n            with debug_transaction(self, \"BEGIN\"):\n                self._set_autocommit(autocommit)\n        self.autocommit = autocommit\n\n        if autocommit and self.run_commit_hooks_on_set_autocommit_on:\n            self.run_and_clear_commit_hooks()\n            self.run_commit_hooks_on_set_autocommit_on = False\n\n    def get_rollback(self):\n        \"\"\"Get the \"needs rollback\" flag -- for *advanced use* only.\"\"\"\n        if not self.in_atomic_block:\n            raise TransactionManagementError(\n                \"The rollback flag doesn't work outside of an 'atomic' block.\"\n            )\n        return self.needs_rollback\n\n    def set_rollback(self, rollback):\n        \"\"\"\n        Set or unset the \"needs rollback\" flag -- for *advanced use* only.\n        \"\"\"\n        if not self.in_atomic_block:\n            raise TransactionManagementError(\n                \"The rollback flag doesn't work outside of an 'atomic' block.\"\n            )\n        self.needs_rollback = rollback\n\n    def validate_no_atomic_block(self):\n        \"\"\"Raise an error if an atomic block is active.\"\"\"\n        if self.in_atomic_block:\n            raise TransactionManagementError(\n                \"This is forbidden when an 'atomic' block is active.\"\n            )\n\n    def validate_no_broken_transaction(self):\n        if self.needs_rollback:\n            raise TransactionManagementError(\n                \"An error occurred in the current transaction. You can't \"\n                \"execute queries until the end of the 'atomic' block.\"\n            ) from self.rollback_exc\n\n    # ##### Foreign key constraints checks handling #####\n\n    @contextmanager\n    def constraint_checks_disabled(self):\n        \"\"\"\n        Disable foreign key constraint checking.\n        \"\"\"\n        disabled = self.disable_constraint_checking()\n        try:\n            yield\n        finally:\n            if disabled:\n                self.enable_constraint_checking()\n\n    def disable_constraint_checking(self):\n        \"\"\"\n        Backends can implement as needed to temporarily disable foreign key\n        constraint checking. Should return True if the constraints were\n        disabled and will need to be reenabled.\n        \"\"\"\n        return False\n\n    def enable_constraint_checking(self):\n        \"\"\"\n        Backends can implement as needed to re-enable foreign key constraint\n        checking.\n        \"\"\"\n        pass\n\n    def check_constraints(self, table_names=None):\n        \"\"\"\n        Backends can override this method if they can apply constraint\n        checking (e.g. via \"SET CONSTRAINTS ALL IMMEDIATE\"). Should raise an\n        IntegrityError if any invalid foreign key references are encountered.\n        \"\"\"\n        pass\n\n    # ##### Connection termination handling #####\n\n    def is_usable(self):\n        \"\"\"\n        Test if the database connection is usable.\n\n        This method may assume that self.connection is not None.\n\n        Actual implementations should take care not to raise exceptions\n        as that may prevent Django from recycling unusable connections.\n        \"\"\"\n        raise NotImplementedError(\n            \"subclasses of BaseDatabaseWrapper may require an is_usable() method\"\n        )\n\n    def close_if_health_check_failed(self):\n        \"\"\"Close existing connection if it fails a health check.\"\"\"\n        if (\n            self.connection is None\n            or not self.health_check_enabled\n            or self.health_check_done\n        ):\n            return\n\n        if not self.is_usable():\n            self.close()\n        self.health_check_done = True\n\n    def close_if_unusable_or_obsolete(self):\n        \"\"\"\n        Close the current connection if unrecoverable errors have occurred\n        or if it outlived its maximum age.\n        \"\"\"\n        if self.connection is not None:\n            self.health_check_done = False\n            # If the application didn't restore the original autocommit setting,\n            # don't take chances, drop the connection.\n            if self.get_autocommit() != self.settings_dict[\"AUTOCOMMIT\"]:\n                self.close()\n                return\n\n            # If an exception other than DataError or IntegrityError occurred\n            # since the last commit / rollback, check if the connection works.\n            if self.errors_occurred:\n                if self.is_usable():\n                    self.errors_occurred = False\n                    self.health_check_done = True\n                else:\n                    self.close()\n                    return\n\n            if self.close_at is not None and time.monotonic() >= self.close_at:\n                self.close()\n                return\n\n    # ##### Thread safety handling #####\n\n    @property\n    def allow_thread_sharing(self):\n        with self._thread_sharing_lock:\n            return self._thread_sharing_count > 0\n\n    def inc_thread_sharing(self):\n        with self._thread_sharing_lock:\n            self._thread_sharing_count += 1\n\n    def dec_thread_sharing(self):\n        with self._thread_sharing_lock:\n            if self._thread_sharing_count <= 0:\n                raise RuntimeError(\n                    \"Cannot decrement the thread sharing count below zero.\"\n                )\n            self._thread_sharing_count -= 1\n\n    def validate_thread_sharing(self):\n        \"\"\"\n        Validate that the connection isn't accessed by another thread than the\n        one which originally created it, unless the connection was explicitly\n        authorized to be shared between threads (via the `inc_thread_sharing()`\n        method). Raise an exception if the validation fails.\n        \"\"\"\n        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):\n            raise DatabaseError(\n                \"DatabaseWrapper objects created in a \"\n                \"thread can only be used in that same thread. The object \"\n                \"with alias '%s' was created in thread id %s and this is \"\n                \"thread id %s.\" % (self.alias, self._thread_ident, _thread.get_ident())\n            )\n\n    # ##### Miscellaneous #####\n\n    def prepare_database(self):\n        \"\"\"\n        Hook to do any database check or preparation, generally called before\n        migrating a project or an app.\n        \"\"\"\n        pass\n\n    @cached_property\n    def wrap_database_errors(self):\n        \"\"\"\n        Context manager and decorator that re-throws backend-specific database\n        exceptions using Django's common wrappers.\n        \"\"\"\n        return DatabaseErrorWrapper(self)\n\n    def chunked_cursor(self):\n        \"\"\"\n        Return a cursor that tries to avoid caching in the database (if\n        supported by the database), otherwise return a regular cursor.\n        \"\"\"\n        return self.cursor()\n\n    def make_debug_cursor(self, cursor):\n        \"\"\"Create a cursor that logs all queries in self.queries_log.\"\"\"\n        return utils.CursorDebugWrapper(cursor, self)\n\n    def make_cursor(self, cursor):\n        \"\"\"Create a cursor without debug logging.\"\"\"\n        return utils.CursorWrapper(cursor, self)\n\n    @contextmanager\n    def temporary_connection(self):\n        \"\"\"\n        Context manager that ensures that a connection is established, and\n        if it opened one, closes it to avoid leaving a dangling connection.\n        This is useful for operations outside of the request-response cycle.\n\n        Provide a cursor: with self.temporary_connection() as cursor: ...\n        \"\"\"\n        must_close = self.connection is None\n        try:\n            with self.cursor() as cursor:\n                yield cursor\n        finally:\n            if must_close:\n                self.close()\n\n    @contextmanager\n    def _nodb_cursor(self):\n        \"\"\"\n        Return a cursor from an alternative connection to be used when there is\n        no need to access the main database, specifically for test db\n        creation/deletion. This also prevents the production database from\n        being exposed to potential child threads while (or after) the test\n        database is destroyed. Refs #10868, #17786, #16969.\n        \"\"\"\n        conn = self.__class__({**self.settings_dict, \"NAME\": None}, alias=NO_DB_ALIAS)\n        try:\n            with conn.cursor() as cursor:\n                yield cursor\n        finally:\n            conn.close()\n\n    def schema_editor(self, *args, **kwargs):\n        \"\"\"\n        Return a new instance of this backend's SchemaEditor.\n        \"\"\"\n        if self.SchemaEditorClass is None:\n            raise NotImplementedError(\n                \"The SchemaEditorClass attribute of this database wrapper is still None\"\n            )\n        return self.SchemaEditorClass(self, *args, **kwargs)\n\n    def on_commit(self, func, robust=False):\n        if not callable(func):\n            raise TypeError(\"on_commit()'s callback must be a callable.\")\n        if self.in_atomic_block:\n            # Transaction in progress; save for execution on commit.\n            self.run_on_commit.append((set(self.savepoint_ids), func, robust))\n        elif not self.get_autocommit():\n            raise TransactionManagementError(\n                \"on_commit() cannot be used in manual transaction management\"\n            )\n        else:\n            # No transaction in progress and in autocommit mode; execute\n            # immediately.\n            if robust:\n                try:\n                    func()\n                except Exception as e:\n                    logger.error(\n                        f\"Error calling {func.__qualname__} in on_commit() (%s).\",\n                        e,\n                        exc_info=True,\n                    )\n            else:\n                func()\n\n    def run_and_clear_commit_hooks(self):\n        self.validate_no_atomic_block()\n        current_run_on_commit = self.run_on_commit\n        self.run_on_commit = []\n        while current_run_on_commit:\n            _, func, robust = current_run_on_commit.pop(0)\n            if robust:\n                try:\n                    func()\n                except Exception as e:\n                    logger.error(\n                        f\"Error calling {func.__qualname__} in on_commit() during \"\n                        f\"transaction (%s).\",\n                        e,\n                        exc_info=True,\n                    )\n            else:\n                func()\n\n    @contextmanager\n    def execute_wrapper(self, wrapper):\n        \"\"\"\n        Return a context manager under which the wrapper is applied to suitable\n        database query executions.\n        \"\"\"\n        self.execute_wrappers.append(wrapper)\n        try:\n            yield\n        finally:\n            self.execute_wrappers.pop()\n\n    def copy(self, alias=None):\n        \"\"\"\n        Return a copy of this connection.\n\n        For tests that require two connections to the same database.\n        \"\"\"\n        settings_dict = copy.deepcopy(self.settings_dict)\n        if alias is None:\n            alias = self.alias\n        return type(self)(settings_dict, alias)"},{"start_line":370,"end_line":372,"belongs_to":{"file_name":"base.py","upper_path":"../django/django/db/backends/base","module":"base","define_class":["BaseDatabaseWrapper"],"imports":["_thread","copy","datetime","logging","threading","time","warnings","zoneinfo","collections.deque","contextlib.contextmanager","django.conf.settings","django.core.exceptions.ImproperlyConfigured","django.db.DEFAULT_DB_ALIAS","django.db.DatabaseError","django.db.NotSupportedError","django.db.backends.utils","django.db.backends.base.validation.BaseDatabaseValidation","django.db.backends.signals.connection_created","django.db.backends.utils.debug_transaction","django.db.transaction.TransactionManagementError","django.db.utils.DatabaseErrorWrapper","django.db.utils.ProgrammingError","django.utils.asyncio.async_unsafe","django.utils.functional.cached_property"]},"relative_function":[],"code":"def _savepoint_rollback(self, sid):\n        with self.cursor() as cursor:\n            cursor.execute(self.ops.savepoint_rollback_sql(sid))"}],"ground_truth":null,"score":null},
{"question":"Where can I find the implementation of the `_check_sql` method in the `BaseDatabaseSchemaEditor`?","answer":"","relative_code_list":[{"start_line":77,"end_line":2046,"belongs_to":{"file_name":"schema.py","upper_path":"../django/django/db/backends/base","module":"base","define_class":["BaseDatabaseSchemaEditor"],"imports":["logging","operator","datetime.datetime","django.conf.settings","django.core.exceptions.FieldError","django.db.backends.ddl_references.Columns","django.db.backends.ddl_references.Expressions","django.db.backends.ddl_references.ForeignKeyName","django.db.backends.ddl_references.IndexName","django.db.backends.ddl_references.Statement","django.db.backends.ddl_references.Table","django.db.backends.utils.names_digest","django.db.backends.utils.split_identifier","django.db.backends.utils.truncate_name","django.db.models.Deferrable","django.db.models.Index","django.db.models.fields.composite.CompositePrimaryKey","django.db.models.sql.Query","django.db.transaction.TransactionManagementError","django.db.transaction.atomic","django.utils.timezone","django.db.models.expressions.Value"]},"relative_function":[],"code":"class BaseDatabaseSchemaEditor:\n    \"\"\"\n    This class and its subclasses are responsible for emitting schema-changing\n    statements to the databases - model creation/removal/alteration, field\n    renaming, index fiddling, and so on.\n    \"\"\"\n\n    # Overrideable SQL templates\n    sql_create_table = \"CREATE TABLE %(table)s (%(definition)s)\"\n    sql_rename_table = \"ALTER TABLE %(old_table)s RENAME TO %(new_table)s\"\n    sql_retablespace_table = \"ALTER TABLE %(table)s SET TABLESPACE %(new_tablespace)s\"\n    sql_delete_table = \"DROP TABLE %(table)s CASCADE\"\n\n    sql_create_column = \"ALTER TABLE %(table)s ADD COLUMN %(column)s %(definition)s\"\n    sql_alter_column = \"ALTER TABLE %(table)s %(changes)s\"\n    sql_alter_column_type = \"ALTER COLUMN %(column)s TYPE %(type)s%(collation)s\"\n    sql_alter_column_null = \"ALTER COLUMN %(column)s DROP NOT NULL\"\n    sql_alter_column_not_null = \"ALTER COLUMN %(column)s SET NOT NULL\"\n    sql_alter_column_default = \"ALTER COLUMN %(column)s SET DEFAULT %(default)s\"\n    sql_alter_column_no_default = \"ALTER COLUMN %(column)s DROP DEFAULT\"\n    sql_alter_column_no_default_null = sql_alter_column_no_default\n    sql_delete_column = \"ALTER TABLE %(table)s DROP COLUMN %(column)s CASCADE\"\n    sql_rename_column = (\n        \"ALTER TABLE %(table)s RENAME COLUMN %(old_column)s TO %(new_column)s\"\n    )\n    sql_update_with_default = (\n        \"UPDATE %(table)s SET %(column)s = %(default)s WHERE %(column)s IS NULL\"\n    )\n\n    sql_unique_constraint = \"UNIQUE (%(columns)s)%(deferrable)s\"\n    sql_check_constraint = \"CHECK (%(check)s)\"\n    sql_delete_constraint = \"ALTER TABLE %(table)s DROP CONSTRAINT %(name)s\"\n    sql_constraint = \"CONSTRAINT %(name)s %(constraint)s\"\n    sql_pk_constraint = \"PRIMARY KEY (%(columns)s)\"\n\n    sql_create_check = \"ALTER TABLE %(table)s ADD CONSTRAINT %(name)s CHECK (%(check)s)\"\n    sql_delete_check = sql_delete_constraint\n\n    sql_create_unique = (\n        \"ALTER TABLE %(table)s ADD CONSTRAINT %(name)s \"\n        \"UNIQUE%(nulls_distinct)s (%(columns)s)%(deferrable)s\"\n    )\n    sql_delete_unique = sql_delete_constraint\n\n    sql_create_fk = (\n        \"ALTER TABLE %(table)s ADD CONSTRAINT %(name)s FOREIGN KEY (%(column)s) \"\n        \"REFERENCES %(to_table)s (%(to_column)s)%(deferrable)s\"\n    )\n    sql_create_inline_fk = None\n    sql_create_column_inline_fk = None\n    sql_delete_fk = sql_delete_constraint\n\n    sql_create_index = (\n        \"CREATE INDEX %(name)s ON %(table)s \"\n        \"(%(columns)s)%(include)s%(extra)s%(condition)s\"\n    )\n    sql_create_unique_index = (\n        \"CREATE UNIQUE INDEX %(name)s ON %(table)s \"\n        \"(%(columns)s)%(include)s%(nulls_distinct)s%(condition)s\"\n    )\n    sql_rename_index = \"ALTER INDEX %(old_name)s RENAME TO %(new_name)s\"\n    sql_delete_index = \"DROP INDEX %(name)s\"\n\n    sql_create_pk = (\n        \"ALTER TABLE %(table)s ADD CONSTRAINT %(name)s PRIMARY KEY (%(columns)s)\"\n    )\n    sql_delete_pk = sql_delete_constraint\n\n    sql_delete_procedure = \"DROP PROCEDURE %(procedure)s\"\n\n    sql_alter_table_comment = \"COMMENT ON TABLE %(table)s IS %(comment)s\"\n    sql_alter_column_comment = \"COMMENT ON COLUMN %(table)s.%(column)s IS %(comment)s\"\n\n    def __init__(self, connection, collect_sql=False, atomic=True):\n        self.connection = connection\n        self.collect_sql = collect_sql\n        if self.collect_sql:\n            self.collected_sql = []\n        self.atomic_migration = self.connection.features.can_rollback_ddl and atomic\n\n    # State-managing methods\n\n    def __enter__(self):\n        self.deferred_sql = []\n        if self.atomic_migration:\n            self.atomic = atomic(self.connection.alias)\n            self.atomic.__enter__()\n        return self\n\n    def __exit__(self, exc_type, exc_value, traceback):\n        if exc_type is None:\n            for sql in self.deferred_sql:\n                self.execute(sql, None)\n        if self.atomic_migration:\n            self.atomic.__exit__(exc_type, exc_value, traceback)\n\n    # Core utility functions\n\n    def execute(self, sql, params=()):\n        \"\"\"Execute the given SQL statement, with optional parameters.\"\"\"\n        # Don't perform the transactional DDL check if SQL is being collected\n        # as it's not going to be executed anyway.\n        if (\n            not self.collect_sql\n            and self.connection.in_atomic_block\n            and not self.connection.features.can_rollback_ddl\n        ):\n            raise TransactionManagementError(\n                \"Executing DDL statements while in a transaction on databases \"\n                \"that can't perform a rollback is prohibited.\"\n            )\n        # Account for non-string statement objects.\n        sql = str(sql)\n        # Log the command we're running, then run it\n        logger.debug(\n            \"%s; (params %r)\", sql, params, extra={\"params\": params, \"sql\": sql}\n        )\n        if self.collect_sql:\n            ending = \"\" if sql.rstrip().endswith(\";\") else \";\"\n            if params is not None:\n                self.collected_sql.append(\n                    (sql % tuple(map(self.quote_value, params))) + ending\n                )\n            else:\n                self.collected_sql.append(sql + ending)\n        else:\n            with self.connection.cursor() as cursor:\n                cursor.execute(sql, params)\n\n    def quote_name(self, name):\n        return self.connection.ops.quote_name(name)\n\n    def table_sql(self, model):\n        \"\"\"Take a model and return its table definition.\"\"\"\n        # Add any unique_togethers (always deferred, as some fields might be\n        # created afterward, like geometry fields with some backends).\n        for field_names in model._meta.unique_together:\n            fields = [model._meta.get_field(field) for field in field_names]\n            self.deferred_sql.append(self._create_unique_sql(model, fields))\n        # Create column SQL, add FK deferreds if needed.\n        column_sqls = []\n        params = []\n        for field in model._meta.local_fields:\n            # SQL.\n            definition, extra_params = self.column_sql(model, field)\n            if definition is None:\n                continue\n            # Check constraints can go on the column SQL here.\n            db_params = field.db_parameters(connection=self.connection)\n            if db_params[\"check\"]:\n                definition += \" \" + self.sql_check_constraint % db_params\n            # Autoincrement SQL (for backends with inline variant).\n            col_type_suffix = field.db_type_suffix(connection=self.connection)\n            if col_type_suffix:\n                definition += \" %s\" % col_type_suffix\n            params.extend(extra_params)\n            # FK.\n            if field.remote_field and field.db_constraint:\n                to_table = field.remote_field.model._meta.db_table\n                to_column = field.remote_field.model._meta.get_field(\n                    field.remote_field.field_name\n                ).column\n                if self.sql_create_inline_fk:\n                    definition += \" \" + self.sql_create_inline_fk % {\n                        \"to_table\": self.quote_name(to_table),\n                        \"to_column\": self.quote_name(to_column),\n                    }\n                elif self.connection.features.supports_foreign_keys:\n                    self.deferred_sql.append(\n                        self._create_fk_sql(\n                            model, field, \"_fk_%(to_table)s_%(to_column)s\"\n                        )\n                    )\n            # Add the SQL to our big list.\n            column_sqls.append(\n                \"%s %s\"\n                % (\n                    self.quote_name(field.column),\n                    definition,\n                )\n            )\n            # Autoincrement SQL (for backends with post table definition\n            # variant).\n            if field.get_internal_type() in (\n                \"AutoField\",\n                \"BigAutoField\",\n                \"SmallAutoField\",\n            ):\n                autoinc_sql = self.connection.ops.autoinc_sql(\n                    model._meta.db_table, field.column\n                )\n                if autoinc_sql:\n                    self.deferred_sql.extend(autoinc_sql)\n        # The BaseConstraint DDL creation methods such as constraint_sql(),\n        # create_sql(), and delete_sql(), were not designed in a way that\n        # separate SQL from parameters which make their generated SQL unfit to\n        # be used in a context where parametrization is delegated to the\n        # backend.\n        constraint_sqls = []\n        if params:\n            # If parameters are present (e.g. a DEFAULT clause on backends that\n            # allow parametrization) defer constraint creation so they are not\n            # mixed with SQL meant to be parametrized.\n            for constraint in model._meta.constraints:\n                self.deferred_sql.append(constraint.create_sql(model, self))\n        else:\n            constraint_sqls.extend(\n                constraint.constraint_sql(model, self)\n                for constraint in model._meta.constraints\n            )\n\n        pk = model._meta.pk\n        if isinstance(pk, CompositePrimaryKey):\n            constraint_sqls.append(self._pk_constraint_sql(pk.columns))\n\n        sql = self.sql_create_table % {\n            \"table\": self.quote_name(model._meta.db_table),\n            \"definition\": \", \".join(\n                str(statement)\n                for statement in (*column_sqls, *constraint_sqls)\n                if statement\n            ),\n        }\n        if model._meta.db_tablespace:\n            tablespace_sql = self.connection.ops.tablespace_sql(\n                model._meta.db_tablespace\n            )\n            if tablespace_sql:\n                sql += \" \" + tablespace_sql\n        return sql, params\n\n    # Field <-> database mapping functions\n\n    def _iter_column_sql(\n        self, column_db_type, params, model, field, field_db_params, include_default\n    ):\n        yield column_db_type\n        if collation := field_db_params.get(\"collation\"):\n            yield self._collate_sql(collation)\n        # Work out nullability.\n        null = field.null\n        # Add database default.\n        if field.has_db_default():\n            default_sql, default_params = self.db_default_sql(field)\n            yield f\"DEFAULT {default_sql}\"\n            params.extend(default_params)\n            include_default = False\n        # Include a default value, if requested.\n        include_default = (\n            include_default\n            and not self.skip_default(field)\n            and\n            # Don't include a default value if it's a nullable field and the\n            # default cannot be dropped in the ALTER COLUMN statement (e.g.\n            # MySQL longtext and longblob).\n            not (null and self.skip_default_on_alter(field))\n        )\n        if include_default:\n            default_value = self.effective_default(field)\n            if default_value is not None:\n                column_default = \"DEFAULT \" + self._column_default_sql(field)\n                if self.connection.features.requires_literal_defaults:\n                    # Some databases can't take defaults as a parameter\n                    # (Oracle, SQLite). If this is the case, the individual\n                    # schema backend should implement prepare_default().\n                    yield column_default % self.prepare_default(default_value)\n                else:\n                    yield column_default\n                    params.append(default_value)\n        # Oracle treats the empty string ('') as null, so coerce the null\n        # option whenever '' is a possible value.\n        if (\n            field.empty_strings_allowed\n            and not field.primary_key\n            and self.connection.features.interprets_empty_strings_as_nulls\n        ):\n            null = True\n        if field.generated:\n            generated_sql, generated_params = self._column_generated_sql(field)\n            params.extend(generated_params)\n            yield generated_sql\n        elif not null:\n            yield \"NOT NULL\"\n        elif not self.connection.features.implied_column_null:\n            yield \"NULL\"\n        if field.primary_key:\n            yield \"PRIMARY KEY\"\n        elif field.unique:\n            yield \"UNIQUE\"\n        # Optionally add the tablespace if it's an implicitly indexed column.\n        tablespace = field.db_tablespace or model._meta.db_tablespace\n        if (\n            tablespace\n            and self.connection.features.supports_tablespaces\n            and field.unique\n        ):\n            yield self.connection.ops.tablespace_sql(tablespace, inline=True)\n        if self.connection.features.supports_comments_inline and field.db_comment:\n            yield self._comment_sql(field.db_comment)\n\n    def column_sql(self, model, field, include_default=False):\n        \"\"\"\n        Return the column definition for a field. The field must already have\n        had set_attributes_from_name() called.\n        \"\"\"\n        # Get the column's type and use that as the basis of the SQL.\n        field_db_params = field.db_parameters(connection=self.connection)\n        column_db_type = field_db_params[\"type\"]\n        # Check for fields that aren't actually columns (e.g. M2M).\n        if column_db_type is None:\n            return None, None\n        params = []\n        return (\n            \" \".join(\n                # This appends to the params being returned.\n                self._iter_column_sql(\n                    column_db_type,\n                    params,\n                    model,\n                    field,\n                    field_db_params,\n                    include_default,\n                )\n            ),\n            params,\n        )\n\n    def skip_default(self, field):\n        \"\"\"\n        Some backends don't accept default values for certain columns types\n        (i.e. MySQL longtext and longblob).\n        \"\"\"\n        return False\n\n    def skip_default_on_alter(self, field):\n        \"\"\"\n        Some backends don't accept default values for certain columns types\n        (i.e. MySQL longtext and longblob) in the ALTER COLUMN statement.\n        \"\"\"\n        return False\n\n    def prepare_default(self, value):\n        \"\"\"\n        Only used for backends which have requires_literal_defaults feature\n        \"\"\"\n        raise NotImplementedError(\n            \"subclasses of BaseDatabaseSchemaEditor for backends which have \"\n            \"requires_literal_defaults must provide a prepare_default() method\"\n        )\n\n    def _column_default_sql(self, field):\n        \"\"\"\n        Return the SQL to use in a DEFAULT clause. The resulting string should\n        contain a '%s' placeholder for a default value.\n        \"\"\"\n        return \"%s\"\n\n    def db_default_sql(self, field):\n        \"\"\"Return the sql and params for the field's database default.\"\"\"\n        from django.db.models.expressions import Value\n\n        db_default = field._db_default_expression\n        sql = (\n            self._column_default_sql(field) if isinstance(db_default, Value) else \"(%s)\"\n        )\n        query = Query(model=field.model)\n        compiler = query.get_compiler(connection=self.connection)\n        default_sql, params = compiler.compile(db_default)\n        if self.connection.features.requires_literal_defaults:\n            # Some databases don't support parameterized defaults (Oracle,\n            # SQLite). If this is the case, the individual schema backend\n            # should implement prepare_default().\n            default_sql %= tuple(self.prepare_default(p) for p in params)\n            params = []\n        return sql % default_sql, params\n\n    def _column_generated_sql(self, field):\n        \"\"\"Return the SQL to use in a GENERATED ALWAYS clause.\"\"\"\n        expression_sql, params = field.generated_sql(self.connection)\n        persistency_sql = \"STORED\" if field.db_persist else \"VIRTUAL\"\n        if self.connection.features.requires_literal_defaults:\n            expression_sql = expression_sql % tuple(self.quote_value(p) for p in params)\n            params = ()\n        return f\"GENERATED ALWAYS AS ({expression_sql}) {persistency_sql}\", params\n\n    @staticmethod\n    def _effective_default(field):\n        # This method allows testing its logic without a connection.\n        if field.has_default():\n            default = field.get_default()\n        elif field.generated:\n            default = None\n        elif not field.null and field.blank and field.empty_strings_allowed:\n            if field.get_internal_type() == \"BinaryField\":\n                default = b\"\"\n            else:\n                default = \"\"\n        elif getattr(field, \"auto_now\", False) or getattr(field, \"auto_now_add\", False):\n            internal_type = field.get_internal_type()\n            if internal_type == \"DateTimeField\":\n                default = timezone.now()\n            else:\n                default = datetime.now()\n                if internal_type == \"DateField\":\n                    default = default.date()\n                elif internal_type == \"TimeField\":\n                    default = default.time()\n        else:\n            default = None\n        return default\n\n    def effective_default(self, field):\n        \"\"\"Return a field's effective database default value.\"\"\"\n        return field.get_db_prep_save(self._effective_default(field), self.connection)\n\n    def quote_value(self, value):\n        \"\"\"\n        Return a quoted version of the value so it's safe to use in an SQL\n        string. This is not safe against injection from user code; it is\n        intended only for use in making SQL scripts or preparing default values\n        for particularly tricky backends (defaults are not user-defined, though,\n        so this is safe).\n        \"\"\"\n        raise NotImplementedError()\n\n    # Actions\n\n    def create_model(self, model):\n        \"\"\"\n        Create a table and any accompanying indexes or unique constraints for\n        the given `model`.\n        \"\"\"\n        sql, params = self.table_sql(model)\n        # Prevent using [] as params, in the case a literal '%' is used in the\n        # definition on backends that don't support parametrized DDL.\n        self.execute(sql, params or None)\n\n        if self.connection.features.supports_comments:\n            # Add table comment.\n            if model._meta.db_table_comment:\n                self.alter_db_table_comment(model, None, model._meta.db_table_comment)\n            # Add column comments.\n            if not self.connection.features.supports_comments_inline:\n                for field in model._meta.local_fields:\n                    if field.db_comment:\n                        field_db_params = field.db_parameters(\n                            connection=self.connection\n                        )\n                        field_type = field_db_params[\"type\"]\n                        self.execute(\n                            *self._alter_column_comment_sql(\n                                model, field, field_type, field.db_comment\n                            )\n                        )\n        # Add any field index (deferred as SQLite _remake_table needs it).\n        self.deferred_sql.extend(self._model_indexes_sql(model))\n\n        # Make M2M tables\n        for field in model._meta.local_many_to_many:\n            if field.remote_field.through._meta.auto_created:\n                self.create_model(field.remote_field.through)\n\n    def delete_model(self, model):\n        \"\"\"Delete a model from the database.\"\"\"\n        # Handle auto-created intermediary models\n        for field in model._meta.local_many_to_many:\n            if field.remote_field.through._meta.auto_created:\n                self.delete_model(field.remote_field.through)\n\n        # Delete the table\n        self.execute(\n            self.sql_delete_table\n            % {\n                \"table\": self.quote_name(model._meta.db_table),\n            }\n        )\n        # Remove all deferred statements referencing the deleted table.\n        for sql in list(self.deferred_sql):\n            if isinstance(sql, Statement) and sql.references_table(\n                model._meta.db_table\n            ):\n                self.deferred_sql.remove(sql)\n\n    def add_index(self, model, index):\n        \"\"\"Add an index on a model.\"\"\"\n        if (\n            index.contains_expressions\n            and not self.connection.features.supports_expression_indexes\n        ):\n            return None\n        # Index.create_sql returns interpolated SQL which makes params=None a\n        # necessity to avoid escaping attempts on execution.\n        self.execute(index.create_sql(model, self), params=None)\n\n    def remove_index(self, model, index):\n        \"\"\"Remove an index from a model.\"\"\"\n        if (\n            index.contains_expressions\n            and not self.connection.features.supports_expression_indexes\n        ):\n            return None\n        self.execute(index.remove_sql(model, self))\n\n    def rename_index(self, model, old_index, new_index):\n        if self.connection.features.can_rename_index:\n            self.execute(\n                self._rename_index_sql(model, old_index.name, new_index.name),\n                params=None,\n            )\n        else:\n            self.remove_index(model, old_index)\n            self.add_index(model, new_index)\n\n    def add_constraint(self, model, constraint):\n        \"\"\"Add a constraint to a model.\"\"\"\n        sql = constraint.create_sql(model, self)\n        if sql:\n            # Constraint.create_sql returns interpolated SQL which makes\n            # params=None a necessity to avoid escaping attempts on execution.\n            self.execute(sql, params=None)\n\n    def remove_constraint(self, model, constraint):\n        \"\"\"Remove a constraint from a model.\"\"\"\n        sql = constraint.remove_sql(model, self)\n        if sql:\n            self.execute(sql)\n\n    def alter_unique_together(self, model, old_unique_together, new_unique_together):\n        \"\"\"\n        Deal with a model changing its unique_together. The input\n        unique_togethers must be doubly-nested, not the single-nested\n        [\"foo\", \"bar\"] format.\n        \"\"\"\n        olds = {tuple(fields) for fields in old_unique_together}\n        news = {tuple(fields) for fields in new_unique_together}\n        # Deleted uniques\n        for fields in olds.difference(news):\n            self._delete_composed_index(\n                model,\n                fields,\n                {\"unique\": True, \"primary_key\": False},\n                self.sql_delete_unique,\n            )\n        # Created uniques\n        for field_names in news.difference(olds):\n            fields = [model._meta.get_field(field) for field in field_names]\n            self.execute(self._create_unique_sql(model, fields))\n\n    def alter_index_together(self, model, old_index_together, new_index_together):\n        \"\"\"\n        Deal with a model changing its index_together. The input\n        index_togethers must be doubly-nested, not the single-nested\n        [\"foo\", \"bar\"] format.\n        \"\"\"\n        olds = {tuple(fields) for fields in old_index_together}\n        news = {tuple(fields) for fields in new_index_together}\n        # Deleted indexes\n        for fields in olds.difference(news):\n            self._delete_composed_index(\n                model,\n                fields,\n                {\"index\": True, \"unique\": False},\n                self.sql_delete_index,\n            )\n        # Created indexes\n        for field_names in news.difference(olds):\n            fields = [model._meta.get_field(field) for field in field_names]\n            self.execute(self._create_index_sql(model, fields=fields, suffix=\"_idx\"))\n\n    def _delete_composed_index(self, model, fields, constraint_kwargs, sql):\n        meta_constraint_names = {\n            constraint.name for constraint in model._meta.constraints\n        }\n        meta_index_names = {constraint.name for constraint in model._meta.indexes}\n        columns = [model._meta.get_field(field).column for field in fields]\n        constraint_names = self._constraint_names(\n            model,\n            columns,\n            exclude=meta_constraint_names | meta_index_names,\n            **constraint_kwargs,\n        )\n        if (\n            constraint_kwargs.get(\"unique\") is True\n            and constraint_names\n            and self.connection.features.allows_multiple_constraints_on_same_fields\n        ):\n            # Constraint matching the unique_together name.\n            default_name = str(\n                self._unique_constraint_name(model._meta.db_table, columns, quote=False)\n            )\n            if default_name in constraint_names:\n                constraint_names = [default_name]\n        if len(constraint_names) != 1:\n            raise ValueError(\n                \"Found wrong number (%s) of constraints for %s(%s)\"\n                % (\n                    len(constraint_names),\n                    model._meta.db_table,\n                    \", \".join(columns),\n                )\n            )\n        self.execute(self._delete_constraint_sql(sql, model, constraint_names[0]))\n\n    def alter_db_table(self, model, old_db_table, new_db_table):\n        \"\"\"Rename the table a model points to.\"\"\"\n        if old_db_table == new_db_table or (\n            self.connection.features.ignores_table_name_case\n            and old_db_table.lower() == new_db_table.lower()\n        ):\n            return\n        self.execute(\n            self.sql_rename_table\n            % {\n                \"old_table\": self.quote_name(old_db_table),\n                \"new_table\": self.quote_name(new_db_table),\n            }\n        )\n        # Rename all references to the old table name.\n        for sql in self.deferred_sql:\n            if isinstance(sql, Statement):\n                sql.rename_table_references(old_db_table, new_db_table)\n\n    def alter_db_table_comment(self, model, old_db_table_comment, new_db_table_comment):\n        if self.sql_alter_table_comment and self.connection.features.supports_comments:\n            self.execute(\n                self.sql_alter_table_comment\n                % {\n                    \"table\": self.quote_name(model._meta.db_table),\n                    \"comment\": self.quote_value(new_db_table_comment or \"\"),\n                }\n            )\n\n    def alter_db_tablespace(self, model, old_db_tablespace, new_db_tablespace):\n        \"\"\"Move a model's table between tablespaces.\"\"\"\n        self.execute(\n            self.sql_retablespace_table\n            % {\n                \"table\": self.quote_name(model._meta.db_table),\n                \"old_tablespace\": self.quote_name(old_db_tablespace),\n                \"new_tablespace\": self.quote_name(new_db_tablespace),\n            }\n        )\n\n    def add_field(self, model, field):\n        \"\"\"\n        Create a field on a model. Usually involves adding a column, but may\n        involve adding a table instead (for M2M fields).\n        \"\"\"\n        # Special-case implicit M2M tables\n        if field.many_to_many and field.remote_field.through._meta.auto_created:\n            return self.create_model(field.remote_field.through)\n        # Get the column's definition\n        definition, params = self.column_sql(model, field, include_default=True)\n        # It might not actually have a column behind it\n        if definition is None:\n            return\n        if col_type_suffix := field.db_type_suffix(connection=self.connection):\n            definition += f\" {col_type_suffix}\"\n        # Check constraints can go on the column SQL here\n        db_params = field.db_parameters(connection=self.connection)\n        if db_params[\"check\"]:\n            definition += \" \" + self.sql_check_constraint % db_params\n        if (\n            field.remote_field\n            and self.connection.features.supports_foreign_keys\n            and field.db_constraint\n        ):\n            constraint_suffix = \"_fk_%(to_table)s_%(to_column)s\"\n            # Add FK constraint inline, if supported.\n            if self.sql_create_column_inline_fk:\n                to_table = field.remote_field.model._meta.db_table\n                to_column = field.remote_field.model._meta.get_field(\n                    field.remote_field.field_name\n                ).column\n                namespace, _ = split_identifier(model._meta.db_table)\n                definition += \" \" + self.sql_create_column_inline_fk % {\n                    \"name\": self._fk_constraint_name(model, field, constraint_suffix),\n                    \"namespace\": (\n                        \"%s.\" % self.quote_name(namespace) if namespace else \"\"\n                    ),\n                    \"column\": self.quote_name(field.column),\n                    \"to_table\": self.quote_name(to_table),\n                    \"to_column\": self.quote_name(to_column),\n                    \"deferrable\": self.connection.ops.deferrable_sql(),\n                }\n            # Otherwise, add FK constraints later.\n            else:\n                self.deferred_sql.append(\n                    self._create_fk_sql(model, field, constraint_suffix)\n                )\n        # Build the SQL and run it\n        sql = self.sql_create_column % {\n            \"table\": self.quote_name(model._meta.db_table),\n            \"column\": self.quote_name(field.column),\n            \"definition\": definition,\n        }\n        # Prevent using [] as params, in the case a literal '%' is used in the\n        # definition on backends that don't support parametrized DDL.\n        self.execute(sql, params or None)\n        # Drop the default if we need to\n        if (\n            not field.has_db_default()\n            and not self.skip_default_on_alter(field)\n            and self.effective_default(field) is not None\n        ):\n            changes_sql, params = self._alter_column_default_sql(\n                model, None, field, drop=True\n            )\n            sql = self.sql_alter_column % {\n                \"table\": self.quote_name(model._meta.db_table),\n                \"changes\": changes_sql,\n            }\n            self.execute(sql, params)\n        # Add field comment, if required.\n        if (\n            field.db_comment\n            and self.connection.features.supports_comments\n            and not self.connection.features.supports_comments_inline\n        ):\n            field_type = db_params[\"type\"]\n            self.execute(\n                *self._alter_column_comment_sql(\n                    model, field, field_type, field.db_comment\n                )\n            )\n        # Add an index, if required\n        self.deferred_sql.extend(self._field_indexes_sql(model, field))\n        # Reset connection if required\n        if self.connection.features.connection_persists_old_columns:\n            self.connection.close()\n\n    def remove_field(self, model, field):\n        \"\"\"\n        Remove a field from a model. Usually involves deleting a column,\n        but for M2Ms may involve deleting a table.\n        \"\"\"\n        # Special-case implicit M2M tables\n        if field.many_to_many and field.remote_field.through._meta.auto_created:\n            return self.delete_model(field.remote_field.through)\n        # It might not actually have a column behind it\n        if field.db_parameters(connection=self.connection)[\"type\"] is None:\n            return\n        # Drop any FK constraints, MySQL requires explicit deletion\n        if field.remote_field:\n            fk_names = self._constraint_names(model, [field.column], foreign_key=True)\n            for fk_name in fk_names:\n                self.execute(self._delete_fk_sql(model, fk_name))\n        # Delete the column\n        sql = self.sql_delete_column % {\n            \"table\": self.quote_name(model._meta.db_table),\n            \"column\": self.quote_name(field.column),\n        }\n        self.execute(sql)\n        # Reset connection if required\n        if self.connection.features.connection_persists_old_columns:\n            self.connection.close()\n        # Remove all deferred statements referencing the deleted column.\n        for sql in list(self.deferred_sql):\n            if isinstance(sql, Statement) and sql.references_column(\n                model._meta.db_table, field.column\n            ):\n                self.deferred_sql.remove(sql)\n\n    def alter_field(self, model, old_field, new_field, strict=False):\n        \"\"\"\n        Allow a field's type, uniqueness, nullability, default, column,\n        constraints, etc. to be modified.\n        `old_field` is required to compute the necessary changes.\n        If `strict` is True, raise errors if the old column does not match\n        `old_field` precisely.\n        \"\"\"\n        if not self._field_should_be_altered(old_field, new_field):\n            return\n        # Ensure this field is even column-based\n        old_db_params = old_field.db_parameters(connection=self.connection)\n        old_type = old_db_params[\"type\"]\n        new_db_params = new_field.db_parameters(connection=self.connection)\n        new_type = new_db_params[\"type\"]\n        modifying_generated_field = False\n        if (old_type is None and old_field.remote_field is None) or (\n            new_type is None and new_field.remote_field is None\n        ):\n            raise ValueError(\n                \"Cannot alter field %s into %s - they do not properly define \"\n                \"db_type (are you using a badly-written custom field?)\"\n                % (old_field, new_field),\n            )\n        elif (\n            old_type is None\n            and new_type is None\n            and (\n                old_field.remote_field.through\n                and new_field.remote_field.through\n                and old_field.remote_field.through._meta.auto_created\n                and new_field.remote_field.through._meta.auto_created\n            )\n        ):\n            return self._alter_many_to_many(model, old_field, new_field, strict)\n        elif (\n            old_type is None\n            and new_type is None\n            and (\n                old_field.remote_field.through\n                and new_field.remote_field.through\n                and not old_field.remote_field.through._meta.auto_created\n                and not new_field.remote_field.through._meta.auto_created\n            )\n        ):\n            # Both sides have through models; this is a no-op.\n            return\n        elif old_type is None or new_type is None:\n            raise ValueError(\n                \"Cannot alter field %s into %s - they are not compatible types \"\n                \"(you cannot alter to or from M2M fields, or add or remove \"\n                \"through= on M2M fields)\" % (old_field, new_field)\n            )\n        elif old_field.generated != new_field.generated or (\n            new_field.generated and old_field.db_persist != new_field.db_persist\n        ):\n            modifying_generated_field = True\n        elif new_field.generated:\n            try:\n                old_field_sql = old_field.generated_sql(self.connection)\n            except FieldError:\n                # Field used in a generated field was renamed.\n                modifying_generated_field = True\n            else:\n                new_field_sql = new_field.generated_sql(self.connection)\n                modifying_generated_field = old_field_sql != new_field_sql\n        if modifying_generated_field:\n            raise ValueError(\n                f\"Modifying GeneratedFields is not supported - the field {new_field} \"\n                \"must be removed and re-added with the new definition.\"\n            )\n\n        self._alter_field(\n            model,\n            old_field,\n            new_field,\n            old_type,\n            new_type,\n            old_db_params,\n            new_db_params,\n            strict,\n        )\n\n    def _field_db_check(self, field, field_db_params):\n        # Always check constraints with the same mocked column name to avoid\n        # recreating constrains when the column is renamed.\n        check_constraints = self.connection.data_type_check_constraints\n        data = field.db_type_parameters(self.connection)\n        data[\"column\"] = \"__column_name__\"\n        try:\n            return check_constraints[field.get_internal_type()] % data\n        except KeyError:\n            return None\n\n    def _alter_field(\n        self,\n        model,\n        old_field,\n        new_field,\n        old_type,\n        new_type,\n        old_db_params,\n        new_db_params,\n        strict=False,\n    ):\n        \"\"\"Perform a \"physical\" (non-ManyToMany) field update.\"\"\"\n        # Drop any FK constraints, we'll remake them later\n        fks_dropped = set()\n        if (\n            self.connection.features.supports_foreign_keys\n            and old_field.remote_field\n            and old_field.db_constraint\n            and self._field_should_be_altered(\n                old_field,\n                new_field,\n                ignore={\"db_comment\"},\n            )\n        ):\n            fk_names = self._constraint_names(\n                model, [old_field.column], foreign_key=True\n            )\n            if strict and len(fk_names) != 1:\n                raise ValueError(\n                    \"Found wrong number (%s) of foreign key constraints for %s.%s\"\n                    % (\n                        len(fk_names),\n                        model._meta.db_table,\n                        old_field.column,\n                    )\n                )\n            for fk_name in fk_names:\n                fks_dropped.add((old_field.column,))\n                self.execute(self._delete_fk_sql(model, fk_name))\n        # Has unique been removed?\n        if old_field.unique and (\n            not new_field.unique or self._field_became_primary_key(old_field, new_field)\n        ):\n            # Find the unique constraint for this field\n            meta_constraint_names = {\n                constraint.name for constraint in model._meta.constraints\n            }\n            constraint_names = self._constraint_names(\n                model,\n                [old_field.column],\n                unique=True,\n                primary_key=False,\n                exclude=meta_constraint_names,\n            )\n            if strict and len(constraint_names) != 1:\n                raise ValueError(\n                    \"Found wrong number (%s) of unique constraints for %s.%s\"\n                    % (\n                        len(constraint_names),\n                        model._meta.db_table,\n                        old_field.column,\n                    )\n                )\n            for constraint_name in constraint_names:\n                self.execute(self._delete_unique_sql(model, constraint_name))\n        # Drop incoming FK constraints if the field is a primary key or unique,\n        # which might be a to_field target, and things are going to change.\n        old_collation = old_db_params.get(\"collation\")\n        new_collation = new_db_params.get(\"collation\")\n        drop_foreign_keys = (\n            self.connection.features.supports_foreign_keys\n            and (\n                (old_field.primary_key and new_field.primary_key)\n                or (old_field.unique and new_field.unique)\n            )\n            and ((old_type != new_type) or (old_collation != new_collation))\n        )\n        if drop_foreign_keys:\n            # '_meta.related_field' also contains M2M reverse fields, these\n            # will be filtered out\n            for _old_rel, new_rel in _related_non_m2m_objects(old_field, new_field):\n                rel_fk_names = self._constraint_names(\n                    new_rel.related_model, [new_rel.field.column], foreign_key=True\n                )\n                for fk_name in rel_fk_names:\n                    self.execute(self._delete_fk_sql(new_rel.related_model, fk_name))\n        # Removed an index? (no strict check, as multiple indexes are possible)\n        # Remove indexes if db_index switched to False or a unique constraint\n        # will now be used in lieu of an index. The following lines from the\n        # truth table show all True cases; the rest are False:\n        #\n        # old_field.db_index | old_field.unique | new_field.db_index | new_field.unique\n        # ------------------------------------------------------------------------------\n        # True               | False            | False              | False\n        # True               | False            | False              | True\n        # True               | False            | True               | True\n        if (\n            old_field.db_index\n            and not old_field.unique\n            and (not new_field.db_index or new_field.unique)\n        ):\n            # Find the index for this field\n            meta_index_names = {index.name for index in model._meta.indexes}\n            # Retrieve only BTREE indexes since this is what's created with\n            # db_index=True.\n            index_names = self._constraint_names(\n                model,\n                [old_field.column],\n                index=True,\n                type_=Index.suffix,\n                exclude=meta_index_names,\n            )\n            for index_name in index_names:\n                # The only way to check if an index was created with\n                # db_index=True or with Index(['field'], name='foo')\n                # is to look at its name (refs #28053).\n                self.execute(self._delete_index_sql(model, index_name))\n        # Change check constraints?\n        old_db_check = self._field_db_check(old_field, old_db_params)\n        new_db_check = self._field_db_check(new_field, new_db_params)\n        if old_db_check != new_db_check and old_db_check:\n            meta_constraint_names = {\n                constraint.name for constraint in model._meta.constraints\n            }\n            constraint_names = self._constraint_names(\n                model,\n                [old_field.column],\n                check=True,\n                exclude=meta_constraint_names,\n            )\n            if strict and len(constraint_names) != 1:\n                raise ValueError(\n                    \"Found wrong number (%s) of check constraints for %s.%s\"\n                    % (\n                        len(constraint_names),\n                        model._meta.db_table,\n                        old_field.column,\n                    )\n                )\n            for constraint_name in constraint_names:\n                self.execute(self._delete_check_sql(model, constraint_name))\n        # Have they renamed the column?\n        if old_field.column != new_field.column:\n            self.execute(\n                self._rename_field_sql(\n                    model._meta.db_table, old_field, new_field, new_type\n                )\n            )\n            # Rename all references to the renamed column.\n            for sql in self.deferred_sql:\n                if isinstance(sql, Statement):\n                    sql.rename_column_references(\n                        model._meta.db_table, old_field.column, new_field.column\n                    )\n        # Next, start accumulating actions to do\n        actions = []\n        null_actions = []\n        post_actions = []\n        # Type suffix change? (e.g. auto increment).\n        old_type_suffix = old_field.db_type_suffix(connection=self.connection)\n        new_type_suffix = new_field.db_type_suffix(connection=self.connection)\n        # Type, collation, or comment change?\n        if (\n            old_type != new_type\n            or old_type_suffix != new_type_suffix\n            or old_collation != new_collation\n            or (\n                self.connection.features.supports_comments\n                and old_field.db_comment != new_field.db_comment\n            )\n        ):\n            fragment, other_actions = self._alter_column_type_sql(\n                model, old_field, new_field, new_type, old_collation, new_collation\n            )\n            actions.append(fragment)\n            post_actions.extend(other_actions)\n\n        if new_field.has_db_default():\n            if (\n                not old_field.has_db_default()\n                or new_field.db_default != old_field.db_default\n            ):\n                actions.append(\n                    self._alter_column_database_default_sql(model, old_field, new_field)\n                )\n        elif old_field.has_db_default():\n            actions.append(\n                self._alter_column_database_default_sql(\n                    model, old_field, new_field, drop=True\n                )\n            )\n        # When changing a column NULL constraint to NOT NULL with a given\n        # default value, we need to perform 4 steps:\n        #  1. Add a default for new incoming writes\n        #  2. Update existing NULL rows with new default\n        #  3. Replace NULL constraint with NOT NULL\n        #  4. Drop the default again.\n        # Default change?\n        needs_database_default = False\n        if old_field.null and not new_field.null and not new_field.has_db_default():\n            old_default = self.effective_default(old_field)\n            new_default = self.effective_default(new_field)\n            if (\n                not self.skip_default_on_alter(new_field)\n                and old_default != new_default\n                and new_default is not None\n            ):\n                needs_database_default = True\n                actions.append(\n                    self._alter_column_default_sql(model, old_field, new_field)\n                )\n        # Nullability change?\n        if old_field.null != new_field.null:\n            fragment = self._alter_column_null_sql(model, old_field, new_field)\n            if fragment:\n                null_actions.append(fragment)\n        # Only if we have a default and there is a change from NULL to NOT NULL\n        four_way_default_alteration = (\n            new_field.has_default() or new_field.has_db_default()\n        ) and (old_field.null and not new_field.null)\n        if actions or null_actions:\n            if not four_way_default_alteration:\n                # If we don't have to do a 4-way default alteration we can\n                # directly run a (NOT) NULL alteration\n                actions += null_actions\n            # Combine actions together if we can (e.g. postgres)\n            if self.connection.features.supports_combined_alters and actions:\n                sql, params = tuple(zip(*actions))\n                actions = [(\", \".join(sql), sum(params, []))]\n            # Apply those actions\n            for sql, params in actions:\n                self.execute(\n                    self.sql_alter_column\n                    % {\n                        \"table\": self.quote_name(model._meta.db_table),\n                        \"changes\": sql,\n                    },\n                    params,\n                )\n            if four_way_default_alteration:\n                if not new_field.has_db_default():\n                    default_sql = \"%s\"\n                    params = [new_default]\n                else:\n                    default_sql, params = self.db_default_sql(new_field)\n                # Update existing rows with default value\n                self.execute(\n                    self.sql_update_with_default\n                    % {\n                        \"table\": self.quote_name(model._meta.db_table),\n                        \"column\": self.quote_name(new_field.column),\n                        \"default\": default_sql,\n                    },\n                    params,\n                )\n                # Since we didn't run a NOT NULL change before we need to do it\n                # now\n                for sql, params in null_actions:\n                    self.execute(\n                        self.sql_alter_column\n                        % {\n                            \"table\": self.quote_name(model._meta.db_table),\n                            \"changes\": sql,\n                        },\n                        params,\n                    )\n        if post_actions:\n            for sql, params in post_actions:\n                self.execute(sql, params)\n        # If primary_key changed to False, delete the primary key constraint.\n        if old_field.primary_key and not new_field.primary_key:\n            self._delete_primary_key(model, strict)\n        # Added a unique?\n        if self._unique_should_be_added(old_field, new_field):\n            self.execute(self._create_unique_sql(model, [new_field]))\n        # Added an index? Add an index if db_index switched to True or a unique\n        # constraint will no longer be used in lieu of an index. The following\n        # lines from the truth table show all True cases; the rest are False:\n        #\n        # old_field.db_index | old_field.unique | new_field.db_index | new_field.unique\n        # ------------------------------------------------------------------------------\n        # False              | False            | True               | False\n        # False              | True             | True               | False\n        # True               | True             | True               | False\n        if (\n            (not old_field.db_index or old_field.unique)\n            and new_field.db_index\n            and not new_field.unique\n        ):\n            self.execute(self._create_index_sql(model, fields=[new_field]))\n        # Type alteration on primary key? Then we need to alter the column\n        # referring to us.\n        rels_to_update = []\n        if drop_foreign_keys:\n            rels_to_update.extend(_related_non_m2m_objects(old_field, new_field))\n        # Changed to become primary key?\n        if self._field_became_primary_key(old_field, new_field):\n            # Make the new one\n            self.execute(self._create_primary_key_sql(model, new_field))\n            # Update all referencing columns\n            rels_to_update.extend(_related_non_m2m_objects(old_field, new_field))\n        # Handle our type alters on the other end of rels from the PK stuff above\n        for old_rel, new_rel in rels_to_update:\n            rel_db_params = new_rel.field.db_parameters(connection=self.connection)\n            rel_type = rel_db_params[\"type\"]\n            rel_collation = rel_db_params.get(\"collation\")\n            old_rel_db_params = old_rel.field.db_parameters(connection=self.connection)\n            old_rel_collation = old_rel_db_params.get(\"collation\")\n            fragment, other_actions = self._alter_column_type_sql(\n                new_rel.related_model,\n                old_rel.field,\n                new_rel.field,\n                rel_type,\n                old_rel_collation,\n                rel_collation,\n            )\n            self.execute(\n                self.sql_alter_column\n                % {\n                    \"table\": self.quote_name(new_rel.related_model._meta.db_table),\n                    \"changes\": fragment[0],\n                },\n                fragment[1],\n            )\n            for sql, params in other_actions:\n                self.execute(sql, params)\n        # Does it have a foreign key?\n        if (\n            self.connection.features.supports_foreign_keys\n            and new_field.remote_field\n            and (\n                fks_dropped or not old_field.remote_field or not old_field.db_constraint\n            )\n            and new_field.db_constraint\n        ):\n            self.execute(\n                self._create_fk_sql(model, new_field, \"_fk_%(to_table)s_%(to_column)s\")\n            )\n        # Rebuild FKs that pointed to us if we previously had to drop them\n        if drop_foreign_keys:\n            for _, rel in rels_to_update:\n                if rel.field.db_constraint:\n                    self.execute(\n                        self._create_fk_sql(rel.related_model, rel.field, \"_fk\")\n                    )\n        # Does it have check constraints we need to add?\n        if old_db_check != new_db_check and new_db_check:\n            constraint_name = self._create_index_name(\n                model._meta.db_table, [new_field.column], suffix=\"_check\"\n            )\n            self.execute(\n                self._create_check_sql(model, constraint_name, new_db_params[\"check\"])\n            )\n        # Drop the default if we need to\n        # (Django usually does not use in-database defaults)\n        if needs_database_default:\n            changes_sql, params = self._alter_column_default_sql(\n                model, old_field, new_field, drop=True\n            )\n            sql = self.sql_alter_column % {\n                \"table\": self.quote_name(model._meta.db_table),\n                \"changes\": changes_sql,\n            }\n            self.execute(sql, params)\n        # Reset connection if required\n        if self.connection.features.connection_persists_old_columns:\n            self.connection.close()\n\n    def _alter_column_null_sql(self, model, old_field, new_field):\n        \"\"\"\n        Hook to specialize column null alteration.\n\n        Return a (sql, params) fragment to set a column to null or non-null\n        as required by new_field, or None if no changes are required.\n        \"\"\"\n        if (\n            self.connection.features.interprets_empty_strings_as_nulls\n            and new_field.empty_strings_allowed\n        ):\n            # The field is nullable in the database anyway, leave it alone.\n            return\n        else:\n            new_db_params = new_field.db_parameters(connection=self.connection)\n            sql = (\n                self.sql_alter_column_null\n                if new_field.null\n                else self.sql_alter_column_not_null\n            )\n            return (\n                sql\n                % {\n                    \"column\": self.quote_name(new_field.column),\n                    \"type\": new_db_params[\"type\"],\n                },\n                [],\n            )\n\n    def _alter_column_default_sql(self, model, old_field, new_field, drop=False):\n        \"\"\"\n        Hook to specialize column default alteration.\n\n        Return a (sql, params) fragment to add or drop (depending on the drop\n        argument) a default to new_field's column.\n        \"\"\"\n        new_default = self.effective_default(new_field)\n        default = self._column_default_sql(new_field)\n        params = [new_default]\n\n        if drop:\n            params = []\n        elif self.connection.features.requires_literal_defaults:\n            # Some databases (Oracle) can't take defaults as a parameter\n            # If this is the case, the SchemaEditor for that database should\n            # implement prepare_default().\n            default = self.prepare_default(new_default)\n            params = []\n\n        new_db_params = new_field.db_parameters(connection=self.connection)\n        if drop:\n            if new_field.null:\n                sql = self.sql_alter_column_no_default_null\n            else:\n                sql = self.sql_alter_column_no_default\n        else:\n            sql = self.sql_alter_column_default\n        return (\n            sql\n            % {\n                \"column\": self.quote_name(new_field.column),\n                \"type\": new_db_params[\"type\"],\n                \"default\": default,\n            },\n            params,\n        )\n\n    def _alter_column_database_default_sql(\n        self, model, old_field, new_field, drop=False\n    ):\n        \"\"\"\n        Hook to specialize column database default alteration.\n\n        Return a (sql, params) fragment to add or drop (depending on the drop\n        argument) a default to new_field's column.\n        \"\"\"\n        if drop:\n            sql = self.sql_alter_column_no_default\n            default_sql = \"\"\n            params = []\n        else:\n            sql = self.sql_alter_column_default\n            default_sql, params = self.db_default_sql(new_field)\n\n        new_db_params = new_field.db_parameters(connection=self.connection)\n        return (\n            sql\n            % {\n                \"column\": self.quote_name(new_field.column),\n                \"type\": new_db_params[\"type\"],\n                \"default\": default_sql,\n            },\n            params,\n        )\n\n    def _alter_column_type_sql(\n        self, model, old_field, new_field, new_type, old_collation, new_collation\n    ):\n        \"\"\"\n        Hook to specialize column type alteration for different backends,\n        for cases when a creation type is different to an alteration type\n        (e.g. SERIAL in PostgreSQL, PostGIS fields).\n\n        Return a 2-tuple of: an SQL fragment of (sql, params) to insert into\n        an ALTER TABLE statement and a list of extra (sql, params) tuples to\n        run once the field is altered.\n        \"\"\"\n        other_actions = []\n        if collate_sql := self._collate_sql(\n            new_collation, old_collation, model._meta.db_table\n        ):\n            collate_sql = f\" {collate_sql}\"\n        else:\n            collate_sql = \"\"\n        # Comment change?\n        comment_sql = \"\"\n        if self.connection.features.supports_comments and not new_field.many_to_many:\n            if old_field.db_comment != new_field.db_comment:\n                # PostgreSQL and Oracle can't execute 'ALTER COLUMN ...' and\n                # 'COMMENT ON ...' at the same time.\n                sql, params = self._alter_column_comment_sql(\n                    model, new_field, new_type, new_field.db_comment\n                )\n                if sql:\n                    other_actions.append((sql, params))\n            if new_field.db_comment:\n                comment_sql = self._comment_sql(new_field.db_comment)\n        return (\n            (\n                self.sql_alter_column_type\n                % {\n                    \"column\": self.quote_name(new_field.column),\n                    \"type\": new_type,\n                    \"collation\": collate_sql,\n                    \"comment\": comment_sql,\n                },\n                [],\n            ),\n            other_actions,\n        )\n\n    def _alter_column_comment_sql(self, model, new_field, new_type, new_db_comment):\n        return (\n            self.sql_alter_column_comment\n            % {\n                \"table\": self.quote_name(model._meta.db_table),\n                \"column\": self.quote_name(new_field.column),\n                \"comment\": self._comment_sql(new_db_comment),\n            },\n            [],\n        )\n\n    def _comment_sql(self, comment):\n        return self.quote_value(comment or \"\")\n\n    def _alter_many_to_many(self, model, old_field, new_field, strict):\n        \"\"\"Alter M2Ms to repoint their to= endpoints.\"\"\"\n        # Rename the through table\n        if (\n            old_field.remote_field.through._meta.db_table\n            != new_field.remote_field.through._meta.db_table\n        ):\n            self.alter_db_table(\n                old_field.remote_field.through,\n                old_field.remote_field.through._meta.db_table,\n                new_field.remote_field.through._meta.db_table,\n            )\n        # Repoint the FK to the other side\n        self.alter_field(\n            new_field.remote_field.through,\n            # The field that points to the target model is needed, so we can\n            # tell alter_field to change it - this is m2m_reverse_field_name()\n            # (as opposed to m2m_field_name(), which points to our model).\n            old_field.remote_field.through._meta.get_field(\n                old_field.m2m_reverse_field_name()\n            ),\n            new_field.remote_field.through._meta.get_field(\n                new_field.m2m_reverse_field_name()\n            ),\n        )\n        self.alter_field(\n            new_field.remote_field.through,\n            # for self-referential models we need to alter field from the other end too\n            old_field.remote_field.through._meta.get_field(old_field.m2m_field_name()),\n            new_field.remote_field.through._meta.get_field(new_field.m2m_field_name()),\n        )\n\n    def _create_index_name(self, table_name, column_names, suffix=\"\"):\n        \"\"\"\n        Generate a unique name for an index/unique constraint.\n\n        The name is divided into 3 parts: the table name, the column names,\n        and a unique digest and suffix.\n        \"\"\"\n        _, table_name = split_identifier(table_name)\n        hash_suffix_part = \"%s%s\" % (\n            names_digest(table_name, *column_names, length=8),\n            suffix,\n        )\n        max_length = self.connection.ops.max_name_length() or 200\n        # If everything fits into max_length, use that name.\n        index_name = \"%s_%s_%s\" % (table_name, \"_\".join(column_names), hash_suffix_part)\n        if len(index_name) <= max_length:\n            return index_name\n        # Shorten a long suffix.\n        if len(hash_suffix_part) > max_length / 3:\n            hash_suffix_part = hash_suffix_part[: max_length // 3]\n        other_length = (max_length - len(hash_suffix_part)) // 2 - 1\n        index_name = \"%s_%s_%s\" % (\n            table_name[:other_length],\n            \"_\".join(column_names)[:other_length],\n            hash_suffix_part,\n        )\n        # Prepend D if needed to prevent the name from starting with an\n        # underscore or a number (not permitted on Oracle).\n        if index_name[0] == \"_\" or index_name[0].isdigit():\n            index_name = \"D%s\" % index_name[:-1]\n        return index_name\n\n    def _get_index_tablespace_sql(self, model, fields, db_tablespace=None):\n        if db_tablespace is None:\n            if len(fields) == 1 and fields[0].db_tablespace:\n                db_tablespace = fields[0].db_tablespace\n            elif settings.DEFAULT_INDEX_TABLESPACE:\n                db_tablespace = settings.DEFAULT_INDEX_TABLESPACE\n            elif model._meta.db_tablespace:\n                db_tablespace = model._meta.db_tablespace\n        if db_tablespace is not None:\n            return \" \" + self.connection.ops.tablespace_sql(db_tablespace)\n        return \"\"\n\n    def _index_condition_sql(self, condition):\n        if condition:\n            return \" WHERE \" + condition\n        return \"\"\n\n    def _index_include_sql(self, model, columns):\n        if not columns or not self.connection.features.supports_covering_indexes:\n            return \"\"\n        return Statement(\n            \" INCLUDE (%(columns)s)\",\n            columns=Columns(model._meta.db_table, columns, self.quote_name),\n        )\n\n    def _create_index_sql(\n        self,\n        model,\n        *,\n        fields=None,\n        name=None,\n        suffix=\"\",\n        using=\"\",\n        db_tablespace=None,\n        col_suffixes=(),\n        sql=None,\n        opclasses=(),\n        condition=None,\n        include=None,\n        expressions=None,\n    ):\n        \"\"\"\n        Return the SQL statement to create the index for one or several fields\n        or expressions. `sql` can be specified if the syntax differs from the\n        standard (GIS indexes, ...).\n        \"\"\"\n        fields = fields or []\n        expressions = expressions or []\n        compiler = Query(model, alias_cols=False).get_compiler(\n            connection=self.connection,\n        )\n        tablespace_sql = self._get_index_tablespace_sql(\n            model, fields, db_tablespace=db_tablespace\n        )\n        columns = [field.column for field in fields]\n        sql_create_index = sql or self.sql_create_index\n        table = model._meta.db_table\n\n        def create_index_name(*args, **kwargs):\n            nonlocal name\n            if name is None:\n                name = self._create_index_name(*args, **kwargs)\n            return self.quote_name(name)\n\n        return Statement(\n            sql_create_index,\n            table=Table(table, self.quote_name),\n            name=IndexName(table, columns, suffix, create_index_name),\n            using=using,\n            columns=(\n                self._index_columns(table, columns, col_suffixes, opclasses)\n                if columns\n                else Expressions(table, expressions, compiler, self.quote_value)\n            ),\n            extra=tablespace_sql,\n            condition=self._index_condition_sql(condition),\n            include=self._index_include_sql(model, include),\n        )\n\n    def _delete_index_sql(self, model, name, sql=None):\n        statement = Statement(\n            sql or self.sql_delete_index,\n            table=Table(model._meta.db_table, self.quote_name),\n            name=self.quote_name(name),\n        )\n\n        # Remove all deferred statements referencing the deleted index.\n        table_name = statement.parts[\"table\"].table\n        index_name = statement.parts[\"name\"]\n        for sql in list(self.deferred_sql):\n            if isinstance(sql, Statement) and sql.references_index(\n                table_name, index_name\n            ):\n                self.deferred_sql.remove(sql)\n\n        return statement\n\n    def _rename_index_sql(self, model, old_name, new_name):\n        return Statement(\n            self.sql_rename_index,\n            table=Table(model._meta.db_table, self.quote_name),\n            old_name=self.quote_name(old_name),\n            new_name=self.quote_name(new_name),\n        )\n\n    def _index_columns(self, table, columns, col_suffixes, opclasses):\n        return Columns(table, columns, self.quote_name, col_suffixes=col_suffixes)\n\n    def _model_indexes_sql(self, model):\n        \"\"\"\n        Return a list of all index SQL statements (field indexes, Meta.indexes)\n        for the specified model.\n        \"\"\"\n        if not model._meta.managed or model._meta.proxy or model._meta.swapped:\n            return []\n        output = []\n        for field in model._meta.local_fields:\n            output.extend(self._field_indexes_sql(model, field))\n\n        for index in model._meta.indexes:\n            if (\n                not index.contains_expressions\n                or self.connection.features.supports_expression_indexes\n            ):\n                output.append(index.create_sql(model, self))\n        return output\n\n    def _field_indexes_sql(self, model, field):\n        \"\"\"\n        Return a list of all index SQL statements for the specified field.\n        \"\"\"\n        output = []\n        if self._field_should_be_indexed(model, field):\n            output.append(self._create_index_sql(model, fields=[field]))\n        return output\n\n    def _field_should_be_altered(self, old_field, new_field, ignore=None):\n        if not old_field.concrete and not new_field.concrete:\n            return False\n        ignore = ignore or set()\n        _, old_path, old_args, old_kwargs = old_field.deconstruct()\n        _, new_path, new_args, new_kwargs = new_field.deconstruct()\n        # Don't alter when:\n        # - changing only a field name\n        # - changing an attribute that doesn't affect the schema\n        # - changing an attribute in the provided set of ignored attributes\n        # - adding only a db_column and the column name is not changed\n        # - db_table does not change for model referenced by foreign keys\n        for attr in ignore.union(old_field.non_db_attrs):\n            old_kwargs.pop(attr, None)\n        for attr in ignore.union(new_field.non_db_attrs):\n            new_kwargs.pop(attr, None)\n        if (\n            not new_field.many_to_many\n            and old_field.remote_field\n            and new_field.remote_field\n            and old_field.remote_field.model._meta.db_table\n            == new_field.remote_field.model._meta.db_table\n        ):\n            old_kwargs.pop(\"to\", None)\n            new_kwargs.pop(\"to\", None)\n        # db_default can take many form but result in the same SQL.\n        if (\n            old_kwargs.get(\"db_default\")\n            and new_kwargs.get(\"db_default\")\n            and self.db_default_sql(old_field) == self.db_default_sql(new_field)\n        ):\n            old_kwargs.pop(\"db_default\")\n            new_kwargs.pop(\"db_default\")\n        return self.quote_name(old_field.column) != self.quote_name(\n            new_field.column\n        ) or (old_path, old_args, old_kwargs) != (new_path, new_args, new_kwargs)\n\n    def _field_should_be_indexed(self, model, field):\n        return field.db_index and not field.unique\n\n    def _field_became_primary_key(self, old_field, new_field):\n        return not old_field.primary_key and new_field.primary_key\n\n    def _unique_should_be_added(self, old_field, new_field):\n        return (\n            not new_field.primary_key\n            and new_field.unique\n            and (not old_field.unique or old_field.primary_key)\n        )\n\n    def _rename_field_sql(self, table, old_field, new_field, new_type):\n        return self.sql_rename_column % {\n            \"table\": self.quote_name(table),\n            \"old_column\": self.quote_name(old_field.column),\n            \"new_column\": self.quote_name(new_field.column),\n            \"type\": new_type,\n        }\n\n    def _create_fk_sql(self, model, field, suffix):\n        table = Table(model._meta.db_table, self.quote_name)\n        name = self._fk_constraint_name(model, field, suffix)\n        column = Columns(model._meta.db_table, [field.column], self.quote_name)\n        to_table = Table(field.target_field.model._meta.db_table, self.quote_name)\n        to_column = Columns(\n            field.target_field.model._meta.db_table,\n            [field.target_field.column],\n            self.quote_name,\n        )\n        deferrable = self.connection.ops.deferrable_sql()\n        return Statement(\n            self.sql_create_fk,\n            table=table,\n            name=name,\n            column=column,\n            to_table=to_table,\n            to_column=to_column,\n            deferrable=deferrable,\n        )\n\n    def _fk_constraint_name(self, model, field, suffix):\n        def create_fk_name(*args, **kwargs):\n            return self.quote_name(self._create_index_name(*args, **kwargs))\n\n        return ForeignKeyName(\n            model._meta.db_table,\n            [field.column],\n            split_identifier(field.target_field.model._meta.db_table)[1],\n            [field.target_field.column],\n            suffix,\n            create_fk_name,\n        )\n\n    def _delete_fk_sql(self, model, name):\n        return self._delete_constraint_sql(self.sql_delete_fk, model, name)\n\n    def _deferrable_constraint_sql(self, deferrable):\n        if deferrable is None:\n            return \"\"\n        if deferrable == Deferrable.DEFERRED:\n            return \" DEFERRABLE INITIALLY DEFERRED\"\n        if deferrable == Deferrable.IMMEDIATE:\n            return \" DEFERRABLE INITIALLY IMMEDIATE\"\n\n    def _unique_index_nulls_distinct_sql(self, nulls_distinct):\n        if nulls_distinct is False:\n            return \" NULLS NOT DISTINCT\"\n        elif nulls_distinct is True:\n            return \" NULLS DISTINCT\"\n        return \"\"\n\n    def _unique_supported(\n        self,\n        condition=None,\n        deferrable=None,\n        include=None,\n        expressions=None,\n        nulls_distinct=None,\n    ):\n        return (\n            (not condition or self.connection.features.supports_partial_indexes)\n            and (\n                not deferrable\n                or self.connection.features.supports_deferrable_unique_constraints\n            )\n            and (not include or self.connection.features.supports_covering_indexes)\n            and (\n                not expressions or self.connection.features.supports_expression_indexes\n            )\n            and (\n                nulls_distinct is None\n                or self.connection.features.supports_nulls_distinct_unique_constraints\n            )\n        )\n\n    def _unique_sql(\n        self,\n        model,\n        fields,\n        name,\n        condition=None,\n        deferrable=None,\n        include=None,\n        opclasses=None,\n        expressions=None,\n        nulls_distinct=None,\n    ):\n        if not self._unique_supported(\n            condition=condition,\n            deferrable=deferrable,\n            include=include,\n            expressions=expressions,\n            nulls_distinct=nulls_distinct,\n        ):\n            return None\n\n        if (\n            condition\n            or include\n            or opclasses\n            or expressions\n            or nulls_distinct is not None\n        ):\n            # Databases support conditional, covering, functional unique,\n            # and nulls distinct constraints via a unique index.\n            sql = self._create_unique_sql(\n                model,\n                fields,\n                name=name,\n                condition=condition,\n                include=include,\n                opclasses=opclasses,\n                expressions=expressions,\n                nulls_distinct=nulls_distinct,\n            )\n            if sql:\n                self.deferred_sql.append(sql)\n            return None\n        constraint = self.sql_unique_constraint % {\n            \"columns\": \", \".join([self.quote_name(field.column) for field in fields]),\n            \"deferrable\": self._deferrable_constraint_sql(deferrable),\n        }\n        return self.sql_constraint % {\n            \"name\": self.quote_name(name),\n            \"constraint\": constraint,\n        }\n\n    def _create_unique_sql(\n        self,\n        model,\n        fields,\n        name=None,\n        condition=None,\n        deferrable=None,\n        include=None,\n        opclasses=None,\n        expressions=None,\n        nulls_distinct=None,\n    ):\n        if not self._unique_supported(\n            condition=condition,\n            deferrable=deferrable,\n            include=include,\n            expressions=expressions,\n            nulls_distinct=nulls_distinct,\n        ):\n            return None\n\n        compiler = Query(model, alias_cols=False).get_compiler(\n            connection=self.connection\n        )\n        table = model._meta.db_table\n        columns = [field.column for field in fields]\n        if name is None:\n            name = self._unique_constraint_name(table, columns, quote=True)\n        else:\n            name = self.quote_name(name)\n        if condition or include or opclasses or expressions:\n            sql = self.sql_create_unique_index\n        else:\n            sql = self.sql_create_unique\n        if columns:\n            columns = self._index_columns(\n                table, columns, col_suffixes=(), opclasses=opclasses\n            )\n        else:\n            columns = Expressions(table, expressions, compiler, self.quote_value)\n        return Statement(\n            sql,\n            table=Table(table, self.quote_name),\n            name=name,\n            columns=columns,\n            condition=self._index_condition_sql(condition),\n            deferrable=self._deferrable_constraint_sql(deferrable),\n            include=self._index_include_sql(model, include),\n            nulls_distinct=self._unique_index_nulls_distinct_sql(nulls_distinct),\n        )\n\n    def _unique_constraint_name(self, table, columns, quote=True):\n        if quote:\n\n            def create_unique_name(*args, **kwargs):\n                return self.quote_name(self._create_index_name(*args, **kwargs))\n\n        else:\n            create_unique_name = self._create_index_name\n\n        return IndexName(table, columns, \"_uniq\", create_unique_name)\n\n    def _delete_unique_sql(\n        self,\n        model,\n        name,\n        condition=None,\n        deferrable=None,\n        include=None,\n        opclasses=None,\n        expressions=None,\n        nulls_distinct=None,\n    ):\n        if not self._unique_supported(\n            condition=condition,\n            deferrable=deferrable,\n            include=include,\n            expressions=expressions,\n            nulls_distinct=nulls_distinct,\n        ):\n            return None\n        if condition or include or opclasses or expressions:\n            sql = self.sql_delete_index\n        else:\n            sql = self.sql_delete_unique\n        return self._delete_constraint_sql(sql, model, name)\n\n    def _check_sql(self, name, check):\n        return self.sql_constraint % {\n            \"name\": self.quote_name(name),\n            \"constraint\": self.sql_check_constraint % {\"check\": check},\n        }\n\n    def _create_check_sql(self, model, name, check):\n        if not self.connection.features.supports_table_check_constraints:\n            return None\n        return Statement(\n            self.sql_create_check,\n            table=Table(model._meta.db_table, self.quote_name),\n            name=self.quote_name(name),\n            check=check,\n        )\n\n    def _delete_check_sql(self, model, name):\n        if not self.connection.features.supports_table_check_constraints:\n            return None\n        return self._delete_constraint_sql(self.sql_delete_check, model, name)\n\n    def _delete_constraint_sql(self, template, model, name):\n        return Statement(\n            template,\n            table=Table(model._meta.db_table, self.quote_name),\n            name=self.quote_name(name),\n        )\n\n    def _constraint_names(\n        self,\n        model,\n        column_names=None,\n        unique=None,\n        primary_key=None,\n        index=None,\n        foreign_key=None,\n        check=None,\n        type_=None,\n        exclude=None,\n    ):\n        \"\"\"Return all constraint names matching the columns and conditions.\"\"\"\n        if column_names is not None:\n            column_names = [\n                (\n                    self.connection.introspection.identifier_converter(\n                        truncate_name(name, self.connection.ops.max_name_length())\n                    )\n                    if self.connection.features.truncates_names\n                    else self.connection.introspection.identifier_converter(name)\n                )\n                for name in column_names\n            ]\n        with self.connection.cursor() as cursor:\n            constraints = self.connection.introspection.get_constraints(\n                cursor, model._meta.db_table\n            )\n        result = []\n        for name, infodict in constraints.items():\n            if column_names is None or column_names == infodict[\"columns\"]:\n                if unique is not None and infodict[\"unique\"] != unique:\n                    continue\n                if primary_key is not None and infodict[\"primary_key\"] != primary_key:\n                    continue\n                if index is not None and infodict[\"index\"] != index:\n                    continue\n                if check is not None and infodict[\"check\"] != check:\n                    continue\n                if foreign_key is not None and not infodict[\"foreign_key\"]:\n                    continue\n                if type_ is not None and infodict[\"type\"] != type_:\n                    continue\n                if not exclude or name not in exclude:\n                    result.append(name)\n        return result\n\n    def _pk_constraint_sql(self, columns):\n        return self.sql_pk_constraint % {\n            \"columns\": \", \".join(self.quote_name(column) for column in columns)\n        }\n\n    def _delete_primary_key(self, model, strict=False):\n        constraint_names = self._constraint_names(model, primary_key=True)\n        if strict and len(constraint_names) != 1:\n            raise ValueError(\n                \"Found wrong number (%s) of PK constraints for %s\"\n                % (\n                    len(constraint_names),\n                    model._meta.db_table,\n                )\n            )\n        for constraint_name in constraint_names:\n            self.execute(self._delete_primary_key_sql(model, constraint_name))\n\n    def _create_primary_key_sql(self, model, field):\n        return Statement(\n            self.sql_create_pk,\n            table=Table(model._meta.db_table, self.quote_name),\n            name=self.quote_name(\n                self._create_index_name(\n                    model._meta.db_table, [field.column], suffix=\"_pk\"\n                )\n            ),\n            columns=Columns(model._meta.db_table, [field.column], self.quote_name),\n        )\n\n    def _delete_primary_key_sql(self, model, name):\n        return self._delete_constraint_sql(self.sql_delete_pk, model, name)\n\n    def _collate_sql(self, collation, old_collation=None, table_name=None):\n        return \"COLLATE \" + self.quote_name(collation) if collation else \"\"\n\n    def remove_procedure(self, procedure_name, param_types=()):\n        sql = self.sql_delete_procedure % {\n            \"procedure\": self.quote_name(procedure_name),\n            \"param_types\": \",\".join(param_types),\n        }\n        self.execute(sql)"},{"start_line":1930,"end_line":1934,"belongs_to":{"file_name":"schema.py","upper_path":"../django/django/db/backends/base","module":"base","define_class":["BaseDatabaseSchemaEditor"],"imports":["logging","operator","datetime.datetime","django.conf.settings","django.core.exceptions.FieldError","django.db.backends.ddl_references.Columns","django.db.backends.ddl_references.Expressions","django.db.backends.ddl_references.ForeignKeyName","django.db.backends.ddl_references.IndexName","django.db.backends.ddl_references.Statement","django.db.backends.ddl_references.Table","django.db.backends.utils.names_digest","django.db.backends.utils.split_identifier","django.db.backends.utils.truncate_name","django.db.models.Deferrable","django.db.models.Index","django.db.models.fields.composite.CompositePrimaryKey","django.db.models.sql.Query","django.db.transaction.TransactionManagementError","django.db.transaction.atomic","django.utils.timezone","django.db.models.expressions.Value"]},"relative_function":[],"code":"def _check_sql(self, name, check):\n        return self.sql_constraint % {\n            \"name\": self.quote_name(name),\n            \"constraint\": self.sql_check_constraint % {\"check\": check},\n        }"}],"ground_truth":null,"score":null},
{"question":"What are the expected parameters and return values for the `mysql_server_data` method in the context of `DatabaseWrapper`?","answer":"","relative_code_list":[{"start_line":89,"end_line":547,"belongs_to":{"file_name":"base.py","upper_path":"../django/django/db/backends/postgresql","module":"postgresql","define_class":["DatabaseWrapper","CursorMixin","ServerBindingCursor","Cursor","ServerSideCursor","CursorDebugWrapper","CursorDebugWrapper"],"imports":["asyncio","threading","warnings","contextlib.contextmanager","django.conf.settings","django.core.exceptions.ImproperlyConfigured","django.db.DatabaseError","django.db.connections","django.db.backends.base.base.NO_DB_ALIAS","django.db.backends.base.base.BaseDatabaseWrapper","django.db.backends.utils.CursorDebugWrapper","django.utils.asyncio.async_unsafe","django.utils.functional.cached_property","django.utils.safestring.SafeString","django.utils.version.get_version_tuple","psycopg_any.IsolationLevel","psycopg_any.is_psycopg3","client.DatabaseClient","creation.DatabaseCreation","features.DatabaseFeatures","introspection.DatabaseIntrospection","operations.DatabaseOperations","schema.DatabaseSchemaEditor","psycopg.adapters","psycopg.sql","psycopg.pq.Format","psycopg_any.get_adapters_template","psycopg_any.register_tzloader","psycopg2.extensions","psycopg2.extras","psycopg","psycopg2","psycopg_pool.ConnectionPool"]},"relative_function":[],"code":"class DatabaseWrapper(BaseDatabaseWrapper):\n    vendor = \"postgresql\"\n    display_name = \"PostgreSQL\"\n    # This dictionary maps Field objects to their associated PostgreSQL column\n    # types, as strings. Column-type strings can contain format strings; they'll\n    # be interpolated against the values of Field.__dict__ before being output.\n    # If a column type is set to None, it won't be included in the output.\n    data_types = {\n        \"AutoField\": \"integer\",\n        \"BigAutoField\": \"bigint\",\n        \"BinaryField\": \"bytea\",\n        \"BooleanField\": \"boolean\",\n        \"CharField\": _get_varchar_column,\n        \"DateField\": \"date\",\n        \"DateTimeField\": \"timestamp with time zone\",\n        \"DecimalField\": \"numeric(%(max_digits)s, %(decimal_places)s)\",\n        \"DurationField\": \"interval\",\n        \"FileField\": \"varchar(%(max_length)s)\",\n        \"FilePathField\": \"varchar(%(max_length)s)\",\n        \"FloatField\": \"double precision\",\n        \"IntegerField\": \"integer\",\n        \"BigIntegerField\": \"bigint\",\n        \"IPAddressField\": \"inet\",\n        \"GenericIPAddressField\": \"inet\",\n        \"JSONField\": \"jsonb\",\n        \"OneToOneField\": \"integer\",\n        \"PositiveBigIntegerField\": \"bigint\",\n        \"PositiveIntegerField\": \"integer\",\n        \"PositiveSmallIntegerField\": \"smallint\",\n        \"SlugField\": \"varchar(%(max_length)s)\",\n        \"SmallAutoField\": \"smallint\",\n        \"SmallIntegerField\": \"smallint\",\n        \"TextField\": \"text\",\n        \"TimeField\": \"time\",\n        \"UUIDField\": \"uuid\",\n    }\n    data_type_check_constraints = {\n        \"PositiveBigIntegerField\": '\"%(column)s\" >= 0',\n        \"PositiveIntegerField\": '\"%(column)s\" >= 0',\n        \"PositiveSmallIntegerField\": '\"%(column)s\" >= 0',\n    }\n    data_types_suffix = {\n        \"AutoField\": \"GENERATED BY DEFAULT AS IDENTITY\",\n        \"BigAutoField\": \"GENERATED BY DEFAULT AS IDENTITY\",\n        \"SmallAutoField\": \"GENERATED BY DEFAULT AS IDENTITY\",\n    }\n    operators = {\n        \"exact\": \"= %s\",\n        \"iexact\": \"= UPPER(%s)\",\n        \"contains\": \"LIKE %s\",\n        \"icontains\": \"LIKE UPPER(%s)\",\n        \"regex\": \"~ %s\",\n        \"iregex\": \"~* %s\",\n        \"gt\": \"> %s\",\n        \"gte\": \">= %s\",\n        \"lt\": \"< %s\",\n        \"lte\": \"<= %s\",\n        \"startswith\": \"LIKE %s\",\n        \"endswith\": \"LIKE %s\",\n        \"istartswith\": \"LIKE UPPER(%s)\",\n        \"iendswith\": \"LIKE UPPER(%s)\",\n    }\n\n    # The patterns below are used to generate SQL pattern lookup clauses when\n    # the right-hand side of the lookup isn't a raw string (it might be an expression\n    # or the result of a bilateral transformation).\n    # In those cases, special characters for LIKE operators (e.g. \\, *, _) should be\n    # escaped on database side.\n    #\n    # Note: we use str.format() here for readability as '%' is used as a wildcard for\n    # the LIKE operator.\n    pattern_esc = (\n        r\"REPLACE(REPLACE(REPLACE({}, E'\\\\', E'\\\\\\\\'), E'%%', E'\\\\%%'), E'_', E'\\\\_')\"\n    )\n    pattern_ops = {\n        \"contains\": \"LIKE '%%' || {} || '%%'\",\n        \"icontains\": \"LIKE '%%' || UPPER({}) || '%%'\",\n        \"startswith\": \"LIKE {} || '%%'\",\n        \"istartswith\": \"LIKE UPPER({}) || '%%'\",\n        \"endswith\": \"LIKE '%%' || {}\",\n        \"iendswith\": \"LIKE '%%' || UPPER({})\",\n    }\n\n    Database = Database\n    SchemaEditorClass = DatabaseSchemaEditor\n    # Classes instantiated in __init__().\n    client_class = DatabaseClient\n    creation_class = DatabaseCreation\n    features_class = DatabaseFeatures\n    introspection_class = DatabaseIntrospection\n    ops_class = DatabaseOperations\n    # PostgreSQL backend-specific attributes.\n    _named_cursor_idx = 0\n    _connection_pools = {}\n\n    @property\n    def pool(self):\n        pool_options = self.settings_dict[\"OPTIONS\"].get(\"pool\")\n        if self.alias == NO_DB_ALIAS or not pool_options:\n            return None\n\n        if self.alias not in self._connection_pools:\n            if self.settings_dict.get(\"CONN_MAX_AGE\", 0) != 0:\n                raise ImproperlyConfigured(\n                    \"Pooling doesn't support persistent connections.\"\n                )\n            # Set the default options.\n            if pool_options is True:\n                pool_options = {}\n\n            try:\n                from psycopg_pool import ConnectionPool\n            except ImportError as err:\n                raise ImproperlyConfigured(\n                    \"Error loading psycopg_pool module.\\nDid you install psycopg[pool]?\"\n                ) from err\n\n            connect_kwargs = self.get_connection_params()\n            # Ensure we run in autocommit, Django properly sets it later on.\n            connect_kwargs[\"autocommit\"] = True\n            enable_checks = self.settings_dict[\"CONN_HEALTH_CHECKS\"]\n            pool = ConnectionPool(\n                kwargs=connect_kwargs,\n                open=False,  # Do not open the pool during startup.\n                configure=self._configure_connection,\n                check=ConnectionPool.check_connection if enable_checks else None,\n                **pool_options,\n            )\n            # setdefault() ensures that multiple threads don't set this in\n            # parallel. Since we do not open the pool during it's init above,\n            # this means that at worst during startup multiple threads generate\n            # pool objects and the first to set it wins.\n            self._connection_pools.setdefault(self.alias, pool)\n\n        return self._connection_pools[self.alias]\n\n    def close_pool(self):\n        if self.pool:\n            self.pool.close()\n            del self._connection_pools[self.alias]\n\n    def get_database_version(self):\n        \"\"\"\n        Return a tuple of the database's version.\n        E.g. for pg_version 120004, return (12, 4).\n        \"\"\"\n        return divmod(self.pg_version, 10000)\n\n    def get_connection_params(self):\n        settings_dict = self.settings_dict\n        # None may be used to connect to the default 'postgres' db\n        if settings_dict[\"NAME\"] == \"\" and not settings_dict[\"OPTIONS\"].get(\"service\"):\n            raise ImproperlyConfigured(\n                \"settings.DATABASES is improperly configured. \"\n                \"Please supply the NAME or OPTIONS['service'] value.\"\n            )\n        if len(settings_dict[\"NAME\"] or \"\") > self.ops.max_name_length():\n            raise ImproperlyConfigured(\n                \"The database name '%s' (%d characters) is longer than \"\n                \"PostgreSQL's limit of %d characters. Supply a shorter NAME \"\n                \"in settings.DATABASES.\"\n                % (\n                    settings_dict[\"NAME\"],\n                    len(settings_dict[\"NAME\"]),\n                    self.ops.max_name_length(),\n                )\n            )\n        if settings_dict[\"NAME\"]:\n            conn_params = {\n                \"dbname\": settings_dict[\"NAME\"],\n                **settings_dict[\"OPTIONS\"],\n            }\n        elif settings_dict[\"NAME\"] is None:\n            # Connect to the default 'postgres' db.\n            settings_dict[\"OPTIONS\"].pop(\"service\", None)\n            conn_params = {\"dbname\": \"postgres\", **settings_dict[\"OPTIONS\"]}\n        else:\n            conn_params = {**settings_dict[\"OPTIONS\"]}\n        conn_params[\"client_encoding\"] = \"UTF8\"\n\n        conn_params.pop(\"assume_role\", None)\n        conn_params.pop(\"isolation_level\", None)\n\n        pool_options = conn_params.pop(\"pool\", None)\n        if pool_options and not is_psycopg3:\n            raise ImproperlyConfigured(\"Database pooling requires psycopg >= 3\")\n\n        server_side_binding = conn_params.pop(\"server_side_binding\", None)\n        conn_params.setdefault(\n            \"cursor_factory\",\n            (\n                ServerBindingCursor\n                if is_psycopg3 and server_side_binding is True\n                else Cursor\n            ),\n        )\n        if settings_dict[\"USER\"]:\n            conn_params[\"user\"] = settings_dict[\"USER\"]\n        if settings_dict[\"PASSWORD\"]:\n            conn_params[\"password\"] = settings_dict[\"PASSWORD\"]\n        if settings_dict[\"HOST\"]:\n            conn_params[\"host\"] = settings_dict[\"HOST\"]\n        if settings_dict[\"PORT\"]:\n            conn_params[\"port\"] = settings_dict[\"PORT\"]\n        if is_psycopg3:\n            conn_params[\"context\"] = get_adapters_template(\n                settings.USE_TZ, self.timezone\n            )\n            # Disable prepared statements by default to keep connection poolers\n            # working. Can be reenabled via OPTIONS in the settings dict.\n            conn_params[\"prepare_threshold\"] = conn_params.pop(\n                \"prepare_threshold\", None\n            )\n        return conn_params\n\n    @async_unsafe\n    def get_new_connection(self, conn_params):\n        # self.isolation_level must be set:\n        # - after connecting to the database in order to obtain the database's\n        #   default when no value is explicitly specified in options.\n        # - before calling _set_autocommit() because if autocommit is on, that\n        #   will set connection.isolation_level to ISOLATION_LEVEL_AUTOCOMMIT.\n        options = self.settings_dict[\"OPTIONS\"]\n        set_isolation_level = False\n        try:\n            isolation_level_value = options[\"isolation_level\"]\n        except KeyError:\n            self.isolation_level = IsolationLevel.READ_COMMITTED\n        else:\n            # Set the isolation level to the value from OPTIONS.\n            try:\n                self.isolation_level = IsolationLevel(isolation_level_value)\n                set_isolation_level = True\n            except ValueError:\n                raise ImproperlyConfigured(\n                    f\"Invalid transaction isolation level {isolation_level_value} \"\n                    f\"specified. Use one of the psycopg.IsolationLevel values.\"\n                )\n        if self.pool:\n            # If nothing else has opened the pool, open it now.\n            self.pool.open()\n            connection = self.pool.getconn()\n        else:\n            connection = self.Database.connect(**conn_params)\n        if set_isolation_level:\n            connection.isolation_level = self.isolation_level\n        if not is_psycopg3:\n            # Register dummy loads() to avoid a round trip from psycopg2's\n            # decode to json.dumps() to json.loads(), when using a custom\n            # decoder in JSONField.\n            psycopg2.extras.register_default_jsonb(\n                conn_or_curs=connection, loads=lambda x: x\n            )\n        return connection\n\n    def ensure_timezone(self):\n        # Close the pool so new connections pick up the correct timezone.\n        self.close_pool()\n        if self.connection is None:\n            return False\n        return self._configure_timezone(self.connection)\n\n    def _configure_timezone(self, connection):\n        conn_timezone_name = connection.info.parameter_status(\"TimeZone\")\n        timezone_name = self.timezone_name\n        if timezone_name and conn_timezone_name != timezone_name:\n            with connection.cursor() as cursor:\n                cursor.execute(self.ops.set_time_zone_sql(), [timezone_name])\n            return True\n        return False\n\n    def _configure_role(self, connection):\n        if new_role := self.settings_dict[\"OPTIONS\"].get(\"assume_role\"):\n            with connection.cursor() as cursor:\n                sql = self.ops.compose_sql(\"SET ROLE %s\", [new_role])\n                cursor.execute(sql)\n            return True\n        return False\n\n    def _configure_connection(self, connection):\n        # This function is called from init_connection_state and from the\n        # psycopg pool itself after a connection is opened.\n\n        # Commit after setting the time zone.\n        commit_tz = self._configure_timezone(connection)\n        # Set the role on the connection. This is useful if the credential used\n        # to login is not the same as the role that owns database resources. As\n        # can be the case when using temporary or ephemeral credentials.\n        commit_role = self._configure_role(connection)\n\n        return commit_role or commit_tz\n\n    def _close(self):\n        if self.connection is not None:\n            # `wrap_database_errors` only works for `putconn` as long as there\n            # is no `reset` function set in the pool because it is deferred\n            # into a thread and not directly executed.\n            with self.wrap_database_errors:\n                if self.pool:\n                    # Ensure the correct pool is returned. This is a workaround\n                    # for tests so a pool can be changed on setting changes\n                    # (e.g. USE_TZ, TIME_ZONE).\n                    self.connection._pool.putconn(self.connection)\n                    # Connection can no longer be used.\n                    self.connection = None\n                else:\n                    return self.connection.close()\n\n    def init_connection_state(self):\n        super().init_connection_state()\n\n        if self.connection is not None and not self.pool:\n            commit = self._configure_connection(self.connection)\n\n            if commit and not self.get_autocommit():\n                self.connection.commit()\n\n    @async_unsafe\n    def create_cursor(self, name=None):\n        if name:\n            if is_psycopg3 and (\n                self.settings_dict[\"OPTIONS\"].get(\"server_side_binding\") is not True\n            ):\n                # psycopg >= 3 forces the usage of server-side bindings for\n                # named cursors so a specialized class that implements\n                # server-side cursors while performing client-side bindings\n                # must be used if `server_side_binding` is disabled (default).\n                cursor = ServerSideCursor(\n                    self.connection,\n                    name=name,\n                    scrollable=False,\n                    withhold=self.connection.autocommit,\n                )\n            else:\n                # In autocommit mode, the cursor will be used outside of a\n                # transaction, hence use a holdable cursor.\n                cursor = self.connection.cursor(\n                    name, scrollable=False, withhold=self.connection.autocommit\n                )\n        else:\n            cursor = self.connection.cursor()\n\n        if is_psycopg3:\n            # Register the cursor timezone only if the connection disagrees, to\n            # avoid copying the adapter map.\n            tzloader = self.connection.adapters.get_loader(TIMESTAMPTZ_OID, Format.TEXT)\n            if self.timezone != tzloader.timezone:\n                register_tzloader(self.timezone, cursor)\n        else:\n            cursor.tzinfo_factory = self.tzinfo_factory if settings.USE_TZ else None\n        return cursor\n\n    def tzinfo_factory(self, offset):\n        return self.timezone\n\n    @async_unsafe\n    def chunked_cursor(self):\n        self._named_cursor_idx += 1\n        # Get the current async task\n        # Note that right now this is behind @async_unsafe, so this is\n        # unreachable, but in future we'll start loosening this restriction.\n        # For now, it's here so that every use of \"threading\" is\n        # also async-compatible.\n        try:\n            current_task = asyncio.current_task()\n        except RuntimeError:\n            current_task = None\n        # Current task can be none even if the current_task call didn't error\n        if current_task:\n            task_ident = str(id(current_task))\n        else:\n            task_ident = \"sync\"\n        # Use that and the thread ident to get a unique name\n        return self._cursor(\n            name=\"_django_curs_%d_%s_%d\"\n            % (\n                # Avoid reusing name in other threads / tasks\n                threading.current_thread().ident,\n                task_ident,\n                self._named_cursor_idx,\n            )\n        )\n\n    def _set_autocommit(self, autocommit):\n        with self.wrap_database_errors:\n            self.connection.autocommit = autocommit\n\n    def check_constraints(self, table_names=None):\n        \"\"\"\n        Check constraints by setting them to immediate. Return them to deferred\n        afterward.\n        \"\"\"\n        with self.cursor() as cursor:\n            cursor.execute(\"SET CONSTRAINTS ALL IMMEDIATE\")\n            cursor.execute(\"SET CONSTRAINTS ALL DEFERRED\")\n\n    def is_usable(self):\n        if self.connection is None:\n            return False\n        try:\n            # Use a psycopg cursor directly, bypassing Django's utilities.\n            with self.connection.cursor() as cursor:\n                cursor.execute(\"SELECT 1\")\n        except Database.Error:\n            return False\n        else:\n            return True\n\n    def close_if_health_check_failed(self):\n        if self.pool:\n            # The pool only returns healthy connections.\n            return\n        return super().close_if_health_check_failed()\n\n    @contextmanager\n    def _nodb_cursor(self):\n        cursor = None\n        try:\n            with super()._nodb_cursor() as cursor:\n                yield cursor\n        except (Database.DatabaseError, WrappedDatabaseError):\n            if cursor is not None:\n                raise\n            warnings.warn(\n                \"Normally Django will use a connection to the 'postgres' database \"\n                \"to avoid running initialization queries against the production \"\n                \"database when it's not needed (for example, when running tests). \"\n                \"Django was unable to create a connection to the 'postgres' database \"\n                \"and will use the first PostgreSQL database instead.\",\n                RuntimeWarning,\n            )\n            for connection in connections.all():\n                if (\n                    connection.vendor == \"postgresql\"\n                    and connection.settings_dict[\"NAME\"] != \"postgres\"\n                ):\n                    conn = self.__class__(\n                        {\n                            **self.settings_dict,\n                            \"NAME\": connection.settings_dict[\"NAME\"],\n                        },\n                        alias=self.alias,\n                    )\n                    try:\n                        with conn.cursor() as cursor:\n                            yield cursor\n                    finally:\n                        conn.close()\n                    break\n            else:\n                raise\n\n    @cached_property\n    def pg_version(self):\n        with self.temporary_connection():\n            return self.connection.info.server_version\n\n    def make_debug_cursor(self, cursor):\n        return CursorDebugWrapper(cursor, self)"},{"start_line":397,"end_line":420,"belongs_to":{"file_name":"base.py","upper_path":"../django/django/db/backends/mysql","module":"mysql","define_class":["CursorWrapper","DatabaseWrapper"],"imports":["django.core.exceptions.ImproperlyConfigured","django.db.IntegrityError","django.db.backends.utils","django.db.backends.base.base.BaseDatabaseWrapper","django.utils.asyncio.async_unsafe","django.utils.functional.cached_property","django.utils.regex_helper._lazy_re_compile","MySQLdb.constants.CLIENT","MySQLdb.constants.FIELD_TYPE","MySQLdb.converters.conversions","client.DatabaseClient","creation.DatabaseCreation","features.DatabaseFeatures","introspection.DatabaseIntrospection","operations.DatabaseOperations","schema.DatabaseSchemaEditor","validation.DatabaseValidation","MySQLdb"]},"relative_function":[],"code":"def mysql_server_data(self):\n        with self.temporary_connection() as cursor:\n            # Select some server variables and test if the time zone\n            # definitions are installed. CONVERT_TZ returns NULL if 'UTC'\n            # timezone isn't loaded into the mysql.time_zone table.\n            cursor.execute(\n                \"\"\"\n                SELECT VERSION(),\n                       @@sql_mode,\n                       @@default_storage_engine,\n                       @@sql_auto_is_null,\n                       @@lower_case_table_names,\n                       CONVERT_TZ('2001-01-01 01:00:00', 'UTC', 'UTC') IS NOT NULL\n            \"\"\"\n            )\n            row = cursor.fetchone()\n        return {\n            \"version\": row[0],\n            \"sql_mode\": row[1],\n            \"default_storage_engine\": row[2],\n            \"sql_auto_is_null\": bool(row[3]),\n            \"lower_case_table_names\": bool(row[4]),\n            \"has_zoneinfo_database\": bool(row[5]),\n        }"}],"ground_truth":null,"score":null},
{"question":"How is the `format_for_duration_arithmetic` currently being used in the `DatabaseOperations`?","answer":"","relative_code_list":[{"start_line":27,"end_line":422,"belongs_to":{"file_name":"operations.py","upper_path":"../django/django/db/backends/postgresql","module":"postgresql","define_class":["DatabaseOperations"],"imports":["json","functools.lru_cache","functools.partial","django.conf.settings","django.db.backends.base.operations.BaseDatabaseOperations","django.db.backends.postgresql.compiler.InsertUnnest","django.db.backends.postgresql.psycopg_any.Inet","django.db.backends.postgresql.psycopg_any.Jsonb","django.db.backends.postgresql.psycopg_any.errors","django.db.backends.postgresql.psycopg_any.is_psycopg3","django.db.backends.postgresql.psycopg_any.mogrify","django.db.backends.utils.split_tzname_delta","django.db.models.constants.OnConflict","django.db.models.functions.Cast","django.utils.regex_helper._lazy_re_compile","psycopg.types.numeric","django.db.models"]},"relative_function":[],"code":"class DatabaseOperations(BaseDatabaseOperations):\n    compiler_module = \"django.db.backends.postgresql.compiler\"\n    cast_char_field_without_max_length = \"varchar\"\n    explain_prefix = \"EXPLAIN\"\n    explain_options = frozenset(\n        [\n            \"ANALYZE\",\n            \"BUFFERS\",\n            \"COSTS\",\n            \"GENERIC_PLAN\",\n            \"MEMORY\",\n            \"SETTINGS\",\n            \"SERIALIZE\",\n            \"SUMMARY\",\n            \"TIMING\",\n            \"VERBOSE\",\n            \"WAL\",\n        ]\n    )\n    cast_data_types = {\n        \"AutoField\": \"integer\",\n        \"BigAutoField\": \"bigint\",\n        \"SmallAutoField\": \"smallint\",\n    }\n\n    if is_psycopg3:\n        from psycopg.types import numeric\n\n        integerfield_type_map = {\n            \"SmallIntegerField\": numeric.Int2,\n            \"IntegerField\": numeric.Int4,\n            \"BigIntegerField\": numeric.Int8,\n            \"PositiveSmallIntegerField\": numeric.Int2,\n            \"PositiveIntegerField\": numeric.Int4,\n            \"PositiveBigIntegerField\": numeric.Int8,\n        }\n\n    def unification_cast_sql(self, output_field):\n        internal_type = output_field.get_internal_type()\n        if internal_type in (\n            \"GenericIPAddressField\",\n            \"IPAddressField\",\n            \"TimeField\",\n            \"UUIDField\",\n        ):\n            # PostgreSQL will resolve a union as type 'text' if input types are\n            # 'unknown'.\n            # https://www.postgresql.org/docs/current/typeconv-union-case.html\n            # These fields cannot be implicitly cast back in the default\n            # PostgreSQL configuration so we need to explicitly cast them.\n            # We must also remove components of the type within brackets:\n            # varchar(255) -> varchar.\n            return (\n                \"CAST(%%s AS %s)\" % output_field.db_type(self.connection).split(\"(\")[0]\n            )\n        return \"%s\"\n\n    # EXTRACT format cannot be passed in parameters.\n    _extract_format_re = _lazy_re_compile(r\"[A-Z_]+\")\n\n    def date_extract_sql(self, lookup_type, sql, params):\n        # https://www.postgresql.org/docs/current/functions-datetime.html#FUNCTIONS-DATETIME-EXTRACT\n        if lookup_type == \"week_day\":\n            # For consistency across backends, we return Sunday=1, Saturday=7.\n            return f\"EXTRACT(DOW FROM {sql}) + 1\", params\n        elif lookup_type == \"iso_week_day\":\n            return f\"EXTRACT(ISODOW FROM {sql})\", params\n        elif lookup_type == \"iso_year\":\n            return f\"EXTRACT(ISOYEAR FROM {sql})\", params\n\n        lookup_type = lookup_type.upper()\n        if not self._extract_format_re.fullmatch(lookup_type):\n            raise ValueError(f\"Invalid lookup type: {lookup_type!r}\")\n        return f\"EXTRACT({lookup_type} FROM {sql})\", params\n\n    def date_trunc_sql(self, lookup_type, sql, params, tzname=None):\n        sql, params = self._convert_sql_to_tz(sql, params, tzname)\n        # https://www.postgresql.org/docs/current/functions-datetime.html#FUNCTIONS-DATETIME-TRUNC\n        return f\"DATE_TRUNC(%s, {sql})\", (lookup_type, *params)\n\n    def _prepare_tzname_delta(self, tzname):\n        tzname, sign, offset = split_tzname_delta(tzname)\n        if offset:\n            sign = \"-\" if sign == \"+\" else \"+\"\n            return f\"{tzname}{sign}{offset}\"\n        return tzname\n\n    def _convert_sql_to_tz(self, sql, params, tzname):\n        if tzname and settings.USE_TZ:\n            tzname_param = self._prepare_tzname_delta(tzname)\n            return f\"{sql} AT TIME ZONE %s\", (*params, tzname_param)\n        return sql, params\n\n    def datetime_cast_date_sql(self, sql, params, tzname):\n        sql, params = self._convert_sql_to_tz(sql, params, tzname)\n        return f\"({sql})::date\", params\n\n    def datetime_cast_time_sql(self, sql, params, tzname):\n        sql, params = self._convert_sql_to_tz(sql, params, tzname)\n        return f\"({sql})::time\", params\n\n    def datetime_extract_sql(self, lookup_type, sql, params, tzname):\n        sql, params = self._convert_sql_to_tz(sql, params, tzname)\n        if lookup_type == \"second\":\n            # Truncate fractional seconds.\n            return f\"EXTRACT(SECOND FROM DATE_TRUNC(%s, {sql}))\", (\"second\", *params)\n        return self.date_extract_sql(lookup_type, sql, params)\n\n    def datetime_trunc_sql(self, lookup_type, sql, params, tzname):\n        sql, params = self._convert_sql_to_tz(sql, params, tzname)\n        # https://www.postgresql.org/docs/current/functions-datetime.html#FUNCTIONS-DATETIME-TRUNC\n        return f\"DATE_TRUNC(%s, {sql})\", (lookup_type, *params)\n\n    def time_extract_sql(self, lookup_type, sql, params):\n        if lookup_type == \"second\":\n            # Truncate fractional seconds.\n            return f\"EXTRACT(SECOND FROM DATE_TRUNC(%s, {sql}))\", (\"second\", *params)\n        return self.date_extract_sql(lookup_type, sql, params)\n\n    def time_trunc_sql(self, lookup_type, sql, params, tzname=None):\n        sql, params = self._convert_sql_to_tz(sql, params, tzname)\n        return f\"DATE_TRUNC(%s, {sql})::time\", (lookup_type, *params)\n\n    def deferrable_sql(self):\n        return \" DEFERRABLE INITIALLY DEFERRED\"\n\n    def bulk_insert_sql(self, fields, placeholder_rows):\n        if isinstance(placeholder_rows, InsertUnnest):\n            return f\"SELECT * FROM {placeholder_rows}\"\n        return super().bulk_insert_sql(fields, placeholder_rows)\n\n    def fetch_returned_insert_rows(self, cursor):\n        \"\"\"\n        Given a cursor object that has just performed an INSERT...RETURNING\n        statement into a table, return the tuple of returned data.\n        \"\"\"\n        return cursor.fetchall()\n\n    def lookup_cast(self, lookup_type, internal_type=None):\n        lookup = \"%s\"\n        # Cast text lookups to text to allow things like filter(x__contains=4)\n        if lookup_type in (\n            \"iexact\",\n            \"contains\",\n            \"icontains\",\n            \"startswith\",\n            \"istartswith\",\n            \"endswith\",\n            \"iendswith\",\n            \"regex\",\n            \"iregex\",\n        ):\n            if internal_type in (\"IPAddressField\", \"GenericIPAddressField\"):\n                lookup = \"HOST(%s)\"\n            else:\n                lookup = \"%s::text\"\n\n        # Use UPPER(x) for case-insensitive lookups; it's faster.\n        if lookup_type in (\"iexact\", \"icontains\", \"istartswith\", \"iendswith\"):\n            lookup = \"UPPER(%s)\" % lookup\n\n        return lookup\n\n    def no_limit_value(self):\n        return None\n\n    def prepare_sql_script(self, sql):\n        return [sql]\n\n    def quote_name(self, name):\n        if name.startswith('\"') and name.endswith('\"'):\n            return name  # Quoting once is enough.\n        return '\"%s\"' % name\n\n    def compose_sql(self, sql, params):\n        return mogrify(sql, params, self.connection)\n\n    def set_time_zone_sql(self):\n        return \"SELECT set_config('TimeZone', %s, false)\"\n\n    def sql_flush(self, style, tables, *, reset_sequences=False, allow_cascade=False):\n        if not tables:\n            return []\n\n        # Perform a single SQL 'TRUNCATE x, y, z...;' statement. It allows us\n        # to truncate tables referenced by a foreign key in any other table.\n        sql_parts = [\n            style.SQL_KEYWORD(\"TRUNCATE\"),\n            \", \".join(style.SQL_FIELD(self.quote_name(table)) for table in tables),\n        ]\n        if reset_sequences:\n            sql_parts.append(style.SQL_KEYWORD(\"RESTART IDENTITY\"))\n        if allow_cascade:\n            sql_parts.append(style.SQL_KEYWORD(\"CASCADE\"))\n        return [\"%s;\" % \" \".join(sql_parts)]\n\n    def sequence_reset_by_name_sql(self, style, sequences):\n        # 'ALTER SEQUENCE sequence_name RESTART WITH 1;'... style SQL statements\n        # to reset sequence indices\n        sql = []\n        for sequence_info in sequences:\n            table_name = sequence_info[\"table\"]\n            # 'id' will be the case if it's an m2m using an autogenerated\n            # intermediate table (see BaseDatabaseIntrospection.sequence_list).\n            column_name = sequence_info[\"column\"] or \"id\"\n            sql.append(\n                \"%s setval(pg_get_serial_sequence('%s','%s'), 1, false);\"\n                % (\n                    style.SQL_KEYWORD(\"SELECT\"),\n                    style.SQL_TABLE(self.quote_name(table_name)),\n                    style.SQL_FIELD(column_name),\n                )\n            )\n        return sql\n\n    def tablespace_sql(self, tablespace, inline=False):\n        if inline:\n            return \"USING INDEX TABLESPACE %s\" % self.quote_name(tablespace)\n        else:\n            return \"TABLESPACE %s\" % self.quote_name(tablespace)\n\n    def sequence_reset_sql(self, style, model_list):\n        from django.db import models\n\n        output = []\n        qn = self.quote_name\n        for model in model_list:\n            # Use `coalesce` to set the sequence for each model to the max pk\n            # value if there are records, or 1 if there are none. Set the\n            # `is_called` property (the third argument to `setval`) to true if\n            # there are records (as the max pk value is already in use),\n            # otherwise set it to false. Use pg_get_serial_sequence to get the\n            # underlying sequence name from the table name and column name.\n\n            for f in model._meta.local_fields:\n                if isinstance(f, models.AutoField):\n                    output.append(\n                        \"%s setval(pg_get_serial_sequence('%s','%s'), \"\n                        \"coalesce(max(%s), 1), max(%s) %s null) %s %s;\"\n                        % (\n                            style.SQL_KEYWORD(\"SELECT\"),\n                            style.SQL_TABLE(qn(model._meta.db_table)),\n                            style.SQL_FIELD(f.column),\n                            style.SQL_FIELD(qn(f.column)),\n                            style.SQL_FIELD(qn(f.column)),\n                            style.SQL_KEYWORD(\"IS NOT\"),\n                            style.SQL_KEYWORD(\"FROM\"),\n                            style.SQL_TABLE(qn(model._meta.db_table)),\n                        )\n                    )\n                    # Only one AutoField is allowed per model, so don't bother\n                    # continuing.\n                    break\n        return output\n\n    def prep_for_iexact_query(self, x):\n        return x\n\n    def max_name_length(self):\n        \"\"\"\n        Return the maximum length of an identifier.\n\n        The maximum length of an identifier is 63 by default, but can be\n        changed by recompiling PostgreSQL after editing the NAMEDATALEN\n        macro in src/include/pg_config_manual.h.\n\n        This implementation returns 63, but can be overridden by a custom\n        database backend that inherits most of its behavior from this one.\n        \"\"\"\n        return 63\n\n    def distinct_sql(self, fields, params):\n        if fields:\n            params = [param for param_list in params for param in param_list]\n            return ([\"DISTINCT ON (%s)\" % \", \".join(fields)], params)\n        else:\n            return [\"DISTINCT\"], []\n\n    if is_psycopg3:\n\n        def last_executed_query(self, cursor, sql, params):\n            if self.connection.features.uses_server_side_binding:\n                try:\n                    return self.compose_sql(sql, params)\n                except errors.DataError:\n                    return None\n            else:\n                if cursor._query and cursor._query.query is not None:\n                    return cursor._query.query.decode()\n                return None\n\n    else:\n\n        def last_executed_query(self, cursor, sql, params):\n            # https://www.psycopg.org/docs/cursor.html#cursor.query\n            # The query attribute is a Psycopg extension to the DB API 2.0.\n            if cursor.query is not None:\n                return cursor.query.decode()\n            return None\n\n    def return_insert_columns(self, fields):\n        if not fields:\n            return \"\", ()\n        columns = [\n            \"%s.%s\"\n            % (\n                self.quote_name(field.model._meta.db_table),\n                self.quote_name(field.column),\n            )\n            for field in fields\n        ]\n        return \"RETURNING %s\" % \", \".join(columns), ()\n\n    if is_psycopg3:\n\n        def adapt_integerfield_value(self, value, internal_type):\n            if value is None or hasattr(value, \"resolve_expression\"):\n                return value\n            return self.integerfield_type_map[internal_type](value)\n\n    def adapt_datefield_value(self, value):\n        return value\n\n    def adapt_datetimefield_value(self, value):\n        return value\n\n    def adapt_timefield_value(self, value):\n        return value\n\n    def adapt_ipaddressfield_value(self, value):\n        if value:\n            return Inet(value)\n        return None\n\n    def adapt_json_value(self, value, encoder):\n        return Jsonb(value, dumps=get_json_dumps(encoder))\n\n    def subtract_temporals(self, internal_type, lhs, rhs):\n        if internal_type == \"DateField\":\n            lhs_sql, lhs_params = lhs\n            rhs_sql, rhs_params = rhs\n            params = (*lhs_params, *rhs_params)\n            return \"(interval '1 day' * (%s - %s))\" % (lhs_sql, rhs_sql), params\n        return super().subtract_temporals(internal_type, lhs, rhs)\n\n    def explain_query_prefix(self, format=None, **options):\n        extra = {}\n        if serialize := options.pop(\"serialize\", None):\n            if serialize.upper() in {\"TEXT\", \"BINARY\"}:\n                extra[\"SERIALIZE\"] = serialize.upper()\n        # Normalize options.\n        if options:\n            options = {\n                name.upper(): \"true\" if value else \"false\"\n                for name, value in options.items()\n            }\n            for valid_option in self.explain_options:\n                value = options.pop(valid_option, None)\n                if value is not None:\n                    extra[valid_option] = value\n        prefix = super().explain_query_prefix(format, **options)\n        if format:\n            extra[\"FORMAT\"] = format\n        if extra:\n            prefix += \" (%s)\" % \", \".join(\"%s %s\" % i for i in extra.items())\n        return prefix\n\n    def on_conflict_suffix_sql(self, fields, on_conflict, update_fields, unique_fields):\n        if on_conflict == OnConflict.IGNORE:\n            return \"ON CONFLICT DO NOTHING\"\n        if on_conflict == OnConflict.UPDATE:\n            return \"ON CONFLICT(%s) DO UPDATE SET %s\" % (\n                \", \".join(map(self.quote_name, unique_fields)),\n                \", \".join(\n                    [\n                        f\"{field} = EXCLUDED.{field}\"\n                        for field in map(self.quote_name, update_fields)\n                    ]\n                ),\n            )\n        return super().on_conflict_suffix_sql(\n            fields,\n            on_conflict,\n            update_fields,\n            unique_fields,\n        )\n\n    def prepare_join_on_clause(self, lhs_table, lhs_field, rhs_table, rhs_field):\n        lhs_expr, rhs_expr = super().prepare_join_on_clause(\n            lhs_table, lhs_field, rhs_table, rhs_field\n        )\n\n        if lhs_field.db_type(self.connection) != rhs_field.db_type(self.connection):\n            rhs_expr = Cast(rhs_expr, lhs_field)\n\n        return lhs_expr, rhs_expr"},{"start_line":99,"end_line":101,"belongs_to":{"file_name":"operations.py","upper_path":"../django/django/db/backends/sqlite3","module":"sqlite3","define_class":["DatabaseOperations"],"imports":["datetime","decimal","uuid","functools.lru_cache","itertools.chain","django.conf.settings","django.core.exceptions.FieldError","django.db.DatabaseError","django.db.NotSupportedError","django.db.models","django.db.backends.base.operations.BaseDatabaseOperations","django.db.models.constants.OnConflict","django.db.models.expressions.Col","django.utils.timezone","django.utils.dateparse.parse_date","django.utils.dateparse.parse_datetime","django.utils.dateparse.parse_time","django.utils.functional.cached_property","base.Database"]},"relative_function":[],"code":"def format_for_duration_arithmetic(self, sql):\n        \"\"\"Do nothing since formatting is handled in the custom function.\"\"\"\n        return sql"}],"ground_truth":null,"score":null},
{"question":"What is the purpose of the `pattern_ops` attribute in `DatabaseWrapper`?","answer":"","relative_code_list":[{"start_line":89,"end_line":547,"belongs_to":{"file_name":"base.py","upper_path":"../django/django/db/backends/postgresql","module":"postgresql","define_class":["DatabaseWrapper","CursorMixin","ServerBindingCursor","Cursor","ServerSideCursor","CursorDebugWrapper","CursorDebugWrapper"],"imports":["asyncio","threading","warnings","contextlib.contextmanager","django.conf.settings","django.core.exceptions.ImproperlyConfigured","django.db.DatabaseError","django.db.connections","django.db.backends.base.base.NO_DB_ALIAS","django.db.backends.base.base.BaseDatabaseWrapper","django.db.backends.utils.CursorDebugWrapper","django.utils.asyncio.async_unsafe","django.utils.functional.cached_property","django.utils.safestring.SafeString","django.utils.version.get_version_tuple","psycopg_any.IsolationLevel","psycopg_any.is_psycopg3","client.DatabaseClient","creation.DatabaseCreation","features.DatabaseFeatures","introspection.DatabaseIntrospection","operations.DatabaseOperations","schema.DatabaseSchemaEditor","psycopg.adapters","psycopg.sql","psycopg.pq.Format","psycopg_any.get_adapters_template","psycopg_any.register_tzloader","psycopg2.extensions","psycopg2.extras","psycopg","psycopg2","psycopg_pool.ConnectionPool"]},"relative_function":[],"code":"class DatabaseWrapper(BaseDatabaseWrapper):\n    vendor = \"postgresql\"\n    display_name = \"PostgreSQL\"\n    # This dictionary maps Field objects to their associated PostgreSQL column\n    # types, as strings. Column-type strings can contain format strings; they'll\n    # be interpolated against the values of Field.__dict__ before being output.\n    # If a column type is set to None, it won't be included in the output.\n    data_types = {\n        \"AutoField\": \"integer\",\n        \"BigAutoField\": \"bigint\",\n        \"BinaryField\": \"bytea\",\n        \"BooleanField\": \"boolean\",\n        \"CharField\": _get_varchar_column,\n        \"DateField\": \"date\",\n        \"DateTimeField\": \"timestamp with time zone\",\n        \"DecimalField\": \"numeric(%(max_digits)s, %(decimal_places)s)\",\n        \"DurationField\": \"interval\",\n        \"FileField\": \"varchar(%(max_length)s)\",\n        \"FilePathField\": \"varchar(%(max_length)s)\",\n        \"FloatField\": \"double precision\",\n        \"IntegerField\": \"integer\",\n        \"BigIntegerField\": \"bigint\",\n        \"IPAddressField\": \"inet\",\n        \"GenericIPAddressField\": \"inet\",\n        \"JSONField\": \"jsonb\",\n        \"OneToOneField\": \"integer\",\n        \"PositiveBigIntegerField\": \"bigint\",\n        \"PositiveIntegerField\": \"integer\",\n        \"PositiveSmallIntegerField\": \"smallint\",\n        \"SlugField\": \"varchar(%(max_length)s)\",\n        \"SmallAutoField\": \"smallint\",\n        \"SmallIntegerField\": \"smallint\",\n        \"TextField\": \"text\",\n        \"TimeField\": \"time\",\n        \"UUIDField\": \"uuid\",\n    }\n    data_type_check_constraints = {\n        \"PositiveBigIntegerField\": '\"%(column)s\" >= 0',\n        \"PositiveIntegerField\": '\"%(column)s\" >= 0',\n        \"PositiveSmallIntegerField\": '\"%(column)s\" >= 0',\n    }\n    data_types_suffix = {\n        \"AutoField\": \"GENERATED BY DEFAULT AS IDENTITY\",\n        \"BigAutoField\": \"GENERATED BY DEFAULT AS IDENTITY\",\n        \"SmallAutoField\": \"GENERATED BY DEFAULT AS IDENTITY\",\n    }\n    operators = {\n        \"exact\": \"= %s\",\n        \"iexact\": \"= UPPER(%s)\",\n        \"contains\": \"LIKE %s\",\n        \"icontains\": \"LIKE UPPER(%s)\",\n        \"regex\": \"~ %s\",\n        \"iregex\": \"~* %s\",\n        \"gt\": \"> %s\",\n        \"gte\": \">= %s\",\n        \"lt\": \"< %s\",\n        \"lte\": \"<= %s\",\n        \"startswith\": \"LIKE %s\",\n        \"endswith\": \"LIKE %s\",\n        \"istartswith\": \"LIKE UPPER(%s)\",\n        \"iendswith\": \"LIKE UPPER(%s)\",\n    }\n\n    # The patterns below are used to generate SQL pattern lookup clauses when\n    # the right-hand side of the lookup isn't a raw string (it might be an expression\n    # or the result of a bilateral transformation).\n    # In those cases, special characters for LIKE operators (e.g. \\, *, _) should be\n    # escaped on database side.\n    #\n    # Note: we use str.format() here for readability as '%' is used as a wildcard for\n    # the LIKE operator.\n    pattern_esc = (\n        r\"REPLACE(REPLACE(REPLACE({}, E'\\\\', E'\\\\\\\\'), E'%%', E'\\\\%%'), E'_', E'\\\\_')\"\n    )\n    pattern_ops = {\n        \"contains\": \"LIKE '%%' || {} || '%%'\",\n        \"icontains\": \"LIKE '%%' || UPPER({}) || '%%'\",\n        \"startswith\": \"LIKE {} || '%%'\",\n        \"istartswith\": \"LIKE UPPER({}) || '%%'\",\n        \"endswith\": \"LIKE '%%' || {}\",\n        \"iendswith\": \"LIKE '%%' || UPPER({})\",\n    }\n\n    Database = Database\n    SchemaEditorClass = DatabaseSchemaEditor\n    # Classes instantiated in __init__().\n    client_class = DatabaseClient\n    creation_class = DatabaseCreation\n    features_class = DatabaseFeatures\n    introspection_class = DatabaseIntrospection\n    ops_class = DatabaseOperations\n    # PostgreSQL backend-specific attributes.\n    _named_cursor_idx = 0\n    _connection_pools = {}\n\n    @property\n    def pool(self):\n        pool_options = self.settings_dict[\"OPTIONS\"].get(\"pool\")\n        if self.alias == NO_DB_ALIAS or not pool_options:\n            return None\n\n        if self.alias not in self._connection_pools:\n            if self.settings_dict.get(\"CONN_MAX_AGE\", 0) != 0:\n                raise ImproperlyConfigured(\n                    \"Pooling doesn't support persistent connections.\"\n                )\n            # Set the default options.\n            if pool_options is True:\n                pool_options = {}\n\n            try:\n                from psycopg_pool import ConnectionPool\n            except ImportError as err:\n                raise ImproperlyConfigured(\n                    \"Error loading psycopg_pool module.\\nDid you install psycopg[pool]?\"\n                ) from err\n\n            connect_kwargs = self.get_connection_params()\n            # Ensure we run in autocommit, Django properly sets it later on.\n            connect_kwargs[\"autocommit\"] = True\n            enable_checks = self.settings_dict[\"CONN_HEALTH_CHECKS\"]\n            pool = ConnectionPool(\n                kwargs=connect_kwargs,\n                open=False,  # Do not open the pool during startup.\n                configure=self._configure_connection,\n                check=ConnectionPool.check_connection if enable_checks else None,\n                **pool_options,\n            )\n            # setdefault() ensures that multiple threads don't set this in\n            # parallel. Since we do not open the pool during it's init above,\n            # this means that at worst during startup multiple threads generate\n            # pool objects and the first to set it wins.\n            self._connection_pools.setdefault(self.alias, pool)\n\n        return self._connection_pools[self.alias]\n\n    def close_pool(self):\n        if self.pool:\n            self.pool.close()\n            del self._connection_pools[self.alias]\n\n    def get_database_version(self):\n        \"\"\"\n        Return a tuple of the database's version.\n        E.g. for pg_version 120004, return (12, 4).\n        \"\"\"\n        return divmod(self.pg_version, 10000)\n\n    def get_connection_params(self):\n        settings_dict = self.settings_dict\n        # None may be used to connect to the default 'postgres' db\n        if settings_dict[\"NAME\"] == \"\" and not settings_dict[\"OPTIONS\"].get(\"service\"):\n            raise ImproperlyConfigured(\n                \"settings.DATABASES is improperly configured. \"\n                \"Please supply the NAME or OPTIONS['service'] value.\"\n            )\n        if len(settings_dict[\"NAME\"] or \"\") > self.ops.max_name_length():\n            raise ImproperlyConfigured(\n                \"The database name '%s' (%d characters) is longer than \"\n                \"PostgreSQL's limit of %d characters. Supply a shorter NAME \"\n                \"in settings.DATABASES.\"\n                % (\n                    settings_dict[\"NAME\"],\n                    len(settings_dict[\"NAME\"]),\n                    self.ops.max_name_length(),\n                )\n            )\n        if settings_dict[\"NAME\"]:\n            conn_params = {\n                \"dbname\": settings_dict[\"NAME\"],\n                **settings_dict[\"OPTIONS\"],\n            }\n        elif settings_dict[\"NAME\"] is None:\n            # Connect to the default 'postgres' db.\n            settings_dict[\"OPTIONS\"].pop(\"service\", None)\n            conn_params = {\"dbname\": \"postgres\", **settings_dict[\"OPTIONS\"]}\n        else:\n            conn_params = {**settings_dict[\"OPTIONS\"]}\n        conn_params[\"client_encoding\"] = \"UTF8\"\n\n        conn_params.pop(\"assume_role\", None)\n        conn_params.pop(\"isolation_level\", None)\n\n        pool_options = conn_params.pop(\"pool\", None)\n        if pool_options and not is_psycopg3:\n            raise ImproperlyConfigured(\"Database pooling requires psycopg >= 3\")\n\n        server_side_binding = conn_params.pop(\"server_side_binding\", None)\n        conn_params.setdefault(\n            \"cursor_factory\",\n            (\n                ServerBindingCursor\n                if is_psycopg3 and server_side_binding is True\n                else Cursor\n            ),\n        )\n        if settings_dict[\"USER\"]:\n            conn_params[\"user\"] = settings_dict[\"USER\"]\n        if settings_dict[\"PASSWORD\"]:\n            conn_params[\"password\"] = settings_dict[\"PASSWORD\"]\n        if settings_dict[\"HOST\"]:\n            conn_params[\"host\"] = settings_dict[\"HOST\"]\n        if settings_dict[\"PORT\"]:\n            conn_params[\"port\"] = settings_dict[\"PORT\"]\n        if is_psycopg3:\n            conn_params[\"context\"] = get_adapters_template(\n                settings.USE_TZ, self.timezone\n            )\n            # Disable prepared statements by default to keep connection poolers\n            # working. Can be reenabled via OPTIONS in the settings dict.\n            conn_params[\"prepare_threshold\"] = conn_params.pop(\n                \"prepare_threshold\", None\n            )\n        return conn_params\n\n    @async_unsafe\n    def get_new_connection(self, conn_params):\n        # self.isolation_level must be set:\n        # - after connecting to the database in order to obtain the database's\n        #   default when no value is explicitly specified in options.\n        # - before calling _set_autocommit() because if autocommit is on, that\n        #   will set connection.isolation_level to ISOLATION_LEVEL_AUTOCOMMIT.\n        options = self.settings_dict[\"OPTIONS\"]\n        set_isolation_level = False\n        try:\n            isolation_level_value = options[\"isolation_level\"]\n        except KeyError:\n            self.isolation_level = IsolationLevel.READ_COMMITTED\n        else:\n            # Set the isolation level to the value from OPTIONS.\n            try:\n                self.isolation_level = IsolationLevel(isolation_level_value)\n                set_isolation_level = True\n            except ValueError:\n                raise ImproperlyConfigured(\n                    f\"Invalid transaction isolation level {isolation_level_value} \"\n                    f\"specified. Use one of the psycopg.IsolationLevel values.\"\n                )\n        if self.pool:\n            # If nothing else has opened the pool, open it now.\n            self.pool.open()\n            connection = self.pool.getconn()\n        else:\n            connection = self.Database.connect(**conn_params)\n        if set_isolation_level:\n            connection.isolation_level = self.isolation_level\n        if not is_psycopg3:\n            # Register dummy loads() to avoid a round trip from psycopg2's\n            # decode to json.dumps() to json.loads(), when using a custom\n            # decoder in JSONField.\n            psycopg2.extras.register_default_jsonb(\n                conn_or_curs=connection, loads=lambda x: x\n            )\n        return connection\n\n    def ensure_timezone(self):\n        # Close the pool so new connections pick up the correct timezone.\n        self.close_pool()\n        if self.connection is None:\n            return False\n        return self._configure_timezone(self.connection)\n\n    def _configure_timezone(self, connection):\n        conn_timezone_name = connection.info.parameter_status(\"TimeZone\")\n        timezone_name = self.timezone_name\n        if timezone_name and conn_timezone_name != timezone_name:\n            with connection.cursor() as cursor:\n                cursor.execute(self.ops.set_time_zone_sql(), [timezone_name])\n            return True\n        return False\n\n    def _configure_role(self, connection):\n        if new_role := self.settings_dict[\"OPTIONS\"].get(\"assume_role\"):\n            with connection.cursor() as cursor:\n                sql = self.ops.compose_sql(\"SET ROLE %s\", [new_role])\n                cursor.execute(sql)\n            return True\n        return False\n\n    def _configure_connection(self, connection):\n        # This function is called from init_connection_state and from the\n        # psycopg pool itself after a connection is opened.\n\n        # Commit after setting the time zone.\n        commit_tz = self._configure_timezone(connection)\n        # Set the role on the connection. This is useful if the credential used\n        # to login is not the same as the role that owns database resources. As\n        # can be the case when using temporary or ephemeral credentials.\n        commit_role = self._configure_role(connection)\n\n        return commit_role or commit_tz\n\n    def _close(self):\n        if self.connection is not None:\n            # `wrap_database_errors` only works for `putconn` as long as there\n            # is no `reset` function set in the pool because it is deferred\n            # into a thread and not directly executed.\n            with self.wrap_database_errors:\n                if self.pool:\n                    # Ensure the correct pool is returned. This is a workaround\n                    # for tests so a pool can be changed on setting changes\n                    # (e.g. USE_TZ, TIME_ZONE).\n                    self.connection._pool.putconn(self.connection)\n                    # Connection can no longer be used.\n                    self.connection = None\n                else:\n                    return self.connection.close()\n\n    def init_connection_state(self):\n        super().init_connection_state()\n\n        if self.connection is not None and not self.pool:\n            commit = self._configure_connection(self.connection)\n\n            if commit and not self.get_autocommit():\n                self.connection.commit()\n\n    @async_unsafe\n    def create_cursor(self, name=None):\n        if name:\n            if is_psycopg3 and (\n                self.settings_dict[\"OPTIONS\"].get(\"server_side_binding\") is not True\n            ):\n                # psycopg >= 3 forces the usage of server-side bindings for\n                # named cursors so a specialized class that implements\n                # server-side cursors while performing client-side bindings\n                # must be used if `server_side_binding` is disabled (default).\n                cursor = ServerSideCursor(\n                    self.connection,\n                    name=name,\n                    scrollable=False,\n                    withhold=self.connection.autocommit,\n                )\n            else:\n                # In autocommit mode, the cursor will be used outside of a\n                # transaction, hence use a holdable cursor.\n                cursor = self.connection.cursor(\n                    name, scrollable=False, withhold=self.connection.autocommit\n                )\n        else:\n            cursor = self.connection.cursor()\n\n        if is_psycopg3:\n            # Register the cursor timezone only if the connection disagrees, to\n            # avoid copying the adapter map.\n            tzloader = self.connection.adapters.get_loader(TIMESTAMPTZ_OID, Format.TEXT)\n            if self.timezone != tzloader.timezone:\n                register_tzloader(self.timezone, cursor)\n        else:\n            cursor.tzinfo_factory = self.tzinfo_factory if settings.USE_TZ else None\n        return cursor\n\n    def tzinfo_factory(self, offset):\n        return self.timezone\n\n    @async_unsafe\n    def chunked_cursor(self):\n        self._named_cursor_idx += 1\n        # Get the current async task\n        # Note that right now this is behind @async_unsafe, so this is\n        # unreachable, but in future we'll start loosening this restriction.\n        # For now, it's here so that every use of \"threading\" is\n        # also async-compatible.\n        try:\n            current_task = asyncio.current_task()\n        except RuntimeError:\n            current_task = None\n        # Current task can be none even if the current_task call didn't error\n        if current_task:\n            task_ident = str(id(current_task))\n        else:\n            task_ident = \"sync\"\n        # Use that and the thread ident to get a unique name\n        return self._cursor(\n            name=\"_django_curs_%d_%s_%d\"\n            % (\n                # Avoid reusing name in other threads / tasks\n                threading.current_thread().ident,\n                task_ident,\n                self._named_cursor_idx,\n            )\n        )\n\n    def _set_autocommit(self, autocommit):\n        with self.wrap_database_errors:\n            self.connection.autocommit = autocommit\n\n    def check_constraints(self, table_names=None):\n        \"\"\"\n        Check constraints by setting them to immediate. Return them to deferred\n        afterward.\n        \"\"\"\n        with self.cursor() as cursor:\n            cursor.execute(\"SET CONSTRAINTS ALL IMMEDIATE\")\n            cursor.execute(\"SET CONSTRAINTS ALL DEFERRED\")\n\n    def is_usable(self):\n        if self.connection is None:\n            return False\n        try:\n            # Use a psycopg cursor directly, bypassing Django's utilities.\n            with self.connection.cursor() as cursor:\n                cursor.execute(\"SELECT 1\")\n        except Database.Error:\n            return False\n        else:\n            return True\n\n    def close_if_health_check_failed(self):\n        if self.pool:\n            # The pool only returns healthy connections.\n            return\n        return super().close_if_health_check_failed()\n\n    @contextmanager\n    def _nodb_cursor(self):\n        cursor = None\n        try:\n            with super()._nodb_cursor() as cursor:\n                yield cursor\n        except (Database.DatabaseError, WrappedDatabaseError):\n            if cursor is not None:\n                raise\n            warnings.warn(\n                \"Normally Django will use a connection to the 'postgres' database \"\n                \"to avoid running initialization queries against the production \"\n                \"database when it's not needed (for example, when running tests). \"\n                \"Django was unable to create a connection to the 'postgres' database \"\n                \"and will use the first PostgreSQL database instead.\",\n                RuntimeWarning,\n            )\n            for connection in connections.all():\n                if (\n                    connection.vendor == \"postgresql\"\n                    and connection.settings_dict[\"NAME\"] != \"postgres\"\n                ):\n                    conn = self.__class__(\n                        {\n                            **self.settings_dict,\n                            \"NAME\": connection.settings_dict[\"NAME\"],\n                        },\n                        alias=self.alias,\n                    )\n                    try:\n                        with conn.cursor() as cursor:\n                            yield cursor\n                    finally:\n                        conn.close()\n                    break\n            else:\n                raise\n\n    @cached_property\n    def pg_version(self):\n        with self.temporary_connection():\n            return self.connection.info.server_version\n\n    def make_debug_cursor(self, cursor):\n        return CursorDebugWrapper(cursor, self)"}],"ground_truth":null,"score":null},
{"question":"What are the expected parameters and behavior of the `<Method>` method when used in `Move a model's table between tablespaces`?","answer":"","relative_code_list":[{"start_line":709,"end_line":718,"belongs_to":{"file_name":"schema.py","upper_path":"../django/django/db/backends/base","module":"base","define_class":["BaseDatabaseSchemaEditor"],"imports":["logging","operator","datetime.datetime","django.conf.settings","django.core.exceptions.FieldError","django.db.backends.ddl_references.Columns","django.db.backends.ddl_references.Expressions","django.db.backends.ddl_references.ForeignKeyName","django.db.backends.ddl_references.IndexName","django.db.backends.ddl_references.Statement","django.db.backends.ddl_references.Table","django.db.backends.utils.names_digest","django.db.backends.utils.split_identifier","django.db.backends.utils.truncate_name","django.db.models.Deferrable","django.db.models.Index","django.db.models.fields.composite.CompositePrimaryKey","django.db.models.sql.Query","django.db.transaction.TransactionManagementError","django.db.transaction.atomic","django.utils.timezone","django.db.models.expressions.Value"]},"relative_function":[],"code":"def alter_db_tablespace(self, model, old_db_tablespace, new_db_tablespace):\n        \"\"\"Move a model's table between tablespaces.\"\"\"\n        self.execute(\n            self.sql_retablespace_table\n            % {\n                \"table\": self.quote_name(model._meta.db_table),\n                \"old_tablespace\": self.quote_name(old_db_tablespace),\n                \"new_tablespace\": self.quote_name(new_db_tablespace),\n            }\n        )"},{"start_line":77,"end_line":2046,"belongs_to":{"file_name":"schema.py","upper_path":"../django/django/db/backends/base","module":"base","define_class":["BaseDatabaseSchemaEditor"],"imports":["logging","operator","datetime.datetime","django.conf.settings","django.core.exceptions.FieldError","django.db.backends.ddl_references.Columns","django.db.backends.ddl_references.Expressions","django.db.backends.ddl_references.ForeignKeyName","django.db.backends.ddl_references.IndexName","django.db.backends.ddl_references.Statement","django.db.backends.ddl_references.Table","django.db.backends.utils.names_digest","django.db.backends.utils.split_identifier","django.db.backends.utils.truncate_name","django.db.models.Deferrable","django.db.models.Index","django.db.models.fields.composite.CompositePrimaryKey","django.db.models.sql.Query","django.db.transaction.TransactionManagementError","django.db.transaction.atomic","django.utils.timezone","django.db.models.expressions.Value"]},"relative_function":[],"code":"class BaseDatabaseSchemaEditor:\n    \"\"\"\n    This class and its subclasses are responsible for emitting schema-changing\n    statements to the databases - model creation/removal/alteration, field\n    renaming, index fiddling, and so on.\n    \"\"\"\n\n    # Overrideable SQL templates\n    sql_create_table = \"CREATE TABLE %(table)s (%(definition)s)\"\n    sql_rename_table = \"ALTER TABLE %(old_table)s RENAME TO %(new_table)s\"\n    sql_retablespace_table = \"ALTER TABLE %(table)s SET TABLESPACE %(new_tablespace)s\"\n    sql_delete_table = \"DROP TABLE %(table)s CASCADE\"\n\n    sql_create_column = \"ALTER TABLE %(table)s ADD COLUMN %(column)s %(definition)s\"\n    sql_alter_column = \"ALTER TABLE %(table)s %(changes)s\"\n    sql_alter_column_type = \"ALTER COLUMN %(column)s TYPE %(type)s%(collation)s\"\n    sql_alter_column_null = \"ALTER COLUMN %(column)s DROP NOT NULL\"\n    sql_alter_column_not_null = \"ALTER COLUMN %(column)s SET NOT NULL\"\n    sql_alter_column_default = \"ALTER COLUMN %(column)s SET DEFAULT %(default)s\"\n    sql_alter_column_no_default = \"ALTER COLUMN %(column)s DROP DEFAULT\"\n    sql_alter_column_no_default_null = sql_alter_column_no_default\n    sql_delete_column = \"ALTER TABLE %(table)s DROP COLUMN %(column)s CASCADE\"\n    sql_rename_column = (\n        \"ALTER TABLE %(table)s RENAME COLUMN %(old_column)s TO %(new_column)s\"\n    )\n    sql_update_with_default = (\n        \"UPDATE %(table)s SET %(column)s = %(default)s WHERE %(column)s IS NULL\"\n    )\n\n    sql_unique_constraint = \"UNIQUE (%(columns)s)%(deferrable)s\"\n    sql_check_constraint = \"CHECK (%(check)s)\"\n    sql_delete_constraint = \"ALTER TABLE %(table)s DROP CONSTRAINT %(name)s\"\n    sql_constraint = \"CONSTRAINT %(name)s %(constraint)s\"\n    sql_pk_constraint = \"PRIMARY KEY (%(columns)s)\"\n\n    sql_create_check = \"ALTER TABLE %(table)s ADD CONSTRAINT %(name)s CHECK (%(check)s)\"\n    sql_delete_check = sql_delete_constraint\n\n    sql_create_unique = (\n        \"ALTER TABLE %(table)s ADD CONSTRAINT %(name)s \"\n        \"UNIQUE%(nulls_distinct)s (%(columns)s)%(deferrable)s\"\n    )\n    sql_delete_unique = sql_delete_constraint\n\n    sql_create_fk = (\n        \"ALTER TABLE %(table)s ADD CONSTRAINT %(name)s FOREIGN KEY (%(column)s) \"\n        \"REFERENCES %(to_table)s (%(to_column)s)%(deferrable)s\"\n    )\n    sql_create_inline_fk = None\n    sql_create_column_inline_fk = None\n    sql_delete_fk = sql_delete_constraint\n\n    sql_create_index = (\n        \"CREATE INDEX %(name)s ON %(table)s \"\n        \"(%(columns)s)%(include)s%(extra)s%(condition)s\"\n    )\n    sql_create_unique_index = (\n        \"CREATE UNIQUE INDEX %(name)s ON %(table)s \"\n        \"(%(columns)s)%(include)s%(nulls_distinct)s%(condition)s\"\n    )\n    sql_rename_index = \"ALTER INDEX %(old_name)s RENAME TO %(new_name)s\"\n    sql_delete_index = \"DROP INDEX %(name)s\"\n\n    sql_create_pk = (\n        \"ALTER TABLE %(table)s ADD CONSTRAINT %(name)s PRIMARY KEY (%(columns)s)\"\n    )\n    sql_delete_pk = sql_delete_constraint\n\n    sql_delete_procedure = \"DROP PROCEDURE %(procedure)s\"\n\n    sql_alter_table_comment = \"COMMENT ON TABLE %(table)s IS %(comment)s\"\n    sql_alter_column_comment = \"COMMENT ON COLUMN %(table)s.%(column)s IS %(comment)s\"\n\n    def __init__(self, connection, collect_sql=False, atomic=True):\n        self.connection = connection\n        self.collect_sql = collect_sql\n        if self.collect_sql:\n            self.collected_sql = []\n        self.atomic_migration = self.connection.features.can_rollback_ddl and atomic\n\n    # State-managing methods\n\n    def __enter__(self):\n        self.deferred_sql = []\n        if self.atomic_migration:\n            self.atomic = atomic(self.connection.alias)\n            self.atomic.__enter__()\n        return self\n\n    def __exit__(self, exc_type, exc_value, traceback):\n        if exc_type is None:\n            for sql in self.deferred_sql:\n                self.execute(sql, None)\n        if self.atomic_migration:\n            self.atomic.__exit__(exc_type, exc_value, traceback)\n\n    # Core utility functions\n\n    def execute(self, sql, params=()):\n        \"\"\"Execute the given SQL statement, with optional parameters.\"\"\"\n        # Don't perform the transactional DDL check if SQL is being collected\n        # as it's not going to be executed anyway.\n        if (\n            not self.collect_sql\n            and self.connection.in_atomic_block\n            and not self.connection.features.can_rollback_ddl\n        ):\n            raise TransactionManagementError(\n                \"Executing DDL statements while in a transaction on databases \"\n                \"that can't perform a rollback is prohibited.\"\n            )\n        # Account for non-string statement objects.\n        sql = str(sql)\n        # Log the command we're running, then run it\n        logger.debug(\n            \"%s; (params %r)\", sql, params, extra={\"params\": params, \"sql\": sql}\n        )\n        if self.collect_sql:\n            ending = \"\" if sql.rstrip().endswith(\";\") else \";\"\n            if params is not None:\n                self.collected_sql.append(\n                    (sql % tuple(map(self.quote_value, params))) + ending\n                )\n            else:\n                self.collected_sql.append(sql + ending)\n        else:\n            with self.connection.cursor() as cursor:\n                cursor.execute(sql, params)\n\n    def quote_name(self, name):\n        return self.connection.ops.quote_name(name)\n\n    def table_sql(self, model):\n        \"\"\"Take a model and return its table definition.\"\"\"\n        # Add any unique_togethers (always deferred, as some fields might be\n        # created afterward, like geometry fields with some backends).\n        for field_names in model._meta.unique_together:\n            fields = [model._meta.get_field(field) for field in field_names]\n            self.deferred_sql.append(self._create_unique_sql(model, fields))\n        # Create column SQL, add FK deferreds if needed.\n        column_sqls = []\n        params = []\n        for field in model._meta.local_fields:\n            # SQL.\n            definition, extra_params = self.column_sql(model, field)\n            if definition is None:\n                continue\n            # Check constraints can go on the column SQL here.\n            db_params = field.db_parameters(connection=self.connection)\n            if db_params[\"check\"]:\n                definition += \" \" + self.sql_check_constraint % db_params\n            # Autoincrement SQL (for backends with inline variant).\n            col_type_suffix = field.db_type_suffix(connection=self.connection)\n            if col_type_suffix:\n                definition += \" %s\" % col_type_suffix\n            params.extend(extra_params)\n            # FK.\n            if field.remote_field and field.db_constraint:\n                to_table = field.remote_field.model._meta.db_table\n                to_column = field.remote_field.model._meta.get_field(\n                    field.remote_field.field_name\n                ).column\n                if self.sql_create_inline_fk:\n                    definition += \" \" + self.sql_create_inline_fk % {\n                        \"to_table\": self.quote_name(to_table),\n                        \"to_column\": self.quote_name(to_column),\n                    }\n                elif self.connection.features.supports_foreign_keys:\n                    self.deferred_sql.append(\n                        self._create_fk_sql(\n                            model, field, \"_fk_%(to_table)s_%(to_column)s\"\n                        )\n                    )\n            # Add the SQL to our big list.\n            column_sqls.append(\n                \"%s %s\"\n                % (\n                    self.quote_name(field.column),\n                    definition,\n                )\n            )\n            # Autoincrement SQL (for backends with post table definition\n            # variant).\n            if field.get_internal_type() in (\n                \"AutoField\",\n                \"BigAutoField\",\n                \"SmallAutoField\",\n            ):\n                autoinc_sql = self.connection.ops.autoinc_sql(\n                    model._meta.db_table, field.column\n                )\n                if autoinc_sql:\n                    self.deferred_sql.extend(autoinc_sql)\n        # The BaseConstraint DDL creation methods such as constraint_sql(),\n        # create_sql(), and delete_sql(), were not designed in a way that\n        # separate SQL from parameters which make their generated SQL unfit to\n        # be used in a context where parametrization is delegated to the\n        # backend.\n        constraint_sqls = []\n        if params:\n            # If parameters are present (e.g. a DEFAULT clause on backends that\n            # allow parametrization) defer constraint creation so they are not\n            # mixed with SQL meant to be parametrized.\n            for constraint in model._meta.constraints:\n                self.deferred_sql.append(constraint.create_sql(model, self))\n        else:\n            constraint_sqls.extend(\n                constraint.constraint_sql(model, self)\n                for constraint in model._meta.constraints\n            )\n\n        pk = model._meta.pk\n        if isinstance(pk, CompositePrimaryKey):\n            constraint_sqls.append(self._pk_constraint_sql(pk.columns))\n\n        sql = self.sql_create_table % {\n            \"table\": self.quote_name(model._meta.db_table),\n            \"definition\": \", \".join(\n                str(statement)\n                for statement in (*column_sqls, *constraint_sqls)\n                if statement\n            ),\n        }\n        if model._meta.db_tablespace:\n            tablespace_sql = self.connection.ops.tablespace_sql(\n                model._meta.db_tablespace\n            )\n            if tablespace_sql:\n                sql += \" \" + tablespace_sql\n        return sql, params\n\n    # Field <-> database mapping functions\n\n    def _iter_column_sql(\n        self, column_db_type, params, model, field, field_db_params, include_default\n    ):\n        yield column_db_type\n        if collation := field_db_params.get(\"collation\"):\n            yield self._collate_sql(collation)\n        # Work out nullability.\n        null = field.null\n        # Add database default.\n        if field.has_db_default():\n            default_sql, default_params = self.db_default_sql(field)\n            yield f\"DEFAULT {default_sql}\"\n            params.extend(default_params)\n            include_default = False\n        # Include a default value, if requested.\n        include_default = (\n            include_default\n            and not self.skip_default(field)\n            and\n            # Don't include a default value if it's a nullable field and the\n            # default cannot be dropped in the ALTER COLUMN statement (e.g.\n            # MySQL longtext and longblob).\n            not (null and self.skip_default_on_alter(field))\n        )\n        if include_default:\n            default_value = self.effective_default(field)\n            if default_value is not None:\n                column_default = \"DEFAULT \" + self._column_default_sql(field)\n                if self.connection.features.requires_literal_defaults:\n                    # Some databases can't take defaults as a parameter\n                    # (Oracle, SQLite). If this is the case, the individual\n                    # schema backend should implement prepare_default().\n                    yield column_default % self.prepare_default(default_value)\n                else:\n                    yield column_default\n                    params.append(default_value)\n        # Oracle treats the empty string ('') as null, so coerce the null\n        # option whenever '' is a possible value.\n        if (\n            field.empty_strings_allowed\n            and not field.primary_key\n            and self.connection.features.interprets_empty_strings_as_nulls\n        ):\n            null = True\n        if field.generated:\n            generated_sql, generated_params = self._column_generated_sql(field)\n            params.extend(generated_params)\n            yield generated_sql\n        elif not null:\n            yield \"NOT NULL\"\n        elif not self.connection.features.implied_column_null:\n            yield \"NULL\"\n        if field.primary_key:\n            yield \"PRIMARY KEY\"\n        elif field.unique:\n            yield \"UNIQUE\"\n        # Optionally add the tablespace if it's an implicitly indexed column.\n        tablespace = field.db_tablespace or model._meta.db_tablespace\n        if (\n            tablespace\n            and self.connection.features.supports_tablespaces\n            and field.unique\n        ):\n            yield self.connection.ops.tablespace_sql(tablespace, inline=True)\n        if self.connection.features.supports_comments_inline and field.db_comment:\n            yield self._comment_sql(field.db_comment)\n\n    def column_sql(self, model, field, include_default=False):\n        \"\"\"\n        Return the column definition for a field. The field must already have\n        had set_attributes_from_name() called.\n        \"\"\"\n        # Get the column's type and use that as the basis of the SQL.\n        field_db_params = field.db_parameters(connection=self.connection)\n        column_db_type = field_db_params[\"type\"]\n        # Check for fields that aren't actually columns (e.g. M2M).\n        if column_db_type is None:\n            return None, None\n        params = []\n        return (\n            \" \".join(\n                # This appends to the params being returned.\n                self._iter_column_sql(\n                    column_db_type,\n                    params,\n                    model,\n                    field,\n                    field_db_params,\n                    include_default,\n                )\n            ),\n            params,\n        )\n\n    def skip_default(self, field):\n        \"\"\"\n        Some backends don't accept default values for certain columns types\n        (i.e. MySQL longtext and longblob).\n        \"\"\"\n        return False\n\n    def skip_default_on_alter(self, field):\n        \"\"\"\n        Some backends don't accept default values for certain columns types\n        (i.e. MySQL longtext and longblob) in the ALTER COLUMN statement.\n        \"\"\"\n        return False\n\n    def prepare_default(self, value):\n        \"\"\"\n        Only used for backends which have requires_literal_defaults feature\n        \"\"\"\n        raise NotImplementedError(\n            \"subclasses of BaseDatabaseSchemaEditor for backends which have \"\n            \"requires_literal_defaults must provide a prepare_default() method\"\n        )\n\n    def _column_default_sql(self, field):\n        \"\"\"\n        Return the SQL to use in a DEFAULT clause. The resulting string should\n        contain a '%s' placeholder for a default value.\n        \"\"\"\n        return \"%s\"\n\n    def db_default_sql(self, field):\n        \"\"\"Return the sql and params for the field's database default.\"\"\"\n        from django.db.models.expressions import Value\n\n        db_default = field._db_default_expression\n        sql = (\n            self._column_default_sql(field) if isinstance(db_default, Value) else \"(%s)\"\n        )\n        query = Query(model=field.model)\n        compiler = query.get_compiler(connection=self.connection)\n        default_sql, params = compiler.compile(db_default)\n        if self.connection.features.requires_literal_defaults:\n            # Some databases don't support parameterized defaults (Oracle,\n            # SQLite). If this is the case, the individual schema backend\n            # should implement prepare_default().\n            default_sql %= tuple(self.prepare_default(p) for p in params)\n            params = []\n        return sql % default_sql, params\n\n    def _column_generated_sql(self, field):\n        \"\"\"Return the SQL to use in a GENERATED ALWAYS clause.\"\"\"\n        expression_sql, params = field.generated_sql(self.connection)\n        persistency_sql = \"STORED\" if field.db_persist else \"VIRTUAL\"\n        if self.connection.features.requires_literal_defaults:\n            expression_sql = expression_sql % tuple(self.quote_value(p) for p in params)\n            params = ()\n        return f\"GENERATED ALWAYS AS ({expression_sql}) {persistency_sql}\", params\n\n    @staticmethod\n    def _effective_default(field):\n        # This method allows testing its logic without a connection.\n        if field.has_default():\n            default = field.get_default()\n        elif field.generated:\n            default = None\n        elif not field.null and field.blank and field.empty_strings_allowed:\n            if field.get_internal_type() == \"BinaryField\":\n                default = b\"\"\n            else:\n                default = \"\"\n        elif getattr(field, \"auto_now\", False) or getattr(field, \"auto_now_add\", False):\n            internal_type = field.get_internal_type()\n            if internal_type == \"DateTimeField\":\n                default = timezone.now()\n            else:\n                default = datetime.now()\n                if internal_type == \"DateField\":\n                    default = default.date()\n                elif internal_type == \"TimeField\":\n                    default = default.time()\n        else:\n            default = None\n        return default\n\n    def effective_default(self, field):\n        \"\"\"Return a field's effective database default value.\"\"\"\n        return field.get_db_prep_save(self._effective_default(field), self.connection)\n\n    def quote_value(self, value):\n        \"\"\"\n        Return a quoted version of the value so it's safe to use in an SQL\n        string. This is not safe against injection from user code; it is\n        intended only for use in making SQL scripts or preparing default values\n        for particularly tricky backends (defaults are not user-defined, though,\n        so this is safe).\n        \"\"\"\n        raise NotImplementedError()\n\n    # Actions\n\n    def create_model(self, model):\n        \"\"\"\n        Create a table and any accompanying indexes or unique constraints for\n        the given `model`.\n        \"\"\"\n        sql, params = self.table_sql(model)\n        # Prevent using [] as params, in the case a literal '%' is used in the\n        # definition on backends that don't support parametrized DDL.\n        self.execute(sql, params or None)\n\n        if self.connection.features.supports_comments:\n            # Add table comment.\n            if model._meta.db_table_comment:\n                self.alter_db_table_comment(model, None, model._meta.db_table_comment)\n            # Add column comments.\n            if not self.connection.features.supports_comments_inline:\n                for field in model._meta.local_fields:\n                    if field.db_comment:\n                        field_db_params = field.db_parameters(\n                            connection=self.connection\n                        )\n                        field_type = field_db_params[\"type\"]\n                        self.execute(\n                            *self._alter_column_comment_sql(\n                                model, field, field_type, field.db_comment\n                            )\n                        )\n        # Add any field index (deferred as SQLite _remake_table needs it).\n        self.deferred_sql.extend(self._model_indexes_sql(model))\n\n        # Make M2M tables\n        for field in model._meta.local_many_to_many:\n            if field.remote_field.through._meta.auto_created:\n                self.create_model(field.remote_field.through)\n\n    def delete_model(self, model):\n        \"\"\"Delete a model from the database.\"\"\"\n        # Handle auto-created intermediary models\n        for field in model._meta.local_many_to_many:\n            if field.remote_field.through._meta.auto_created:\n                self.delete_model(field.remote_field.through)\n\n        # Delete the table\n        self.execute(\n            self.sql_delete_table\n            % {\n                \"table\": self.quote_name(model._meta.db_table),\n            }\n        )\n        # Remove all deferred statements referencing the deleted table.\n        for sql in list(self.deferred_sql):\n            if isinstance(sql, Statement) and sql.references_table(\n                model._meta.db_table\n            ):\n                self.deferred_sql.remove(sql)\n\n    def add_index(self, model, index):\n        \"\"\"Add an index on a model.\"\"\"\n        if (\n            index.contains_expressions\n            and not self.connection.features.supports_expression_indexes\n        ):\n            return None\n        # Index.create_sql returns interpolated SQL which makes params=None a\n        # necessity to avoid escaping attempts on execution.\n        self.execute(index.create_sql(model, self), params=None)\n\n    def remove_index(self, model, index):\n        \"\"\"Remove an index from a model.\"\"\"\n        if (\n            index.contains_expressions\n            and not self.connection.features.supports_expression_indexes\n        ):\n            return None\n        self.execute(index.remove_sql(model, self))\n\n    def rename_index(self, model, old_index, new_index):\n        if self.connection.features.can_rename_index:\n            self.execute(\n                self._rename_index_sql(model, old_index.name, new_index.name),\n                params=None,\n            )\n        else:\n            self.remove_index(model, old_index)\n            self.add_index(model, new_index)\n\n    def add_constraint(self, model, constraint):\n        \"\"\"Add a constraint to a model.\"\"\"\n        sql = constraint.create_sql(model, self)\n        if sql:\n            # Constraint.create_sql returns interpolated SQL which makes\n            # params=None a necessity to avoid escaping attempts on execution.\n            self.execute(sql, params=None)\n\n    def remove_constraint(self, model, constraint):\n        \"\"\"Remove a constraint from a model.\"\"\"\n        sql = constraint.remove_sql(model, self)\n        if sql:\n            self.execute(sql)\n\n    def alter_unique_together(self, model, old_unique_together, new_unique_together):\n        \"\"\"\n        Deal with a model changing its unique_together. The input\n        unique_togethers must be doubly-nested, not the single-nested\n        [\"foo\", \"bar\"] format.\n        \"\"\"\n        olds = {tuple(fields) for fields in old_unique_together}\n        news = {tuple(fields) for fields in new_unique_together}\n        # Deleted uniques\n        for fields in olds.difference(news):\n            self._delete_composed_index(\n                model,\n                fields,\n                {\"unique\": True, \"primary_key\": False},\n                self.sql_delete_unique,\n            )\n        # Created uniques\n        for field_names in news.difference(olds):\n            fields = [model._meta.get_field(field) for field in field_names]\n            self.execute(self._create_unique_sql(model, fields))\n\n    def alter_index_together(self, model, old_index_together, new_index_together):\n        \"\"\"\n        Deal with a model changing its index_together. The input\n        index_togethers must be doubly-nested, not the single-nested\n        [\"foo\", \"bar\"] format.\n        \"\"\"\n        olds = {tuple(fields) for fields in old_index_together}\n        news = {tuple(fields) for fields in new_index_together}\n        # Deleted indexes\n        for fields in olds.difference(news):\n            self._delete_composed_index(\n                model,\n                fields,\n                {\"index\": True, \"unique\": False},\n                self.sql_delete_index,\n            )\n        # Created indexes\n        for field_names in news.difference(olds):\n            fields = [model._meta.get_field(field) for field in field_names]\n            self.execute(self._create_index_sql(model, fields=fields, suffix=\"_idx\"))\n\n    def _delete_composed_index(self, model, fields, constraint_kwargs, sql):\n        meta_constraint_names = {\n            constraint.name for constraint in model._meta.constraints\n        }\n        meta_index_names = {constraint.name for constraint in model._meta.indexes}\n        columns = [model._meta.get_field(field).column for field in fields]\n        constraint_names = self._constraint_names(\n            model,\n            columns,\n            exclude=meta_constraint_names | meta_index_names,\n            **constraint_kwargs,\n        )\n        if (\n            constraint_kwargs.get(\"unique\") is True\n            and constraint_names\n            and self.connection.features.allows_multiple_constraints_on_same_fields\n        ):\n            # Constraint matching the unique_together name.\n            default_name = str(\n                self._unique_constraint_name(model._meta.db_table, columns, quote=False)\n            )\n            if default_name in constraint_names:\n                constraint_names = [default_name]\n        if len(constraint_names) != 1:\n            raise ValueError(\n                \"Found wrong number (%s) of constraints for %s(%s)\"\n                % (\n                    len(constraint_names),\n                    model._meta.db_table,\n                    \", \".join(columns),\n                )\n            )\n        self.execute(self._delete_constraint_sql(sql, model, constraint_names[0]))\n\n    def alter_db_table(self, model, old_db_table, new_db_table):\n        \"\"\"Rename the table a model points to.\"\"\"\n        if old_db_table == new_db_table or (\n            self.connection.features.ignores_table_name_case\n            and old_db_table.lower() == new_db_table.lower()\n        ):\n            return\n        self.execute(\n            self.sql_rename_table\n            % {\n                \"old_table\": self.quote_name(old_db_table),\n                \"new_table\": self.quote_name(new_db_table),\n            }\n        )\n        # Rename all references to the old table name.\n        for sql in self.deferred_sql:\n            if isinstance(sql, Statement):\n                sql.rename_table_references(old_db_table, new_db_table)\n\n    def alter_db_table_comment(self, model, old_db_table_comment, new_db_table_comment):\n        if self.sql_alter_table_comment and self.connection.features.supports_comments:\n            self.execute(\n                self.sql_alter_table_comment\n                % {\n                    \"table\": self.quote_name(model._meta.db_table),\n                    \"comment\": self.quote_value(new_db_table_comment or \"\"),\n                }\n            )\n\n    def alter_db_tablespace(self, model, old_db_tablespace, new_db_tablespace):\n        \"\"\"Move a model's table between tablespaces.\"\"\"\n        self.execute(\n            self.sql_retablespace_table\n            % {\n                \"table\": self.quote_name(model._meta.db_table),\n                \"old_tablespace\": self.quote_name(old_db_tablespace),\n                \"new_tablespace\": self.quote_name(new_db_tablespace),\n            }\n        )\n\n    def add_field(self, model, field):\n        \"\"\"\n        Create a field on a model. Usually involves adding a column, but may\n        involve adding a table instead (for M2M fields).\n        \"\"\"\n        # Special-case implicit M2M tables\n        if field.many_to_many and field.remote_field.through._meta.auto_created:\n            return self.create_model(field.remote_field.through)\n        # Get the column's definition\n        definition, params = self.column_sql(model, field, include_default=True)\n        # It might not actually have a column behind it\n        if definition is None:\n            return\n        if col_type_suffix := field.db_type_suffix(connection=self.connection):\n            definition += f\" {col_type_suffix}\"\n        # Check constraints can go on the column SQL here\n        db_params = field.db_parameters(connection=self.connection)\n        if db_params[\"check\"]:\n            definition += \" \" + self.sql_check_constraint % db_params\n        if (\n            field.remote_field\n            and self.connection.features.supports_foreign_keys\n            and field.db_constraint\n        ):\n            constraint_suffix = \"_fk_%(to_table)s_%(to_column)s\"\n            # Add FK constraint inline, if supported.\n            if self.sql_create_column_inline_fk:\n                to_table = field.remote_field.model._meta.db_table\n                to_column = field.remote_field.model._meta.get_field(\n                    field.remote_field.field_name\n                ).column\n                namespace, _ = split_identifier(model._meta.db_table)\n                definition += \" \" + self.sql_create_column_inline_fk % {\n                    \"name\": self._fk_constraint_name(model, field, constraint_suffix),\n                    \"namespace\": (\n                        \"%s.\" % self.quote_name(namespace) if namespace else \"\"\n                    ),\n                    \"column\": self.quote_name(field.column),\n                    \"to_table\": self.quote_name(to_table),\n                    \"to_column\": self.quote_name(to_column),\n                    \"deferrable\": self.connection.ops.deferrable_sql(),\n                }\n            # Otherwise, add FK constraints later.\n            else:\n                self.deferred_sql.append(\n                    self._create_fk_sql(model, field, constraint_suffix)\n                )\n        # Build the SQL and run it\n        sql = self.sql_create_column % {\n            \"table\": self.quote_name(model._meta.db_table),\n            \"column\": self.quote_name(field.column),\n            \"definition\": definition,\n        }\n        # Prevent using [] as params, in the case a literal '%' is used in the\n        # definition on backends that don't support parametrized DDL.\n        self.execute(sql, params or None)\n        # Drop the default if we need to\n        if (\n            not field.has_db_default()\n            and not self.skip_default_on_alter(field)\n            and self.effective_default(field) is not None\n        ):\n            changes_sql, params = self._alter_column_default_sql(\n                model, None, field, drop=True\n            )\n            sql = self.sql_alter_column % {\n                \"table\": self.quote_name(model._meta.db_table),\n                \"changes\": changes_sql,\n            }\n            self.execute(sql, params)\n        # Add field comment, if required.\n        if (\n            field.db_comment\n            and self.connection.features.supports_comments\n            and not self.connection.features.supports_comments_inline\n        ):\n            field_type = db_params[\"type\"]\n            self.execute(\n                *self._alter_column_comment_sql(\n                    model, field, field_type, field.db_comment\n                )\n            )\n        # Add an index, if required\n        self.deferred_sql.extend(self._field_indexes_sql(model, field))\n        # Reset connection if required\n        if self.connection.features.connection_persists_old_columns:\n            self.connection.close()\n\n    def remove_field(self, model, field):\n        \"\"\"\n        Remove a field from a model. Usually involves deleting a column,\n        but for M2Ms may involve deleting a table.\n        \"\"\"\n        # Special-case implicit M2M tables\n        if field.many_to_many and field.remote_field.through._meta.auto_created:\n            return self.delete_model(field.remote_field.through)\n        # It might not actually have a column behind it\n        if field.db_parameters(connection=self.connection)[\"type\"] is None:\n            return\n        # Drop any FK constraints, MySQL requires explicit deletion\n        if field.remote_field:\n            fk_names = self._constraint_names(model, [field.column], foreign_key=True)\n            for fk_name in fk_names:\n                self.execute(self._delete_fk_sql(model, fk_name))\n        # Delete the column\n        sql = self.sql_delete_column % {\n            \"table\": self.quote_name(model._meta.db_table),\n            \"column\": self.quote_name(field.column),\n        }\n        self.execute(sql)\n        # Reset connection if required\n        if self.connection.features.connection_persists_old_columns:\n            self.connection.close()\n        # Remove all deferred statements referencing the deleted column.\n        for sql in list(self.deferred_sql):\n            if isinstance(sql, Statement) and sql.references_column(\n                model._meta.db_table, field.column\n            ):\n                self.deferred_sql.remove(sql)\n\n    def alter_field(self, model, old_field, new_field, strict=False):\n        \"\"\"\n        Allow a field's type, uniqueness, nullability, default, column,\n        constraints, etc. to be modified.\n        `old_field` is required to compute the necessary changes.\n        If `strict` is True, raise errors if the old column does not match\n        `old_field` precisely.\n        \"\"\"\n        if not self._field_should_be_altered(old_field, new_field):\n            return\n        # Ensure this field is even column-based\n        old_db_params = old_field.db_parameters(connection=self.connection)\n        old_type = old_db_params[\"type\"]\n        new_db_params = new_field.db_parameters(connection=self.connection)\n        new_type = new_db_params[\"type\"]\n        modifying_generated_field = False\n        if (old_type is None and old_field.remote_field is None) or (\n            new_type is None and new_field.remote_field is None\n        ):\n            raise ValueError(\n                \"Cannot alter field %s into %s - they do not properly define \"\n                \"db_type (are you using a badly-written custom field?)\"\n                % (old_field, new_field),\n            )\n        elif (\n            old_type is None\n            and new_type is None\n            and (\n                old_field.remote_field.through\n                and new_field.remote_field.through\n                and old_field.remote_field.through._meta.auto_created\n                and new_field.remote_field.through._meta.auto_created\n            )\n        ):\n            return self._alter_many_to_many(model, old_field, new_field, strict)\n        elif (\n            old_type is None\n            and new_type is None\n            and (\n                old_field.remote_field.through\n                and new_field.remote_field.through\n                and not old_field.remote_field.through._meta.auto_created\n                and not new_field.remote_field.through._meta.auto_created\n            )\n        ):\n            # Both sides have through models; this is a no-op.\n            return\n        elif old_type is None or new_type is None:\n            raise ValueError(\n                \"Cannot alter field %s into %s - they are not compatible types \"\n                \"(you cannot alter to or from M2M fields, or add or remove \"\n                \"through= on M2M fields)\" % (old_field, new_field)\n            )\n        elif old_field.generated != new_field.generated or (\n            new_field.generated and old_field.db_persist != new_field.db_persist\n        ):\n            modifying_generated_field = True\n        elif new_field.generated:\n            try:\n                old_field_sql = old_field.generated_sql(self.connection)\n            except FieldError:\n                # Field used in a generated field was renamed.\n                modifying_generated_field = True\n            else:\n                new_field_sql = new_field.generated_sql(self.connection)\n                modifying_generated_field = old_field_sql != new_field_sql\n        if modifying_generated_field:\n            raise ValueError(\n                f\"Modifying GeneratedFields is not supported - the field {new_field} \"\n                \"must be removed and re-added with the new definition.\"\n            )\n\n        self._alter_field(\n            model,\n            old_field,\n            new_field,\n            old_type,\n            new_type,\n            old_db_params,\n            new_db_params,\n            strict,\n        )\n\n    def _field_db_check(self, field, field_db_params):\n        # Always check constraints with the same mocked column name to avoid\n        # recreating constrains when the column is renamed.\n        check_constraints = self.connection.data_type_check_constraints\n        data = field.db_type_parameters(self.connection)\n        data[\"column\"] = \"__column_name__\"\n        try:\n            return check_constraints[field.get_internal_type()] % data\n        except KeyError:\n            return None\n\n    def _alter_field(\n        self,\n        model,\n        old_field,\n        new_field,\n        old_type,\n        new_type,\n        old_db_params,\n        new_db_params,\n        strict=False,\n    ):\n        \"\"\"Perform a \"physical\" (non-ManyToMany) field update.\"\"\"\n        # Drop any FK constraints, we'll remake them later\n        fks_dropped = set()\n        if (\n            self.connection.features.supports_foreign_keys\n            and old_field.remote_field\n            and old_field.db_constraint\n            and self._field_should_be_altered(\n                old_field,\n                new_field,\n                ignore={\"db_comment\"},\n            )\n        ):\n            fk_names = self._constraint_names(\n                model, [old_field.column], foreign_key=True\n            )\n            if strict and len(fk_names) != 1:\n                raise ValueError(\n                    \"Found wrong number (%s) of foreign key constraints for %s.%s\"\n                    % (\n                        len(fk_names),\n                        model._meta.db_table,\n                        old_field.column,\n                    )\n                )\n            for fk_name in fk_names:\n                fks_dropped.add((old_field.column,))\n                self.execute(self._delete_fk_sql(model, fk_name))\n        # Has unique been removed?\n        if old_field.unique and (\n            not new_field.unique or self._field_became_primary_key(old_field, new_field)\n        ):\n            # Find the unique constraint for this field\n            meta_constraint_names = {\n                constraint.name for constraint in model._meta.constraints\n            }\n            constraint_names = self._constraint_names(\n                model,\n                [old_field.column],\n                unique=True,\n                primary_key=False,\n                exclude=meta_constraint_names,\n            )\n            if strict and len(constraint_names) != 1:\n                raise ValueError(\n                    \"Found wrong number (%s) of unique constraints for %s.%s\"\n                    % (\n                        len(constraint_names),\n                        model._meta.db_table,\n                        old_field.column,\n                    )\n                )\n            for constraint_name in constraint_names:\n                self.execute(self._delete_unique_sql(model, constraint_name))\n        # Drop incoming FK constraints if the field is a primary key or unique,\n        # which might be a to_field target, and things are going to change.\n        old_collation = old_db_params.get(\"collation\")\n        new_collation = new_db_params.get(\"collation\")\n        drop_foreign_keys = (\n            self.connection.features.supports_foreign_keys\n            and (\n                (old_field.primary_key and new_field.primary_key)\n                or (old_field.unique and new_field.unique)\n            )\n            and ((old_type != new_type) or (old_collation != new_collation))\n        )\n        if drop_foreign_keys:\n            # '_meta.related_field' also contains M2M reverse fields, these\n            # will be filtered out\n            for _old_rel, new_rel in _related_non_m2m_objects(old_field, new_field):\n                rel_fk_names = self._constraint_names(\n                    new_rel.related_model, [new_rel.field.column], foreign_key=True\n                )\n                for fk_name in rel_fk_names:\n                    self.execute(self._delete_fk_sql(new_rel.related_model, fk_name))\n        # Removed an index? (no strict check, as multiple indexes are possible)\n        # Remove indexes if db_index switched to False or a unique constraint\n        # will now be used in lieu of an index. The following lines from the\n        # truth table show all True cases; the rest are False:\n        #\n        # old_field.db_index | old_field.unique | new_field.db_index | new_field.unique\n        # ------------------------------------------------------------------------------\n        # True               | False            | False              | False\n        # True               | False            | False              | True\n        # True               | False            | True               | True\n        if (\n            old_field.db_index\n            and not old_field.unique\n            and (not new_field.db_index or new_field.unique)\n        ):\n            # Find the index for this field\n            meta_index_names = {index.name for index in model._meta.indexes}\n            # Retrieve only BTREE indexes since this is what's created with\n            # db_index=True.\n            index_names = self._constraint_names(\n                model,\n                [old_field.column],\n                index=True,\n                type_=Index.suffix,\n                exclude=meta_index_names,\n            )\n            for index_name in index_names:\n                # The only way to check if an index was created with\n                # db_index=True or with Index(['field'], name='foo')\n                # is to look at its name (refs #28053).\n                self.execute(self._delete_index_sql(model, index_name))\n        # Change check constraints?\n        old_db_check = self._field_db_check(old_field, old_db_params)\n        new_db_check = self._field_db_check(new_field, new_db_params)\n        if old_db_check != new_db_check and old_db_check:\n            meta_constraint_names = {\n                constraint.name for constraint in model._meta.constraints\n            }\n            constraint_names = self._constraint_names(\n                model,\n                [old_field.column],\n                check=True,\n                exclude=meta_constraint_names,\n            )\n            if strict and len(constraint_names) != 1:\n                raise ValueError(\n                    \"Found wrong number (%s) of check constraints for %s.%s\"\n                    % (\n                        len(constraint_names),\n                        model._meta.db_table,\n                        old_field.column,\n                    )\n                )\n            for constraint_name in constraint_names:\n                self.execute(self._delete_check_sql(model, constraint_name))\n        # Have they renamed the column?\n        if old_field.column != new_field.column:\n            self.execute(\n                self._rename_field_sql(\n                    model._meta.db_table, old_field, new_field, new_type\n                )\n            )\n            # Rename all references to the renamed column.\n            for sql in self.deferred_sql:\n                if isinstance(sql, Statement):\n                    sql.rename_column_references(\n                        model._meta.db_table, old_field.column, new_field.column\n                    )\n        # Next, start accumulating actions to do\n        actions = []\n        null_actions = []\n        post_actions = []\n        # Type suffix change? (e.g. auto increment).\n        old_type_suffix = old_field.db_type_suffix(connection=self.connection)\n        new_type_suffix = new_field.db_type_suffix(connection=self.connection)\n        # Type, collation, or comment change?\n        if (\n            old_type != new_type\n            or old_type_suffix != new_type_suffix\n            or old_collation != new_collation\n            or (\n                self.connection.features.supports_comments\n                and old_field.db_comment != new_field.db_comment\n            )\n        ):\n            fragment, other_actions = self._alter_column_type_sql(\n                model, old_field, new_field, new_type, old_collation, new_collation\n            )\n            actions.append(fragment)\n            post_actions.extend(other_actions)\n\n        if new_field.has_db_default():\n            if (\n                not old_field.has_db_default()\n                or new_field.db_default != old_field.db_default\n            ):\n                actions.append(\n                    self._alter_column_database_default_sql(model, old_field, new_field)\n                )\n        elif old_field.has_db_default():\n            actions.append(\n                self._alter_column_database_default_sql(\n                    model, old_field, new_field, drop=True\n                )\n            )\n        # When changing a column NULL constraint to NOT NULL with a given\n        # default value, we need to perform 4 steps:\n        #  1. Add a default for new incoming writes\n        #  2. Update existing NULL rows with new default\n        #  3. Replace NULL constraint with NOT NULL\n        #  4. Drop the default again.\n        # Default change?\n        needs_database_default = False\n        if old_field.null and not new_field.null and not new_field.has_db_default():\n            old_default = self.effective_default(old_field)\n            new_default = self.effective_default(new_field)\n            if (\n                not self.skip_default_on_alter(new_field)\n                and old_default != new_default\n                and new_default is not None\n            ):\n                needs_database_default = True\n                actions.append(\n                    self._alter_column_default_sql(model, old_field, new_field)\n                )\n        # Nullability change?\n        if old_field.null != new_field.null:\n            fragment = self._alter_column_null_sql(model, old_field, new_field)\n            if fragment:\n                null_actions.append(fragment)\n        # Only if we have a default and there is a change from NULL to NOT NULL\n        four_way_default_alteration = (\n            new_field.has_default() or new_field.has_db_default()\n        ) and (old_field.null and not new_field.null)\n        if actions or null_actions:\n            if not four_way_default_alteration:\n                # If we don't have to do a 4-way default alteration we can\n                # directly run a (NOT) NULL alteration\n                actions += null_actions\n            # Combine actions together if we can (e.g. postgres)\n            if self.connection.features.supports_combined_alters and actions:\n                sql, params = tuple(zip(*actions))\n                actions = [(\", \".join(sql), sum(params, []))]\n            # Apply those actions\n            for sql, params in actions:\n                self.execute(\n                    self.sql_alter_column\n                    % {\n                        \"table\": self.quote_name(model._meta.db_table),\n                        \"changes\": sql,\n                    },\n                    params,\n                )\n            if four_way_default_alteration:\n                if not new_field.has_db_default():\n                    default_sql = \"%s\"\n                    params = [new_default]\n                else:\n                    default_sql, params = self.db_default_sql(new_field)\n                # Update existing rows with default value\n                self.execute(\n                    self.sql_update_with_default\n                    % {\n                        \"table\": self.quote_name(model._meta.db_table),\n                        \"column\": self.quote_name(new_field.column),\n                        \"default\": default_sql,\n                    },\n                    params,\n                )\n                # Since we didn't run a NOT NULL change before we need to do it\n                # now\n                for sql, params in null_actions:\n                    self.execute(\n                        self.sql_alter_column\n                        % {\n                            \"table\": self.quote_name(model._meta.db_table),\n                            \"changes\": sql,\n                        },\n                        params,\n                    )\n        if post_actions:\n            for sql, params in post_actions:\n                self.execute(sql, params)\n        # If primary_key changed to False, delete the primary key constraint.\n        if old_field.primary_key and not new_field.primary_key:\n            self._delete_primary_key(model, strict)\n        # Added a unique?\n        if self._unique_should_be_added(old_field, new_field):\n            self.execute(self._create_unique_sql(model, [new_field]))\n        # Added an index? Add an index if db_index switched to True or a unique\n        # constraint will no longer be used in lieu of an index. The following\n        # lines from the truth table show all True cases; the rest are False:\n        #\n        # old_field.db_index | old_field.unique | new_field.db_index | new_field.unique\n        # ------------------------------------------------------------------------------\n        # False              | False            | True               | False\n        # False              | True             | True               | False\n        # True               | True             | True               | False\n        if (\n            (not old_field.db_index or old_field.unique)\n            and new_field.db_index\n            and not new_field.unique\n        ):\n            self.execute(self._create_index_sql(model, fields=[new_field]))\n        # Type alteration on primary key? Then we need to alter the column\n        # referring to us.\n        rels_to_update = []\n        if drop_foreign_keys:\n            rels_to_update.extend(_related_non_m2m_objects(old_field, new_field))\n        # Changed to become primary key?\n        if self._field_became_primary_key(old_field, new_field):\n            # Make the new one\n            self.execute(self._create_primary_key_sql(model, new_field))\n            # Update all referencing columns\n            rels_to_update.extend(_related_non_m2m_objects(old_field, new_field))\n        # Handle our type alters on the other end of rels from the PK stuff above\n        for old_rel, new_rel in rels_to_update:\n            rel_db_params = new_rel.field.db_parameters(connection=self.connection)\n            rel_type = rel_db_params[\"type\"]\n            rel_collation = rel_db_params.get(\"collation\")\n            old_rel_db_params = old_rel.field.db_parameters(connection=self.connection)\n            old_rel_collation = old_rel_db_params.get(\"collation\")\n            fragment, other_actions = self._alter_column_type_sql(\n                new_rel.related_model,\n                old_rel.field,\n                new_rel.field,\n                rel_type,\n                old_rel_collation,\n                rel_collation,\n            )\n            self.execute(\n                self.sql_alter_column\n                % {\n                    \"table\": self.quote_name(new_rel.related_model._meta.db_table),\n                    \"changes\": fragment[0],\n                },\n                fragment[1],\n            )\n            for sql, params in other_actions:\n                self.execute(sql, params)\n        # Does it have a foreign key?\n        if (\n            self.connection.features.supports_foreign_keys\n            and new_field.remote_field\n            and (\n                fks_dropped or not old_field.remote_field or not old_field.db_constraint\n            )\n            and new_field.db_constraint\n        ):\n            self.execute(\n                self._create_fk_sql(model, new_field, \"_fk_%(to_table)s_%(to_column)s\")\n            )\n        # Rebuild FKs that pointed to us if we previously had to drop them\n        if drop_foreign_keys:\n            for _, rel in rels_to_update:\n                if rel.field.db_constraint:\n                    self.execute(\n                        self._create_fk_sql(rel.related_model, rel.field, \"_fk\")\n                    )\n        # Does it have check constraints we need to add?\n        if old_db_check != new_db_check and new_db_check:\n            constraint_name = self._create_index_name(\n                model._meta.db_table, [new_field.column], suffix=\"_check\"\n            )\n            self.execute(\n                self._create_check_sql(model, constraint_name, new_db_params[\"check\"])\n            )\n        # Drop the default if we need to\n        # (Django usually does not use in-database defaults)\n        if needs_database_default:\n            changes_sql, params = self._alter_column_default_sql(\n                model, old_field, new_field, drop=True\n            )\n            sql = self.sql_alter_column % {\n                \"table\": self.quote_name(model._meta.db_table),\n                \"changes\": changes_sql,\n            }\n            self.execute(sql, params)\n        # Reset connection if required\n        if self.connection.features.connection_persists_old_columns:\n            self.connection.close()\n\n    def _alter_column_null_sql(self, model, old_field, new_field):\n        \"\"\"\n        Hook to specialize column null alteration.\n\n        Return a (sql, params) fragment to set a column to null or non-null\n        as required by new_field, or None if no changes are required.\n        \"\"\"\n        if (\n            self.connection.features.interprets_empty_strings_as_nulls\n            and new_field.empty_strings_allowed\n        ):\n            # The field is nullable in the database anyway, leave it alone.\n            return\n        else:\n            new_db_params = new_field.db_parameters(connection=self.connection)\n            sql = (\n                self.sql_alter_column_null\n                if new_field.null\n                else self.sql_alter_column_not_null\n            )\n            return (\n                sql\n                % {\n                    \"column\": self.quote_name(new_field.column),\n                    \"type\": new_db_params[\"type\"],\n                },\n                [],\n            )\n\n    def _alter_column_default_sql(self, model, old_field, new_field, drop=False):\n        \"\"\"\n        Hook to specialize column default alteration.\n\n        Return a (sql, params) fragment to add or drop (depending on the drop\n        argument) a default to new_field's column.\n        \"\"\"\n        new_default = self.effective_default(new_field)\n        default = self._column_default_sql(new_field)\n        params = [new_default]\n\n        if drop:\n            params = []\n        elif self.connection.features.requires_literal_defaults:\n            # Some databases (Oracle) can't take defaults as a parameter\n            # If this is the case, the SchemaEditor for that database should\n            # implement prepare_default().\n            default = self.prepare_default(new_default)\n            params = []\n\n        new_db_params = new_field.db_parameters(connection=self.connection)\n        if drop:\n            if new_field.null:\n                sql = self.sql_alter_column_no_default_null\n            else:\n                sql = self.sql_alter_column_no_default\n        else:\n            sql = self.sql_alter_column_default\n        return (\n            sql\n            % {\n                \"column\": self.quote_name(new_field.column),\n                \"type\": new_db_params[\"type\"],\n                \"default\": default,\n            },\n            params,\n        )\n\n    def _alter_column_database_default_sql(\n        self, model, old_field, new_field, drop=False\n    ):\n        \"\"\"\n        Hook to specialize column database default alteration.\n\n        Return a (sql, params) fragment to add or drop (depending on the drop\n        argument) a default to new_field's column.\n        \"\"\"\n        if drop:\n            sql = self.sql_alter_column_no_default\n            default_sql = \"\"\n            params = []\n        else:\n            sql = self.sql_alter_column_default\n            default_sql, params = self.db_default_sql(new_field)\n\n        new_db_params = new_field.db_parameters(connection=self.connection)\n        return (\n            sql\n            % {\n                \"column\": self.quote_name(new_field.column),\n                \"type\": new_db_params[\"type\"],\n                \"default\": default_sql,\n            },\n            params,\n        )\n\n    def _alter_column_type_sql(\n        self, model, old_field, new_field, new_type, old_collation, new_collation\n    ):\n        \"\"\"\n        Hook to specialize column type alteration for different backends,\n        for cases when a creation type is different to an alteration type\n        (e.g. SERIAL in PostgreSQL, PostGIS fields).\n\n        Return a 2-tuple of: an SQL fragment of (sql, params) to insert into\n        an ALTER TABLE statement and a list of extra (sql, params) tuples to\n        run once the field is altered.\n        \"\"\"\n        other_actions = []\n        if collate_sql := self._collate_sql(\n            new_collation, old_collation, model._meta.db_table\n        ):\n            collate_sql = f\" {collate_sql}\"\n        else:\n            collate_sql = \"\"\n        # Comment change?\n        comment_sql = \"\"\n        if self.connection.features.supports_comments and not new_field.many_to_many:\n            if old_field.db_comment != new_field.db_comment:\n                # PostgreSQL and Oracle can't execute 'ALTER COLUMN ...' and\n                # 'COMMENT ON ...' at the same time.\n                sql, params = self._alter_column_comment_sql(\n                    model, new_field, new_type, new_field.db_comment\n                )\n                if sql:\n                    other_actions.append((sql, params))\n            if new_field.db_comment:\n                comment_sql = self._comment_sql(new_field.db_comment)\n        return (\n            (\n                self.sql_alter_column_type\n                % {\n                    \"column\": self.quote_name(new_field.column),\n                    \"type\": new_type,\n                    \"collation\": collate_sql,\n                    \"comment\": comment_sql,\n                },\n                [],\n            ),\n            other_actions,\n        )\n\n    def _alter_column_comment_sql(self, model, new_field, new_type, new_db_comment):\n        return (\n            self.sql_alter_column_comment\n            % {\n                \"table\": self.quote_name(model._meta.db_table),\n                \"column\": self.quote_name(new_field.column),\n                \"comment\": self._comment_sql(new_db_comment),\n            },\n            [],\n        )\n\n    def _comment_sql(self, comment):\n        return self.quote_value(comment or \"\")\n\n    def _alter_many_to_many(self, model, old_field, new_field, strict):\n        \"\"\"Alter M2Ms to repoint their to= endpoints.\"\"\"\n        # Rename the through table\n        if (\n            old_field.remote_field.through._meta.db_table\n            != new_field.remote_field.through._meta.db_table\n        ):\n            self.alter_db_table(\n                old_field.remote_field.through,\n                old_field.remote_field.through._meta.db_table,\n                new_field.remote_field.through._meta.db_table,\n            )\n        # Repoint the FK to the other side\n        self.alter_field(\n            new_field.remote_field.through,\n            # The field that points to the target model is needed, so we can\n            # tell alter_field to change it - this is m2m_reverse_field_name()\n            # (as opposed to m2m_field_name(), which points to our model).\n            old_field.remote_field.through._meta.get_field(\n                old_field.m2m_reverse_field_name()\n            ),\n            new_field.remote_field.through._meta.get_field(\n                new_field.m2m_reverse_field_name()\n            ),\n        )\n        self.alter_field(\n            new_field.remote_field.through,\n            # for self-referential models we need to alter field from the other end too\n            old_field.remote_field.through._meta.get_field(old_field.m2m_field_name()),\n            new_field.remote_field.through._meta.get_field(new_field.m2m_field_name()),\n        )\n\n    def _create_index_name(self, table_name, column_names, suffix=\"\"):\n        \"\"\"\n        Generate a unique name for an index/unique constraint.\n\n        The name is divided into 3 parts: the table name, the column names,\n        and a unique digest and suffix.\n        \"\"\"\n        _, table_name = split_identifier(table_name)\n        hash_suffix_part = \"%s%s\" % (\n            names_digest(table_name, *column_names, length=8),\n            suffix,\n        )\n        max_length = self.connection.ops.max_name_length() or 200\n        # If everything fits into max_length, use that name.\n        index_name = \"%s_%s_%s\" % (table_name, \"_\".join(column_names), hash_suffix_part)\n        if len(index_name) <= max_length:\n            return index_name\n        # Shorten a long suffix.\n        if len(hash_suffix_part) > max_length / 3:\n            hash_suffix_part = hash_suffix_part[: max_length // 3]\n        other_length = (max_length - len(hash_suffix_part)) // 2 - 1\n        index_name = \"%s_%s_%s\" % (\n            table_name[:other_length],\n            \"_\".join(column_names)[:other_length],\n            hash_suffix_part,\n        )\n        # Prepend D if needed to prevent the name from starting with an\n        # underscore or a number (not permitted on Oracle).\n        if index_name[0] == \"_\" or index_name[0].isdigit():\n            index_name = \"D%s\" % index_name[:-1]\n        return index_name\n\n    def _get_index_tablespace_sql(self, model, fields, db_tablespace=None):\n        if db_tablespace is None:\n            if len(fields) == 1 and fields[0].db_tablespace:\n                db_tablespace = fields[0].db_tablespace\n            elif settings.DEFAULT_INDEX_TABLESPACE:\n                db_tablespace = settings.DEFAULT_INDEX_TABLESPACE\n            elif model._meta.db_tablespace:\n                db_tablespace = model._meta.db_tablespace\n        if db_tablespace is not None:\n            return \" \" + self.connection.ops.tablespace_sql(db_tablespace)\n        return \"\"\n\n    def _index_condition_sql(self, condition):\n        if condition:\n            return \" WHERE \" + condition\n        return \"\"\n\n    def _index_include_sql(self, model, columns):\n        if not columns or not self.connection.features.supports_covering_indexes:\n            return \"\"\n        return Statement(\n            \" INCLUDE (%(columns)s)\",\n            columns=Columns(model._meta.db_table, columns, self.quote_name),\n        )\n\n    def _create_index_sql(\n        self,\n        model,\n        *,\n        fields=None,\n        name=None,\n        suffix=\"\",\n        using=\"\",\n        db_tablespace=None,\n        col_suffixes=(),\n        sql=None,\n        opclasses=(),\n        condition=None,\n        include=None,\n        expressions=None,\n    ):\n        \"\"\"\n        Return the SQL statement to create the index for one or several fields\n        or expressions. `sql` can be specified if the syntax differs from the\n        standard (GIS indexes, ...).\n        \"\"\"\n        fields = fields or []\n        expressions = expressions or []\n        compiler = Query(model, alias_cols=False).get_compiler(\n            connection=self.connection,\n        )\n        tablespace_sql = self._get_index_tablespace_sql(\n            model, fields, db_tablespace=db_tablespace\n        )\n        columns = [field.column for field in fields]\n        sql_create_index = sql or self.sql_create_index\n        table = model._meta.db_table\n\n        def create_index_name(*args, **kwargs):\n            nonlocal name\n            if name is None:\n                name = self._create_index_name(*args, **kwargs)\n            return self.quote_name(name)\n\n        return Statement(\n            sql_create_index,\n            table=Table(table, self.quote_name),\n            name=IndexName(table, columns, suffix, create_index_name),\n            using=using,\n            columns=(\n                self._index_columns(table, columns, col_suffixes, opclasses)\n                if columns\n                else Expressions(table, expressions, compiler, self.quote_value)\n            ),\n            extra=tablespace_sql,\n            condition=self._index_condition_sql(condition),\n            include=self._index_include_sql(model, include),\n        )\n\n    def _delete_index_sql(self, model, name, sql=None):\n        statement = Statement(\n            sql or self.sql_delete_index,\n            table=Table(model._meta.db_table, self.quote_name),\n            name=self.quote_name(name),\n        )\n\n        # Remove all deferred statements referencing the deleted index.\n        table_name = statement.parts[\"table\"].table\n        index_name = statement.parts[\"name\"]\n        for sql in list(self.deferred_sql):\n            if isinstance(sql, Statement) and sql.references_index(\n                table_name, index_name\n            ):\n                self.deferred_sql.remove(sql)\n\n        return statement\n\n    def _rename_index_sql(self, model, old_name, new_name):\n        return Statement(\n            self.sql_rename_index,\n            table=Table(model._meta.db_table, self.quote_name),\n            old_name=self.quote_name(old_name),\n            new_name=self.quote_name(new_name),\n        )\n\n    def _index_columns(self, table, columns, col_suffixes, opclasses):\n        return Columns(table, columns, self.quote_name, col_suffixes=col_suffixes)\n\n    def _model_indexes_sql(self, model):\n        \"\"\"\n        Return a list of all index SQL statements (field indexes, Meta.indexes)\n        for the specified model.\n        \"\"\"\n        if not model._meta.managed or model._meta.proxy or model._meta.swapped:\n            return []\n        output = []\n        for field in model._meta.local_fields:\n            output.extend(self._field_indexes_sql(model, field))\n\n        for index in model._meta.indexes:\n            if (\n                not index.contains_expressions\n                or self.connection.features.supports_expression_indexes\n            ):\n                output.append(index.create_sql(model, self))\n        return output\n\n    def _field_indexes_sql(self, model, field):\n        \"\"\"\n        Return a list of all index SQL statements for the specified field.\n        \"\"\"\n        output = []\n        if self._field_should_be_indexed(model, field):\n            output.append(self._create_index_sql(model, fields=[field]))\n        return output\n\n    def _field_should_be_altered(self, old_field, new_field, ignore=None):\n        if not old_field.concrete and not new_field.concrete:\n            return False\n        ignore = ignore or set()\n        _, old_path, old_args, old_kwargs = old_field.deconstruct()\n        _, new_path, new_args, new_kwargs = new_field.deconstruct()\n        # Don't alter when:\n        # - changing only a field name\n        # - changing an attribute that doesn't affect the schema\n        # - changing an attribute in the provided set of ignored attributes\n        # - adding only a db_column and the column name is not changed\n        # - db_table does not change for model referenced by foreign keys\n        for attr in ignore.union(old_field.non_db_attrs):\n            old_kwargs.pop(attr, None)\n        for attr in ignore.union(new_field.non_db_attrs):\n            new_kwargs.pop(attr, None)\n        if (\n            not new_field.many_to_many\n            and old_field.remote_field\n            and new_field.remote_field\n            and old_field.remote_field.model._meta.db_table\n            == new_field.remote_field.model._meta.db_table\n        ):\n            old_kwargs.pop(\"to\", None)\n            new_kwargs.pop(\"to\", None)\n        # db_default can take many form but result in the same SQL.\n        if (\n            old_kwargs.get(\"db_default\")\n            and new_kwargs.get(\"db_default\")\n            and self.db_default_sql(old_field) == self.db_default_sql(new_field)\n        ):\n            old_kwargs.pop(\"db_default\")\n            new_kwargs.pop(\"db_default\")\n        return self.quote_name(old_field.column) != self.quote_name(\n            new_field.column\n        ) or (old_path, old_args, old_kwargs) != (new_path, new_args, new_kwargs)\n\n    def _field_should_be_indexed(self, model, field):\n        return field.db_index and not field.unique\n\n    def _field_became_primary_key(self, old_field, new_field):\n        return not old_field.primary_key and new_field.primary_key\n\n    def _unique_should_be_added(self, old_field, new_field):\n        return (\n            not new_field.primary_key\n            and new_field.unique\n            and (not old_field.unique or old_field.primary_key)\n        )\n\n    def _rename_field_sql(self, table, old_field, new_field, new_type):\n        return self.sql_rename_column % {\n            \"table\": self.quote_name(table),\n            \"old_column\": self.quote_name(old_field.column),\n            \"new_column\": self.quote_name(new_field.column),\n            \"type\": new_type,\n        }\n\n    def _create_fk_sql(self, model, field, suffix):\n        table = Table(model._meta.db_table, self.quote_name)\n        name = self._fk_constraint_name(model, field, suffix)\n        column = Columns(model._meta.db_table, [field.column], self.quote_name)\n        to_table = Table(field.target_field.model._meta.db_table, self.quote_name)\n        to_column = Columns(\n            field.target_field.model._meta.db_table,\n            [field.target_field.column],\n            self.quote_name,\n        )\n        deferrable = self.connection.ops.deferrable_sql()\n        return Statement(\n            self.sql_create_fk,\n            table=table,\n            name=name,\n            column=column,\n            to_table=to_table,\n            to_column=to_column,\n            deferrable=deferrable,\n        )\n\n    def _fk_constraint_name(self, model, field, suffix):\n        def create_fk_name(*args, **kwargs):\n            return self.quote_name(self._create_index_name(*args, **kwargs))\n\n        return ForeignKeyName(\n            model._meta.db_table,\n            [field.column],\n            split_identifier(field.target_field.model._meta.db_table)[1],\n            [field.target_field.column],\n            suffix,\n            create_fk_name,\n        )\n\n    def _delete_fk_sql(self, model, name):\n        return self._delete_constraint_sql(self.sql_delete_fk, model, name)\n\n    def _deferrable_constraint_sql(self, deferrable):\n        if deferrable is None:\n            return \"\"\n        if deferrable == Deferrable.DEFERRED:\n            return \" DEFERRABLE INITIALLY DEFERRED\"\n        if deferrable == Deferrable.IMMEDIATE:\n            return \" DEFERRABLE INITIALLY IMMEDIATE\"\n\n    def _unique_index_nulls_distinct_sql(self, nulls_distinct):\n        if nulls_distinct is False:\n            return \" NULLS NOT DISTINCT\"\n        elif nulls_distinct is True:\n            return \" NULLS DISTINCT\"\n        return \"\"\n\n    def _unique_supported(\n        self,\n        condition=None,\n        deferrable=None,\n        include=None,\n        expressions=None,\n        nulls_distinct=None,\n    ):\n        return (\n            (not condition or self.connection.features.supports_partial_indexes)\n            and (\n                not deferrable\n                or self.connection.features.supports_deferrable_unique_constraints\n            )\n            and (not include or self.connection.features.supports_covering_indexes)\n            and (\n                not expressions or self.connection.features.supports_expression_indexes\n            )\n            and (\n                nulls_distinct is None\n                or self.connection.features.supports_nulls_distinct_unique_constraints\n            )\n        )\n\n    def _unique_sql(\n        self,\n        model,\n        fields,\n        name,\n        condition=None,\n        deferrable=None,\n        include=None,\n        opclasses=None,\n        expressions=None,\n        nulls_distinct=None,\n    ):\n        if not self._unique_supported(\n            condition=condition,\n            deferrable=deferrable,\n            include=include,\n            expressions=expressions,\n            nulls_distinct=nulls_distinct,\n        ):\n            return None\n\n        if (\n            condition\n            or include\n            or opclasses\n            or expressions\n            or nulls_distinct is not None\n        ):\n            # Databases support conditional, covering, functional unique,\n            # and nulls distinct constraints via a unique index.\n            sql = self._create_unique_sql(\n                model,\n                fields,\n                name=name,\n                condition=condition,\n                include=include,\n                opclasses=opclasses,\n                expressions=expressions,\n                nulls_distinct=nulls_distinct,\n            )\n            if sql:\n                self.deferred_sql.append(sql)\n            return None\n        constraint = self.sql_unique_constraint % {\n            \"columns\": \", \".join([self.quote_name(field.column) for field in fields]),\n            \"deferrable\": self._deferrable_constraint_sql(deferrable),\n        }\n        return self.sql_constraint % {\n            \"name\": self.quote_name(name),\n            \"constraint\": constraint,\n        }\n\n    def _create_unique_sql(\n        self,\n        model,\n        fields,\n        name=None,\n        condition=None,\n        deferrable=None,\n        include=None,\n        opclasses=None,\n        expressions=None,\n        nulls_distinct=None,\n    ):\n        if not self._unique_supported(\n            condition=condition,\n            deferrable=deferrable,\n            include=include,\n            expressions=expressions,\n            nulls_distinct=nulls_distinct,\n        ):\n            return None\n\n        compiler = Query(model, alias_cols=False).get_compiler(\n            connection=self.connection\n        )\n        table = model._meta.db_table\n        columns = [field.column for field in fields]\n        if name is None:\n            name = self._unique_constraint_name(table, columns, quote=True)\n        else:\n            name = self.quote_name(name)\n        if condition or include or opclasses or expressions:\n            sql = self.sql_create_unique_index\n        else:\n            sql = self.sql_create_unique\n        if columns:\n            columns = self._index_columns(\n                table, columns, col_suffixes=(), opclasses=opclasses\n            )\n        else:\n            columns = Expressions(table, expressions, compiler, self.quote_value)\n        return Statement(\n            sql,\n            table=Table(table, self.quote_name),\n            name=name,\n            columns=columns,\n            condition=self._index_condition_sql(condition),\n            deferrable=self._deferrable_constraint_sql(deferrable),\n            include=self._index_include_sql(model, include),\n            nulls_distinct=self._unique_index_nulls_distinct_sql(nulls_distinct),\n        )\n\n    def _unique_constraint_name(self, table, columns, quote=True):\n        if quote:\n\n            def create_unique_name(*args, **kwargs):\n                return self.quote_name(self._create_index_name(*args, **kwargs))\n\n        else:\n            create_unique_name = self._create_index_name\n\n        return IndexName(table, columns, \"_uniq\", create_unique_name)\n\n    def _delete_unique_sql(\n        self,\n        model,\n        name,\n        condition=None,\n        deferrable=None,\n        include=None,\n        opclasses=None,\n        expressions=None,\n        nulls_distinct=None,\n    ):\n        if not self._unique_supported(\n            condition=condition,\n            deferrable=deferrable,\n            include=include,\n            expressions=expressions,\n            nulls_distinct=nulls_distinct,\n        ):\n            return None\n        if condition or include or opclasses or expressions:\n            sql = self.sql_delete_index\n        else:\n            sql = self.sql_delete_unique\n        return self._delete_constraint_sql(sql, model, name)\n\n    def _check_sql(self, name, check):\n        return self.sql_constraint % {\n            \"name\": self.quote_name(name),\n            \"constraint\": self.sql_check_constraint % {\"check\": check},\n        }\n\n    def _create_check_sql(self, model, name, check):\n        if not self.connection.features.supports_table_check_constraints:\n            return None\n        return Statement(\n            self.sql_create_check,\n            table=Table(model._meta.db_table, self.quote_name),\n            name=self.quote_name(name),\n            check=check,\n        )\n\n    def _delete_check_sql(self, model, name):\n        if not self.connection.features.supports_table_check_constraints:\n            return None\n        return self._delete_constraint_sql(self.sql_delete_check, model, name)\n\n    def _delete_constraint_sql(self, template, model, name):\n        return Statement(\n            template,\n            table=Table(model._meta.db_table, self.quote_name),\n            name=self.quote_name(name),\n        )\n\n    def _constraint_names(\n        self,\n        model,\n        column_names=None,\n        unique=None,\n        primary_key=None,\n        index=None,\n        foreign_key=None,\n        check=None,\n        type_=None,\n        exclude=None,\n    ):\n        \"\"\"Return all constraint names matching the columns and conditions.\"\"\"\n        if column_names is not None:\n            column_names = [\n                (\n                    self.connection.introspection.identifier_converter(\n                        truncate_name(name, self.connection.ops.max_name_length())\n                    )\n                    if self.connection.features.truncates_names\n                    else self.connection.introspection.identifier_converter(name)\n                )\n                for name in column_names\n            ]\n        with self.connection.cursor() as cursor:\n            constraints = self.connection.introspection.get_constraints(\n                cursor, model._meta.db_table\n            )\n        result = []\n        for name, infodict in constraints.items():\n            if column_names is None or column_names == infodict[\"columns\"]:\n                if unique is not None and infodict[\"unique\"] != unique:\n                    continue\n                if primary_key is not None and infodict[\"primary_key\"] != primary_key:\n                    continue\n                if index is not None and infodict[\"index\"] != index:\n                    continue\n                if check is not None and infodict[\"check\"] != check:\n                    continue\n                if foreign_key is not None and not infodict[\"foreign_key\"]:\n                    continue\n                if type_ is not None and infodict[\"type\"] != type_:\n                    continue\n                if not exclude or name not in exclude:\n                    result.append(name)\n        return result\n\n    def _pk_constraint_sql(self, columns):\n        return self.sql_pk_constraint % {\n            \"columns\": \", \".join(self.quote_name(column) for column in columns)\n        }\n\n    def _delete_primary_key(self, model, strict=False):\n        constraint_names = self._constraint_names(model, primary_key=True)\n        if strict and len(constraint_names) != 1:\n            raise ValueError(\n                \"Found wrong number (%s) of PK constraints for %s\"\n                % (\n                    len(constraint_names),\n                    model._meta.db_table,\n                )\n            )\n        for constraint_name in constraint_names:\n            self.execute(self._delete_primary_key_sql(model, constraint_name))\n\n    def _create_primary_key_sql(self, model, field):\n        return Statement(\n            self.sql_create_pk,\n            table=Table(model._meta.db_table, self.quote_name),\n            name=self.quote_name(\n                self._create_index_name(\n                    model._meta.db_table, [field.column], suffix=\"_pk\"\n                )\n            ),\n            columns=Columns(model._meta.db_table, [field.column], self.quote_name),\n        )\n\n    def _delete_primary_key_sql(self, model, name):\n        return self._delete_constraint_sql(self.sql_delete_pk, model, name)\n\n    def _collate_sql(self, collation, old_collation=None, table_name=None):\n        return \"COLLATE \" + self.quote_name(collation) if collation else \"\"\n\n    def remove_procedure(self, procedure_name, param_types=()):\n        sql = self.sql_delete_procedure % {\n            \"procedure\": self.quote_name(procedure_name),\n            \"param_types\": \",\".join(param_types),\n        }\n        self.execute(sql)"}],"ground_truth":null,"score":null},
{"question":"What is the purpose of the `has_native_uuid_field` attribute in the `DatabaseFeatures`, and how is it typically used?","answer":"","relative_code_list":[{"start_line":9,"end_line":171,"belongs_to":{"file_name":"features.py","upper_path":"../django/django/db/backends/postgresql","module":"postgresql","define_class":["DatabaseFeatures"],"imports":["operator","django.db.DataError","django.db.InterfaceError","django.db.backends.base.features.BaseDatabaseFeatures","django.db.backends.postgresql.psycopg_any.is_psycopg3","django.utils.functional.cached_property"]},"relative_function":[],"code":"class DatabaseFeatures(BaseDatabaseFeatures):\n    minimum_database_version = (14,)\n    allows_group_by_selected_pks = True\n    can_return_columns_from_insert = True\n    can_return_rows_from_bulk_insert = True\n    has_real_datatype = True\n    has_native_uuid_field = True\n    has_native_duration_field = True\n    has_native_json_field = True\n    can_defer_constraint_checks = True\n    has_select_for_update = True\n    has_select_for_update_nowait = True\n    has_select_for_update_of = True\n    has_select_for_update_skip_locked = True\n    has_select_for_no_key_update = True\n    can_release_savepoints = True\n    supports_comments = True\n    supports_tablespaces = True\n    supports_transactions = True\n    can_introspect_materialized_views = True\n    can_distinct_on_fields = True\n    can_rollback_ddl = True\n    schema_editor_uses_clientside_param_binding = True\n    supports_combined_alters = True\n    nulls_order_largest = True\n    closed_cursor_error_class = InterfaceError\n    greatest_least_ignores_nulls = True\n    can_clone_databases = True\n    supports_temporal_subtraction = True\n    supports_slicing_ordering_in_compound = True\n    create_test_procedure_without_params_sql = \"\"\"\n        CREATE FUNCTION test_procedure () RETURNS void AS $$\n        DECLARE\n            V_I INTEGER;\n        BEGIN\n            V_I := 1;\n        END;\n    $$ LANGUAGE plpgsql;\"\"\"\n    create_test_procedure_with_int_param_sql = \"\"\"\n        CREATE FUNCTION test_procedure (P_I INTEGER) RETURNS void AS $$\n        DECLARE\n            V_I INTEGER;\n        BEGIN\n            V_I := P_I;\n        END;\n    $$ LANGUAGE plpgsql;\"\"\"\n    create_test_table_with_composite_primary_key = \"\"\"\n        CREATE TABLE test_table_composite_pk (\n            column_1 INTEGER NOT NULL,\n            column_2 INTEGER NOT NULL,\n            PRIMARY KEY(column_1, column_2)\n        )\n    \"\"\"\n    requires_casted_case_in_updates = True\n    supports_over_clause = True\n    supports_frame_exclusion = True\n    only_supports_unbounded_with_preceding_and_following = True\n    supports_aggregate_filter_clause = True\n    supports_aggregate_order_by_clause = True\n    supported_explain_formats = {\"JSON\", \"TEXT\", \"XML\", \"YAML\"}\n    supports_deferrable_unique_constraints = True\n    has_json_operators = True\n    json_key_contains_list_matching_requires_list = True\n    supports_update_conflicts = True\n    supports_update_conflicts_with_target = True\n    supports_covering_indexes = True\n    supports_stored_generated_columns = True\n    supports_virtual_generated_columns = False\n    can_rename_index = True\n    test_collations = {\n        \"deterministic\": \"C\",\n        \"non_default\": \"sv-x-icu\",\n        \"swedish_ci\": \"sv-x-icu\",\n        \"virtual\": \"sv-x-icu\",\n    }\n    test_now_utc_template = \"STATEMENT_TIMESTAMP() AT TIME ZONE 'UTC'\"\n    insert_test_table_with_defaults = \"INSERT INTO {} DEFAULT VALUES\"\n\n    @cached_property\n    def django_test_skips(self):\n        skips = {\n            \"opclasses are PostgreSQL only.\": {\n                \"indexes.tests.SchemaIndexesNotPostgreSQLTests.\"\n                \"test_create_index_ignores_opclasses\",\n            },\n            \"PostgreSQL requires casting to text.\": {\n                \"lookup.tests.LookupTests.test_textfield_exact_null\",\n            },\n        }\n        if self.connection.settings_dict[\"OPTIONS\"].get(\"pool\"):\n            skips.update(\n                {\n                    \"Pool does implicit health checks\": {\n                        \"backends.base.test_base.ConnectionHealthChecksTests.\"\n                        \"test_health_checks_enabled\",\n                        \"backends.base.test_base.ConnectionHealthChecksTests.\"\n                        \"test_set_autocommit_health_checks_enabled\",\n                    },\n                }\n            )\n        if self.uses_server_side_binding:\n            skips.update(\n                {\n                    \"The actual query cannot be determined for server side bindings\": {\n                        \"backends.base.test_base.ExecuteWrapperTests.\"\n                        \"test_wrapper_debug\",\n                    }\n                },\n            )\n        return skips\n\n    @cached_property\n    def django_test_expected_failures(self):\n        expected_failures = set()\n        if self.uses_server_side_binding:\n            expected_failures.update(\n                {\n                    # Parameters passed to expressions in SELECT and GROUP BY\n                    # clauses are not recognized as the same values when using\n                    # server-side binding cursors (#34255).\n                    \"aggregation.tests.AggregateTestCase.\"\n                    \"test_group_by_nested_expression_with_params\",\n                }\n            )\n        return expected_failures\n\n    @cached_property\n    def uses_server_side_binding(self):\n        options = self.connection.settings_dict[\"OPTIONS\"]\n        return is_psycopg3 and options.get(\"server_side_binding\") is True\n\n    @cached_property\n    def prohibits_null_characters_in_text_exception(self):\n        if is_psycopg3:\n            return DataError, \"PostgreSQL text fields cannot contain NUL (0x00) bytes\"\n        else:\n            return ValueError, \"A string literal cannot contain NUL (0x00) characters.\"\n\n    @cached_property\n    def introspected_field_types(self):\n        return {\n            **super().introspected_field_types,\n            \"PositiveBigIntegerField\": \"BigIntegerField\",\n            \"PositiveIntegerField\": \"IntegerField\",\n            \"PositiveSmallIntegerField\": \"SmallIntegerField\",\n        }\n\n    @cached_property\n    def is_postgresql_15(self):\n        return self.connection.pg_version >= 150000\n\n    @cached_property\n    def is_postgresql_16(self):\n        return self.connection.pg_version >= 160000\n\n    @cached_property\n    def is_postgresql_17(self):\n        return self.connection.pg_version >= 170000\n\n    supports_unlimited_charfield = True\n    supports_nulls_distinct_unique_constraints = property(\n        operator.attrgetter(\"is_postgresql_15\")\n    )"}],"ground_truth":null,"score":null},
{"question":"What is the purpose of the `<Module>` module in the context of `Encapsulate backend-specific introspection utilities`?","answer":"","relative_code_list":[{"start_line":14,"end_line":212,"belongs_to":{"file_name":"introspection.py","upper_path":"../django/django/db/backends/base","module":"base","define_class":["BaseDatabaseIntrospection"],"imports":["collections.namedtuple","django.apps.apps","django.db.router"]},"relative_function":[],"code":"class BaseDatabaseIntrospection:\n    \"\"\"Encapsulate backend-specific introspection utilities.\"\"\"\n\n    data_types_reverse = {}\n\n    def __init__(self, connection):\n        self.connection = connection\n\n    def get_field_type(self, data_type, description):\n        \"\"\"\n        Hook for a database backend to use the cursor description to\n        match a Django field type to a database column.\n\n        For Oracle, the column data_type on its own is insufficient to\n        distinguish between a FloatField and IntegerField, for example.\n        \"\"\"\n        return self.data_types_reverse[data_type]\n\n    def identifier_converter(self, name):\n        \"\"\"\n        Apply a conversion to the identifier for the purposes of comparison.\n\n        The default identifier converter is for case sensitive comparison.\n        \"\"\"\n        return name\n\n    def table_names(self, cursor=None, include_views=False):\n        \"\"\"\n        Return a list of names of all tables that exist in the database.\n        Sort the returned table list by Python's default sorting. Do NOT use\n        the database's ORDER BY here to avoid subtle differences in sorting\n        order between databases.\n        \"\"\"\n\n        def get_names(cursor):\n            return sorted(\n                ti.name\n                for ti in self.get_table_list(cursor)\n                if include_views or ti.type == \"t\"\n            )\n\n        if cursor is None:\n            with self.connection.cursor() as cursor:\n                return get_names(cursor)\n        return get_names(cursor)\n\n    def get_table_list(self, cursor):\n        \"\"\"\n        Return an unsorted list of TableInfo named tuples of all tables and\n        views that exist in the database.\n        \"\"\"\n        raise NotImplementedError(\n            \"subclasses of BaseDatabaseIntrospection may require a get_table_list() \"\n            \"method\"\n        )\n\n    def get_table_description(self, cursor, table_name):\n        \"\"\"\n        Return a description of the table with the DB-API cursor.description\n        interface.\n        \"\"\"\n        raise NotImplementedError(\n            \"subclasses of BaseDatabaseIntrospection may require a \"\n            \"get_table_description() method.\"\n        )\n\n    def get_migratable_models(self):\n        from django.apps import apps\n        from django.db import router\n\n        return (\n            model\n            for app_config in apps.get_app_configs()\n            for model in router.get_migratable_models(app_config, self.connection.alias)\n            if model._meta.can_migrate(self.connection)\n        )\n\n    def django_table_names(self, only_existing=False, include_views=True):\n        \"\"\"\n        Return a list of all table names that have associated Django models and\n        are in INSTALLED_APPS.\n\n        If only_existing is True, include only the tables in the database.\n        \"\"\"\n        tables = set()\n        for model in self.get_migratable_models():\n            if not model._meta.managed:\n                continue\n            tables.add(model._meta.db_table)\n            tables.update(\n                f.m2m_db_table()\n                for f in model._meta.local_many_to_many\n                if f.remote_field.through._meta.managed\n            )\n        tables = list(tables)\n        if only_existing:\n            existing_tables = set(self.table_names(include_views=include_views))\n            tables = [\n                t for t in tables if self.identifier_converter(t) in existing_tables\n            ]\n        return tables\n\n    def installed_models(self, tables):\n        \"\"\"\n        Return a set of all models represented by the provided list of table\n        names.\n        \"\"\"\n        tables = set(map(self.identifier_converter, tables))\n        return {\n            m\n            for m in self.get_migratable_models()\n            if self.identifier_converter(m._meta.db_table) in tables\n        }\n\n    def sequence_list(self):\n        \"\"\"\n        Return a list of information about all DB sequences for all models in\n        all apps.\n        \"\"\"\n        sequence_list = []\n        with self.connection.cursor() as cursor:\n            for model in self.get_migratable_models():\n                if not model._meta.managed:\n                    continue\n                if model._meta.swapped:\n                    continue\n                sequence_list.extend(\n                    self.get_sequences(\n                        cursor, model._meta.db_table, model._meta.local_fields\n                    )\n                )\n                for f in model._meta.local_many_to_many:\n                    # If this is an m2m using an intermediate table,\n                    # we don't need to reset the sequence.\n                    if f.remote_field.through._meta.auto_created:\n                        sequence = self.get_sequences(cursor, f.m2m_db_table())\n                        sequence_list.extend(\n                            sequence or [{\"table\": f.m2m_db_table(), \"column\": None}]\n                        )\n        return sequence_list\n\n    def get_sequences(self, cursor, table_name, table_fields=()):\n        \"\"\"\n        Return a list of introspected sequences for table_name. Each sequence\n        is a dict: {'table': <table_name>, 'column': <column_name>}. An optional\n        'name' key can be added if the backend supports named sequences.\n        \"\"\"\n        raise NotImplementedError(\n            \"subclasses of BaseDatabaseIntrospection may require a get_sequences() \"\n            \"method\"\n        )\n\n    def get_relations(self, cursor, table_name):\n        \"\"\"\n        Return a dictionary of {field_name: (field_name_other_table, other_table)}\n        representing all foreign keys in the given table.\n        \"\"\"\n        raise NotImplementedError(\n            \"subclasses of BaseDatabaseIntrospection may require a \"\n            \"get_relations() method.\"\n        )\n\n    def get_primary_key_column(self, cursor, table_name):\n        \"\"\"\n        Return the name of the primary key column for the given table.\n        \"\"\"\n        columns = self.get_primary_key_columns(cursor, table_name)\n        return columns[0] if columns else None\n\n    def get_primary_key_columns(self, cursor, table_name):\n        \"\"\"Return a list of primary key columns for the given table.\"\"\"\n        for constraint in self.get_constraints(cursor, table_name).values():\n            if constraint[\"primary_key\"]:\n                return constraint[\"columns\"]\n        return None\n\n    def get_constraints(self, cursor, table_name):\n        \"\"\"\n        Retrieve any constraints or keys (unique, pk, fk, check, index)\n        across one or more columns.\n\n        Return a dict mapping constraint names to their attributes,\n        where attributes is a dict with keys:\n         * columns: List of columns this covers\n         * primary_key: True if primary key, False otherwise\n         * unique: True if this is a unique constraint, False otherwise\n         * foreign_key: (table, column) of target, or None\n         * check: True if check constraint, False otherwise\n         * index: True if index, False otherwise.\n         * orders: The order (ASC/DESC) defined for the columns of indexes\n         * type: The type of the index (btree, hash, etc.)\n\n        Some backends may return special constraint names that don't exist\n        if they don't name constraints of a certain type (e.g. SQLite)\n        \"\"\"\n        raise NotImplementedError(\n            \"subclasses of BaseDatabaseIntrospection may require a get_constraints() \"\n            \"method\"\n        )"}],"ground_truth":null,"score":null},
{"question":"Which API or function is responsible for `Retrieve any constraints or keys (unique, pk, fk, check, index)\nacross one or more columns`, and what parameters does it accept?","answer":"","relative_code_list":[{"start_line":190,"end_line":212,"belongs_to":{"file_name":"introspection.py","upper_path":"../django/django/db/backends/base","module":"base","define_class":["BaseDatabaseIntrospection"],"imports":["collections.namedtuple","django.apps.apps","django.db.router"]},"relative_function":[],"code":"def get_constraints(self, cursor, table_name):\n        \"\"\"\n        Retrieve any constraints or keys (unique, pk, fk, check, index)\n        across one or more columns.\n\n        Return a dict mapping constraint names to their attributes,\n        where attributes is a dict with keys:\n         * columns: List of columns this covers\n         * primary_key: True if primary key, False otherwise\n         * unique: True if this is a unique constraint, False otherwise\n         * foreign_key: (table, column) of target, or None\n         * check: True if check constraint, False otherwise\n         * index: True if index, False otherwise.\n         * orders: The order (ASC/DESC) defined for the columns of indexes\n         * type: The type of the index (btree, hash, etc.)\n\n        Some backends may return special constraint names that don't exist\n        if they don't name constraints of a certain type (e.g. SQLite)\n        \"\"\"\n        raise NotImplementedError(\n            \"subclasses of BaseDatabaseIntrospection may require a get_constraints() \"\n            \"method\"\n        )"},{"start_line":14,"end_line":212,"belongs_to":{"file_name":"introspection.py","upper_path":"../django/django/db/backends/base","module":"base","define_class":["BaseDatabaseIntrospection"],"imports":["collections.namedtuple","django.apps.apps","django.db.router"]},"relative_function":[],"code":"class BaseDatabaseIntrospection:\n    \"\"\"Encapsulate backend-specific introspection utilities.\"\"\"\n\n    data_types_reverse = {}\n\n    def __init__(self, connection):\n        self.connection = connection\n\n    def get_field_type(self, data_type, description):\n        \"\"\"\n        Hook for a database backend to use the cursor description to\n        match a Django field type to a database column.\n\n        For Oracle, the column data_type on its own is insufficient to\n        distinguish between a FloatField and IntegerField, for example.\n        \"\"\"\n        return self.data_types_reverse[data_type]\n\n    def identifier_converter(self, name):\n        \"\"\"\n        Apply a conversion to the identifier for the purposes of comparison.\n\n        The default identifier converter is for case sensitive comparison.\n        \"\"\"\n        return name\n\n    def table_names(self, cursor=None, include_views=False):\n        \"\"\"\n        Return a list of names of all tables that exist in the database.\n        Sort the returned table list by Python's default sorting. Do NOT use\n        the database's ORDER BY here to avoid subtle differences in sorting\n        order between databases.\n        \"\"\"\n\n        def get_names(cursor):\n            return sorted(\n                ti.name\n                for ti in self.get_table_list(cursor)\n                if include_views or ti.type == \"t\"\n            )\n\n        if cursor is None:\n            with self.connection.cursor() as cursor:\n                return get_names(cursor)\n        return get_names(cursor)\n\n    def get_table_list(self, cursor):\n        \"\"\"\n        Return an unsorted list of TableInfo named tuples of all tables and\n        views that exist in the database.\n        \"\"\"\n        raise NotImplementedError(\n            \"subclasses of BaseDatabaseIntrospection may require a get_table_list() \"\n            \"method\"\n        )\n\n    def get_table_description(self, cursor, table_name):\n        \"\"\"\n        Return a description of the table with the DB-API cursor.description\n        interface.\n        \"\"\"\n        raise NotImplementedError(\n            \"subclasses of BaseDatabaseIntrospection may require a \"\n            \"get_table_description() method.\"\n        )\n\n    def get_migratable_models(self):\n        from django.apps import apps\n        from django.db import router\n\n        return (\n            model\n            for app_config in apps.get_app_configs()\n            for model in router.get_migratable_models(app_config, self.connection.alias)\n            if model._meta.can_migrate(self.connection)\n        )\n\n    def django_table_names(self, only_existing=False, include_views=True):\n        \"\"\"\n        Return a list of all table names that have associated Django models and\n        are in INSTALLED_APPS.\n\n        If only_existing is True, include only the tables in the database.\n        \"\"\"\n        tables = set()\n        for model in self.get_migratable_models():\n            if not model._meta.managed:\n                continue\n            tables.add(model._meta.db_table)\n            tables.update(\n                f.m2m_db_table()\n                for f in model._meta.local_many_to_many\n                if f.remote_field.through._meta.managed\n            )\n        tables = list(tables)\n        if only_existing:\n            existing_tables = set(self.table_names(include_views=include_views))\n            tables = [\n                t for t in tables if self.identifier_converter(t) in existing_tables\n            ]\n        return tables\n\n    def installed_models(self, tables):\n        \"\"\"\n        Return a set of all models represented by the provided list of table\n        names.\n        \"\"\"\n        tables = set(map(self.identifier_converter, tables))\n        return {\n            m\n            for m in self.get_migratable_models()\n            if self.identifier_converter(m._meta.db_table) in tables\n        }\n\n    def sequence_list(self):\n        \"\"\"\n        Return a list of information about all DB sequences for all models in\n        all apps.\n        \"\"\"\n        sequence_list = []\n        with self.connection.cursor() as cursor:\n            for model in self.get_migratable_models():\n                if not model._meta.managed:\n                    continue\n                if model._meta.swapped:\n                    continue\n                sequence_list.extend(\n                    self.get_sequences(\n                        cursor, model._meta.db_table, model._meta.local_fields\n                    )\n                )\n                for f in model._meta.local_many_to_many:\n                    # If this is an m2m using an intermediate table,\n                    # we don't need to reset the sequence.\n                    if f.remote_field.through._meta.auto_created:\n                        sequence = self.get_sequences(cursor, f.m2m_db_table())\n                        sequence_list.extend(\n                            sequence or [{\"table\": f.m2m_db_table(), \"column\": None}]\n                        )\n        return sequence_list\n\n    def get_sequences(self, cursor, table_name, table_fields=()):\n        \"\"\"\n        Return a list of introspected sequences for table_name. Each sequence\n        is a dict: {'table': <table_name>, 'column': <column_name>}. An optional\n        'name' key can be added if the backend supports named sequences.\n        \"\"\"\n        raise NotImplementedError(\n            \"subclasses of BaseDatabaseIntrospection may require a get_sequences() \"\n            \"method\"\n        )\n\n    def get_relations(self, cursor, table_name):\n        \"\"\"\n        Return a dictionary of {field_name: (field_name_other_table, other_table)}\n        representing all foreign keys in the given table.\n        \"\"\"\n        raise NotImplementedError(\n            \"subclasses of BaseDatabaseIntrospection may require a \"\n            \"get_relations() method.\"\n        )\n\n    def get_primary_key_column(self, cursor, table_name):\n        \"\"\"\n        Return the name of the primary key column for the given table.\n        \"\"\"\n        columns = self.get_primary_key_columns(cursor, table_name)\n        return columns[0] if columns else None\n\n    def get_primary_key_columns(self, cursor, table_name):\n        \"\"\"Return a list of primary key columns for the given table.\"\"\"\n        for constraint in self.get_constraints(cursor, table_name).values():\n            if constraint[\"primary_key\"]:\n                return constraint[\"columns\"]\n        return None\n\n    def get_constraints(self, cursor, table_name):\n        \"\"\"\n        Retrieve any constraints or keys (unique, pk, fk, check, index)\n        across one or more columns.\n\n        Return a dict mapping constraint names to their attributes,\n        where attributes is a dict with keys:\n         * columns: List of columns this covers\n         * primary_key: True if primary key, False otherwise\n         * unique: True if this is a unique constraint, False otherwise\n         * foreign_key: (table, column) of target, or None\n         * check: True if check constraint, False otherwise\n         * index: True if index, False otherwise.\n         * orders: The order (ASC/DESC) defined for the columns of indexes\n         * type: The type of the index (btree, hash, etc.)\n\n        Some backends may return special constraint names that don't exist\n        if they don't name constraints of a certain type (e.g. SQLite)\n        \"\"\"\n        raise NotImplementedError(\n            \"subclasses of BaseDatabaseIntrospection may require a get_constraints() \"\n            \"method\"\n        )"}],"ground_truth":null,"score":null},
{"question":"What are the expected parameters and return values for the `can_return_columns_from_insert` method in the context of `DatabaseFeatures`?","answer":"","relative_code_list":[{"start_line":9,"end_line":171,"belongs_to":{"file_name":"features.py","upper_path":"../django/django/db/backends/postgresql","module":"postgresql","define_class":["DatabaseFeatures"],"imports":["operator","django.db.DataError","django.db.InterfaceError","django.db.backends.base.features.BaseDatabaseFeatures","django.db.backends.postgresql.psycopg_any.is_psycopg3","django.utils.functional.cached_property"]},"relative_function":[],"code":"class DatabaseFeatures(BaseDatabaseFeatures):\n    minimum_database_version = (14,)\n    allows_group_by_selected_pks = True\n    can_return_columns_from_insert = True\n    can_return_rows_from_bulk_insert = True\n    has_real_datatype = True\n    has_native_uuid_field = True\n    has_native_duration_field = True\n    has_native_json_field = True\n    can_defer_constraint_checks = True\n    has_select_for_update = True\n    has_select_for_update_nowait = True\n    has_select_for_update_of = True\n    has_select_for_update_skip_locked = True\n    has_select_for_no_key_update = True\n    can_release_savepoints = True\n    supports_comments = True\n    supports_tablespaces = True\n    supports_transactions = True\n    can_introspect_materialized_views = True\n    can_distinct_on_fields = True\n    can_rollback_ddl = True\n    schema_editor_uses_clientside_param_binding = True\n    supports_combined_alters = True\n    nulls_order_largest = True\n    closed_cursor_error_class = InterfaceError\n    greatest_least_ignores_nulls = True\n    can_clone_databases = True\n    supports_temporal_subtraction = True\n    supports_slicing_ordering_in_compound = True\n    create_test_procedure_without_params_sql = \"\"\"\n        CREATE FUNCTION test_procedure () RETURNS void AS $$\n        DECLARE\n            V_I INTEGER;\n        BEGIN\n            V_I := 1;\n        END;\n    $$ LANGUAGE plpgsql;\"\"\"\n    create_test_procedure_with_int_param_sql = \"\"\"\n        CREATE FUNCTION test_procedure (P_I INTEGER) RETURNS void AS $$\n        DECLARE\n            V_I INTEGER;\n        BEGIN\n            V_I := P_I;\n        END;\n    $$ LANGUAGE plpgsql;\"\"\"\n    create_test_table_with_composite_primary_key = \"\"\"\n        CREATE TABLE test_table_composite_pk (\n            column_1 INTEGER NOT NULL,\n            column_2 INTEGER NOT NULL,\n            PRIMARY KEY(column_1, column_2)\n        )\n    \"\"\"\n    requires_casted_case_in_updates = True\n    supports_over_clause = True\n    supports_frame_exclusion = True\n    only_supports_unbounded_with_preceding_and_following = True\n    supports_aggregate_filter_clause = True\n    supports_aggregate_order_by_clause = True\n    supported_explain_formats = {\"JSON\", \"TEXT\", \"XML\", \"YAML\"}\n    supports_deferrable_unique_constraints = True\n    has_json_operators = True\n    json_key_contains_list_matching_requires_list = True\n    supports_update_conflicts = True\n    supports_update_conflicts_with_target = True\n    supports_covering_indexes = True\n    supports_stored_generated_columns = True\n    supports_virtual_generated_columns = False\n    can_rename_index = True\n    test_collations = {\n        \"deterministic\": \"C\",\n        \"non_default\": \"sv-x-icu\",\n        \"swedish_ci\": \"sv-x-icu\",\n        \"virtual\": \"sv-x-icu\",\n    }\n    test_now_utc_template = \"STATEMENT_TIMESTAMP() AT TIME ZONE 'UTC'\"\n    insert_test_table_with_defaults = \"INSERT INTO {} DEFAULT VALUES\"\n\n    @cached_property\n    def django_test_skips(self):\n        skips = {\n            \"opclasses are PostgreSQL only.\": {\n                \"indexes.tests.SchemaIndexesNotPostgreSQLTests.\"\n                \"test_create_index_ignores_opclasses\",\n            },\n            \"PostgreSQL requires casting to text.\": {\n                \"lookup.tests.LookupTests.test_textfield_exact_null\",\n            },\n        }\n        if self.connection.settings_dict[\"OPTIONS\"].get(\"pool\"):\n            skips.update(\n                {\n                    \"Pool does implicit health checks\": {\n                        \"backends.base.test_base.ConnectionHealthChecksTests.\"\n                        \"test_health_checks_enabled\",\n                        \"backends.base.test_base.ConnectionHealthChecksTests.\"\n                        \"test_set_autocommit_health_checks_enabled\",\n                    },\n                }\n            )\n        if self.uses_server_side_binding:\n            skips.update(\n                {\n                    \"The actual query cannot be determined for server side bindings\": {\n                        \"backends.base.test_base.ExecuteWrapperTests.\"\n                        \"test_wrapper_debug\",\n                    }\n                },\n            )\n        return skips\n\n    @cached_property\n    def django_test_expected_failures(self):\n        expected_failures = set()\n        if self.uses_server_side_binding:\n            expected_failures.update(\n                {\n                    # Parameters passed to expressions in SELECT and GROUP BY\n                    # clauses are not recognized as the same values when using\n                    # server-side binding cursors (#34255).\n                    \"aggregation.tests.AggregateTestCase.\"\n                    \"test_group_by_nested_expression_with_params\",\n                }\n            )\n        return expected_failures\n\n    @cached_property\n    def uses_server_side_binding(self):\n        options = self.connection.settings_dict[\"OPTIONS\"]\n        return is_psycopg3 and options.get(\"server_side_binding\") is True\n\n    @cached_property\n    def prohibits_null_characters_in_text_exception(self):\n        if is_psycopg3:\n            return DataError, \"PostgreSQL text fields cannot contain NUL (0x00) bytes\"\n        else:\n            return ValueError, \"A string literal cannot contain NUL (0x00) characters.\"\n\n    @cached_property\n    def introspected_field_types(self):\n        return {\n            **super().introspected_field_types,\n            \"PositiveBigIntegerField\": \"BigIntegerField\",\n            \"PositiveIntegerField\": \"IntegerField\",\n            \"PositiveSmallIntegerField\": \"SmallIntegerField\",\n        }\n\n    @cached_property\n    def is_postgresql_15(self):\n        return self.connection.pg_version >= 150000\n\n    @cached_property\n    def is_postgresql_16(self):\n        return self.connection.pg_version >= 160000\n\n    @cached_property\n    def is_postgresql_17(self):\n        return self.connection.pg_version >= 170000\n\n    supports_unlimited_charfield = True\n    supports_nulls_distinct_unique_constraints = property(\n        operator.attrgetter(\"is_postgresql_15\")\n    )"},{"start_line":164,"end_line":165,"belongs_to":{"file_name":"features.py","upper_path":"../django/django/db/backends/sqlite3","module":"sqlite3","define_class":["DatabaseFeatures"],"imports":["operator","django.db.transaction","django.db.backends.base.features.BaseDatabaseFeatures","django.db.utils.OperationalError","django.utils.functional.cached_property","base.Database"]},"relative_function":[],"code":"def can_return_columns_from_insert(self):\n        return Database.sqlite_version_info >= (3, 35)"}],"ground_truth":null,"score":null},
{"question":"What is the purpose of the `data_type_check_constraints` attribute in the `DatabaseWrapper`, and how is it typically used?","answer":"","relative_code_list":[{"start_line":89,"end_line":547,"belongs_to":{"file_name":"base.py","upper_path":"../django/django/db/backends/postgresql","module":"postgresql","define_class":["DatabaseWrapper","CursorMixin","ServerBindingCursor","Cursor","ServerSideCursor","CursorDebugWrapper","CursorDebugWrapper"],"imports":["asyncio","threading","warnings","contextlib.contextmanager","django.conf.settings","django.core.exceptions.ImproperlyConfigured","django.db.DatabaseError","django.db.connections","django.db.backends.base.base.NO_DB_ALIAS","django.db.backends.base.base.BaseDatabaseWrapper","django.db.backends.utils.CursorDebugWrapper","django.utils.asyncio.async_unsafe","django.utils.functional.cached_property","django.utils.safestring.SafeString","django.utils.version.get_version_tuple","psycopg_any.IsolationLevel","psycopg_any.is_psycopg3","client.DatabaseClient","creation.DatabaseCreation","features.DatabaseFeatures","introspection.DatabaseIntrospection","operations.DatabaseOperations","schema.DatabaseSchemaEditor","psycopg.adapters","psycopg.sql","psycopg.pq.Format","psycopg_any.get_adapters_template","psycopg_any.register_tzloader","psycopg2.extensions","psycopg2.extras","psycopg","psycopg2","psycopg_pool.ConnectionPool"]},"relative_function":[],"code":"class DatabaseWrapper(BaseDatabaseWrapper):\n    vendor = \"postgresql\"\n    display_name = \"PostgreSQL\"\n    # This dictionary maps Field objects to their associated PostgreSQL column\n    # types, as strings. Column-type strings can contain format strings; they'll\n    # be interpolated against the values of Field.__dict__ before being output.\n    # If a column type is set to None, it won't be included in the output.\n    data_types = {\n        \"AutoField\": \"integer\",\n        \"BigAutoField\": \"bigint\",\n        \"BinaryField\": \"bytea\",\n        \"BooleanField\": \"boolean\",\n        \"CharField\": _get_varchar_column,\n        \"DateField\": \"date\",\n        \"DateTimeField\": \"timestamp with time zone\",\n        \"DecimalField\": \"numeric(%(max_digits)s, %(decimal_places)s)\",\n        \"DurationField\": \"interval\",\n        \"FileField\": \"varchar(%(max_length)s)\",\n        \"FilePathField\": \"varchar(%(max_length)s)\",\n        \"FloatField\": \"double precision\",\n        \"IntegerField\": \"integer\",\n        \"BigIntegerField\": \"bigint\",\n        \"IPAddressField\": \"inet\",\n        \"GenericIPAddressField\": \"inet\",\n        \"JSONField\": \"jsonb\",\n        \"OneToOneField\": \"integer\",\n        \"PositiveBigIntegerField\": \"bigint\",\n        \"PositiveIntegerField\": \"integer\",\n        \"PositiveSmallIntegerField\": \"smallint\",\n        \"SlugField\": \"varchar(%(max_length)s)\",\n        \"SmallAutoField\": \"smallint\",\n        \"SmallIntegerField\": \"smallint\",\n        \"TextField\": \"text\",\n        \"TimeField\": \"time\",\n        \"UUIDField\": \"uuid\",\n    }\n    data_type_check_constraints = {\n        \"PositiveBigIntegerField\": '\"%(column)s\" >= 0',\n        \"PositiveIntegerField\": '\"%(column)s\" >= 0',\n        \"PositiveSmallIntegerField\": '\"%(column)s\" >= 0',\n    }\n    data_types_suffix = {\n        \"AutoField\": \"GENERATED BY DEFAULT AS IDENTITY\",\n        \"BigAutoField\": \"GENERATED BY DEFAULT AS IDENTITY\",\n        \"SmallAutoField\": \"GENERATED BY DEFAULT AS IDENTITY\",\n    }\n    operators = {\n        \"exact\": \"= %s\",\n        \"iexact\": \"= UPPER(%s)\",\n        \"contains\": \"LIKE %s\",\n        \"icontains\": \"LIKE UPPER(%s)\",\n        \"regex\": \"~ %s\",\n        \"iregex\": \"~* %s\",\n        \"gt\": \"> %s\",\n        \"gte\": \">= %s\",\n        \"lt\": \"< %s\",\n        \"lte\": \"<= %s\",\n        \"startswith\": \"LIKE %s\",\n        \"endswith\": \"LIKE %s\",\n        \"istartswith\": \"LIKE UPPER(%s)\",\n        \"iendswith\": \"LIKE UPPER(%s)\",\n    }\n\n    # The patterns below are used to generate SQL pattern lookup clauses when\n    # the right-hand side of the lookup isn't a raw string (it might be an expression\n    # or the result of a bilateral transformation).\n    # In those cases, special characters for LIKE operators (e.g. \\, *, _) should be\n    # escaped on database side.\n    #\n    # Note: we use str.format() here for readability as '%' is used as a wildcard for\n    # the LIKE operator.\n    pattern_esc = (\n        r\"REPLACE(REPLACE(REPLACE({}, E'\\\\', E'\\\\\\\\'), E'%%', E'\\\\%%'), E'_', E'\\\\_')\"\n    )\n    pattern_ops = {\n        \"contains\": \"LIKE '%%' || {} || '%%'\",\n        \"icontains\": \"LIKE '%%' || UPPER({}) || '%%'\",\n        \"startswith\": \"LIKE {} || '%%'\",\n        \"istartswith\": \"LIKE UPPER({}) || '%%'\",\n        \"endswith\": \"LIKE '%%' || {}\",\n        \"iendswith\": \"LIKE '%%' || UPPER({})\",\n    }\n\n    Database = Database\n    SchemaEditorClass = DatabaseSchemaEditor\n    # Classes instantiated in __init__().\n    client_class = DatabaseClient\n    creation_class = DatabaseCreation\n    features_class = DatabaseFeatures\n    introspection_class = DatabaseIntrospection\n    ops_class = DatabaseOperations\n    # PostgreSQL backend-specific attributes.\n    _named_cursor_idx = 0\n    _connection_pools = {}\n\n    @property\n    def pool(self):\n        pool_options = self.settings_dict[\"OPTIONS\"].get(\"pool\")\n        if self.alias == NO_DB_ALIAS or not pool_options:\n            return None\n\n        if self.alias not in self._connection_pools:\n            if self.settings_dict.get(\"CONN_MAX_AGE\", 0) != 0:\n                raise ImproperlyConfigured(\n                    \"Pooling doesn't support persistent connections.\"\n                )\n            # Set the default options.\n            if pool_options is True:\n                pool_options = {}\n\n            try:\n                from psycopg_pool import ConnectionPool\n            except ImportError as err:\n                raise ImproperlyConfigured(\n                    \"Error loading psycopg_pool module.\\nDid you install psycopg[pool]?\"\n                ) from err\n\n            connect_kwargs = self.get_connection_params()\n            # Ensure we run in autocommit, Django properly sets it later on.\n            connect_kwargs[\"autocommit\"] = True\n            enable_checks = self.settings_dict[\"CONN_HEALTH_CHECKS\"]\n            pool = ConnectionPool(\n                kwargs=connect_kwargs,\n                open=False,  # Do not open the pool during startup.\n                configure=self._configure_connection,\n                check=ConnectionPool.check_connection if enable_checks else None,\n                **pool_options,\n            )\n            # setdefault() ensures that multiple threads don't set this in\n            # parallel. Since we do not open the pool during it's init above,\n            # this means that at worst during startup multiple threads generate\n            # pool objects and the first to set it wins.\n            self._connection_pools.setdefault(self.alias, pool)\n\n        return self._connection_pools[self.alias]\n\n    def close_pool(self):\n        if self.pool:\n            self.pool.close()\n            del self._connection_pools[self.alias]\n\n    def get_database_version(self):\n        \"\"\"\n        Return a tuple of the database's version.\n        E.g. for pg_version 120004, return (12, 4).\n        \"\"\"\n        return divmod(self.pg_version, 10000)\n\n    def get_connection_params(self):\n        settings_dict = self.settings_dict\n        # None may be used to connect to the default 'postgres' db\n        if settings_dict[\"NAME\"] == \"\" and not settings_dict[\"OPTIONS\"].get(\"service\"):\n            raise ImproperlyConfigured(\n                \"settings.DATABASES is improperly configured. \"\n                \"Please supply the NAME or OPTIONS['service'] value.\"\n            )\n        if len(settings_dict[\"NAME\"] or \"\") > self.ops.max_name_length():\n            raise ImproperlyConfigured(\n                \"The database name '%s' (%d characters) is longer than \"\n                \"PostgreSQL's limit of %d characters. Supply a shorter NAME \"\n                \"in settings.DATABASES.\"\n                % (\n                    settings_dict[\"NAME\"],\n                    len(settings_dict[\"NAME\"]),\n                    self.ops.max_name_length(),\n                )\n            )\n        if settings_dict[\"NAME\"]:\n            conn_params = {\n                \"dbname\": settings_dict[\"NAME\"],\n                **settings_dict[\"OPTIONS\"],\n            }\n        elif settings_dict[\"NAME\"] is None:\n            # Connect to the default 'postgres' db.\n            settings_dict[\"OPTIONS\"].pop(\"service\", None)\n            conn_params = {\"dbname\": \"postgres\", **settings_dict[\"OPTIONS\"]}\n        else:\n            conn_params = {**settings_dict[\"OPTIONS\"]}\n        conn_params[\"client_encoding\"] = \"UTF8\"\n\n        conn_params.pop(\"assume_role\", None)\n        conn_params.pop(\"isolation_level\", None)\n\n        pool_options = conn_params.pop(\"pool\", None)\n        if pool_options and not is_psycopg3:\n            raise ImproperlyConfigured(\"Database pooling requires psycopg >= 3\")\n\n        server_side_binding = conn_params.pop(\"server_side_binding\", None)\n        conn_params.setdefault(\n            \"cursor_factory\",\n            (\n                ServerBindingCursor\n                if is_psycopg3 and server_side_binding is True\n                else Cursor\n            ),\n        )\n        if settings_dict[\"USER\"]:\n            conn_params[\"user\"] = settings_dict[\"USER\"]\n        if settings_dict[\"PASSWORD\"]:\n            conn_params[\"password\"] = settings_dict[\"PASSWORD\"]\n        if settings_dict[\"HOST\"]:\n            conn_params[\"host\"] = settings_dict[\"HOST\"]\n        if settings_dict[\"PORT\"]:\n            conn_params[\"port\"] = settings_dict[\"PORT\"]\n        if is_psycopg3:\n            conn_params[\"context\"] = get_adapters_template(\n                settings.USE_TZ, self.timezone\n            )\n            # Disable prepared statements by default to keep connection poolers\n            # working. Can be reenabled via OPTIONS in the settings dict.\n            conn_params[\"prepare_threshold\"] = conn_params.pop(\n                \"prepare_threshold\", None\n            )\n        return conn_params\n\n    @async_unsafe\n    def get_new_connection(self, conn_params):\n        # self.isolation_level must be set:\n        # - after connecting to the database in order to obtain the database's\n        #   default when no value is explicitly specified in options.\n        # - before calling _set_autocommit() because if autocommit is on, that\n        #   will set connection.isolation_level to ISOLATION_LEVEL_AUTOCOMMIT.\n        options = self.settings_dict[\"OPTIONS\"]\n        set_isolation_level = False\n        try:\n            isolation_level_value = options[\"isolation_level\"]\n        except KeyError:\n            self.isolation_level = IsolationLevel.READ_COMMITTED\n        else:\n            # Set the isolation level to the value from OPTIONS.\n            try:\n                self.isolation_level = IsolationLevel(isolation_level_value)\n                set_isolation_level = True\n            except ValueError:\n                raise ImproperlyConfigured(\n                    f\"Invalid transaction isolation level {isolation_level_value} \"\n                    f\"specified. Use one of the psycopg.IsolationLevel values.\"\n                )\n        if self.pool:\n            # If nothing else has opened the pool, open it now.\n            self.pool.open()\n            connection = self.pool.getconn()\n        else:\n            connection = self.Database.connect(**conn_params)\n        if set_isolation_level:\n            connection.isolation_level = self.isolation_level\n        if not is_psycopg3:\n            # Register dummy loads() to avoid a round trip from psycopg2's\n            # decode to json.dumps() to json.loads(), when using a custom\n            # decoder in JSONField.\n            psycopg2.extras.register_default_jsonb(\n                conn_or_curs=connection, loads=lambda x: x\n            )\n        return connection\n\n    def ensure_timezone(self):\n        # Close the pool so new connections pick up the correct timezone.\n        self.close_pool()\n        if self.connection is None:\n            return False\n        return self._configure_timezone(self.connection)\n\n    def _configure_timezone(self, connection):\n        conn_timezone_name = connection.info.parameter_status(\"TimeZone\")\n        timezone_name = self.timezone_name\n        if timezone_name and conn_timezone_name != timezone_name:\n            with connection.cursor() as cursor:\n                cursor.execute(self.ops.set_time_zone_sql(), [timezone_name])\n            return True\n        return False\n\n    def _configure_role(self, connection):\n        if new_role := self.settings_dict[\"OPTIONS\"].get(\"assume_role\"):\n            with connection.cursor() as cursor:\n                sql = self.ops.compose_sql(\"SET ROLE %s\", [new_role])\n                cursor.execute(sql)\n            return True\n        return False\n\n    def _configure_connection(self, connection):\n        # This function is called from init_connection_state and from the\n        # psycopg pool itself after a connection is opened.\n\n        # Commit after setting the time zone.\n        commit_tz = self._configure_timezone(connection)\n        # Set the role on the connection. This is useful if the credential used\n        # to login is not the same as the role that owns database resources. As\n        # can be the case when using temporary or ephemeral credentials.\n        commit_role = self._configure_role(connection)\n\n        return commit_role or commit_tz\n\n    def _close(self):\n        if self.connection is not None:\n            # `wrap_database_errors` only works for `putconn` as long as there\n            # is no `reset` function set in the pool because it is deferred\n            # into a thread and not directly executed.\n            with self.wrap_database_errors:\n                if self.pool:\n                    # Ensure the correct pool is returned. This is a workaround\n                    # for tests so a pool can be changed on setting changes\n                    # (e.g. USE_TZ, TIME_ZONE).\n                    self.connection._pool.putconn(self.connection)\n                    # Connection can no longer be used.\n                    self.connection = None\n                else:\n                    return self.connection.close()\n\n    def init_connection_state(self):\n        super().init_connection_state()\n\n        if self.connection is not None and not self.pool:\n            commit = self._configure_connection(self.connection)\n\n            if commit and not self.get_autocommit():\n                self.connection.commit()\n\n    @async_unsafe\n    def create_cursor(self, name=None):\n        if name:\n            if is_psycopg3 and (\n                self.settings_dict[\"OPTIONS\"].get(\"server_side_binding\") is not True\n            ):\n                # psycopg >= 3 forces the usage of server-side bindings for\n                # named cursors so a specialized class that implements\n                # server-side cursors while performing client-side bindings\n                # must be used if `server_side_binding` is disabled (default).\n                cursor = ServerSideCursor(\n                    self.connection,\n                    name=name,\n                    scrollable=False,\n                    withhold=self.connection.autocommit,\n                )\n            else:\n                # In autocommit mode, the cursor will be used outside of a\n                # transaction, hence use a holdable cursor.\n                cursor = self.connection.cursor(\n                    name, scrollable=False, withhold=self.connection.autocommit\n                )\n        else:\n            cursor = self.connection.cursor()\n\n        if is_psycopg3:\n            # Register the cursor timezone only if the connection disagrees, to\n            # avoid copying the adapter map.\n            tzloader = self.connection.adapters.get_loader(TIMESTAMPTZ_OID, Format.TEXT)\n            if self.timezone != tzloader.timezone:\n                register_tzloader(self.timezone, cursor)\n        else:\n            cursor.tzinfo_factory = self.tzinfo_factory if settings.USE_TZ else None\n        return cursor\n\n    def tzinfo_factory(self, offset):\n        return self.timezone\n\n    @async_unsafe\n    def chunked_cursor(self):\n        self._named_cursor_idx += 1\n        # Get the current async task\n        # Note that right now this is behind @async_unsafe, so this is\n        # unreachable, but in future we'll start loosening this restriction.\n        # For now, it's here so that every use of \"threading\" is\n        # also async-compatible.\n        try:\n            current_task = asyncio.current_task()\n        except RuntimeError:\n            current_task = None\n        # Current task can be none even if the current_task call didn't error\n        if current_task:\n            task_ident = str(id(current_task))\n        else:\n            task_ident = \"sync\"\n        # Use that and the thread ident to get a unique name\n        return self._cursor(\n            name=\"_django_curs_%d_%s_%d\"\n            % (\n                # Avoid reusing name in other threads / tasks\n                threading.current_thread().ident,\n                task_ident,\n                self._named_cursor_idx,\n            )\n        )\n\n    def _set_autocommit(self, autocommit):\n        with self.wrap_database_errors:\n            self.connection.autocommit = autocommit\n\n    def check_constraints(self, table_names=None):\n        \"\"\"\n        Check constraints by setting them to immediate. Return them to deferred\n        afterward.\n        \"\"\"\n        with self.cursor() as cursor:\n            cursor.execute(\"SET CONSTRAINTS ALL IMMEDIATE\")\n            cursor.execute(\"SET CONSTRAINTS ALL DEFERRED\")\n\n    def is_usable(self):\n        if self.connection is None:\n            return False\n        try:\n            # Use a psycopg cursor directly, bypassing Django's utilities.\n            with self.connection.cursor() as cursor:\n                cursor.execute(\"SELECT 1\")\n        except Database.Error:\n            return False\n        else:\n            return True\n\n    def close_if_health_check_failed(self):\n        if self.pool:\n            # The pool only returns healthy connections.\n            return\n        return super().close_if_health_check_failed()\n\n    @contextmanager\n    def _nodb_cursor(self):\n        cursor = None\n        try:\n            with super()._nodb_cursor() as cursor:\n                yield cursor\n        except (Database.DatabaseError, WrappedDatabaseError):\n            if cursor is not None:\n                raise\n            warnings.warn(\n                \"Normally Django will use a connection to the 'postgres' database \"\n                \"to avoid running initialization queries against the production \"\n                \"database when it's not needed (for example, when running tests). \"\n                \"Django was unable to create a connection to the 'postgres' database \"\n                \"and will use the first PostgreSQL database instead.\",\n                RuntimeWarning,\n            )\n            for connection in connections.all():\n                if (\n                    connection.vendor == \"postgresql\"\n                    and connection.settings_dict[\"NAME\"] != \"postgres\"\n                ):\n                    conn = self.__class__(\n                        {\n                            **self.settings_dict,\n                            \"NAME\": connection.settings_dict[\"NAME\"],\n                        },\n                        alias=self.alias,\n                    )\n                    try:\n                        with conn.cursor() as cursor:\n                            yield cursor\n                    finally:\n                        conn.close()\n                    break\n            else:\n                raise\n\n    @cached_property\n    def pg_version(self):\n        with self.temporary_connection():\n            return self.connection.info.server_version\n\n    def make_debug_cursor(self, cursor):\n        return CursorDebugWrapper(cursor, self)"}],"ground_truth":null,"score":null},
{"question":"What is the purpose of the `has_select_for_no_key_update` attribute in `DatabaseFeatures`?","answer":"","relative_code_list":[{"start_line":9,"end_line":171,"belongs_to":{"file_name":"features.py","upper_path":"../django/django/db/backends/postgresql","module":"postgresql","define_class":["DatabaseFeatures"],"imports":["operator","django.db.DataError","django.db.InterfaceError","django.db.backends.base.features.BaseDatabaseFeatures","django.db.backends.postgresql.psycopg_any.is_psycopg3","django.utils.functional.cached_property"]},"relative_function":[],"code":"class DatabaseFeatures(BaseDatabaseFeatures):\n    minimum_database_version = (14,)\n    allows_group_by_selected_pks = True\n    can_return_columns_from_insert = True\n    can_return_rows_from_bulk_insert = True\n    has_real_datatype = True\n    has_native_uuid_field = True\n    has_native_duration_field = True\n    has_native_json_field = True\n    can_defer_constraint_checks = True\n    has_select_for_update = True\n    has_select_for_update_nowait = True\n    has_select_for_update_of = True\n    has_select_for_update_skip_locked = True\n    has_select_for_no_key_update = True\n    can_release_savepoints = True\n    supports_comments = True\n    supports_tablespaces = True\n    supports_transactions = True\n    can_introspect_materialized_views = True\n    can_distinct_on_fields = True\n    can_rollback_ddl = True\n    schema_editor_uses_clientside_param_binding = True\n    supports_combined_alters = True\n    nulls_order_largest = True\n    closed_cursor_error_class = InterfaceError\n    greatest_least_ignores_nulls = True\n    can_clone_databases = True\n    supports_temporal_subtraction = True\n    supports_slicing_ordering_in_compound = True\n    create_test_procedure_without_params_sql = \"\"\"\n        CREATE FUNCTION test_procedure () RETURNS void AS $$\n        DECLARE\n            V_I INTEGER;\n        BEGIN\n            V_I := 1;\n        END;\n    $$ LANGUAGE plpgsql;\"\"\"\n    create_test_procedure_with_int_param_sql = \"\"\"\n        CREATE FUNCTION test_procedure (P_I INTEGER) RETURNS void AS $$\n        DECLARE\n            V_I INTEGER;\n        BEGIN\n            V_I := P_I;\n        END;\n    $$ LANGUAGE plpgsql;\"\"\"\n    create_test_table_with_composite_primary_key = \"\"\"\n        CREATE TABLE test_table_composite_pk (\n            column_1 INTEGER NOT NULL,\n            column_2 INTEGER NOT NULL,\n            PRIMARY KEY(column_1, column_2)\n        )\n    \"\"\"\n    requires_casted_case_in_updates = True\n    supports_over_clause = True\n    supports_frame_exclusion = True\n    only_supports_unbounded_with_preceding_and_following = True\n    supports_aggregate_filter_clause = True\n    supports_aggregate_order_by_clause = True\n    supported_explain_formats = {\"JSON\", \"TEXT\", \"XML\", \"YAML\"}\n    supports_deferrable_unique_constraints = True\n    has_json_operators = True\n    json_key_contains_list_matching_requires_list = True\n    supports_update_conflicts = True\n    supports_update_conflicts_with_target = True\n    supports_covering_indexes = True\n    supports_stored_generated_columns = True\n    supports_virtual_generated_columns = False\n    can_rename_index = True\n    test_collations = {\n        \"deterministic\": \"C\",\n        \"non_default\": \"sv-x-icu\",\n        \"swedish_ci\": \"sv-x-icu\",\n        \"virtual\": \"sv-x-icu\",\n    }\n    test_now_utc_template = \"STATEMENT_TIMESTAMP() AT TIME ZONE 'UTC'\"\n    insert_test_table_with_defaults = \"INSERT INTO {} DEFAULT VALUES\"\n\n    @cached_property\n    def django_test_skips(self):\n        skips = {\n            \"opclasses are PostgreSQL only.\": {\n                \"indexes.tests.SchemaIndexesNotPostgreSQLTests.\"\n                \"test_create_index_ignores_opclasses\",\n            },\n            \"PostgreSQL requires casting to text.\": {\n                \"lookup.tests.LookupTests.test_textfield_exact_null\",\n            },\n        }\n        if self.connection.settings_dict[\"OPTIONS\"].get(\"pool\"):\n            skips.update(\n                {\n                    \"Pool does implicit health checks\": {\n                        \"backends.base.test_base.ConnectionHealthChecksTests.\"\n                        \"test_health_checks_enabled\",\n                        \"backends.base.test_base.ConnectionHealthChecksTests.\"\n                        \"test_set_autocommit_health_checks_enabled\",\n                    },\n                }\n            )\n        if self.uses_server_side_binding:\n            skips.update(\n                {\n                    \"The actual query cannot be determined for server side bindings\": {\n                        \"backends.base.test_base.ExecuteWrapperTests.\"\n                        \"test_wrapper_debug\",\n                    }\n                },\n            )\n        return skips\n\n    @cached_property\n    def django_test_expected_failures(self):\n        expected_failures = set()\n        if self.uses_server_side_binding:\n            expected_failures.update(\n                {\n                    # Parameters passed to expressions in SELECT and GROUP BY\n                    # clauses are not recognized as the same values when using\n                    # server-side binding cursors (#34255).\n                    \"aggregation.tests.AggregateTestCase.\"\n                    \"test_group_by_nested_expression_with_params\",\n                }\n            )\n        return expected_failures\n\n    @cached_property\n    def uses_server_side_binding(self):\n        options = self.connection.settings_dict[\"OPTIONS\"]\n        return is_psycopg3 and options.get(\"server_side_binding\") is True\n\n    @cached_property\n    def prohibits_null_characters_in_text_exception(self):\n        if is_psycopg3:\n            return DataError, \"PostgreSQL text fields cannot contain NUL (0x00) bytes\"\n        else:\n            return ValueError, \"A string literal cannot contain NUL (0x00) characters.\"\n\n    @cached_property\n    def introspected_field_types(self):\n        return {\n            **super().introspected_field_types,\n            \"PositiveBigIntegerField\": \"BigIntegerField\",\n            \"PositiveIntegerField\": \"IntegerField\",\n            \"PositiveSmallIntegerField\": \"SmallIntegerField\",\n        }\n\n    @cached_property\n    def is_postgresql_15(self):\n        return self.connection.pg_version >= 150000\n\n    @cached_property\n    def is_postgresql_16(self):\n        return self.connection.pg_version >= 160000\n\n    @cached_property\n    def is_postgresql_17(self):\n        return self.connection.pg_version >= 170000\n\n    supports_unlimited_charfield = True\n    supports_nulls_distinct_unique_constraints = property(\n        operator.attrgetter(\"is_postgresql_15\")\n    )"}],"ground_truth":null,"score":null},
{"question":"Does the `DatabaseOperations` have any dependencies or interactions with external APIs that might be affected by changes to the `quote_name` method?","answer":"","relative_code_list":[{"start_line":27,"end_line":422,"belongs_to":{"file_name":"operations.py","upper_path":"../django/django/db/backends/postgresql","module":"postgresql","define_class":["DatabaseOperations"],"imports":["json","functools.lru_cache","functools.partial","django.conf.settings","django.db.backends.base.operations.BaseDatabaseOperations","django.db.backends.postgresql.compiler.InsertUnnest","django.db.backends.postgresql.psycopg_any.Inet","django.db.backends.postgresql.psycopg_any.Jsonb","django.db.backends.postgresql.psycopg_any.errors","django.db.backends.postgresql.psycopg_any.is_psycopg3","django.db.backends.postgresql.psycopg_any.mogrify","django.db.backends.utils.split_tzname_delta","django.db.models.constants.OnConflict","django.db.models.functions.Cast","django.utils.regex_helper._lazy_re_compile","psycopg.types.numeric","django.db.models"]},"relative_function":[],"code":"class DatabaseOperations(BaseDatabaseOperations):\n    compiler_module = \"django.db.backends.postgresql.compiler\"\n    cast_char_field_without_max_length = \"varchar\"\n    explain_prefix = \"EXPLAIN\"\n    explain_options = frozenset(\n        [\n            \"ANALYZE\",\n            \"BUFFERS\",\n            \"COSTS\",\n            \"GENERIC_PLAN\",\n            \"MEMORY\",\n            \"SETTINGS\",\n            \"SERIALIZE\",\n            \"SUMMARY\",\n            \"TIMING\",\n            \"VERBOSE\",\n            \"WAL\",\n        ]\n    )\n    cast_data_types = {\n        \"AutoField\": \"integer\",\n        \"BigAutoField\": \"bigint\",\n        \"SmallAutoField\": \"smallint\",\n    }\n\n    if is_psycopg3:\n        from psycopg.types import numeric\n\n        integerfield_type_map = {\n            \"SmallIntegerField\": numeric.Int2,\n            \"IntegerField\": numeric.Int4,\n            \"BigIntegerField\": numeric.Int8,\n            \"PositiveSmallIntegerField\": numeric.Int2,\n            \"PositiveIntegerField\": numeric.Int4,\n            \"PositiveBigIntegerField\": numeric.Int8,\n        }\n\n    def unification_cast_sql(self, output_field):\n        internal_type = output_field.get_internal_type()\n        if internal_type in (\n            \"GenericIPAddressField\",\n            \"IPAddressField\",\n            \"TimeField\",\n            \"UUIDField\",\n        ):\n            # PostgreSQL will resolve a union as type 'text' if input types are\n            # 'unknown'.\n            # https://www.postgresql.org/docs/current/typeconv-union-case.html\n            # These fields cannot be implicitly cast back in the default\n            # PostgreSQL configuration so we need to explicitly cast them.\n            # We must also remove components of the type within brackets:\n            # varchar(255) -> varchar.\n            return (\n                \"CAST(%%s AS %s)\" % output_field.db_type(self.connection).split(\"(\")[0]\n            )\n        return \"%s\"\n\n    # EXTRACT format cannot be passed in parameters.\n    _extract_format_re = _lazy_re_compile(r\"[A-Z_]+\")\n\n    def date_extract_sql(self, lookup_type, sql, params):\n        # https://www.postgresql.org/docs/current/functions-datetime.html#FUNCTIONS-DATETIME-EXTRACT\n        if lookup_type == \"week_day\":\n            # For consistency across backends, we return Sunday=1, Saturday=7.\n            return f\"EXTRACT(DOW FROM {sql}) + 1\", params\n        elif lookup_type == \"iso_week_day\":\n            return f\"EXTRACT(ISODOW FROM {sql})\", params\n        elif lookup_type == \"iso_year\":\n            return f\"EXTRACT(ISOYEAR FROM {sql})\", params\n\n        lookup_type = lookup_type.upper()\n        if not self._extract_format_re.fullmatch(lookup_type):\n            raise ValueError(f\"Invalid lookup type: {lookup_type!r}\")\n        return f\"EXTRACT({lookup_type} FROM {sql})\", params\n\n    def date_trunc_sql(self, lookup_type, sql, params, tzname=None):\n        sql, params = self._convert_sql_to_tz(sql, params, tzname)\n        # https://www.postgresql.org/docs/current/functions-datetime.html#FUNCTIONS-DATETIME-TRUNC\n        return f\"DATE_TRUNC(%s, {sql})\", (lookup_type, *params)\n\n    def _prepare_tzname_delta(self, tzname):\n        tzname, sign, offset = split_tzname_delta(tzname)\n        if offset:\n            sign = \"-\" if sign == \"+\" else \"+\"\n            return f\"{tzname}{sign}{offset}\"\n        return tzname\n\n    def _convert_sql_to_tz(self, sql, params, tzname):\n        if tzname and settings.USE_TZ:\n            tzname_param = self._prepare_tzname_delta(tzname)\n            return f\"{sql} AT TIME ZONE %s\", (*params, tzname_param)\n        return sql, params\n\n    def datetime_cast_date_sql(self, sql, params, tzname):\n        sql, params = self._convert_sql_to_tz(sql, params, tzname)\n        return f\"({sql})::date\", params\n\n    def datetime_cast_time_sql(self, sql, params, tzname):\n        sql, params = self._convert_sql_to_tz(sql, params, tzname)\n        return f\"({sql})::time\", params\n\n    def datetime_extract_sql(self, lookup_type, sql, params, tzname):\n        sql, params = self._convert_sql_to_tz(sql, params, tzname)\n        if lookup_type == \"second\":\n            # Truncate fractional seconds.\n            return f\"EXTRACT(SECOND FROM DATE_TRUNC(%s, {sql}))\", (\"second\", *params)\n        return self.date_extract_sql(lookup_type, sql, params)\n\n    def datetime_trunc_sql(self, lookup_type, sql, params, tzname):\n        sql, params = self._convert_sql_to_tz(sql, params, tzname)\n        # https://www.postgresql.org/docs/current/functions-datetime.html#FUNCTIONS-DATETIME-TRUNC\n        return f\"DATE_TRUNC(%s, {sql})\", (lookup_type, *params)\n\n    def time_extract_sql(self, lookup_type, sql, params):\n        if lookup_type == \"second\":\n            # Truncate fractional seconds.\n            return f\"EXTRACT(SECOND FROM DATE_TRUNC(%s, {sql}))\", (\"second\", *params)\n        return self.date_extract_sql(lookup_type, sql, params)\n\n    def time_trunc_sql(self, lookup_type, sql, params, tzname=None):\n        sql, params = self._convert_sql_to_tz(sql, params, tzname)\n        return f\"DATE_TRUNC(%s, {sql})::time\", (lookup_type, *params)\n\n    def deferrable_sql(self):\n        return \" DEFERRABLE INITIALLY DEFERRED\"\n\n    def bulk_insert_sql(self, fields, placeholder_rows):\n        if isinstance(placeholder_rows, InsertUnnest):\n            return f\"SELECT * FROM {placeholder_rows}\"\n        return super().bulk_insert_sql(fields, placeholder_rows)\n\n    def fetch_returned_insert_rows(self, cursor):\n        \"\"\"\n        Given a cursor object that has just performed an INSERT...RETURNING\n        statement into a table, return the tuple of returned data.\n        \"\"\"\n        return cursor.fetchall()\n\n    def lookup_cast(self, lookup_type, internal_type=None):\n        lookup = \"%s\"\n        # Cast text lookups to text to allow things like filter(x__contains=4)\n        if lookup_type in (\n            \"iexact\",\n            \"contains\",\n            \"icontains\",\n            \"startswith\",\n            \"istartswith\",\n            \"endswith\",\n            \"iendswith\",\n            \"regex\",\n            \"iregex\",\n        ):\n            if internal_type in (\"IPAddressField\", \"GenericIPAddressField\"):\n                lookup = \"HOST(%s)\"\n            else:\n                lookup = \"%s::text\"\n\n        # Use UPPER(x) for case-insensitive lookups; it's faster.\n        if lookup_type in (\"iexact\", \"icontains\", \"istartswith\", \"iendswith\"):\n            lookup = \"UPPER(%s)\" % lookup\n\n        return lookup\n\n    def no_limit_value(self):\n        return None\n\n    def prepare_sql_script(self, sql):\n        return [sql]\n\n    def quote_name(self, name):\n        if name.startswith('\"') and name.endswith('\"'):\n            return name  # Quoting once is enough.\n        return '\"%s\"' % name\n\n    def compose_sql(self, sql, params):\n        return mogrify(sql, params, self.connection)\n\n    def set_time_zone_sql(self):\n        return \"SELECT set_config('TimeZone', %s, false)\"\n\n    def sql_flush(self, style, tables, *, reset_sequences=False, allow_cascade=False):\n        if not tables:\n            return []\n\n        # Perform a single SQL 'TRUNCATE x, y, z...;' statement. It allows us\n        # to truncate tables referenced by a foreign key in any other table.\n        sql_parts = [\n            style.SQL_KEYWORD(\"TRUNCATE\"),\n            \", \".join(style.SQL_FIELD(self.quote_name(table)) for table in tables),\n        ]\n        if reset_sequences:\n            sql_parts.append(style.SQL_KEYWORD(\"RESTART IDENTITY\"))\n        if allow_cascade:\n            sql_parts.append(style.SQL_KEYWORD(\"CASCADE\"))\n        return [\"%s;\" % \" \".join(sql_parts)]\n\n    def sequence_reset_by_name_sql(self, style, sequences):\n        # 'ALTER SEQUENCE sequence_name RESTART WITH 1;'... style SQL statements\n        # to reset sequence indices\n        sql = []\n        for sequence_info in sequences:\n            table_name = sequence_info[\"table\"]\n            # 'id' will be the case if it's an m2m using an autogenerated\n            # intermediate table (see BaseDatabaseIntrospection.sequence_list).\n            column_name = sequence_info[\"column\"] or \"id\"\n            sql.append(\n                \"%s setval(pg_get_serial_sequence('%s','%s'), 1, false);\"\n                % (\n                    style.SQL_KEYWORD(\"SELECT\"),\n                    style.SQL_TABLE(self.quote_name(table_name)),\n                    style.SQL_FIELD(column_name),\n                )\n            )\n        return sql\n\n    def tablespace_sql(self, tablespace, inline=False):\n        if inline:\n            return \"USING INDEX TABLESPACE %s\" % self.quote_name(tablespace)\n        else:\n            return \"TABLESPACE %s\" % self.quote_name(tablespace)\n\n    def sequence_reset_sql(self, style, model_list):\n        from django.db import models\n\n        output = []\n        qn = self.quote_name\n        for model in model_list:\n            # Use `coalesce` to set the sequence for each model to the max pk\n            # value if there are records, or 1 if there are none. Set the\n            # `is_called` property (the third argument to `setval`) to true if\n            # there are records (as the max pk value is already in use),\n            # otherwise set it to false. Use pg_get_serial_sequence to get the\n            # underlying sequence name from the table name and column name.\n\n            for f in model._meta.local_fields:\n                if isinstance(f, models.AutoField):\n                    output.append(\n                        \"%s setval(pg_get_serial_sequence('%s','%s'), \"\n                        \"coalesce(max(%s), 1), max(%s) %s null) %s %s;\"\n                        % (\n                            style.SQL_KEYWORD(\"SELECT\"),\n                            style.SQL_TABLE(qn(model._meta.db_table)),\n                            style.SQL_FIELD(f.column),\n                            style.SQL_FIELD(qn(f.column)),\n                            style.SQL_FIELD(qn(f.column)),\n                            style.SQL_KEYWORD(\"IS NOT\"),\n                            style.SQL_KEYWORD(\"FROM\"),\n                            style.SQL_TABLE(qn(model._meta.db_table)),\n                        )\n                    )\n                    # Only one AutoField is allowed per model, so don't bother\n                    # continuing.\n                    break\n        return output\n\n    def prep_for_iexact_query(self, x):\n        return x\n\n    def max_name_length(self):\n        \"\"\"\n        Return the maximum length of an identifier.\n\n        The maximum length of an identifier is 63 by default, but can be\n        changed by recompiling PostgreSQL after editing the NAMEDATALEN\n        macro in src/include/pg_config_manual.h.\n\n        This implementation returns 63, but can be overridden by a custom\n        database backend that inherits most of its behavior from this one.\n        \"\"\"\n        return 63\n\n    def distinct_sql(self, fields, params):\n        if fields:\n            params = [param for param_list in params for param in param_list]\n            return ([\"DISTINCT ON (%s)\" % \", \".join(fields)], params)\n        else:\n            return [\"DISTINCT\"], []\n\n    if is_psycopg3:\n\n        def last_executed_query(self, cursor, sql, params):\n            if self.connection.features.uses_server_side_binding:\n                try:\n                    return self.compose_sql(sql, params)\n                except errors.DataError:\n                    return None\n            else:\n                if cursor._query and cursor._query.query is not None:\n                    return cursor._query.query.decode()\n                return None\n\n    else:\n\n        def last_executed_query(self, cursor, sql, params):\n            # https://www.psycopg.org/docs/cursor.html#cursor.query\n            # The query attribute is a Psycopg extension to the DB API 2.0.\n            if cursor.query is not None:\n                return cursor.query.decode()\n            return None\n\n    def return_insert_columns(self, fields):\n        if not fields:\n            return \"\", ()\n        columns = [\n            \"%s.%s\"\n            % (\n                self.quote_name(field.model._meta.db_table),\n                self.quote_name(field.column),\n            )\n            for field in fields\n        ]\n        return \"RETURNING %s\" % \", \".join(columns), ()\n\n    if is_psycopg3:\n\n        def adapt_integerfield_value(self, value, internal_type):\n            if value is None or hasattr(value, \"resolve_expression\"):\n                return value\n            return self.integerfield_type_map[internal_type](value)\n\n    def adapt_datefield_value(self, value):\n        return value\n\n    def adapt_datetimefield_value(self, value):\n        return value\n\n    def adapt_timefield_value(self, value):\n        return value\n\n    def adapt_ipaddressfield_value(self, value):\n        if value:\n            return Inet(value)\n        return None\n\n    def adapt_json_value(self, value, encoder):\n        return Jsonb(value, dumps=get_json_dumps(encoder))\n\n    def subtract_temporals(self, internal_type, lhs, rhs):\n        if internal_type == \"DateField\":\n            lhs_sql, lhs_params = lhs\n            rhs_sql, rhs_params = rhs\n            params = (*lhs_params, *rhs_params)\n            return \"(interval '1 day' * (%s - %s))\" % (lhs_sql, rhs_sql), params\n        return super().subtract_temporals(internal_type, lhs, rhs)\n\n    def explain_query_prefix(self, format=None, **options):\n        extra = {}\n        if serialize := options.pop(\"serialize\", None):\n            if serialize.upper() in {\"TEXT\", \"BINARY\"}:\n                extra[\"SERIALIZE\"] = serialize.upper()\n        # Normalize options.\n        if options:\n            options = {\n                name.upper(): \"true\" if value else \"false\"\n                for name, value in options.items()\n            }\n            for valid_option in self.explain_options:\n                value = options.pop(valid_option, None)\n                if value is not None:\n                    extra[valid_option] = value\n        prefix = super().explain_query_prefix(format, **options)\n        if format:\n            extra[\"FORMAT\"] = format\n        if extra:\n            prefix += \" (%s)\" % \", \".join(\"%s %s\" % i for i in extra.items())\n        return prefix\n\n    def on_conflict_suffix_sql(self, fields, on_conflict, update_fields, unique_fields):\n        if on_conflict == OnConflict.IGNORE:\n            return \"ON CONFLICT DO NOTHING\"\n        if on_conflict == OnConflict.UPDATE:\n            return \"ON CONFLICT(%s) DO UPDATE SET %s\" % (\n                \", \".join(map(self.quote_name, unique_fields)),\n                \", \".join(\n                    [\n                        f\"{field} = EXCLUDED.{field}\"\n                        for field in map(self.quote_name, update_fields)\n                    ]\n                ),\n            )\n        return super().on_conflict_suffix_sql(\n            fields,\n            on_conflict,\n            update_fields,\n            unique_fields,\n        )\n\n    def prepare_join_on_clause(self, lhs_table, lhs_field, rhs_table, rhs_field):\n        lhs_expr, rhs_expr = super().prepare_join_on_clause(\n            lhs_table, lhs_field, rhs_table, rhs_field\n        )\n\n        if lhs_field.db_type(self.connection) != rhs_field.db_type(self.connection):\n            rhs_expr = Cast(rhs_expr, lhs_field)\n\n        return lhs_expr, rhs_expr"},{"start_line":196,"end_line":199,"belongs_to":{"file_name":"operations.py","upper_path":"../django/django/db/backends/postgresql","module":"postgresql","define_class":["DatabaseOperations"],"imports":["json","functools.lru_cache","functools.partial","django.conf.settings","django.db.backends.base.operations.BaseDatabaseOperations","django.db.backends.postgresql.compiler.InsertUnnest","django.db.backends.postgresql.psycopg_any.Inet","django.db.backends.postgresql.psycopg_any.Jsonb","django.db.backends.postgresql.psycopg_any.errors","django.db.backends.postgresql.psycopg_any.is_psycopg3","django.db.backends.postgresql.psycopg_any.mogrify","django.db.backends.utils.split_tzname_delta","django.db.models.constants.OnConflict","django.db.models.functions.Cast","django.utils.regex_helper._lazy_re_compile","psycopg.types.numeric","django.db.models"]},"relative_function":[],"code":"def quote_name(self, name):\n        if name.startswith('\"') and name.endswith('\"'):\n            return name  # Quoting once is enough.\n        return '\"%s\"' % name"}],"ground_truth":null,"score":null},
{"question":"Where can I find the implementation of the `DatabaseWrapper` and its `is_usable` method in the codebase?","answer":"","relative_code_list":[{"start_line":89,"end_line":547,"belongs_to":{"file_name":"base.py","upper_path":"../django/django/db/backends/postgresql","module":"postgresql","define_class":["DatabaseWrapper","CursorMixin","ServerBindingCursor","Cursor","ServerSideCursor","CursorDebugWrapper","CursorDebugWrapper"],"imports":["asyncio","threading","warnings","contextlib.contextmanager","django.conf.settings","django.core.exceptions.ImproperlyConfigured","django.db.DatabaseError","django.db.connections","django.db.backends.base.base.NO_DB_ALIAS","django.db.backends.base.base.BaseDatabaseWrapper","django.db.backends.utils.CursorDebugWrapper","django.utils.asyncio.async_unsafe","django.utils.functional.cached_property","django.utils.safestring.SafeString","django.utils.version.get_version_tuple","psycopg_any.IsolationLevel","psycopg_any.is_psycopg3","client.DatabaseClient","creation.DatabaseCreation","features.DatabaseFeatures","introspection.DatabaseIntrospection","operations.DatabaseOperations","schema.DatabaseSchemaEditor","psycopg.adapters","psycopg.sql","psycopg.pq.Format","psycopg_any.get_adapters_template","psycopg_any.register_tzloader","psycopg2.extensions","psycopg2.extras","psycopg","psycopg2","psycopg_pool.ConnectionPool"]},"relative_function":[],"code":"class DatabaseWrapper(BaseDatabaseWrapper):\n    vendor = \"postgresql\"\n    display_name = \"PostgreSQL\"\n    # This dictionary maps Field objects to their associated PostgreSQL column\n    # types, as strings. Column-type strings can contain format strings; they'll\n    # be interpolated against the values of Field.__dict__ before being output.\n    # If a column type is set to None, it won't be included in the output.\n    data_types = {\n        \"AutoField\": \"integer\",\n        \"BigAutoField\": \"bigint\",\n        \"BinaryField\": \"bytea\",\n        \"BooleanField\": \"boolean\",\n        \"CharField\": _get_varchar_column,\n        \"DateField\": \"date\",\n        \"DateTimeField\": \"timestamp with time zone\",\n        \"DecimalField\": \"numeric(%(max_digits)s, %(decimal_places)s)\",\n        \"DurationField\": \"interval\",\n        \"FileField\": \"varchar(%(max_length)s)\",\n        \"FilePathField\": \"varchar(%(max_length)s)\",\n        \"FloatField\": \"double precision\",\n        \"IntegerField\": \"integer\",\n        \"BigIntegerField\": \"bigint\",\n        \"IPAddressField\": \"inet\",\n        \"GenericIPAddressField\": \"inet\",\n        \"JSONField\": \"jsonb\",\n        \"OneToOneField\": \"integer\",\n        \"PositiveBigIntegerField\": \"bigint\",\n        \"PositiveIntegerField\": \"integer\",\n        \"PositiveSmallIntegerField\": \"smallint\",\n        \"SlugField\": \"varchar(%(max_length)s)\",\n        \"SmallAutoField\": \"smallint\",\n        \"SmallIntegerField\": \"smallint\",\n        \"TextField\": \"text\",\n        \"TimeField\": \"time\",\n        \"UUIDField\": \"uuid\",\n    }\n    data_type_check_constraints = {\n        \"PositiveBigIntegerField\": '\"%(column)s\" >= 0',\n        \"PositiveIntegerField\": '\"%(column)s\" >= 0',\n        \"PositiveSmallIntegerField\": '\"%(column)s\" >= 0',\n    }\n    data_types_suffix = {\n        \"AutoField\": \"GENERATED BY DEFAULT AS IDENTITY\",\n        \"BigAutoField\": \"GENERATED BY DEFAULT AS IDENTITY\",\n        \"SmallAutoField\": \"GENERATED BY DEFAULT AS IDENTITY\",\n    }\n    operators = {\n        \"exact\": \"= %s\",\n        \"iexact\": \"= UPPER(%s)\",\n        \"contains\": \"LIKE %s\",\n        \"icontains\": \"LIKE UPPER(%s)\",\n        \"regex\": \"~ %s\",\n        \"iregex\": \"~* %s\",\n        \"gt\": \"> %s\",\n        \"gte\": \">= %s\",\n        \"lt\": \"< %s\",\n        \"lte\": \"<= %s\",\n        \"startswith\": \"LIKE %s\",\n        \"endswith\": \"LIKE %s\",\n        \"istartswith\": \"LIKE UPPER(%s)\",\n        \"iendswith\": \"LIKE UPPER(%s)\",\n    }\n\n    # The patterns below are used to generate SQL pattern lookup clauses when\n    # the right-hand side of the lookup isn't a raw string (it might be an expression\n    # or the result of a bilateral transformation).\n    # In those cases, special characters for LIKE operators (e.g. \\, *, _) should be\n    # escaped on database side.\n    #\n    # Note: we use str.format() here for readability as '%' is used as a wildcard for\n    # the LIKE operator.\n    pattern_esc = (\n        r\"REPLACE(REPLACE(REPLACE({}, E'\\\\', E'\\\\\\\\'), E'%%', E'\\\\%%'), E'_', E'\\\\_')\"\n    )\n    pattern_ops = {\n        \"contains\": \"LIKE '%%' || {} || '%%'\",\n        \"icontains\": \"LIKE '%%' || UPPER({}) || '%%'\",\n        \"startswith\": \"LIKE {} || '%%'\",\n        \"istartswith\": \"LIKE UPPER({}) || '%%'\",\n        \"endswith\": \"LIKE '%%' || {}\",\n        \"iendswith\": \"LIKE '%%' || UPPER({})\",\n    }\n\n    Database = Database\n    SchemaEditorClass = DatabaseSchemaEditor\n    # Classes instantiated in __init__().\n    client_class = DatabaseClient\n    creation_class = DatabaseCreation\n    features_class = DatabaseFeatures\n    introspection_class = DatabaseIntrospection\n    ops_class = DatabaseOperations\n    # PostgreSQL backend-specific attributes.\n    _named_cursor_idx = 0\n    _connection_pools = {}\n\n    @property\n    def pool(self):\n        pool_options = self.settings_dict[\"OPTIONS\"].get(\"pool\")\n        if self.alias == NO_DB_ALIAS or not pool_options:\n            return None\n\n        if self.alias not in self._connection_pools:\n            if self.settings_dict.get(\"CONN_MAX_AGE\", 0) != 0:\n                raise ImproperlyConfigured(\n                    \"Pooling doesn't support persistent connections.\"\n                )\n            # Set the default options.\n            if pool_options is True:\n                pool_options = {}\n\n            try:\n                from psycopg_pool import ConnectionPool\n            except ImportError as err:\n                raise ImproperlyConfigured(\n                    \"Error loading psycopg_pool module.\\nDid you install psycopg[pool]?\"\n                ) from err\n\n            connect_kwargs = self.get_connection_params()\n            # Ensure we run in autocommit, Django properly sets it later on.\n            connect_kwargs[\"autocommit\"] = True\n            enable_checks = self.settings_dict[\"CONN_HEALTH_CHECKS\"]\n            pool = ConnectionPool(\n                kwargs=connect_kwargs,\n                open=False,  # Do not open the pool during startup.\n                configure=self._configure_connection,\n                check=ConnectionPool.check_connection if enable_checks else None,\n                **pool_options,\n            )\n            # setdefault() ensures that multiple threads don't set this in\n            # parallel. Since we do not open the pool during it's init above,\n            # this means that at worst during startup multiple threads generate\n            # pool objects and the first to set it wins.\n            self._connection_pools.setdefault(self.alias, pool)\n\n        return self._connection_pools[self.alias]\n\n    def close_pool(self):\n        if self.pool:\n            self.pool.close()\n            del self._connection_pools[self.alias]\n\n    def get_database_version(self):\n        \"\"\"\n        Return a tuple of the database's version.\n        E.g. for pg_version 120004, return (12, 4).\n        \"\"\"\n        return divmod(self.pg_version, 10000)\n\n    def get_connection_params(self):\n        settings_dict = self.settings_dict\n        # None may be used to connect to the default 'postgres' db\n        if settings_dict[\"NAME\"] == \"\" and not settings_dict[\"OPTIONS\"].get(\"service\"):\n            raise ImproperlyConfigured(\n                \"settings.DATABASES is improperly configured. \"\n                \"Please supply the NAME or OPTIONS['service'] value.\"\n            )\n        if len(settings_dict[\"NAME\"] or \"\") > self.ops.max_name_length():\n            raise ImproperlyConfigured(\n                \"The database name '%s' (%d characters) is longer than \"\n                \"PostgreSQL's limit of %d characters. Supply a shorter NAME \"\n                \"in settings.DATABASES.\"\n                % (\n                    settings_dict[\"NAME\"],\n                    len(settings_dict[\"NAME\"]),\n                    self.ops.max_name_length(),\n                )\n            )\n        if settings_dict[\"NAME\"]:\n            conn_params = {\n                \"dbname\": settings_dict[\"NAME\"],\n                **settings_dict[\"OPTIONS\"],\n            }\n        elif settings_dict[\"NAME\"] is None:\n            # Connect to the default 'postgres' db.\n            settings_dict[\"OPTIONS\"].pop(\"service\", None)\n            conn_params = {\"dbname\": \"postgres\", **settings_dict[\"OPTIONS\"]}\n        else:\n            conn_params = {**settings_dict[\"OPTIONS\"]}\n        conn_params[\"client_encoding\"] = \"UTF8\"\n\n        conn_params.pop(\"assume_role\", None)\n        conn_params.pop(\"isolation_level\", None)\n\n        pool_options = conn_params.pop(\"pool\", None)\n        if pool_options and not is_psycopg3:\n            raise ImproperlyConfigured(\"Database pooling requires psycopg >= 3\")\n\n        server_side_binding = conn_params.pop(\"server_side_binding\", None)\n        conn_params.setdefault(\n            \"cursor_factory\",\n            (\n                ServerBindingCursor\n                if is_psycopg3 and server_side_binding is True\n                else Cursor\n            ),\n        )\n        if settings_dict[\"USER\"]:\n            conn_params[\"user\"] = settings_dict[\"USER\"]\n        if settings_dict[\"PASSWORD\"]:\n            conn_params[\"password\"] = settings_dict[\"PASSWORD\"]\n        if settings_dict[\"HOST\"]:\n            conn_params[\"host\"] = settings_dict[\"HOST\"]\n        if settings_dict[\"PORT\"]:\n            conn_params[\"port\"] = settings_dict[\"PORT\"]\n        if is_psycopg3:\n            conn_params[\"context\"] = get_adapters_template(\n                settings.USE_TZ, self.timezone\n            )\n            # Disable prepared statements by default to keep connection poolers\n            # working. Can be reenabled via OPTIONS in the settings dict.\n            conn_params[\"prepare_threshold\"] = conn_params.pop(\n                \"prepare_threshold\", None\n            )\n        return conn_params\n\n    @async_unsafe\n    def get_new_connection(self, conn_params):\n        # self.isolation_level must be set:\n        # - after connecting to the database in order to obtain the database's\n        #   default when no value is explicitly specified in options.\n        # - before calling _set_autocommit() because if autocommit is on, that\n        #   will set connection.isolation_level to ISOLATION_LEVEL_AUTOCOMMIT.\n        options = self.settings_dict[\"OPTIONS\"]\n        set_isolation_level = False\n        try:\n            isolation_level_value = options[\"isolation_level\"]\n        except KeyError:\n            self.isolation_level = IsolationLevel.READ_COMMITTED\n        else:\n            # Set the isolation level to the value from OPTIONS.\n            try:\n                self.isolation_level = IsolationLevel(isolation_level_value)\n                set_isolation_level = True\n            except ValueError:\n                raise ImproperlyConfigured(\n                    f\"Invalid transaction isolation level {isolation_level_value} \"\n                    f\"specified. Use one of the psycopg.IsolationLevel values.\"\n                )\n        if self.pool:\n            # If nothing else has opened the pool, open it now.\n            self.pool.open()\n            connection = self.pool.getconn()\n        else:\n            connection = self.Database.connect(**conn_params)\n        if set_isolation_level:\n            connection.isolation_level = self.isolation_level\n        if not is_psycopg3:\n            # Register dummy loads() to avoid a round trip from psycopg2's\n            # decode to json.dumps() to json.loads(), when using a custom\n            # decoder in JSONField.\n            psycopg2.extras.register_default_jsonb(\n                conn_or_curs=connection, loads=lambda x: x\n            )\n        return connection\n\n    def ensure_timezone(self):\n        # Close the pool so new connections pick up the correct timezone.\n        self.close_pool()\n        if self.connection is None:\n            return False\n        return self._configure_timezone(self.connection)\n\n    def _configure_timezone(self, connection):\n        conn_timezone_name = connection.info.parameter_status(\"TimeZone\")\n        timezone_name = self.timezone_name\n        if timezone_name and conn_timezone_name != timezone_name:\n            with connection.cursor() as cursor:\n                cursor.execute(self.ops.set_time_zone_sql(), [timezone_name])\n            return True\n        return False\n\n    def _configure_role(self, connection):\n        if new_role := self.settings_dict[\"OPTIONS\"].get(\"assume_role\"):\n            with connection.cursor() as cursor:\n                sql = self.ops.compose_sql(\"SET ROLE %s\", [new_role])\n                cursor.execute(sql)\n            return True\n        return False\n\n    def _configure_connection(self, connection):\n        # This function is called from init_connection_state and from the\n        # psycopg pool itself after a connection is opened.\n\n        # Commit after setting the time zone.\n        commit_tz = self._configure_timezone(connection)\n        # Set the role on the connection. This is useful if the credential used\n        # to login is not the same as the role that owns database resources. As\n        # can be the case when using temporary or ephemeral credentials.\n        commit_role = self._configure_role(connection)\n\n        return commit_role or commit_tz\n\n    def _close(self):\n        if self.connection is not None:\n            # `wrap_database_errors` only works for `putconn` as long as there\n            # is no `reset` function set in the pool because it is deferred\n            # into a thread and not directly executed.\n            with self.wrap_database_errors:\n                if self.pool:\n                    # Ensure the correct pool is returned. This is a workaround\n                    # for tests so a pool can be changed on setting changes\n                    # (e.g. USE_TZ, TIME_ZONE).\n                    self.connection._pool.putconn(self.connection)\n                    # Connection can no longer be used.\n                    self.connection = None\n                else:\n                    return self.connection.close()\n\n    def init_connection_state(self):\n        super().init_connection_state()\n\n        if self.connection is not None and not self.pool:\n            commit = self._configure_connection(self.connection)\n\n            if commit and not self.get_autocommit():\n                self.connection.commit()\n\n    @async_unsafe\n    def create_cursor(self, name=None):\n        if name:\n            if is_psycopg3 and (\n                self.settings_dict[\"OPTIONS\"].get(\"server_side_binding\") is not True\n            ):\n                # psycopg >= 3 forces the usage of server-side bindings for\n                # named cursors so a specialized class that implements\n                # server-side cursors while performing client-side bindings\n                # must be used if `server_side_binding` is disabled (default).\n                cursor = ServerSideCursor(\n                    self.connection,\n                    name=name,\n                    scrollable=False,\n                    withhold=self.connection.autocommit,\n                )\n            else:\n                # In autocommit mode, the cursor will be used outside of a\n                # transaction, hence use a holdable cursor.\n                cursor = self.connection.cursor(\n                    name, scrollable=False, withhold=self.connection.autocommit\n                )\n        else:\n            cursor = self.connection.cursor()\n\n        if is_psycopg3:\n            # Register the cursor timezone only if the connection disagrees, to\n            # avoid copying the adapter map.\n            tzloader = self.connection.adapters.get_loader(TIMESTAMPTZ_OID, Format.TEXT)\n            if self.timezone != tzloader.timezone:\n                register_tzloader(self.timezone, cursor)\n        else:\n            cursor.tzinfo_factory = self.tzinfo_factory if settings.USE_TZ else None\n        return cursor\n\n    def tzinfo_factory(self, offset):\n        return self.timezone\n\n    @async_unsafe\n    def chunked_cursor(self):\n        self._named_cursor_idx += 1\n        # Get the current async task\n        # Note that right now this is behind @async_unsafe, so this is\n        # unreachable, but in future we'll start loosening this restriction.\n        # For now, it's here so that every use of \"threading\" is\n        # also async-compatible.\n        try:\n            current_task = asyncio.current_task()\n        except RuntimeError:\n            current_task = None\n        # Current task can be none even if the current_task call didn't error\n        if current_task:\n            task_ident = str(id(current_task))\n        else:\n            task_ident = \"sync\"\n        # Use that and the thread ident to get a unique name\n        return self._cursor(\n            name=\"_django_curs_%d_%s_%d\"\n            % (\n                # Avoid reusing name in other threads / tasks\n                threading.current_thread().ident,\n                task_ident,\n                self._named_cursor_idx,\n            )\n        )\n\n    def _set_autocommit(self, autocommit):\n        with self.wrap_database_errors:\n            self.connection.autocommit = autocommit\n\n    def check_constraints(self, table_names=None):\n        \"\"\"\n        Check constraints by setting them to immediate. Return them to deferred\n        afterward.\n        \"\"\"\n        with self.cursor() as cursor:\n            cursor.execute(\"SET CONSTRAINTS ALL IMMEDIATE\")\n            cursor.execute(\"SET CONSTRAINTS ALL DEFERRED\")\n\n    def is_usable(self):\n        if self.connection is None:\n            return False\n        try:\n            # Use a psycopg cursor directly, bypassing Django's utilities.\n            with self.connection.cursor() as cursor:\n                cursor.execute(\"SELECT 1\")\n        except Database.Error:\n            return False\n        else:\n            return True\n\n    def close_if_health_check_failed(self):\n        if self.pool:\n            # The pool only returns healthy connections.\n            return\n        return super().close_if_health_check_failed()\n\n    @contextmanager\n    def _nodb_cursor(self):\n        cursor = None\n        try:\n            with super()._nodb_cursor() as cursor:\n                yield cursor\n        except (Database.DatabaseError, WrappedDatabaseError):\n            if cursor is not None:\n                raise\n            warnings.warn(\n                \"Normally Django will use a connection to the 'postgres' database \"\n                \"to avoid running initialization queries against the production \"\n                \"database when it's not needed (for example, when running tests). \"\n                \"Django was unable to create a connection to the 'postgres' database \"\n                \"and will use the first PostgreSQL database instead.\",\n                RuntimeWarning,\n            )\n            for connection in connections.all():\n                if (\n                    connection.vendor == \"postgresql\"\n                    and connection.settings_dict[\"NAME\"] != \"postgres\"\n                ):\n                    conn = self.__class__(\n                        {\n                            **self.settings_dict,\n                            \"NAME\": connection.settings_dict[\"NAME\"],\n                        },\n                        alias=self.alias,\n                    )\n                    try:\n                        with conn.cursor() as cursor:\n                            yield cursor\n                    finally:\n                        conn.close()\n                    break\n            else:\n                raise\n\n    @cached_property\n    def pg_version(self):\n        with self.temporary_connection():\n            return self.connection.info.server_version\n\n    def make_debug_cursor(self, cursor):\n        return CursorDebugWrapper(cursor, self)"},{"start_line":74,"end_line":75,"belongs_to":{"file_name":"base.py","upper_path":"../django/django/db/backends/dummy","module":"dummy","define_class":["DatabaseOperations","DatabaseClient","DatabaseCreation","DatabaseIntrospection","DatabaseWrapper"],"imports":["django.core.exceptions.ImproperlyConfigured","django.db.backends.base.base.BaseDatabaseWrapper","django.db.backends.base.client.BaseDatabaseClient","django.db.backends.base.creation.BaseDatabaseCreation","django.db.backends.base.introspection.BaseDatabaseIntrospection","django.db.backends.base.operations.BaseDatabaseOperations","django.db.backends.dummy.features.DummyDatabaseFeatures"]},"relative_function":[],"code":"def is_usable(self):\n        return True"}],"ground_truth":null,"score":null},
{"question":"Where can I find the implementation of the `DatabaseCreation` in the codebase?","answer":"","relative_code_list":[{"start_line":10,"end_line":87,"belongs_to":{"file_name":"creation.py","upper_path":"../django/django/db/backends/mysql","module":"mysql","define_class":["DatabaseCreation"],"imports":["os","subprocess","sys","django.db.backends.base.creation.BaseDatabaseCreation","client.DatabaseClient"]},"relative_function":[],"code":"class DatabaseCreation(BaseDatabaseCreation):\n    def sql_table_creation_suffix(self):\n        suffix = []\n        test_settings = self.connection.settings_dict[\"TEST\"]\n        if test_settings[\"CHARSET\"]:\n            suffix.append(\"CHARACTER SET %s\" % test_settings[\"CHARSET\"])\n        if test_settings[\"COLLATION\"]:\n            suffix.append(\"COLLATE %s\" % test_settings[\"COLLATION\"])\n        return \" \".join(suffix)\n\n    def _execute_create_test_db(self, cursor, parameters, keepdb=False):\n        try:\n            super()._execute_create_test_db(cursor, parameters, keepdb)\n        except Exception as e:\n            if len(e.args) < 1 or e.args[0] != 1007:\n                # All errors except \"database exists\" (1007) cancel tests.\n                self.log(\"Got an error creating the test database: %s\" % e)\n                sys.exit(2)\n            else:\n                raise\n\n    def _clone_test_db(self, suffix, verbosity, keepdb=False):\n        source_database_name = self.connection.settings_dict[\"NAME\"]\n        target_database_name = self.get_test_db_clone_settings(suffix)[\"NAME\"]\n        test_db_params = {\n            \"dbname\": self.connection.ops.quote_name(target_database_name),\n            \"suffix\": self.sql_table_creation_suffix(),\n        }\n        with self._nodb_cursor() as cursor:\n            try:\n                self._execute_create_test_db(cursor, test_db_params, keepdb)\n            except Exception:\n                if keepdb:\n                    # If the database should be kept, skip everything else.\n                    return\n                try:\n                    if verbosity >= 1:\n                        self.log(\n                            \"Destroying old test database for alias %s...\"\n                            % (\n                                self._get_database_display_str(\n                                    verbosity, target_database_name\n                                ),\n                            )\n                        )\n                    cursor.execute(\"DROP DATABASE %(dbname)s\" % test_db_params)\n                    self._execute_create_test_db(cursor, test_db_params, keepdb)\n                except Exception as e:\n                    self.log(\"Got an error recreating the test database: %s\" % e)\n                    sys.exit(2)\n        self._clone_db(source_database_name, target_database_name)\n\n    def _clone_db(self, source_database_name, target_database_name):\n        cmd_args, cmd_env = DatabaseClient.settings_to_cmd_args_env(\n            self.connection.settings_dict, []\n        )\n        dump_cmd = [\n            \"mysqldump\",\n            *cmd_args[1:-1],\n            \"--routines\",\n            \"--events\",\n            source_database_name,\n        ]\n        dump_env = load_env = {**os.environ, **cmd_env} if cmd_env else None\n        load_cmd = cmd_args\n        load_cmd[-1] = target_database_name\n\n        with subprocess.Popen(\n            dump_cmd, stdout=subprocess.PIPE, env=dump_env\n        ) as dump_proc:\n            with subprocess.Popen(\n                load_cmd,\n                stdin=dump_proc.stdout,\n                stdout=subprocess.DEVNULL,\n                env=load_env,\n            ):\n                # Allow dump_proc to receive a SIGPIPE if the load process exits.\n                dump_proc.stdout.close()"}],"ground_truth":null,"score":null},
{"question":"What are the main database backends supported by this repository?","answer":null,"relative_code_list":null,"ground_truth":"The repository supports several database backends including PostgreSQL, MySQL, SQLite3, Oracle, and a dummy backend for testing purposes.","score":null},
{"question":"How does the MySQL backend interact with other components in the repository?","answer":null,"relative_code_list":null,"ground_truth":"The MySQL backend depends on the 'backends' and 'oracle' components, indicating it may share some functionality or interfaces with these components.","score":null},
{"question":"What is the purpose of the 'Reference' class in the repository?","answer":null,"relative_code_list":null,"ground_truth":"The 'Reference' class is used to handle references to database objects like tables, columns, and indexes, and provides methods for renaming these references and string representation.","score":null},
{"question":"What functionality does the 'DatabaseFeatures' class provide?","answer":null,"relative_code_list":null,"ground_truth":"The 'DatabaseFeatures' class provides a comprehensive set of methods and attributes to check database-specific capabilities and features, such as transaction support, JSON field support, and various SQL functionalities.","score":null},
{"question":"How does the 'DatabaseOperations' class assist in database interactions?","answer":null,"relative_code_list":null,"ground_truth":"The 'DatabaseOperations' class provides methods for SQL generation and database operations, including date/time handling, type conversion, constraint management, and transaction control.","score":null},
{"question":"What is the role of the 'DatabaseSchemaEditor' class?","answer":null,"relative_code_list":null,"ground_truth":"The 'DatabaseSchemaEditor' class is responsible for modifying database schema, including creating/dropping tables and indexes, altering columns, and managing constraints through various SQL statements.","score":null},
{"question":"How does the repository handle database introspection?","answer":null,"relative_code_list":null,"ground_truth":"Database introspection is handled by the 'DatabaseIntrospection' class, which provides methods to examine database structure including table lists, field types, sequences, relations, and constraints.","score":null},
{"question":"What is the purpose of the 'CursorWrapper' class?","answer":null,"relative_code_list":null,"ground_truth":"The 'CursorWrapper' class wraps database cursors to provide additional functionality like error handling, iteration support, and execution of SQL statements with wrappers.","score":null},
{"question":"How are database connections managed in the repository?","answer":null,"relative_code_list":null,"ground_truth":"Database connections are managed by the 'DatabaseWrapper' class, which handles connection parameters, transaction management, cursor creation, and connection state initialization.","score":null},
{"question":"What testing-related functionality does the 'DatabaseCreation' class provide?","answer":null,"relative_code_list":null,"ground_truth":"The 'DatabaseCreation' class provides methods for test database management including creation, cloning, destruction, and serialization, along with handling test user and tablespace configurations.","score":null},
{"question":"How does the repository support different SQL dialects for various databases?","answer":null,"relative_code_list":null,"ground_truth":"The repository supports different SQL dialects through backend-specific implementations in classes like DatabaseOperations, DatabaseFeatures, and DatabaseSchemaEditor for each supported database system.","score":null},
{"question":"What is the purpose of the 'DummyDatabaseFeatures' class?","answer":null,"relative_code_list":null,"ground_truth":"The 'DummyDatabaseFeatures' class provides a minimal implementation of database features for testing purposes, supporting basic transaction and savepoint functionality.","score":null},
{"question":"How does the repository handle database-specific data types?","answer":null,"relative_code_list":null,"ground_truth":"Data type handling is managed through methods in DatabaseOperations and DatabaseWrapper classes, with type-specific conversion methods and data type reverse mapping in DatabaseIntrospection.","score":null},
{"question":"What transaction management capabilities are provided by the repository?","answer":null,"relative_code_list":null,"ground_truth":"Transaction management is handled by the DatabaseWrapper class, providing methods for savepoints, commit/rollback operations, and transaction state management with autocommit support.","score":null},
{"question":"How does the repository support database constraints?","answer":null,"relative_code_list":null,"ground_truth":"Constraint support is provided through DatabaseFeatures for capability checking, DatabaseSchemaEditor for constraint modification, and DatabaseWrapper for constraint checking and management.","score":null},
{"question":"What utility classes are provided for handling database intervals and timestamps?","answer":null,"relative_code_list":null,"ground_truth":"The repository provides 'IntervalToSeconds' and 'SecondsToInterval' classes for interval conversion, and 'Oracle_datetime' for Oracle-specific datetime handling.","score":null},
{"question":"How does the repository handle bulk insert operations?","answer":null,"relative_code_list":null,"ground_truth":"Bulk insert operations are supported through the 'bulk_insert_sql' method in DatabaseOperations and specialized classes like 'BulkInsertMapper' for Oracle-specific bulk operations.","score":null},
{"question":"What database validation capabilities are provided?","answer":null,"relative_code_list":null,"ground_truth":"Database validation is handled by the 'DatabaseValidation' class, which includes methods for checking field types and database-specific configurations like SQL mode in MySQL.","score":null},
{"question":"How are database-specific SQL functions implemented?","answer":null,"relative_code_list":null,"ground_truth":"Database-specific functions are implemented in backend-specific modules (like postgresql/functions.py) and through database operation methods that generate appropriate function calls.","score":null},
{"question":"What support does the repository provide for database schema comments?","answer":null,"relative_code_list":null,"ground_truth":"Schema comment support is provided through DatabaseFeatures checks and DatabaseSchemaEditor methods for altering table and column comments where supported by the database backend.","score":null}
]