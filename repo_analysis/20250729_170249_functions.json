[
  {
    "name": "get_debug_flag",
    "docstring": "Get whether debug mode should be enabled for the app, indicated by the\n:envvar:`FLASK_DEBUG` environment variable. The default is ``False``.",
    "is_method": false,
    "class_name": null,
    "parameters": [],
    "calls": [
      "os.environ.get",
      "bool",
      "val.lower"
    ],
    "code_location": {
      "file": "helpers.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 27,
      "end_line": 32
    },
    "code_snippet": "def get_debug_flag() -> bool:\n    \"\"\"Get whether debug mode should be enabled for the app, indicated by the\n    :envvar:`FLASK_DEBUG` environment variable. The default is ``False``.\n    \"\"\"\n    val = os.environ.get(\"FLASK_DEBUG\")\n    return bool(val and val.lower() not in {\"0\", \"false\", \"no\"})"
  },
  {
    "name": "get_load_dotenv",
    "docstring": "Get whether the user has disabled loading default dotenv files by\nsetting :envvar:`FLASK_SKIP_DOTENV`. The default is ``True``, load\nthe files.\n\n:param default: What to return if the env var isn't set.",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "default"
    ],
    "calls": [
      "os.environ.get",
      "val.lower"
    ],
    "code_location": {
      "file": "helpers.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 35,
      "end_line": 47
    },
    "code_snippet": "def get_load_dotenv(default: bool = True) -> bool:\n    \"\"\"Get whether the user has disabled loading default dotenv files by\n    setting :envvar:`FLASK_SKIP_DOTENV`. The default is ``True``, load\n    the files.\n\n    :param default: What to return if the env var isn't set.\n    \"\"\"\n    val = os.environ.get(\"FLASK_SKIP_DOTENV\")\n\n    if not val:\n        return default\n\n    return val.lower() in (\"0\", \"false\", \"no\")"
  },
  {
    "name": "stream_with_context",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "generator_or_function"
    ],
    "calls": [],
    "code_location": {
      "file": "helpers.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 51,
      "end_line": 53
    },
    "code_snippet": "def stream_with_context(\n    generator_or_function: t.Iterator[t.AnyStr],\n) -> t.Iterator[t.AnyStr]: ..."
  },
  {
    "name": "stream_with_context",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "generator_or_function"
    ],
    "calls": [],
    "code_location": {
      "file": "helpers.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 57,
      "end_line": 59
    },
    "code_snippet": "def stream_with_context(\n    generator_or_function: t.Callable[..., t.Iterator[t.AnyStr]],\n) -> t.Callable[[t.Iterator[t.AnyStr]], t.Iterator[t.AnyStr]]: ..."
  },
  {
    "name": "stream_with_context",
    "docstring": "Request contexts disappear when the response is started on the server.\nThis is done for efficiency reasons and to make it less likely to encounter\nmemory leaks with badly written WSGI middlewares.  The downside is that if\nyou are using streamed responses, the generator cannot access request bound\ninformation any more.\n\nThis function however can help you keep the context around for longer::\n\n    from flask import stream_with_context, request, Response\n\n    @app.route('/stream')\n    def streamed_response():\n        @stream_with_context\n        def generate():\n            yield 'Hello '\n            yield request.args['name']\n            yield '!'\n        return Response(generate())\n\nAlternatively it can also be used around a specific generator::\n\n    from flask import stream_with_context, request, Response\n\n    @app.route('/stream')\n    def streamed_response():\n        def generate():\n            yield 'Hello '\n            yield request.args['name']\n            yield '!'\n        return Response(stream_with_context(generate()))\n\n.. versionadded:: 0.9",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "generator_or_function"
    ],
    "calls": [
      "generator",
      "next",
      "iter",
      "_cv_request.get",
      "update_wrapper",
      "RuntimeError",
      "generator_or_function",
      "stream_with_context",
      "hasattr",
      "gen.close"
    ],
    "code_location": {
      "file": "helpers.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 62,
      "end_line": 136
    },
    "code_snippet": "def stream_with_context(\n    generator_or_function: t.Iterator[t.AnyStr] | t.Callable[..., t.Iterator[t.AnyStr]],\n) -> t.Iterator[t.AnyStr] | t.Callable[[t.Iterator[t.AnyStr]], t.Iterator[t.AnyStr]]:\n    \"\"\"Request contexts disappear when the response is started on the server.\n    This is done for efficiency reasons and to make it less likely to encounter\n    memory leaks with badly written WSGI middlewares.  The downside is that if\n    you are using streamed responses, the generator cannot acce..."
  },
  {
    "name": "make_response",
    "docstring": "Sometimes it is necessary to set additional headers in a view.  Because\nviews do not have to return response objects but can return a value that\nis converted into a response object by Flask itself, it becomes tricky to\nadd headers to it.  This function can be called instead of using a return\nand you will get a response object which you can use to attach headers.\n\nIf view looked like this and you want to add a new header::\n\n    def index():\n        return render_template('index.html', foo=42)\n\nYou can now do something like this::\n\n    def index():\n        response = make_response(render_template('index.html', foo=42))\n        response.headers['X-Parachutes'] = 'parachutes are cool'\n        return response\n\nThis function accepts the very same arguments you can return from a\nview function.  This for example creates a response with a 404 error\ncode::\n\n    response = make_response(render_template('not_found.html'), 404)\n\nThe other use case of this function is to force the return value of a\nview function into a response which is helpful with view\ndecorators::\n\n    response = make_response(view_function())\n    response.headers['X-Parachutes'] = 'parachutes are cool'\n\nInternally this function does the following things:\n\n-   if no arguments are passed, it creates a new response argument\n-   if one argument is passed, :meth:`flask.Flask.make_response`\n    is invoked with it.\n-   if more than one argument is passed, the arguments are passed\n    to the :meth:`flask.Flask.make_response` function as tuple.\n\n.. versionadded:: 0.6",
    "is_method": false,
    "class_name": null,
    "parameters": [],
    "calls": [
      "current_app.make_response",
      "current_app.response_class",
      "len"
    ],
    "code_location": {
      "file": "helpers.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 139,
      "end_line": 185
    },
    "code_snippet": "def make_response(*args: t.Any) -> Response:\n    \"\"\"Sometimes it is necessary to set additional headers in a view.  Because\n    views do not have to return response objects but can return a value that\n    is converted into a response object by Flask itself, it becomes tricky to\n    add headers to it.  This function can be called instead of using a return\n    and you will get a response object which you can use to attach headers.\n\n    If view looked like this and you want to add a new header::\n\n ..."
  },
  {
    "name": "url_for",
    "docstring": "Generate a URL to the given endpoint with the given values.\n\nThis requires an active request or application context, and calls\n:meth:`current_app.url_for() <flask.Flask.url_for>`. See that method\nfor full documentation.\n\n:param endpoint: The endpoint name associated with the URL to\n    generate. If this starts with a ``.``, the current blueprint\n    name (if any) will be used.\n:param _anchor: If given, append this as ``#anchor`` to the URL.\n:param _method: If given, generate the URL associated with this\n    method for the endpoint.\n:param _scheme: If given, the URL will have this scheme if it is\n    external.\n:param _external: If given, prefer the URL to be internal (False) or\n    require it to be external (True). External URLs include the\n    scheme and domain. When not in an active request, URLs are\n    external by default.\n:param values: Values to use for the variable parts of the URL rule.\n    Unknown keys are appended as query string arguments, like\n    ``?a=b&c=d``.\n\n.. versionchanged:: 2.2\n    Calls ``current_app.url_for``, allowing an app to override the\n    behavior.\n\n.. versionchanged:: 0.10\n   The ``_scheme`` parameter was added.\n\n.. versionchanged:: 0.9\n   The ``_anchor`` and ``_method`` parameters were added.\n\n.. versionchanged:: 0.9\n   Calls ``app.handle_url_build_error`` on build errors.",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "endpoint"
    ],
    "calls": [
      "current_app.url_for"
    ],
    "code_location": {
      "file": "helpers.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 188,
      "end_line": 239
    },
    "code_snippet": "def url_for(\n    endpoint: str,\n    *,\n    _anchor: str | None = None,\n    _method: str | None = None,\n    _scheme: str | None = None,\n    _external: bool | None = None,\n    **values: t.Any,\n) -> str:\n    \"\"\"Generate a URL to the given endpoint with the given values.\n\n    This requires an active request or application context, and calls\n    :meth:`current_app.url_for() <flask.Flask.url_for>`. See that method\n    for full documentation.\n\n    :param endpoint: The endpoint name associated with the ..."
  },
  {
    "name": "redirect",
    "docstring": "Create a redirect response object.\n\nIf :data:`~flask.current_app` is available, it will use its\n:meth:`~flask.Flask.redirect` method, otherwise it will use\n:func:`werkzeug.utils.redirect`.\n\n:param location: The URL to redirect to.\n:param code: The status code for the redirect.\n:param Response: The response class to use. Not used when\n    ``current_app`` is active, which uses ``app.response_class``.\n\n.. versionadded:: 2.2\n    Calls ``current_app.redirect`` if available instead of always\n    using Werkzeug's default ``redirect``.",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "location",
      "code",
      "Response"
    ],
    "calls": [
      "_wz_redirect",
      "current_app.redirect"
    ],
    "code_location": {
      "file": "helpers.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 242,
      "end_line": 263
    },
    "code_snippet": "def redirect(\n    location: str, code: int = 302, Response: type[BaseResponse] | None = None\n) -> BaseResponse:\n    \"\"\"Create a redirect response object.\n\n    If :data:`~flask.current_app` is available, it will use its\n    :meth:`~flask.Flask.redirect` method, otherwise it will use\n    :func:`werkzeug.utils.redirect`.\n\n    :param location: The URL to redirect to.\n    :param code: The status code for the redirect.\n    :param Response: The response class to use. Not used when\n        ``current_app..."
  },
  {
    "name": "abort",
    "docstring": "Raise an :exc:`~werkzeug.exceptions.HTTPException` for the given\nstatus code.\n\nIf :data:`~flask.current_app` is available, it will call its\n:attr:`~flask.Flask.aborter` object, otherwise it will use\n:func:`werkzeug.exceptions.abort`.\n\n:param code: The status code for the exception, which must be\n    registered in ``app.aborter``.\n:param args: Passed to the exception.\n:param kwargs: Passed to the exception.\n\n.. versionadded:: 2.2\n    Calls ``current_app.aborter`` if available instead of always\n    using Werkzeug's default ``abort``.",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "code"
    ],
    "calls": [
      "_wz_abort",
      "current_app.aborter"
    ],
    "code_location": {
      "file": "helpers.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 266,
      "end_line": 286
    },
    "code_snippet": "def abort(code: int | BaseResponse, *args: t.Any, **kwargs: t.Any) -> t.NoReturn:\n    \"\"\"Raise an :exc:`~werkzeug.exceptions.HTTPException` for the given\n    status code.\n\n    If :data:`~flask.current_app` is available, it will call its\n    :attr:`~flask.Flask.aborter` object, otherwise it will use\n    :func:`werkzeug.exceptions.abort`.\n\n    :param code: The status code for the exception, which must be\n        registered in ``app.aborter``.\n    :param args: Passed to the exception.\n    :param kw..."
  },
  {
    "name": "get_template_attribute",
    "docstring": "Loads a macro (or variable) a template exports.  This can be used to\ninvoke a macro from within Python code.  If you for example have a\ntemplate named :file:`_cider.html` with the following contents:\n\n.. sourcecode:: html+jinja\n\n   {% macro hello(name) %}Hello {{ name }}!{% endmacro %}\n\nYou can access this from Python code like this::\n\n    hello = get_template_attribute('_cider.html', 'hello')\n    return hello('World')\n\n.. versionadded:: 0.2\n\n:param template_name: the name of the template\n:param attribute: the name of the variable of macro to access",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "template_name",
      "attribute"
    ],
    "calls": [
      "getattr",
      "current_app.jinja_env.get_template"
    ],
    "code_location": {
      "file": "helpers.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 289,
      "end_line": 308
    },
    "code_snippet": "def get_template_attribute(template_name: str, attribute: str) -> t.Any:\n    \"\"\"Loads a macro (or variable) a template exports.  This can be used to\n    invoke a macro from within Python code.  If you for example have a\n    template named :file:`_cider.html` with the following contents:\n\n    .. sourcecode:: html+jinja\n\n       {% macro hello(name) %}Hello {{ name }}!{% endmacro %}\n\n    You can access this from Python code like this::\n\n        hello = get_template_attribute('_cider.html', 'hello')..."
  },
  {
    "name": "flash",
    "docstring": "Flashes a message to the next request.  In order to remove the\nflashed message from the session and to display it to the user,\nthe template has to call :func:`get_flashed_messages`.\n\n.. versionchanged:: 0.3\n   `category` parameter added.\n\n:param message: the message to be flashed.\n:param category: the category for the message.  The following values\n                 are recommended: ``'message'`` for any kind of message,\n                 ``'error'`` for errors, ``'info'`` for information\n                 messages and ``'warning'`` for warnings.  However any\n                 kind of string can be used as category.",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "message",
      "category"
    ],
    "calls": [
      "session.get",
      "flashes.append",
      "current_app._get_current_object",
      "message_flashed.send"
    ],
    "code_location": {
      "file": "helpers.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 311,
      "end_line": 342
    },
    "code_snippet": "def flash(message: str, category: str = \"message\") -> None:\n    \"\"\"Flashes a message to the next request.  In order to remove the\n    flashed message from the session and to display it to the user,\n    the template has to call :func:`get_flashed_messages`.\n\n    .. versionchanged:: 0.3\n       `category` parameter added.\n\n    :param message: the message to be flashed.\n    :param category: the category for the message.  The following values\n                     are recommended: ``'message'`` for an..."
  },
  {
    "name": "get_flashed_messages",
    "docstring": "Pulls all flashed messages from the session and returns them.\nFurther calls in the same request to the function will return\nthe same messages.  By default just the messages are returned,\nbut when `with_categories` is set to ``True``, the return value will\nbe a list of tuples in the form ``(category, message)`` instead.\n\nFilter the flashed messages to one or more categories by providing those\ncategories in `category_filter`.  This allows rendering categories in\nseparate html blocks.  The `with_categories` and `category_filter`\narguments are distinct:\n\n* `with_categories` controls whether categories are returned with message\n  text (``True`` gives a tuple, where ``False`` gives just the message text).\n* `category_filter` filters the messages down to only those matching the\n  provided categories.\n\nSee :doc:`/patterns/flashing` for examples.\n\n.. versionchanged:: 0.3\n   `with_categories` parameter added.\n\n.. versionchanged:: 0.9\n    `category_filter` parameter added.\n\n:param with_categories: set to ``True`` to also receive categories.\n:param category_filter: filter of categories to limit return values.  Only\n                        categories in the list will be returned.",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "with_categories",
      "category_filter"
    ],
    "calls": [
      "list",
      "session.pop",
      "filter"
    ],
    "code_location": {
      "file": "helpers.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 345,
      "end_line": 384
    },
    "code_snippet": "def get_flashed_messages(\n    with_categories: bool = False, category_filter: t.Iterable[str] = ()\n) -> list[str] | list[tuple[str, str]]:\n    \"\"\"Pulls all flashed messages from the session and returns them.\n    Further calls in the same request to the function will return\n    the same messages.  By default just the messages are returned,\n    but when `with_categories` is set to ``True``, the return value will\n    be a list of tuples in the form ``(category, message)`` instead.\n\n    Filter the f..."
  },
  {
    "name": "_prepare_send_file_kwargs",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [],
    "calls": [
      "kwargs.update",
      "kwargs.get"
    ],
    "code_location": {
      "file": "helpers.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 387,
      "end_line": 397
    },
    "code_snippet": "def _prepare_send_file_kwargs(**kwargs: t.Any) -> dict[str, t.Any]:\n    if kwargs.get(\"max_age\") is None:\n        kwargs[\"max_age\"] = current_app.get_send_file_max_age\n\n    kwargs.update(\n        environ=request.environ,\n        use_x_sendfile=current_app.config[\"USE_X_SENDFILE\"],\n        response_class=current_app.response_class,\n        _root_path=current_app.root_path,\n    )\n    return kwargs"
  },
  {
    "name": "send_file",
    "docstring": "Send the contents of a file to the client.\n\nThe first argument can be a file path or a file-like object. Paths\nare preferred in most cases because Werkzeug can manage the file and\nget extra information from the path. Passing a file-like object\nrequires that the file is opened in binary mode, and is mostly\nuseful when building a file in memory with :class:`io.BytesIO`.\n\nNever pass file paths provided by a user. The path is assumed to be\ntrusted, so a user could craft a path to access a file you didn't\nintend. Use :func:`send_from_directory` to safely serve\nuser-requested paths from within a directory.\n\nIf the WSGI server sets a ``file_wrapper`` in ``environ``, it is\nused, otherwise Werkzeug's built-in wrapper is used. Alternatively,\nif the HTTP server supports ``X-Sendfile``, configuring Flask with\n``USE_X_SENDFILE = True`` will tell the server to send the given\npath, which is much more efficient than reading it in Python.\n\n:param path_or_file: The path to the file to send, relative to the\n    current working directory if a relative path is given.\n    Alternatively, a file-like object opened in binary mode. Make\n    sure the file pointer is seeked to the start of the data.\n:param mimetype: The MIME type to send for the file. If not\n    provided, it will try to detect it from the file name.\n:param as_attachment: Indicate to a browser that it should offer to\n    save the file instead of displaying it.\n:param download_name: The default name browsers will use when saving\n    the file. Defaults to the passed file name.\n:param conditional: Enable conditional and range responses based on\n    request headers. Requires passing a file path and ``environ``.\n:param etag: Calculate an ETag for the file, which requires passing\n    a file path. Can also be a string to use instead.\n:param last_modified: The last modified time to send for the file,\n    in seconds. If not provided, it will try to detect it from the\n    file path.\n:param max_age: How long the client should cache the file, in\n    seconds. If set, ``Cache-Control`` will be ``public``, otherwise\n    it will be ``no-cache`` to prefer conditional caching.\n\n.. versionchanged:: 2.0\n    ``download_name`` replaces the ``attachment_filename``\n    parameter. If ``as_attachment=False``, it is passed with\n    ``Content-Disposition: inline`` instead.\n\n.. versionchanged:: 2.0\n    ``max_age`` replaces the ``cache_timeout`` parameter.\n    ``conditional`` is enabled and ``max_age`` is not set by\n    default.\n\n.. versionchanged:: 2.0\n    ``etag`` replaces the ``add_etags`` parameter. It can be a\n    string to use instead of generating one.\n\n.. versionchanged:: 2.0\n    Passing a file-like object that inherits from\n    :class:`~io.TextIOBase` will raise a :exc:`ValueError` rather\n    than sending an empty file.\n\n.. versionadded:: 2.0\n    Moved the implementation to Werkzeug. This is now a wrapper to\n    pass some Flask-specific arguments.\n\n.. versionchanged:: 1.1\n    ``filename`` may be a :class:`~os.PathLike` object.\n\n.. versionchanged:: 1.1\n    Passing a :class:`~io.BytesIO` object supports range requests.\n\n.. versionchanged:: 1.0.3\n    Filenames are encoded with ASCII instead of Latin-1 for broader\n    compatibility with WSGI servers.\n\n.. versionchanged:: 1.0\n    UTF-8 filenames as specified in :rfc:`2231` are supported.\n\n.. versionchanged:: 0.12\n    The filename is no longer automatically inferred from file\n    objects. If you want to use automatic MIME and etag support,\n    pass a filename via ``filename_or_fp`` or\n    ``attachment_filename``.\n\n.. versionchanged:: 0.12\n    ``attachment_filename`` is preferred over ``filename`` for MIME\n    detection.\n\n.. versionchanged:: 0.9\n    ``cache_timeout`` defaults to\n    :meth:`Flask.get_send_file_max_age`.\n\n.. versionchanged:: 0.7\n    MIME guessing and etag support for file-like objects was\n    removed because it was unreliable. Pass a filename if you are\n    able to, otherwise attach an etag yourself.\n\n.. versionchanged:: 0.5\n    The ``add_etags``, ``cache_timeout`` and ``conditional``\n    parameters were added. The default behavior is to add etags.\n\n.. versionadded:: 0.2",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "path_or_file",
      "mimetype",
      "as_attachment",
      "download_name",
      "conditional",
      "etag",
      "last_modified",
      "max_age"
    ],
    "calls": [
      "werkzeug.utils.send_file",
      "_prepare_send_file_kwargs"
    ],
    "code_location": {
      "file": "helpers.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 400,
      "end_line": 523
    },
    "code_snippet": "def send_file(\n    path_or_file: os.PathLike[t.AnyStr] | str | t.BinaryIO,\n    mimetype: str | None = None,\n    as_attachment: bool = False,\n    download_name: str | None = None,\n    conditional: bool = True,\n    etag: bool | str = True,\n    last_modified: datetime | int | float | None = None,\n    max_age: None | (int | t.Callable[[str | None], int | None]) = None,\n) -> Response:\n    \"\"\"Send the contents of a file to the client.\n\n    The first argument can be a file path or a file-like object. P..."
  },
  {
    "name": "send_from_directory",
    "docstring": "Send a file from within a directory using :func:`send_file`.\n\n.. code-block:: python\n\n    @app.route(\"/uploads/<path:name>\")\n    def download_file(name):\n        return send_from_directory(\n            app.config['UPLOAD_FOLDER'], name, as_attachment=True\n        )\n\nThis is a secure way to serve files from a folder, such as static\nfiles or uploads. Uses :func:`~werkzeug.security.safe_join` to\nensure the path coming from the client is not maliciously crafted to\npoint outside the specified directory.\n\nIf the final path does not point to an existing regular file,\nraises a 404 :exc:`~werkzeug.exceptions.NotFound` error.\n\n:param directory: The directory that ``path`` must be located under,\n    relative to the current application's root path. This *must not*\n    be a value provided by the client, otherwise it becomes insecure.\n:param path: The path to the file to send, relative to\n    ``directory``.\n:param kwargs: Arguments to pass to :func:`send_file`.\n\n.. versionchanged:: 2.0\n    ``path`` replaces the ``filename`` parameter.\n\n.. versionadded:: 2.0\n    Moved the implementation to Werkzeug. This is now a wrapper to\n    pass some Flask-specific arguments.\n\n.. versionadded:: 0.5",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "directory",
      "path"
    ],
    "calls": [
      "werkzeug.utils.send_from_directory",
      "_prepare_send_file_kwargs"
    ],
    "code_location": {
      "file": "helpers.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 526,
      "end_line": 567
    },
    "code_snippet": "def send_from_directory(\n    directory: os.PathLike[str] | str,\n    path: os.PathLike[str] | str,\n    **kwargs: t.Any,\n) -> Response:\n    \"\"\"Send a file from within a directory using :func:`send_file`.\n\n    .. code-block:: python\n\n        @app.route(\"/uploads/<path:name>\")\n        def download_file(name):\n            return send_from_directory(\n                app.config['UPLOAD_FOLDER'], name, as_attachment=True\n            )\n\n    This is a secure way to serve files from a folder, such as stati..."
  },
  {
    "name": "get_root_path",
    "docstring": "Find the root path of a package, or the path that contains a\nmodule. If it cannot be found, returns the current working\ndirectory.\n\nNot to be confused with the value returned by :func:`find_package`.\n\n:meta private:",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "import_name"
    ],
    "calls": [
      "sys.modules.get",
      "hasattr",
      "os.path.dirname",
      "hasattr",
      "os.path.dirname",
      "importlib.util.find_spec",
      "os.getcwd",
      "loader.get_filename",
      "__import__",
      "getattr",
      "os.path.abspath",
      "os.path.abspath",
      "RuntimeError"
    ],
    "code_location": {
      "file": "helpers.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 570,
      "end_line": 624
    },
    "code_snippet": "def get_root_path(import_name: str) -> str:\n    \"\"\"Find the root path of a package, or the path that contains a\n    module. If it cannot be found, returns the current working\n    directory.\n\n    Not to be confused with the value returned by :func:`find_package`.\n\n    :meta private:\n    \"\"\"\n    # Module already imported and has a file attribute. Use that first.\n    mod = sys.modules.get(import_name)\n\n    if mod is not None and hasattr(mod, \"__file__\") and mod.__file__ is not None:\n        return ..."
  },
  {
    "name": "_split_blueprint_path",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "name"
    ],
    "calls": [
      "out.extend",
      "_split_blueprint_path",
      "name.rpartition"
    ],
    "code_location": {
      "file": "helpers.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 628,
      "end_line": 634
    },
    "code_snippet": "def _split_blueprint_path(name: str) -> list[str]:\n    out: list[str] = [name]\n\n    if \".\" in name:\n        out.extend(_split_blueprint_path(name.rpartition(\".\")[0]))\n\n    return out"
  },
  {
    "name": "__init__",
    "docstring": "",
    "is_method": true,
    "class_name": "DebugFilesKeyError",
    "parameters": [
      "self",
      "request",
      "key"
    ],
    "calls": [
      "request.form.getlist",
      "join",
      "join",
      "buf.append",
      "repr"
    ],
    "code_location": {
      "file": "debughelpers.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 28,
      "end_line": 44
    },
    "code_snippet": "def __init__(self, request: Request, key: str) -> None:\n        form_matches = request.form.getlist(key)\n        buf = [\n            f\"You tried to access the file {key!r} in the request.files\"\n            \" dictionary but it does not exist. The mimetype for the\"\n            f\" request is {request.mimetype!r} instead of\"\n            \" 'multipart/form-data' which means that no file contents\"\n            \" were transmitted. To fix this error you should provide\"\n            ' enctype=\"multipart/for..."
  },
  {
    "name": "__str__",
    "docstring": "",
    "is_method": true,
    "class_name": "DebugFilesKeyError",
    "parameters": [
      "self"
    ],
    "calls": [],
    "code_location": {
      "file": "debughelpers.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 46,
      "end_line": 47
    },
    "code_snippet": "def __str__(self) -> str:\n        return self.msg"
  },
  {
    "name": "__init__",
    "docstring": "",
    "is_method": true,
    "class_name": "FormDataRoutingRedirect",
    "parameters": [
      "self",
      "request"
    ],
    "calls": [
      "isinstance",
      "buf.append",
      "__init__",
      "buf.append",
      "join",
      "exc.new_url.partition",
      "super"
    ],
    "code_location": {
      "file": "debughelpers.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 57,
      "end_line": 78
    },
    "code_snippet": "def __init__(self, request: Request) -> None:\n        exc = request.routing_exception\n        assert isinstance(exc, RequestRedirect)\n        buf = [\n            f\"A request was sent to '{request.url}', but routing issued\"\n            f\" a redirect to the canonical URL '{exc.new_url}'.\"\n        ]\n\n        if f\"{request.base_url}/\" == exc.new_url.partition(\"?\")[0]:\n            buf.append(\n                \" The URL was defined with a trailing slash. Flask\"\n                \" will redirect to the UR..."
  },
  {
    "name": "attach_enctype_error_multidict",
    "docstring": "Patch ``request.files.__getitem__`` to raise a descriptive error\nabout ``enctype=multipart/form-data``.\n\n:param request: The request to patch.\n:meta private:",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "request"
    ],
    "calls": [
      "__getitem__",
      "with_traceback",
      "super",
      "DebugFilesKeyError"
    ],
    "code_location": {
      "file": "debughelpers.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 81,
      "end_line": 104
    },
    "code_snippet": "def attach_enctype_error_multidict(request: Request) -> None:\n    \"\"\"Patch ``request.files.__getitem__`` to raise a descriptive error\n    about ``enctype=multipart/form-data``.\n\n    :param request: The request to patch.\n    :meta private:\n    \"\"\"\n    oldcls = request.files.__class__\n\n    class newcls(oldcls):  # type: ignore[valid-type, misc]\n        def __getitem__(self, key: str) -> t.Any:\n            try:\n                return super().__getitem__(key)\n            except KeyError as e:\n      ..."
  },
  {
    "name": "_dump_loader_info",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "loader"
    ],
    "calls": [
      "sorted",
      "loader.__dict__.items",
      "key.startswith",
      "isinstance",
      "all",
      "isinstance",
      "type",
      "type",
      "isinstance"
    ],
    "code_location": {
      "file": "debughelpers.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 107,
      "end_line": 121
    },
    "code_snippet": "def _dump_loader_info(loader: BaseLoader) -> t.Iterator[str]:\n    yield f\"class: {type(loader).__module__}.{type(loader).__name__}\"\n    for key, value in sorted(loader.__dict__.items()):\n        if key.startswith(\"_\"):\n            continue\n        if isinstance(value, (tuple, list)):\n            if not all(isinstance(x, str) for x in value):\n                continue\n            yield f\"{key}:\"\n            for item in value:\n                yield f\"  - {item}\"\n            continue\n        elif no..."
  },
  {
    "name": "explain_template_loading_attempts",
    "docstring": "This should help developers understand what failed",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "template",
      "attempts"
    ],
    "calls": [
      "enumerate",
      "app.logger.info",
      "isinstance",
      "info.append",
      "_dump_loader_info",
      "info.append",
      "info.append",
      "info.append",
      "info.append",
      "info.append",
      "join",
      "isinstance",
      "info.append",
      "info.append",
      "repr"
    ],
    "code_location": {
      "file": "debughelpers.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 124,
      "end_line": 178
    },
    "code_snippet": "def explain_template_loading_attempts(\n    app: App,\n    template: str,\n    attempts: list[\n        tuple[\n            BaseLoader,\n            Scaffold,\n            tuple[str, str | None, t.Callable[[], bool] | None] | None,\n        ]\n    ],\n) -> None:\n    \"\"\"This should help developers understand what failed\"\"\"\n    info = [f\"Locating template {template!r}:\"]\n    total_found = 0\n    blueprint = None\n    if request_ctx and request_ctx.request.blueprint is not None:\n        blueprint = request_ctx..."
  },
  {
    "name": "dispatch_request",
    "docstring": "The actual view function behavior. Subclasses must override\nthis and return a valid response. Any variables from the URL\nrule are passed as keyword arguments.",
    "is_method": true,
    "class_name": "View",
    "parameters": [
      "self"
    ],
    "calls": [
      "NotImplementedError"
    ],
    "code_location": {
      "file": "views.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 78,
      "end_line": 83
    },
    "code_snippet": "def dispatch_request(self) -> ft.ResponseReturnValue:\n        \"\"\"The actual view function behavior. Subclasses must override\n        this and return a valid response. Any variables from the URL\n        rule are passed as keyword arguments.\n        \"\"\"\n        raise NotImplementedError()"
  },
  {
    "name": "as_view",
    "docstring": "Convert the class into a view function that can be registered\nfor a route.\n\nBy default, the generated view will create a new instance of the\nview class for every request and call its\n:meth:`dispatch_request` method. If the view class sets\n:attr:`init_every_request` to ``False``, the same instance will\nbe used for every request.\n\nExcept for ``name``, all other arguments passed to this method\nare forwarded to the view class ``__init__`` method.\n\n.. versionchanged:: 2.2\n    Added the ``init_every_request`` class attribute.",
    "is_method": true,
    "class_name": "View",
    "parameters": [
      "cls",
      "name"
    ],
    "calls": [
      "cls",
      "view.view_class",
      "decorator",
      "current_app.ensure_sync",
      "current_app.ensure_sync"
    ],
    "code_location": {
      "file": "views.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 86,
      "end_line": 135
    },
    "code_snippet": "def as_view(\n        cls, name: str, *class_args: t.Any, **class_kwargs: t.Any\n    ) -> ft.RouteCallable:\n        \"\"\"Convert the class into a view function that can be registered\n        for a route.\n\n        By default, the generated view will create a new instance of the\n        view class for every request and call its\n        :meth:`dispatch_request` method. If the view class sets\n        :attr:`init_every_request` to ``False``, the same instance will\n        be used for every request.\n\n    ..."
  },
  {
    "name": "__init_subclass__",
    "docstring": "",
    "is_method": true,
    "class_name": "MethodView",
    "parameters": [
      "cls"
    ],
    "calls": [
      "__init_subclass__",
      "set",
      "super",
      "getattr",
      "hasattr",
      "methods.update",
      "methods.add",
      "key.upper"
    ],
    "code_location": {
      "file": "views.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 165,
      "end_line": 180
    },
    "code_snippet": "def __init_subclass__(cls, **kwargs: t.Any) -> None:\n        super().__init_subclass__(**kwargs)\n\n        if \"methods\" not in cls.__dict__:\n            methods = set()\n\n            for base in cls.__bases__:\n                if getattr(base, \"methods\", None):\n                    methods.update(base.methods)  # type: ignore[attr-defined]\n\n            for key in http_method_funcs:\n                if hasattr(cls, key):\n                    methods.add(key.upper())\n\n            if methods:\n           ..."
  },
  {
    "name": "dispatch_request",
    "docstring": "",
    "is_method": true,
    "class_name": "MethodView",
    "parameters": [
      "self"
    ],
    "calls": [
      "getattr",
      "request.method.lower",
      "getattr",
      "current_app.ensure_sync"
    ],
    "code_location": {
      "file": "views.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 182,
      "end_line": 191
    },
    "code_snippet": "def dispatch_request(self, **kwargs: t.Any) -> ft.ResponseReturnValue:\n        meth = getattr(self, request.method.lower(), None)\n\n        # If the request method is HEAD and we don't have a handler for it\n        # retry with GET.\n        if meth is None and request.method == \"HEAD\":\n            meth = getattr(self, \"get\", None)\n\n        assert meth is not None, f\"Unimplemented method {request.method!r}\"\n        return current_app.ensure_sync(meth)(**kwargs)"
  },
  {
    "name": "__init__",
    "docstring": "",
    "is_method": true,
    "class_name": "EnvironBuilder",
    "parameters": [
      "self",
      "app",
      "path",
      "base_url",
      "subdomain",
      "url_scheme"
    ],
    "calls": [
      "__init__",
      "urlsplit",
      "bool",
      "app.config.get",
      "super",
      "app_root.lstrip"
    ],
    "code_location": {
      "file": "testing.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 49,
      "end_line": 86
    },
    "code_snippet": "def __init__(\n        self,\n        app: Flask,\n        path: str = \"/\",\n        base_url: str | None = None,\n        subdomain: str | None = None,\n        url_scheme: str | None = None,\n        *args: t.Any,\n        **kwargs: t.Any,\n    ) -> None:\n        assert not (base_url or subdomain or url_scheme) or (\n            base_url is not None\n        ) != bool(subdomain or url_scheme), (\n            'Cannot pass \"subdomain\" or \"url_scheme\" with \"base_url\".'\n        )\n\n        if base_url is None:..."
  },
  {
    "name": "json_dumps",
    "docstring": "Serialize ``obj`` to a JSON-formatted string.\n\nThe serialization will be configured according to the config associated\nwith this EnvironBuilder's ``app``.",
    "is_method": true,
    "class_name": "EnvironBuilder",
    "parameters": [
      "self",
      "obj"
    ],
    "calls": [
      "self.app.json.dumps"
    ],
    "code_location": {
      "file": "testing.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 88,
      "end_line": 94
    },
    "code_snippet": "def json_dumps(self, obj: t.Any, **kwargs: t.Any) -> str:\n        \"\"\"Serialize ``obj`` to a JSON-formatted string.\n\n        The serialization will be configured according to the config associated\n        with this EnvironBuilder's ``app``.\n        \"\"\"\n        return self.app.json.dumps(obj, **kwargs)"
  },
  {
    "name": "_get_werkzeug_version",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [],
    "calls": [
      "importlib.metadata.version"
    ],
    "code_location": {
      "file": "testing.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 100,
      "end_line": 106
    },
    "code_snippet": "def _get_werkzeug_version() -> str:\n    global _werkzeug_version\n\n    if not _werkzeug_version:\n        _werkzeug_version = importlib.metadata.version(\"werkzeug\")\n\n    return _werkzeug_version"
  },
  {
    "name": "__init__",
    "docstring": "",
    "is_method": true,
    "class_name": "FlaskClient",
    "parameters": [
      "self"
    ],
    "calls": [
      "__init__",
      "ExitStack",
      "super",
      "_get_werkzeug_version"
    ],
    "code_location": {
      "file": "testing.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 125,
      "end_line": 133
    },
    "code_snippet": "def __init__(self, *args: t.Any, **kwargs: t.Any) -> None:\n        super().__init__(*args, **kwargs)\n        self.preserve_context = False\n        self._new_contexts: list[t.ContextManager[t.Any]] = []\n        self._context_stack = ExitStack()\n        self.environ_base = {\n            \"REMOTE_ADDR\": \"127.0.0.1\",\n            \"HTTP_USER_AGENT\": f\"Werkzeug/{_get_werkzeug_version()}\",\n        }"
  },
  {
    "name": "session_transaction",
    "docstring": "When used in combination with a ``with`` statement this opens a\nsession transaction.  This can be used to modify the session that\nthe test client uses.  Once the ``with`` block is left the session is\nstored back.\n\n::\n\n    with client.session_transaction() as session:\n        session['value'] = 42\n\nInternally this is implemented by going through a temporary test\nrequest context and since session handling could depend on\nrequest variables this function accepts the same arguments as\n:meth:`~flask.Flask.test_request_context` which are directly\npassed through.",
    "is_method": true,
    "class_name": "FlaskClient",
    "parameters": [
      "self"
    ],
    "calls": [
      "app.test_request_context",
      "self._add_cookies_to_wsgi",
      "app.response_class",
      "app.session_interface.is_null_session",
      "self._update_cookies_from_response",
      "TypeError",
      "app.session_interface.open_session",
      "RuntimeError",
      "app.session_interface.save_session",
      "resp.headers.getlist",
      "ctx.request.host.partition"
    ],
    "code_location": {
      "file": "testing.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 136,
      "end_line": 183
    },
    "code_snippet": "def session_transaction(\n        self, *args: t.Any, **kwargs: t.Any\n    ) -> t.Iterator[SessionMixin]:\n        \"\"\"When used in combination with a ``with`` statement this opens a\n        session transaction.  This can be used to modify the session that\n        the test client uses.  Once the ``with`` block is left the session is\n        stored back.\n\n        ::\n\n            with client.session_transaction() as session:\n                session['value'] = 42\n\n        Internally this is implemented..."
  },
  {
    "name": "_copy_environ",
    "docstring": "",
    "is_method": true,
    "class_name": "FlaskClient",
    "parameters": [
      "self",
      "other"
    ],
    "calls": [],
    "code_location": {
      "file": "testing.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 185,
      "end_line": 191
    },
    "code_snippet": "def _copy_environ(self, other: WSGIEnvironment) -> WSGIEnvironment:\n        out = {**self.environ_base, **other}\n\n        if self.preserve_context:\n            out[\"werkzeug.debug.preserve_context\"] = self._new_contexts.append\n\n        return out"
  },
  {
    "name": "_request_from_builder_args",
    "docstring": "",
    "is_method": true,
    "class_name": "FlaskClient",
    "parameters": [
      "self",
      "args",
      "kwargs"
    ],
    "calls": [
      "self._copy_environ",
      "EnvironBuilder",
      "kwargs.get",
      "builder.get_request",
      "builder.close"
    ],
    "code_location": {
      "file": "testing.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 193,
      "end_line": 202
    },
    "code_snippet": "def _request_from_builder_args(\n        self, args: tuple[t.Any, ...], kwargs: dict[str, t.Any]\n    ) -> BaseRequest:\n        kwargs[\"environ_base\"] = self._copy_environ(kwargs.get(\"environ_base\", {}))\n        builder = EnvironBuilder(self.application, *args, **kwargs)\n\n        try:\n            return builder.get_request()\n        finally:\n            builder.close()"
  },
  {
    "name": "open",
    "docstring": "",
    "is_method": true,
    "class_name": "FlaskClient",
    "parameters": [
      "self"
    ],
    "calls": [
      "self._context_stack.close",
      "open",
      "isinstance",
      "isinstance",
      "self._request_from_builder_args",
      "self._new_contexts.pop",
      "self._context_stack.enter_context",
      "copy",
      "self._copy_environ",
      "builder.get_request",
      "isinstance",
      "super",
      "get_request",
      "copy",
      "self._copy_environ",
      "EnvironBuilder.from_environ",
      "self._copy_environ"
    ],
    "code_location": {
      "file": "testing.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 204,
      "end_line": 247
    },
    "code_snippet": "def open(\n        self,\n        *args: t.Any,\n        buffered: bool = False,\n        follow_redirects: bool = False,\n        **kwargs: t.Any,\n    ) -> TestResponse:\n        if args and isinstance(\n            args[0], (werkzeug.test.EnvironBuilder, dict, BaseRequest)\n        ):\n            if isinstance(args[0], werkzeug.test.EnvironBuilder):\n                builder = copy(args[0])\n                builder.environ_base = self._copy_environ(builder.environ_base or {})  # type: ignore[arg-type]\n  ..."
  },
  {
    "name": "__enter__",
    "docstring": "",
    "is_method": true,
    "class_name": "FlaskClient",
    "parameters": [
      "self"
    ],
    "calls": [
      "RuntimeError"
    ],
    "code_location": {
      "file": "testing.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 249,
      "end_line": 253
    },
    "code_snippet": "def __enter__(self) -> FlaskClient:\n        if self.preserve_context:\n            raise RuntimeError(\"Cannot nest client invocations\")\n        self.preserve_context = True\n        return self"
  },
  {
    "name": "__exit__",
    "docstring": "",
    "is_method": true,
    "class_name": "FlaskClient",
    "parameters": [
      "self",
      "exc_type",
      "exc_value",
      "tb"
    ],
    "calls": [
      "self._context_stack.close"
    ],
    "code_location": {
      "file": "testing.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 255,
      "end_line": 262
    },
    "code_snippet": "def __exit__(\n        self,\n        exc_type: type | None,\n        exc_value: BaseException | None,\n        tb: TracebackType | None,\n    ) -> None:\n        self.preserve_context = False\n        self._context_stack.close()"
  },
  {
    "name": "__init__",
    "docstring": "",
    "is_method": true,
    "class_name": "FlaskCliRunner",
    "parameters": [
      "self",
      "app"
    ],
    "calls": [
      "__init__",
      "super"
    ],
    "code_location": {
      "file": "testing.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 271,
      "end_line": 273
    },
    "code_snippet": "def __init__(self, app: Flask, **kwargs: t.Any) -> None:\n        self.app = app\n        super().__init__(**kwargs)"
  },
  {
    "name": "invoke",
    "docstring": "Invokes a CLI command in an isolated environment. See\n:meth:`CliRunner.invoke <click.testing.CliRunner.invoke>` for\nfull method documentation. See :ref:`testing-cli` for examples.\n\nIf the ``obj`` argument is not given, passes an instance of\n:class:`~flask.cli.ScriptInfo` that knows how to load the Flask\napp being tested.\n\n:param cli: Command object to invoke. Default is the app's\n    :attr:`~flask.app.Flask.cli` group.\n:param args: List of strings to invoke the command with.\n\n:return: a :class:`~click.testing.Result` object.",
    "is_method": true,
    "class_name": "FlaskCliRunner",
    "parameters": [
      "self",
      "cli",
      "args"
    ],
    "calls": [
      "invoke",
      "ScriptInfo",
      "super"
    ],
    "code_location": {
      "file": "testing.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 275,
      "end_line": 298
    },
    "code_snippet": "def invoke(  # type: ignore\n        self, cli: t.Any = None, args: t.Any = None, **kwargs: t.Any\n    ) -> Result:\n        \"\"\"Invokes a CLI command in an isolated environment. See\n        :meth:`CliRunner.invoke <click.testing.CliRunner.invoke>` for\n        full method documentation. See :ref:`testing-cli` for examples.\n\n        If the ``obj`` argument is not given, passes an instance of\n        :class:`~flask.cli.ScriptInfo` that knows how to load the Flask\n        app being tested.\n\n        :pa..."
  },
  {
    "name": "__init__",
    "docstring": "",
    "is_method": true,
    "class_name": "Blueprint",
    "parameters": [
      "self",
      "name",
      "import_name",
      "static_folder",
      "static_url_path",
      "template_folder",
      "url_prefix",
      "subdomain",
      "url_defaults",
      "root_path",
      "cli_group"
    ],
    "calls": [
      "__init__",
      "AppGroup",
      "super"
    ],
    "code_location": {
      "file": "blueprints.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 19,
      "end_line": 53
    },
    "code_snippet": "def __init__(\n        self,\n        name: str,\n        import_name: str,\n        static_folder: str | os.PathLike[str] | None = None,\n        static_url_path: str | None = None,\n        template_folder: str | os.PathLike[str] | None = None,\n        url_prefix: str | None = None,\n        subdomain: str | None = None,\n        url_defaults: dict[str, t.Any] | None = None,\n        root_path: str | None = None,\n        cli_group: str | None = _sentinel,  # type: ignore\n    ) -> None:\n        super()...."
  },
  {
    "name": "get_send_file_max_age",
    "docstring": "Used by :func:`send_file` to determine the ``max_age`` cache\nvalue for a given file path if it wasn't passed.\n\nBy default, this returns :data:`SEND_FILE_MAX_AGE_DEFAULT` from\nthe configuration of :data:`~flask.current_app`. This defaults\nto ``None``, which tells the browser to use conditional requests\ninstead of a timed cache, which is usually preferable.\n\nNote this is a duplicate of the same method in the Flask\nclass.\n\n.. versionchanged:: 2.0\n    The default configuration is ``None`` instead of 12 hours.\n\n.. versionadded:: 0.9",
    "is_method": true,
    "class_name": "Blueprint",
    "parameters": [
      "self",
      "filename"
    ],
    "calls": [
      "isinstance",
      "int",
      "value.total_seconds"
    ],
    "code_location": {
      "file": "blueprints.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 55,
      "end_line": 80
    },
    "code_snippet": "def get_send_file_max_age(self, filename: str | None) -> int | None:\n        \"\"\"Used by :func:`send_file` to determine the ``max_age`` cache\n        value for a given file path if it wasn't passed.\n\n        By default, this returns :data:`SEND_FILE_MAX_AGE_DEFAULT` from\n        the configuration of :data:`~flask.current_app`. This defaults\n        to ``None``, which tells the browser to use conditional requests\n        instead of a timed cache, which is usually preferable.\n\n        Note this is ..."
  },
  {
    "name": "send_static_file",
    "docstring": "The view function used to serve files from\n:attr:`static_folder`. A route is automatically registered for\nthis view at :attr:`static_url_path` if :attr:`static_folder` is\nset.\n\nNote this is a duplicate of the same method in the Flask\nclass.\n\n.. versionadded:: 0.5",
    "is_method": true,
    "class_name": "Blueprint",
    "parameters": [
      "self",
      "filename"
    ],
    "calls": [
      "self.get_send_file_max_age",
      "send_from_directory",
      "RuntimeError",
      "t.cast"
    ],
    "code_location": {
      "file": "blueprints.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 82,
      "end_line": 102
    },
    "code_snippet": "def send_static_file(self, filename: str) -> Response:\n        \"\"\"The view function used to serve files from\n        :attr:`static_folder`. A route is automatically registered for\n        this view at :attr:`static_url_path` if :attr:`static_folder` is\n        set.\n\n        Note this is a duplicate of the same method in the Flask\n        class.\n\n        .. versionadded:: 0.5\n\n        \"\"\"\n        if not self.has_static_folder:\n            raise RuntimeError(\"'static_folder' must be set to serve s..."
  },
  {
    "name": "open_resource",
    "docstring": "Open a resource file relative to :attr:`root_path` for reading. The\nblueprint-relative equivalent of the app's :meth:`~.Flask.open_resource`\nmethod.\n\n:param resource: Path to the resource relative to :attr:`root_path`.\n:param mode: Open the file in this mode. Only reading is supported,\n    valid values are ``\"r\"`` (or ``\"rt\"``) and ``\"rb\"``.\n:param encoding: Open the file with this encoding when opening in text\n    mode. This is ignored when opening in binary mode.\n\n.. versionchanged:: 3.1\n    Added the ``encoding`` parameter.",
    "is_method": true,
    "class_name": "Blueprint",
    "parameters": [
      "self",
      "resource",
      "mode",
      "encoding"
    ],
    "calls": [
      "os.path.join",
      "open",
      "ValueError",
      "open"
    ],
    "code_location": {
      "file": "blueprints.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 104,
      "end_line": 128
    },
    "code_snippet": "def open_resource(\n        self, resource: str, mode: str = \"rb\", encoding: str | None = \"utf-8\"\n    ) -> t.IO[t.AnyStr]:\n        \"\"\"Open a resource file relative to :attr:`root_path` for reading. The\n        blueprint-relative equivalent of the app's :meth:`~.Flask.open_resource`\n        method.\n\n        :param resource: Path to the resource relative to :attr:`root_path`.\n        :param mode: Open the file in this mode. Only reading is supported,\n            valid values are ``\"r\"`` (or ``\"rt\"`..."
  },
  {
    "name": "__getattr__",
    "docstring": "",
    "is_method": true,
    "class_name": "_AppCtxGlobals",
    "parameters": [
      "self",
      "name"
    ],
    "calls": [
      "AttributeError"
    ],
    "code_location": {
      "file": "ctx.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 52,
      "end_line": 56
    },
    "code_snippet": "def __getattr__(self, name: str) -> t.Any:\n        try:\n            return self.__dict__[name]\n        except KeyError:\n            raise AttributeError(name) from None"
  },
  {
    "name": "__setattr__",
    "docstring": "",
    "is_method": true,
    "class_name": "_AppCtxGlobals",
    "parameters": [
      "self",
      "name",
      "value"
    ],
    "calls": [],
    "code_location": {
      "file": "ctx.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 58,
      "end_line": 59
    },
    "code_snippet": "def __setattr__(self, name: str, value: t.Any) -> None:\n        self.__dict__[name] = value"
  },
  {
    "name": "__delattr__",
    "docstring": "",
    "is_method": true,
    "class_name": "_AppCtxGlobals",
    "parameters": [
      "self",
      "name"
    ],
    "calls": [
      "AttributeError"
    ],
    "code_location": {
      "file": "ctx.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 61,
      "end_line": 65
    },
    "code_snippet": "def __delattr__(self, name: str) -> None:\n        try:\n            del self.__dict__[name]\n        except KeyError:\n            raise AttributeError(name) from None"
  },
  {
    "name": "get",
    "docstring": "Get an attribute by name, or a default value. Like\n:meth:`dict.get`.\n\n:param name: Name of attribute to get.\n:param default: Value to return if the attribute is not present.\n\n.. versionadded:: 0.10",
    "is_method": true,
    "class_name": "_AppCtxGlobals",
    "parameters": [
      "self",
      "name",
      "default"
    ],
    "calls": [
      "self.__dict__.get"
    ],
    "code_location": {
      "file": "ctx.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 67,
      "end_line": 76
    },
    "code_snippet": "def get(self, name: str, default: t.Any | None = None) -> t.Any:\n        \"\"\"Get an attribute by name, or a default value. Like\n        :meth:`dict.get`.\n\n        :param name: Name of attribute to get.\n        :param default: Value to return if the attribute is not present.\n\n        .. versionadded:: 0.10\n        \"\"\"\n        return self.__dict__.get(name, default)"
  },
  {
    "name": "pop",
    "docstring": "Get and remove an attribute by name. Like :meth:`dict.pop`.\n\n:param name: Name of attribute to pop.\n:param default: Value to return if the attribute is not present,\n    instead of raising a ``KeyError``.\n\n.. versionadded:: 0.11",
    "is_method": true,
    "class_name": "_AppCtxGlobals",
    "parameters": [
      "self",
      "name",
      "default"
    ],
    "calls": [
      "self.__dict__.pop",
      "self.__dict__.pop"
    ],
    "code_location": {
      "file": "ctx.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 78,
      "end_line": 90
    },
    "code_snippet": "def pop(self, name: str, default: t.Any = _sentinel) -> t.Any:\n        \"\"\"Get and remove an attribute by name. Like :meth:`dict.pop`.\n\n        :param name: Name of attribute to pop.\n        :param default: Value to return if the attribute is not present,\n            instead of raising a ``KeyError``.\n\n        .. versionadded:: 0.11\n        \"\"\"\n        if default is _sentinel:\n            return self.__dict__.pop(name)\n        else:\n            return self.__dict__.pop(name, default)"
  },
  {
    "name": "setdefault",
    "docstring": "Get the value of an attribute if it is present, otherwise\nset and return a default value. Like :meth:`dict.setdefault`.\n\n:param name: Name of attribute to get.\n:param default: Value to set and return if the attribute is not\n    present.\n\n.. versionadded:: 0.11",
    "is_method": true,
    "class_name": "_AppCtxGlobals",
    "parameters": [
      "self",
      "name",
      "default"
    ],
    "calls": [
      "self.__dict__.setdefault"
    ],
    "code_location": {
      "file": "ctx.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 92,
      "end_line": 102
    },
    "code_snippet": "def setdefault(self, name: str, default: t.Any = None) -> t.Any:\n        \"\"\"Get the value of an attribute if it is present, otherwise\n        set and return a default value. Like :meth:`dict.setdefault`.\n\n        :param name: Name of attribute to get.\n        :param default: Value to set and return if the attribute is not\n            present.\n\n        .. versionadded:: 0.11\n        \"\"\"\n        return self.__dict__.setdefault(name, default)"
  },
  {
    "name": "__contains__",
    "docstring": "",
    "is_method": true,
    "class_name": "_AppCtxGlobals",
    "parameters": [
      "self",
      "item"
    ],
    "calls": [],
    "code_location": {
      "file": "ctx.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 104,
      "end_line": 105
    },
    "code_snippet": "def __contains__(self, item: str) -> bool:\n        return item in self.__dict__"
  },
  {
    "name": "__iter__",
    "docstring": "",
    "is_method": true,
    "class_name": "_AppCtxGlobals",
    "parameters": [
      "self"
    ],
    "calls": [
      "iter"
    ],
    "code_location": {
      "file": "ctx.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 107,
      "end_line": 108
    },
    "code_snippet": "def __iter__(self) -> t.Iterator[str]:\n        return iter(self.__dict__)"
  },
  {
    "name": "__repr__",
    "docstring": "",
    "is_method": true,
    "class_name": "_AppCtxGlobals",
    "parameters": [
      "self"
    ],
    "calls": [
      "_cv_app.get",
      "object.__repr__"
    ],
    "code_location": {
      "file": "ctx.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 110,
      "end_line": 114
    },
    "code_snippet": "def __repr__(self) -> str:\n        ctx = _cv_app.get(None)\n        if ctx is not None:\n            return f\"<flask.g of '{ctx.app.name}'>\"\n        return object.__repr__(self)"
  },
  {
    "name": "after_this_request",
    "docstring": "Executes a function after this request.  This is useful to modify\nresponse objects.  The function is passed the response object and has\nto return the same or a new one.\n\nExample::\n\n    @app.route('/')\n    def index():\n        @after_this_request\n        def add_header(response):\n            response.headers['X-Foo'] = 'Parachute'\n            return response\n        return 'Hello World!'\n\nThis is more useful if a function other than the view function wants to\nmodify a response.  For instance think of a decorator that wants to add\nsome headers without converting the return value into a response object.\n\n.. versionadded:: 0.9",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "f"
    ],
    "calls": [
      "_cv_request.get",
      "ctx._after_request_functions.append",
      "RuntimeError"
    ],
    "code_location": {
      "file": "ctx.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 117,
      "end_line": 149
    },
    "code_snippet": "def after_this_request(\n    f: ft.AfterRequestCallable[t.Any],\n) -> ft.AfterRequestCallable[t.Any]:\n    \"\"\"Executes a function after this request.  This is useful to modify\n    response objects.  The function is passed the response object and has\n    to return the same or a new one.\n\n    Example::\n\n        @app.route('/')\n        def index():\n            @after_this_request\n            def add_header(response):\n                response.headers['X-Foo'] = 'Parachute'\n                return respon..."
  },
  {
    "name": "copy_current_request_context",
    "docstring": "A helper function that decorates a function to retain the current\nrequest context.  This is useful when working with greenlets.  The moment\nthe function is decorated a copy of the request context is created and\nthen pushed when the function is called.  The current session is also\nincluded in the copied request context.\n\nExample::\n\n    import gevent\n    from flask import copy_current_request_context\n\n    @app.route('/')\n    def index():\n        @copy_current_request_context\n        def do_some_work():\n            # do some work here, it can access flask.request or\n            # flask.session like you would otherwise in the view function.\n            ...\n        gevent.spawn(do_some_work)\n        return 'Regular response'\n\n.. versionadded:: 0.10",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "f"
    ],
    "calls": [
      "_cv_request.get",
      "ctx.copy",
      "update_wrapper",
      "RuntimeError",
      "ctx.app.ensure_sync"
    ],
    "code_location": {
      "file": "ctx.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 155,
      "end_line": 193
    },
    "code_snippet": "def copy_current_request_context(f: F) -> F:\n    \"\"\"A helper function that decorates a function to retain the current\n    request context.  This is useful when working with greenlets.  The moment\n    the function is decorated a copy of the request context is created and\n    then pushed when the function is called.  The current session is also\n    included in the copied request context.\n\n    Example::\n\n        import gevent\n        from flask import copy_current_request_context\n\n        @app.rout..."
  },
  {
    "name": "has_request_context",
    "docstring": "If you have code that wants to test if a request context is there or\nnot this function can be used.  For instance, you may want to take advantage\nof request information if the request object is available, but fail\nsilently if it is unavailable.\n\n::\n\n    class User(db.Model):\n\n        def __init__(self, username, remote_addr=None):\n            self.username = username\n            if remote_addr is None and has_request_context():\n                remote_addr = request.remote_addr\n            self.remote_addr = remote_addr\n\nAlternatively you can also just test any of the context bound objects\n(such as :class:`request` or :class:`g`) for truthness::\n\n    class User(db.Model):\n\n        def __init__(self, username, remote_addr=None):\n            self.username = username\n            if remote_addr is None and request:\n                remote_addr = request.remote_addr\n            self.remote_addr = remote_addr\n\n.. versionadded:: 0.7",
    "is_method": false,
    "class_name": null,
    "parameters": [],
    "calls": [
      "_cv_request.get"
    ],
    "code_location": {
      "file": "ctx.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 196,
      "end_line": 225
    },
    "code_snippet": "def has_request_context() -> bool:\n    \"\"\"If you have code that wants to test if a request context is there or\n    not this function can be used.  For instance, you may want to take advantage\n    of request information if the request object is available, but fail\n    silently if it is unavailable.\n\n    ::\n\n        class User(db.Model):\n\n            def __init__(self, username, remote_addr=None):\n                self.username = username\n                if remote_addr is None and has_request_conte..."
  },
  {
    "name": "has_app_context",
    "docstring": "Works like :func:`has_request_context` but for the application\ncontext.  You can also just do a boolean check on the\n:data:`current_app` object instead.\n\n.. versionadded:: 0.9",
    "is_method": false,
    "class_name": null,
    "parameters": [],
    "calls": [
      "_cv_app.get"
    ],
    "code_location": {
      "file": "ctx.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 228,
      "end_line": 235
    },
    "code_snippet": "def has_app_context() -> bool:\n    \"\"\"Works like :func:`has_request_context` but for the application\n    context.  You can also just do a boolean check on the\n    :data:`current_app` object instead.\n\n    .. versionadded:: 0.9\n    \"\"\"\n    return _cv_app.get(None) is not None"
  },
  {
    "name": "__init__",
    "docstring": "",
    "is_method": true,
    "class_name": "AppContext",
    "parameters": [
      "self",
      "app"
    ],
    "calls": [
      "app.create_url_adapter",
      "app.app_ctx_globals_class"
    ],
    "code_location": {
      "file": "ctx.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 245,
      "end_line": 249
    },
    "code_snippet": "def __init__(self, app: Flask) -> None:\n        self.app = app\n        self.url_adapter = app.create_url_adapter(None)\n        self.g: _AppCtxGlobals = app.app_ctx_globals_class()\n        self._cv_tokens: list[contextvars.Token[AppContext]] = []"
  },
  {
    "name": "push",
    "docstring": "Binds the app context to the current context.",
    "is_method": true,
    "class_name": "AppContext",
    "parameters": [
      "self"
    ],
    "calls": [
      "self._cv_tokens.append",
      "appcontext_pushed.send",
      "_cv_app.set"
    ],
    "code_location": {
      "file": "ctx.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 251,
      "end_line": 254
    },
    "code_snippet": "def push(self) -> None:\n        \"\"\"Binds the app context to the current context.\"\"\"\n        self._cv_tokens.append(_cv_app.set(self))\n        appcontext_pushed.send(self.app, _async_wrapper=self.app.ensure_sync)"
  },
  {
    "name": "pop",
    "docstring": "Pops the app context.",
    "is_method": true,
    "class_name": "AppContext",
    "parameters": [
      "self",
      "exc"
    ],
    "calls": [
      "appcontext_popped.send",
      "_cv_app.get",
      "_cv_app.reset",
      "AssertionError",
      "len",
      "self.app.do_teardown_appcontext",
      "self._cv_tokens.pop",
      "sys.exc_info"
    ],
    "code_location": {
      "file": "ctx.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 256,
      "end_line": 272
    },
    "code_snippet": "def pop(self, exc: BaseException | None = _sentinel) -> None:  # type: ignore\n        \"\"\"Pops the app context.\"\"\"\n        try:\n            if len(self._cv_tokens) == 1:\n                if exc is _sentinel:\n                    exc = sys.exc_info()[1]\n                self.app.do_teardown_appcontext(exc)\n        finally:\n            ctx = _cv_app.get()\n            _cv_app.reset(self._cv_tokens.pop())\n\n        if ctx is not self:\n            raise AssertionError(\n                f\"Popped wrong app c..."
  },
  {
    "name": "__enter__",
    "docstring": "",
    "is_method": true,
    "class_name": "AppContext",
    "parameters": [
      "self"
    ],
    "calls": [
      "self.push"
    ],
    "code_location": {
      "file": "ctx.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 274,
      "end_line": 276
    },
    "code_snippet": "def __enter__(self) -> AppContext:\n        self.push()\n        return self"
  },
  {
    "name": "__exit__",
    "docstring": "",
    "is_method": true,
    "class_name": "AppContext",
    "parameters": [
      "self",
      "exc_type",
      "exc_value",
      "tb"
    ],
    "calls": [
      "self.pop"
    ],
    "code_location": {
      "file": "ctx.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 278,
      "end_line": 284
    },
    "code_snippet": "def __exit__(\n        self,\n        exc_type: type | None,\n        exc_value: BaseException | None,\n        tb: TracebackType | None,\n    ) -> None:\n        self.pop(exc_value)"
  },
  {
    "name": "__init__",
    "docstring": "",
    "is_method": true,
    "class_name": "RequestContext",
    "parameters": [
      "self",
      "app",
      "environ",
      "request",
      "session"
    ],
    "calls": [
      "app.request_class",
      "app.create_url_adapter"
    ],
    "code_location": {
      "file": "ctx.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 309,
      "end_line": 335
    },
    "code_snippet": "def __init__(\n        self,\n        app: Flask,\n        environ: WSGIEnvironment,\n        request: Request | None = None,\n        session: SessionMixin | None = None,\n    ) -> None:\n        self.app = app\n        if request is None:\n            request = app.request_class(environ)\n            request.json_module = app.json\n        self.request: Request = request\n        self.url_adapter = None\n        try:\n            self.url_adapter = app.create_url_adapter(self.request)\n        except HTTPExc..."
  },
  {
    "name": "copy",
    "docstring": "Creates a copy of this request context with the same request object.\nThis can be used to move a request context to a different greenlet.\nBecause the actual request object is the same this cannot be used to\nmove a request context to a different thread unless access to the\nrequest object is locked.\n\n.. versionadded:: 0.10\n\n.. versionchanged:: 1.1\n   The current session object is used instead of reloading the original\n   data. This prevents `flask.session` pointing to an out-of-date object.",
    "is_method": true,
    "class_name": "RequestContext",
    "parameters": [
      "self"
    ],
    "calls": [
      "self.__class__"
    ],
    "code_location": {
      "file": "ctx.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 337,
      "end_line": 355
    },
    "code_snippet": "def copy(self) -> RequestContext:\n        \"\"\"Creates a copy of this request context with the same request object.\n        This can be used to move a request context to a different greenlet.\n        Because the actual request object is the same this cannot be used to\n        move a request context to a different thread unless access to the\n        request object is locked.\n\n        .. versionadded:: 0.10\n\n        .. versionchanged:: 1.1\n           The current session object is used instead of rel..."
  },
  {
    "name": "match_request",
    "docstring": "Can be overridden by a subclass to hook into the matching\nof the request.",
    "is_method": true,
    "class_name": "RequestContext",
    "parameters": [
      "self"
    ],
    "calls": [
      "self.url_adapter.match"
    ],
    "code_location": {
      "file": "ctx.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 357,
      "end_line": 365
    },
    "code_snippet": "def match_request(self) -> None:\n        \"\"\"Can be overridden by a subclass to hook into the matching\n        of the request.\n        \"\"\"\n        try:\n            result = self.url_adapter.match(return_rule=True)  # type: ignore\n            self.request.url_rule, self.request.view_args = result  # type: ignore\n        except HTTPException as e:\n            self.request.routing_exception = e"
  },
  {
    "name": "push",
    "docstring": "",
    "is_method": true,
    "class_name": "RequestContext",
    "parameters": [
      "self"
    ],
    "calls": [
      "_cv_app.get",
      "self._cv_tokens.append",
      "self.app.app_context",
      "app_ctx.push",
      "session_interface.open_session",
      "self.match_request",
      "_cv_request.set",
      "session_interface.make_null_session"
    ],
    "code_location": {
      "file": "ctx.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 367,
      "end_line": 394
    },
    "code_snippet": "def push(self) -> None:\n        # Before we push the request context we have to ensure that there\n        # is an application context.\n        app_ctx = _cv_app.get(None)\n\n        if app_ctx is None or app_ctx.app is not self.app:\n            app_ctx = self.app.app_context()\n            app_ctx.push()\n        else:\n            app_ctx = None\n\n        self._cv_tokens.append((_cv_request.set(self), app_ctx))\n\n        # Open the session at the moment that the request context is available.\n        #..."
  },
  {
    "name": "pop",
    "docstring": "Pops the request context and unbinds it by doing that.  This will\nalso trigger the execution of functions registered by the\n:meth:`~flask.Flask.teardown_request` decorator.\n\n.. versionchanged:: 0.9\n   Added the `exc` argument.",
    "is_method": true,
    "class_name": "RequestContext",
    "parameters": [
      "self",
      "exc"
    ],
    "calls": [
      "len",
      "_cv_request.get",
      "self._cv_tokens.pop",
      "_cv_request.reset",
      "self.app.do_teardown_request",
      "getattr",
      "app_ctx.pop",
      "AssertionError",
      "request_close",
      "sys.exc_info"
    ],
    "code_location": {
      "file": "ctx.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 396,
      "end_line": 431
    },
    "code_snippet": "def pop(self, exc: BaseException | None = _sentinel) -> None:  # type: ignore\n        \"\"\"Pops the request context and unbinds it by doing that.  This will\n        also trigger the execution of functions registered by the\n        :meth:`~flask.Flask.teardown_request` decorator.\n\n        .. versionchanged:: 0.9\n           Added the `exc` argument.\n        \"\"\"\n        clear_request = len(self._cv_tokens) == 1\n\n        try:\n            if clear_request:\n                if exc is _sentinel:\n         ..."
  },
  {
    "name": "__enter__",
    "docstring": "",
    "is_method": true,
    "class_name": "RequestContext",
    "parameters": [
      "self"
    ],
    "calls": [
      "self.push"
    ],
    "code_location": {
      "file": "ctx.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 433,
      "end_line": 435
    },
    "code_snippet": "def __enter__(self) -> RequestContext:\n        self.push()\n        return self"
  },
  {
    "name": "__exit__",
    "docstring": "",
    "is_method": true,
    "class_name": "RequestContext",
    "parameters": [
      "self",
      "exc_type",
      "exc_value",
      "tb"
    ],
    "calls": [
      "self.pop"
    ],
    "code_location": {
      "file": "ctx.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 437,
      "end_line": 443
    },
    "code_snippet": "def __exit__(\n        self,\n        exc_type: type | None,\n        exc_value: BaseException | None,\n        tb: TracebackType | None,\n    ) -> None:\n        self.pop(exc_value)"
  },
  {
    "name": "__repr__",
    "docstring": "",
    "is_method": true,
    "class_name": "RequestContext",
    "parameters": [
      "self"
    ],
    "calls": [
      "type"
    ],
    "code_location": {
      "file": "ctx.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 445,
      "end_line": 449
    },
    "code_snippet": "def __repr__(self) -> str:\n        return (\n            f\"<{type(self).__name__} {self.request.url!r}\"\n            f\" [{self.request.method}] of {self.app.name}>\"\n        )"
  },
  {
    "name": "_default_template_ctx_processor",
    "docstring": "Default template context processor.  Injects `request`,\n`session` and `g`.",
    "is_method": false,
    "class_name": null,
    "parameters": [],
    "calls": [
      "_cv_app.get",
      "_cv_request.get"
    ],
    "code_location": {
      "file": "templating.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 24,
      "end_line": 36
    },
    "code_snippet": "def _default_template_ctx_processor() -> dict[str, t.Any]:\n    \"\"\"Default template context processor.  Injects `request`,\n    `session` and `g`.\n    \"\"\"\n    appctx = _cv_app.get(None)\n    reqctx = _cv_request.get(None)\n    rv: dict[str, t.Any] = {}\n    if appctx is not None:\n        rv[\"g\"] = appctx.g\n    if reqctx is not None:\n        rv[\"request\"] = reqctx.request\n        rv[\"session\"] = reqctx.session\n    return rv"
  },
  {
    "name": "__init__",
    "docstring": "",
    "is_method": true,
    "class_name": "Environment",
    "parameters": [
      "self",
      "app"
    ],
    "calls": [
      "BaseEnvironment.__init__",
      "app.create_global_jinja_loader"
    ],
    "code_location": {
      "file": "templating.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 45,
      "end_line": 49
    },
    "code_snippet": "def __init__(self, app: App, **options: t.Any) -> None:\n        if \"loader\" not in options:\n            options[\"loader\"] = app.create_global_jinja_loader()\n        BaseEnvironment.__init__(self, **options)\n        self.app = app"
  },
  {
    "name": "__init__",
    "docstring": "",
    "is_method": true,
    "class_name": "DispatchingJinjaLoader",
    "parameters": [
      "self",
      "app"
    ],
    "calls": [],
    "code_location": {
      "file": "templating.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 57,
      "end_line": 58
    },
    "code_snippet": "def __init__(self, app: App) -> None:\n        self.app = app"
  },
  {
    "name": "get_source",
    "docstring": "",
    "is_method": true,
    "class_name": "DispatchingJinjaLoader",
    "parameters": [
      "self",
      "environment",
      "template"
    ],
    "calls": [
      "self._get_source_fast",
      "self._get_source_explained"
    ],
    "code_location": {
      "file": "templating.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 60,
      "end_line": 65
    },
    "code_snippet": "def get_source(\n        self, environment: BaseEnvironment, template: str\n    ) -> tuple[str, str | None, t.Callable[[], bool] | None]:\n        if self.app.config[\"EXPLAIN_TEMPLATE_LOADING\"]:\n            return self._get_source_explained(environment, template)\n        return self._get_source_fast(environment, template)"
  },
  {
    "name": "_get_source_explained",
    "docstring": "",
    "is_method": true,
    "class_name": "DispatchingJinjaLoader",
    "parameters": [
      "self",
      "environment",
      "template"
    ],
    "calls": [
      "self._iter_loaders",
      "explain_template_loading_attempts",
      "TemplateNotFound",
      "attempts.append",
      "loader.get_source"
    ],
    "code_location": {
      "file": "templating.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 67,
      "end_line": 89
    },
    "code_snippet": "def _get_source_explained(\n        self, environment: BaseEnvironment, template: str\n    ) -> tuple[str, str | None, t.Callable[[], bool] | None]:\n        attempts = []\n        rv: tuple[str, str | None, t.Callable[[], bool] | None] | None\n        trv: None | (tuple[str, str | None, t.Callable[[], bool] | None]) = None\n\n        for srcobj, loader in self._iter_loaders(template):\n            try:\n                rv = loader.get_source(environment, template)\n                if trv is None:\n       ..."
  },
  {
    "name": "_get_source_fast",
    "docstring": "",
    "is_method": true,
    "class_name": "DispatchingJinjaLoader",
    "parameters": [
      "self",
      "environment",
      "template"
    ],
    "calls": [
      "self._iter_loaders",
      "TemplateNotFound",
      "loader.get_source"
    ],
    "code_location": {
      "file": "templating.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 91,
      "end_line": 99
    },
    "code_snippet": "def _get_source_fast(\n        self, environment: BaseEnvironment, template: str\n    ) -> tuple[str, str | None, t.Callable[[], bool] | None]:\n        for _srcobj, loader in self._iter_loaders(template):\n            try:\n                return loader.get_source(environment, template)\n            except TemplateNotFound:\n                continue\n        raise TemplateNotFound(template)"
  },
  {
    "name": "_iter_loaders",
    "docstring": "",
    "is_method": true,
    "class_name": "DispatchingJinjaLoader",
    "parameters": [
      "self",
      "template"
    ],
    "calls": [
      "self.app.iter_blueprints"
    ],
    "code_location": {
      "file": "templating.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 101,
      "end_line": 109
    },
    "code_snippet": "def _iter_loaders(self, template: str) -> t.Iterator[tuple[Scaffold, BaseLoader]]:\n        loader = self.app.jinja_loader\n        if loader is not None:\n            yield self.app, loader\n\n        for blueprint in self.app.iter_blueprints():\n            loader = blueprint.jinja_loader\n            if loader is not None:\n                yield blueprint, loader"
  },
  {
    "name": "list_templates",
    "docstring": "",
    "is_method": true,
    "class_name": "DispatchingJinjaLoader",
    "parameters": [
      "self"
    ],
    "calls": [
      "set",
      "self.app.iter_blueprints",
      "list",
      "result.update",
      "loader.list_templates",
      "loader.list_templates",
      "result.add"
    ],
    "code_location": {
      "file": "templating.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 111,
      "end_line": 123
    },
    "code_snippet": "def list_templates(self) -> list[str]:\n        result = set()\n        loader = self.app.jinja_loader\n        if loader is not None:\n            result.update(loader.list_templates())\n\n        for blueprint in self.app.iter_blueprints():\n            loader = blueprint.jinja_loader\n            if loader is not None:\n                for template in loader.list_templates():\n                    result.add(template)\n\n        return list(result)"
  },
  {
    "name": "_render",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "template",
      "context"
    ],
    "calls": [
      "app.update_template_context",
      "before_render_template.send",
      "template.render",
      "template_rendered.send"
    ],
    "code_location": {
      "file": "templating.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 126,
      "end_line": 135
    },
    "code_snippet": "def _render(app: Flask, template: Template, context: dict[str, t.Any]) -> str:\n    app.update_template_context(context)\n    before_render_template.send(\n        app, _async_wrapper=app.ensure_sync, template=template, context=context\n    )\n    rv = template.render(context)\n    template_rendered.send(\n        app, _async_wrapper=app.ensure_sync, template=template, context=context\n    )\n    return rv"
  },
  {
    "name": "render_template",
    "docstring": "Render a template by name with the given context.\n\n:param template_name_or_list: The name of the template to render. If\n    a list is given, the first name to exist will be rendered.\n:param context: The variables to make available in the template.",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "template_name_or_list"
    ],
    "calls": [
      "current_app._get_current_object",
      "app.jinja_env.get_or_select_template",
      "_render"
    ],
    "code_location": {
      "file": "templating.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 138,
      "end_line": 150
    },
    "code_snippet": "def render_template(\n    template_name_or_list: str | Template | list[str | Template],\n    **context: t.Any,\n) -> str:\n    \"\"\"Render a template by name with the given context.\n\n    :param template_name_or_list: The name of the template to render. If\n        a list is given, the first name to exist will be rendered.\n    :param context: The variables to make available in the template.\n    \"\"\"\n    app = current_app._get_current_object()  # type: ignore[attr-defined]\n    template = app.jinja_env.get..."
  },
  {
    "name": "render_template_string",
    "docstring": "Render a template from the given source string with the given\ncontext.\n\n:param source: The source code of the template to render.\n:param context: The variables to make available in the template.",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "source"
    ],
    "calls": [
      "current_app._get_current_object",
      "app.jinja_env.from_string",
      "_render"
    ],
    "code_location": {
      "file": "templating.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 153,
      "end_line": 162
    },
    "code_snippet": "def render_template_string(source: str, **context: t.Any) -> str:\n    \"\"\"Render a template from the given source string with the given\n    context.\n\n    :param source: The source code of the template to render.\n    :param context: The variables to make available in the template.\n    \"\"\"\n    app = current_app._get_current_object()  # type: ignore[attr-defined]\n    template = app.jinja_env.from_string(source)\n    return _render(app, template, context)"
  },
  {
    "name": "_stream",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "template",
      "context"
    ],
    "calls": [
      "app.update_template_context",
      "before_render_template.send",
      "generate",
      "template_rendered.send",
      "stream_with_context",
      "template.generate"
    ],
    "code_location": {
      "file": "templating.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 165,
      "end_line": 185
    },
    "code_snippet": "def _stream(\n    app: Flask, template: Template, context: dict[str, t.Any]\n) -> t.Iterator[str]:\n    app.update_template_context(context)\n    before_render_template.send(\n        app, _async_wrapper=app.ensure_sync, template=template, context=context\n    )\n\n    def generate() -> t.Iterator[str]:\n        yield from template.generate(context)\n        template_rendered.send(\n            app, _async_wrapper=app.ensure_sync, template=template, context=context\n        )\n\n    rv = generate()\n\n    # If ..."
  },
  {
    "name": "stream_template",
    "docstring": "Render a template by name with the given context as a stream.\nThis returns an iterator of strings, which can be used as a\nstreaming response from a view.\n\n:param template_name_or_list: The name of the template to render. If\n    a list is given, the first name to exist will be rendered.\n:param context: The variables to make available in the template.\n\n.. versionadded:: 2.2",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "template_name_or_list"
    ],
    "calls": [
      "current_app._get_current_object",
      "app.jinja_env.get_or_select_template",
      "_stream"
    ],
    "code_location": {
      "file": "templating.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 188,
      "end_line": 204
    },
    "code_snippet": "def stream_template(\n    template_name_or_list: str | Template | list[str | Template],\n    **context: t.Any,\n) -> t.Iterator[str]:\n    \"\"\"Render a template by name with the given context as a stream.\n    This returns an iterator of strings, which can be used as a\n    streaming response from a view.\n\n    :param template_name_or_list: The name of the template to render. If\n        a list is given, the first name to exist will be rendered.\n    :param context: The variables to make available in the ..."
  },
  {
    "name": "stream_template_string",
    "docstring": "Render a template from the given source string with the given\ncontext as a stream. This returns an iterator of strings, which can\nbe used as a streaming response from a view.\n\n:param source: The source code of the template to render.\n:param context: The variables to make available in the template.\n\n.. versionadded:: 2.2",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "source"
    ],
    "calls": [
      "current_app._get_current_object",
      "app.jinja_env.from_string",
      "_stream"
    ],
    "code_location": {
      "file": "templating.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 207,
      "end_line": 219
    },
    "code_snippet": "def stream_template_string(source: str, **context: t.Any) -> t.Iterator[str]:\n    \"\"\"Render a template from the given source string with the given\n    context as a stream. This returns an iterator of strings, which can\n    be used as a streaming response from a view.\n\n    :param source: The source code of the template to render.\n    :param context: The variables to make available in the template.\n\n    .. versionadded:: 2.2\n    \"\"\"\n    app = current_app._get_current_object()  # type: ignore[attr-..."
  },
  {
    "name": "wsgi_errors_stream",
    "docstring": "Find the most appropriate error stream for the application. If a request\nis active, log to ``wsgi.errors``, otherwise use ``sys.stderr``.\n\nIf you configure your own :class:`logging.StreamHandler`, you may want to\nuse this for the stream. If you are using file or dict configuration and\ncan't import this directly, you can refer to it as\n``ext://flask.logging.wsgi_errors_stream``.",
    "is_method": false,
    "class_name": null,
    "parameters": [],
    "calls": [],
    "code_location": {
      "file": "logging.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 16,
      "end_line": 28
    },
    "code_snippet": "def wsgi_errors_stream() -> t.TextIO:\n    \"\"\"Find the most appropriate error stream for the application. If a request\n    is active, log to ``wsgi.errors``, otherwise use ``sys.stderr``.\n\n    If you configure your own :class:`logging.StreamHandler`, you may want to\n    use this for the stream. If you are using file or dict configuration and\n    can't import this directly, you can refer to it as\n    ``ext://flask.logging.wsgi_errors_stream``.\n    \"\"\"\n    if request:\n        return request.environ..."
  },
  {
    "name": "has_level_handler",
    "docstring": "Check if there is a handler in the logging chain that will handle the\ngiven logger's :meth:`effective level <~logging.Logger.getEffectiveLevel>`.",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "logger"
    ],
    "calls": [
      "logger.getEffectiveLevel",
      "any"
    ],
    "code_location": {
      "file": "logging.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 31,
      "end_line": 47
    },
    "code_snippet": "def has_level_handler(logger: logging.Logger) -> bool:\n    \"\"\"Check if there is a handler in the logging chain that will handle the\n    given logger's :meth:`effective level <~logging.Logger.getEffectiveLevel>`.\n    \"\"\"\n    level = logger.getEffectiveLevel()\n    current = logger\n\n    while current:\n        if any(handler.level <= level for handler in current.handlers):\n            return True\n\n        if not current.propagate:\n            break\n\n        current = current.parent  # type: ignore\n\n..."
  },
  {
    "name": "create_logger",
    "docstring": "Get the Flask app's logger and configure it if needed.\n\nThe logger name will be the same as\n:attr:`app.import_name <flask.Flask.name>`.\n\nWhen :attr:`~flask.Flask.debug` is enabled, set the logger level to\n:data:`logging.DEBUG` if it is not set.\n\nIf there is no handler for the logger's effective level, add a\n:class:`~logging.StreamHandler` for\n:func:`~flask.logging.wsgi_errors_stream` with a basic format.",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app"
    ],
    "calls": [
      "logging.getLogger",
      "logger.setLevel",
      "has_level_handler",
      "logger.addHandler"
    ],
    "code_location": {
      "file": "logging.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 58,
      "end_line": 79
    },
    "code_snippet": "def create_logger(app: App) -> logging.Logger:\n    \"\"\"Get the Flask app's logger and configure it if needed.\n\n    The logger name will be the same as\n    :attr:`app.import_name <flask.Flask.name>`.\n\n    When :attr:`~flask.Flask.debug` is enabled, set the logger level to\n    :data:`logging.DEBUG` if it is not set.\n\n    If there is no handler for the logger's effective level, add a\n    :class:`~logging.StreamHandler` for\n    :func:`~flask.logging.wsgi_errors_stream` with a basic format.\n    \"\"\"\n  ..."
  },
  {
    "name": "_make_timedelta",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "value"
    ],
    "calls": [
      "timedelta",
      "isinstance"
    ],
    "code_location": {
      "file": "app.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 74,
      "end_line": 78
    },
    "code_snippet": "def _make_timedelta(value: timedelta | int | None) -> timedelta | None:\n    if value is None or isinstance(value, timedelta):\n        return value\n\n    return timedelta(seconds=value)"
  },
  {
    "name": "__init__",
    "docstring": "",
    "is_method": true,
    "class_name": "Flask",
    "parameters": [
      "self",
      "import_name",
      "static_url_path",
      "static_folder",
      "static_host",
      "host_matching",
      "subdomain_matching",
      "template_folder",
      "instance_path",
      "instance_relative_config",
      "root_path"
    ],
    "calls": [
      "__init__",
      "cli.AppGroup",
      "weakref.ref",
      "self.add_url_rule",
      "super",
      "bool",
      "send_static_file",
      "self_ref"
    ],
    "code_location": {
      "file": "app.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 226,
      "end_line": 279
    },
    "code_snippet": "def __init__(\n        self,\n        import_name: str,\n        static_url_path: str | None = None,\n        static_folder: str | os.PathLike[str] | None = \"static\",\n        static_host: str | None = None,\n        host_matching: bool = False,\n        subdomain_matching: bool = False,\n        template_folder: str | os.PathLike[str] | None = \"templates\",\n        instance_path: str | None = None,\n        instance_relative_config: bool = False,\n        root_path: str | None = None,\n    ):\n        super..."
  },
  {
    "name": "get_send_file_max_age",
    "docstring": "Used by :func:`send_file` to determine the ``max_age`` cache\nvalue for a given file path if it wasn't passed.\n\nBy default, this returns :data:`SEND_FILE_MAX_AGE_DEFAULT` from\nthe configuration of :data:`~flask.current_app`. This defaults\nto ``None``, which tells the browser to use conditional requests\ninstead of a timed cache, which is usually preferable.\n\nNote this is a duplicate of the same method in the Flask\nclass.\n\n.. versionchanged:: 2.0\n    The default configuration is ``None`` instead of 12 hours.\n\n.. versionadded:: 0.9",
    "is_method": true,
    "class_name": "Flask",
    "parameters": [
      "self",
      "filename"
    ],
    "calls": [
      "isinstance",
      "int",
      "value.total_seconds"
    ],
    "code_location": {
      "file": "app.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 281,
      "end_line": 306
    },
    "code_snippet": "def get_send_file_max_age(self, filename: str | None) -> int | None:\n        \"\"\"Used by :func:`send_file` to determine the ``max_age`` cache\n        value for a given file path if it wasn't passed.\n\n        By default, this returns :data:`SEND_FILE_MAX_AGE_DEFAULT` from\n        the configuration of :data:`~flask.current_app`. This defaults\n        to ``None``, which tells the browser to use conditional requests\n        instead of a timed cache, which is usually preferable.\n\n        Note this is ..."
  },
  {
    "name": "send_static_file",
    "docstring": "The view function used to serve files from\n:attr:`static_folder`. A route is automatically registered for\nthis view at :attr:`static_url_path` if :attr:`static_folder` is\nset.\n\nNote this is a duplicate of the same method in the Flask\nclass.\n\n.. versionadded:: 0.5",
    "is_method": true,
    "class_name": "Flask",
    "parameters": [
      "self",
      "filename"
    ],
    "calls": [
      "self.get_send_file_max_age",
      "send_from_directory",
      "RuntimeError",
      "t.cast"
    ],
    "code_location": {
      "file": "app.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 308,
      "end_line": 328
    },
    "code_snippet": "def send_static_file(self, filename: str) -> Response:\n        \"\"\"The view function used to serve files from\n        :attr:`static_folder`. A route is automatically registered for\n        this view at :attr:`static_url_path` if :attr:`static_folder` is\n        set.\n\n        Note this is a duplicate of the same method in the Flask\n        class.\n\n        .. versionadded:: 0.5\n\n        \"\"\"\n        if not self.has_static_folder:\n            raise RuntimeError(\"'static_folder' must be set to serve s..."
  },
  {
    "name": "open_resource",
    "docstring": "Open a resource file relative to :attr:`root_path` for reading.\n\nFor example, if the file ``schema.sql`` is next to the file\n``app.py`` where the ``Flask`` app is defined, it can be opened\nwith:\n\n.. code-block:: python\n\n    with app.open_resource(\"schema.sql\") as f:\n        conn.executescript(f.read())\n\n:param resource: Path to the resource relative to :attr:`root_path`.\n:param mode: Open the file in this mode. Only reading is supported,\n    valid values are ``\"r\"`` (or ``\"rt\"``) and ``\"rb\"``.\n:param encoding: Open the file with this encoding when opening in text\n    mode. This is ignored when opening in binary mode.\n\n.. versionchanged:: 3.1\n    Added the ``encoding`` parameter.",
    "is_method": true,
    "class_name": "Flask",
    "parameters": [
      "self",
      "resource",
      "mode",
      "encoding"
    ],
    "calls": [
      "os.path.join",
      "open",
      "ValueError",
      "open"
    ],
    "code_location": {
      "file": "app.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 330,
      "end_line": 361
    },
    "code_snippet": "def open_resource(\n        self, resource: str, mode: str = \"rb\", encoding: str | None = None\n    ) -> t.IO[t.AnyStr]:\n        \"\"\"Open a resource file relative to :attr:`root_path` for reading.\n\n        For example, if the file ``schema.sql`` is next to the file\n        ``app.py`` where the ``Flask`` app is defined, it can be opened\n        with:\n\n        .. code-block:: python\n\n            with app.open_resource(\"schema.sql\") as f:\n                conn.executescript(f.read())\n\n        :param re..."
  },
  {
    "name": "open_instance_resource",
    "docstring": "Open a resource file relative to the application's instance folder\n:attr:`instance_path`. Unlike :meth:`open_resource`, files in the\ninstance folder can be opened for writing.\n\n:param resource: Path to the resource relative to :attr:`instance_path`.\n:param mode: Open the file in this mode.\n:param encoding: Open the file with this encoding when opening in text\n    mode. This is ignored when opening in binary mode.\n\n.. versionchanged:: 3.1\n    Added the ``encoding`` parameter.",
    "is_method": true,
    "class_name": "Flask",
    "parameters": [
      "self",
      "resource",
      "mode",
      "encoding"
    ],
    "calls": [
      "os.path.join",
      "open",
      "open"
    ],
    "code_location": {
      "file": "app.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 363,
      "end_line": 383
    },
    "code_snippet": "def open_instance_resource(\n        self, resource: str, mode: str = \"rb\", encoding: str | None = \"utf-8\"\n    ) -> t.IO[t.AnyStr]:\n        \"\"\"Open a resource file relative to the application's instance folder\n        :attr:`instance_path`. Unlike :meth:`open_resource`, files in the\n        instance folder can be opened for writing.\n\n        :param resource: Path to the resource relative to :attr:`instance_path`.\n        :param mode: Open the file in this mode.\n        :param encoding: Open the f..."
  },
  {
    "name": "create_jinja_environment",
    "docstring": "Create the Jinja environment based on :attr:`jinja_options`\nand the various Jinja-related methods of the app. Changing\n:attr:`jinja_options` after this will have no effect. Also adds\nFlask-related globals and filters to the environment.\n\n.. versionchanged:: 0.11\n   ``Environment.auto_reload`` set in accordance with\n   ``TEMPLATES_AUTO_RELOAD`` configuration option.\n\n.. versionadded:: 0.5",
    "is_method": true,
    "class_name": "Flask",
    "parameters": [
      "self"
    ],
    "calls": [
      "dict",
      "self.jinja_environment",
      "rv.globals.update"
    ],
    "code_location": {
      "file": "app.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 385,
      "end_line": 423
    },
    "code_snippet": "def create_jinja_environment(self) -> Environment:\n        \"\"\"Create the Jinja environment based on :attr:`jinja_options`\n        and the various Jinja-related methods of the app. Changing\n        :attr:`jinja_options` after this will have no effect. Also adds\n        Flask-related globals and filters to the environment.\n\n        .. versionchanged:: 0.11\n           ``Environment.auto_reload`` set in accordance with\n           ``TEMPLATES_AUTO_RELOAD`` configuration option.\n\n        .. versionadd..."
  },
  {
    "name": "create_url_adapter",
    "docstring": "Creates a URL adapter for the given request. The URL adapter\nis created at a point where the request context is not yet set\nup so the request is passed explicitly.\n\n.. versionchanged:: 3.1\n    If :data:`SERVER_NAME` is set, it does not restrict requests to\n    only that domain, for both ``subdomain_matching`` and\n    ``host_matching``.\n\n.. versionchanged:: 1.0\n    :data:`SERVER_NAME` no longer implicitly enables subdomain\n    matching. Use :attr:`subdomain_matching` instead.\n\n.. versionchanged:: 0.9\n   This can be called outside a request when the URL adapter is created\n   for an application context.\n\n.. versionadded:: 0.6",
    "is_method": true,
    "class_name": "Flask",
    "parameters": [
      "self",
      "request"
    ],
    "calls": [
      "get_host",
      "self.url_map.bind_to_environ",
      "self.url_map.bind"
    ],
    "code_location": {
      "file": "app.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 425,
      "end_line": 476
    },
    "code_snippet": "def create_url_adapter(self, request: Request | None) -> MapAdapter | None:\n        \"\"\"Creates a URL adapter for the given request. The URL adapter\n        is created at a point where the request context is not yet set\n        up so the request is passed explicitly.\n\n        .. versionchanged:: 3.1\n            If :data:`SERVER_NAME` is set, it does not restrict requests to\n            only that domain, for both ``subdomain_matching`` and\n            ``host_matching``.\n\n        .. versionchanged:..."
  },
  {
    "name": "raise_routing_exception",
    "docstring": "Intercept routing exceptions and possibly do something else.\n\nIn debug mode, intercept a routing redirect and replace it with\nan error if the body will be discarded.\n\nWith modern Werkzeug this shouldn't occur, since it now uses a\n308 status which tells the browser to resend the method and\nbody.\n\n.. versionchanged:: 2.1\n    Don't intercept 307 and 308 redirects.\n\n:meta private:\n:internal:",
    "is_method": true,
    "class_name": "Flask",
    "parameters": [
      "self",
      "request"
    ],
    "calls": [
      "FormDataRoutingRedirect",
      "isinstance"
    ],
    "code_location": {
      "file": "app.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 478,
      "end_line": 504
    },
    "code_snippet": "def raise_routing_exception(self, request: Request) -> t.NoReturn:\n        \"\"\"Intercept routing exceptions and possibly do something else.\n\n        In debug mode, intercept a routing redirect and replace it with\n        an error if the body will be discarded.\n\n        With modern Werkzeug this shouldn't occur, since it now uses a\n        308 status which tells the browser to resend the method and\n        body.\n\n        .. versionchanged:: 2.1\n            Don't intercept 307 and 308 redirects.\n\n ..."
  },
  {
    "name": "update_template_context",
    "docstring": "Update the template context with some commonly used variables.\nThis injects request, session, config and g into the template\ncontext as well as everything template context processors want\nto inject.  Note that the as of Flask 0.6, the original values\nin the context will not be overridden if a context processor\ndecides to return a value with the same key.\n\n:param context: the context as a dictionary that is updated in place\n                to add extra variables.",
    "is_method": true,
    "class_name": "Flask",
    "parameters": [
      "self",
      "context"
    ],
    "calls": [
      "context.copy",
      "context.update",
      "chain",
      "reversed",
      "context.update",
      "self.ensure_sync"
    ],
    "code_location": {
      "file": "app.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 506,
      "end_line": 532
    },
    "code_snippet": "def update_template_context(self, context: dict[str, t.Any]) -> None:\n        \"\"\"Update the template context with some commonly used variables.\n        This injects request, session, config and g into the template\n        context as well as everything template context processors want\n        to inject.  Note that the as of Flask 0.6, the original values\n        in the context will not be overridden if a context processor\n        decides to return a value with the same key.\n\n        :param contex..."
  },
  {
    "name": "make_shell_context",
    "docstring": "Returns the shell context for an interactive shell for this\napplication.  This runs all the registered shell context\nprocessors.\n\n.. versionadded:: 0.11",
    "is_method": true,
    "class_name": "Flask",
    "parameters": [
      "self"
    ],
    "calls": [
      "rv.update",
      "processor"
    ],
    "code_location": {
      "file": "app.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 534,
      "end_line": 544
    },
    "code_snippet": "def make_shell_context(self) -> dict[str, t.Any]:\n        \"\"\"Returns the shell context for an interactive shell for this\n        application.  This runs all the registered shell context\n        processors.\n\n        .. versionadded:: 0.11\n        \"\"\"\n        rv = {\"app\": self, \"g\": g}\n        for processor in self.shell_context_processors:\n            rv.update(processor())\n        return rv"
  },
  {
    "name": "run",
    "docstring": "Runs the application on a local development server.\n\nDo not use ``run()`` in a production setting. It is not intended to\nmeet security and performance requirements for a production server.\nInstead, see :doc:`/deploying/index` for WSGI server recommendations.\n\nIf the :attr:`debug` flag is set the server will automatically reload\nfor code changes and show a debugger in case an exception happened.\n\nIf you want to run the application in debug mode, but disable the\ncode execution on the interactive debugger, you can pass\n``use_evalex=False`` as parameter.  This will keep the debugger's\ntraceback screen active, but disable code execution.\n\nIt is not recommended to use this function for development with\nautomatic reloading as this is badly supported.  Instead you should\nbe using the :command:`flask` command line script's ``run`` support.\n\n.. admonition:: Keep in Mind\n\n   Flask will suppress any server error with a generic error page\n   unless it is in debug mode.  As such to enable just the\n   interactive debugger without the code reloading, you have to\n   invoke :meth:`run` with ``debug=True`` and ``use_reloader=False``.\n   Setting ``use_debugger`` to ``True`` without being in debug mode\n   won't catch any exceptions because there won't be any to\n   catch.\n\n:param host: the hostname to listen on. Set this to ``'0.0.0.0'`` to\n    have the server available externally as well. Defaults to\n    ``'127.0.0.1'`` or the host in the ``SERVER_NAME`` config variable\n    if present.\n:param port: the port of the webserver. Defaults to ``5000`` or the\n    port defined in the ``SERVER_NAME`` config variable if present.\n:param debug: if given, enable or disable debug mode. See\n    :attr:`debug`.\n:param load_dotenv: Load the nearest :file:`.env` and :file:`.flaskenv`\n    files to set environment variables. Will also change the working\n    directory to the directory containing the first file found.\n:param options: the options to be forwarded to the underlying Werkzeug\n    server. See :func:`werkzeug.serving.run_simple` for more\n    information.\n\n.. versionchanged:: 1.0\n    If installed, python-dotenv will be used to load environment\n    variables from :file:`.env` and :file:`.flaskenv` files.\n\n    The :envvar:`FLASK_DEBUG` environment variable will override :attr:`debug`.\n\n    Threaded mode is enabled by default.\n\n.. versionchanged:: 0.10\n    The default port is now picked from the ``SERVER_NAME``\n    variable.",
    "is_method": true,
    "class_name": "Flask",
    "parameters": [
      "self",
      "host",
      "port",
      "debug",
      "load_dotenv"
    ],
    "calls": [
      "get_load_dotenv",
      "self.config.get",
      "options.setdefault",
      "options.setdefault",
      "options.setdefault",
      "cli.show_server_banner",
      "os.environ.get",
      "cli.load_dotenv",
      "bool",
      "server_name.partition",
      "int",
      "run_simple",
      "is_running_from_reloader",
      "click.secho",
      "get_debug_flag",
      "int",
      "t.cast"
    ],
    "code_location": {
      "file": "app.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 546,
      "end_line": 667
    },
    "code_snippet": "def run(\n        self,\n        host: str | None = None,\n        port: int | None = None,\n        debug: bool | None = None,\n        load_dotenv: bool = True,\n        **options: t.Any,\n    ) -> None:\n        \"\"\"Runs the application on a local development server.\n\n        Do not use ``run()`` in a production setting. It is not intended to\n        meet security and performance requirements for a production server.\n        Instead, see :doc:`/deploying/index` for WSGI server recommendations.\n\n      ..."
  },
  {
    "name": "test_client",
    "docstring": "Creates a test client for this application.  For information\nabout unit testing head over to :doc:`/testing`.\n\nNote that if you are testing for assertions or exceptions in your\napplication code, you must set ``app.testing = True`` in order for the\nexceptions to propagate to the test client.  Otherwise, the exception\nwill be handled by the application (not visible to the test client) and\nthe only indication of an AssertionError or other exception will be a\n500 status code response to the test client.  See the :attr:`testing`\nattribute.  For example::\n\n    app.testing = True\n    client = app.test_client()\n\nThe test client can be used in a ``with`` block to defer the closing down\nof the context until the end of the ``with`` block.  This is useful if\nyou want to access the context locals for testing::\n\n    with app.test_client() as c:\n        rv = c.get('/?vodka=42')\n        assert request.args['vodka'] == '42'\n\nAdditionally, you may pass optional keyword arguments that will then\nbe passed to the application's :attr:`test_client_class` constructor.\nFor example::\n\n    from flask.testing import FlaskClient\n\n    class CustomClient(FlaskClient):\n        def __init__(self, *args, **kwargs):\n            self._authentication = kwargs.pop(\"authentication\")\n            super(CustomClient,self).__init__( *args, **kwargs)\n\n    app.test_client_class = CustomClient\n    client = app.test_client(authentication='Basic ....')\n\nSee :class:`~flask.testing.FlaskClient` for more information.\n\n.. versionchanged:: 0.4\n   added support for ``with`` block usage for the client.\n\n.. versionadded:: 0.7\n   The `use_cookies` parameter was added as well as the ability\n   to override the client to be used by setting the\n   :attr:`test_client_class` attribute.\n\n.. versionchanged:: 0.11\n   Added `**kwargs` to support passing additional keyword arguments to\n   the constructor of :attr:`test_client_class`.",
    "is_method": true,
    "class_name": "Flask",
    "parameters": [
      "self",
      "use_cookies"
    ],
    "calls": [
      "cls"
    ],
    "code_location": {
      "file": "app.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 669,
      "end_line": 725
    },
    "code_snippet": "def test_client(self, use_cookies: bool = True, **kwargs: t.Any) -> FlaskClient:\n        \"\"\"Creates a test client for this application.  For information\n        about unit testing head over to :doc:`/testing`.\n\n        Note that if you are testing for assertions or exceptions in your\n        application code, you must set ``app.testing = True`` in order for the\n        exceptions to propagate to the test client.  Otherwise, the exception\n        will be handled by the application (not visible to..."
  },
  {
    "name": "test_cli_runner",
    "docstring": "Create a CLI runner for testing CLI commands.\nSee :ref:`testing-cli`.\n\nReturns an instance of :attr:`test_cli_runner_class`, by default\n:class:`~flask.testing.FlaskCliRunner`. The Flask app object is\npassed as the first argument.\n\n.. versionadded:: 1.0",
    "is_method": true,
    "class_name": "Flask",
    "parameters": [
      "self"
    ],
    "calls": [
      "cls"
    ],
    "code_location": {
      "file": "app.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 727,
      "end_line": 742
    },
    "code_snippet": "def test_cli_runner(self, **kwargs: t.Any) -> FlaskCliRunner:\n        \"\"\"Create a CLI runner for testing CLI commands.\n        See :ref:`testing-cli`.\n\n        Returns an instance of :attr:`test_cli_runner_class`, by default\n        :class:`~flask.testing.FlaskCliRunner`. The Flask app object is\n        passed as the first argument.\n\n        .. versionadded:: 1.0\n        \"\"\"\n        cls = self.test_cli_runner_class\n\n        if cls is None:\n            from .testing import FlaskCliRunner as cls\n\n..."
  },
  {
    "name": "handle_http_exception",
    "docstring": "Handles an HTTP exception.  By default this will invoke the\nregistered error handlers and fall back to returning the\nexception as response.\n\n.. versionchanged:: 1.0.3\n    ``RoutingException``, used internally for actions such as\n     slash redirects during routing, is not passed to error\n     handlers.\n\n.. versionchanged:: 1.0\n    Exceptions are looked up by code *and* by MRO, so\n    ``HTTPException`` subclasses can be handled with a catch-all\n    handler for the base ``HTTPException``.\n\n.. versionadded:: 0.3",
    "is_method": true,
    "class_name": "Flask",
    "parameters": [
      "self",
      "e"
    ],
    "calls": [
      "isinstance",
      "self._find_error_handler",
      "self.ensure_sync"
    ],
    "code_location": {
      "file": "app.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 744,
      "end_line": 777
    },
    "code_snippet": "def handle_http_exception(\n        self, e: HTTPException\n    ) -> HTTPException | ft.ResponseReturnValue:\n        \"\"\"Handles an HTTP exception.  By default this will invoke the\n        registered error handlers and fall back to returning the\n        exception as response.\n\n        .. versionchanged:: 1.0.3\n            ``RoutingException``, used internally for actions such as\n             slash redirects during routing, is not passed to error\n             handlers.\n\n        .. versionchanged:: 1..."
  },
  {
    "name": "handle_user_exception",
    "docstring": "This method is called whenever an exception occurs that\nshould be handled. A special case is :class:`~werkzeug\n.exceptions.HTTPException` which is forwarded to the\n:meth:`handle_http_exception` method. This function will either\nreturn a response value or reraise the exception with the same\ntraceback.\n\n.. versionchanged:: 1.0\n    Key errors raised from request data like ``form`` show the\n    bad key in debug mode rather than a generic bad request\n    message.\n\n.. versionadded:: 0.7",
    "is_method": true,
    "class_name": "Flask",
    "parameters": [
      "self",
      "e"
    ],
    "calls": [
      "self._find_error_handler",
      "isinstance",
      "isinstance",
      "self.handle_http_exception",
      "self.ensure_sync",
      "self.trap_http_exception"
    ],
    "code_location": {
      "file": "app.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 779,
      "end_line": 809
    },
    "code_snippet": "def handle_user_exception(\n        self, e: Exception\n    ) -> HTTPException | ft.ResponseReturnValue:\n        \"\"\"This method is called whenever an exception occurs that\n        should be handled. A special case is :class:`~werkzeug\n        .exceptions.HTTPException` which is forwarded to the\n        :meth:`handle_http_exception` method. This function will either\n        return a response value or reraise the exception with the same\n        traceback.\n\n        .. versionchanged:: 1.0\n           ..."
  },
  {
    "name": "handle_exception",
    "docstring": "Handle an exception that did not have an error handler\nassociated with it, or that was raised from an error handler.\nThis always causes a 500 ``InternalServerError``.\n\nAlways sends the :data:`got_request_exception` signal.\n\nIf :data:`PROPAGATE_EXCEPTIONS` is ``True``, such as in debug\nmode, the error will be re-raised so that the debugger can\ndisplay it. Otherwise, the original exception is logged, and\nan :exc:`~werkzeug.exceptions.InternalServerError` is returned.\n\nIf an error handler is registered for ``InternalServerError`` or\n``500``, it will be used. For consistency, the handler will\nalways receive the ``InternalServerError``. The original\nunhandled exception is available as ``e.original_exception``.\n\n.. versionchanged:: 1.1.0\n    Always passes the ``InternalServerError`` instance to the\n    handler, setting ``original_exception`` to the unhandled\n    error.\n\n.. versionchanged:: 1.1.0\n    ``after_request`` functions and other finalization is done\n    even for the default 500 response when there is no handler.\n\n.. versionadded:: 0.3",
    "is_method": true,
    "class_name": "Flask",
    "parameters": [
      "self",
      "e"
    ],
    "calls": [
      "sys.exc_info",
      "got_request_exception.send",
      "self.log_exception",
      "InternalServerError",
      "self._find_error_handler",
      "self.finalize_request",
      "self.ensure_sync"
    ],
    "code_location": {
      "file": "app.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 811,
      "end_line": 862
    },
    "code_snippet": "def handle_exception(self, e: Exception) -> Response:\n        \"\"\"Handle an exception that did not have an error handler\n        associated with it, or that was raised from an error handler.\n        This always causes a 500 ``InternalServerError``.\n\n        Always sends the :data:`got_request_exception` signal.\n\n        If :data:`PROPAGATE_EXCEPTIONS` is ``True``, such as in debug\n        mode, the error will be re-raised so that the debugger can\n        display it. Otherwise, the original except..."
  },
  {
    "name": "log_exception",
    "docstring": "Logs an exception.  This is called by :meth:`handle_exception`\nif debugging is disabled and right before the handler is called.\nThe default implementation logs the exception as error on the\n:attr:`logger`.\n\n.. versionadded:: 0.8",
    "is_method": true,
    "class_name": "Flask",
    "parameters": [
      "self",
      "exc_info"
    ],
    "calls": [
      "self.logger.error"
    ],
    "code_location": {
      "file": "app.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 864,
      "end_line": 877
    },
    "code_snippet": "def log_exception(\n        self,\n        exc_info: (tuple[type, BaseException, TracebackType] | tuple[None, None, None]),\n    ) -> None:\n        \"\"\"Logs an exception.  This is called by :meth:`handle_exception`\n        if debugging is disabled and right before the handler is called.\n        The default implementation logs the exception as error on the\n        :attr:`logger`.\n\n        .. versionadded:: 0.8\n        \"\"\"\n        self.logger.error(\n            f\"Exception on {request.path} [{request...."
  },
  {
    "name": "dispatch_request",
    "docstring": "Does the request dispatching.  Matches the URL and returns the\nreturn value of the view or error handler.  This does not have to\nbe a response object.  In order to convert the return value to a\nproper response object, call :func:`make_response`.\n\n.. versionchanged:: 0.7\n   This no longer does the exception handling, this code was\n   moved to the new :meth:`full_dispatch_request`.",
    "is_method": true,
    "class_name": "Flask",
    "parameters": [
      "self"
    ],
    "calls": [
      "self.raise_routing_exception",
      "getattr",
      "self.make_default_options_response",
      "self.ensure_sync"
    ],
    "code_location": {
      "file": "app.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 879,
      "end_line": 902
    },
    "code_snippet": "def dispatch_request(self) -> ft.ResponseReturnValue:\n        \"\"\"Does the request dispatching.  Matches the URL and returns the\n        return value of the view or error handler.  This does not have to\n        be a response object.  In order to convert the return value to a\n        proper response object, call :func:`make_response`.\n\n        .. versionchanged:: 0.7\n           This no longer does the exception handling, this code was\n           moved to the new :meth:`full_dispatch_request`.\n    ..."
  },
  {
    "name": "full_dispatch_request",
    "docstring": "Dispatches the request and on top of that performs request\npre and postprocessing as well as HTTP exception catching and\nerror handling.\n\n.. versionadded:: 0.7",
    "is_method": true,
    "class_name": "Flask",
    "parameters": [
      "self"
    ],
    "calls": [
      "self.finalize_request",
      "request_started.send",
      "self.preprocess_request",
      "self.dispatch_request",
      "self.handle_user_exception"
    ],
    "code_location": {
      "file": "app.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 904,
      "end_line": 920
    },
    "code_snippet": "def full_dispatch_request(self) -> Response:\n        \"\"\"Dispatches the request and on top of that performs request\n        pre and postprocessing as well as HTTP exception catching and\n        error handling.\n\n        .. versionadded:: 0.7\n        \"\"\"\n        self._got_first_request = True\n\n        try:\n            request_started.send(self, _async_wrapper=self.ensure_sync)\n            rv = self.preprocess_request()\n            if rv is None:\n                rv = self.dispatch_request()\n        ..."
  },
  {
    "name": "finalize_request",
    "docstring": "Given the return value from a view function this finalizes\nthe request by converting it into a response and invoking the\npostprocessing functions.  This is invoked for both normal\nrequest dispatching as well as error handlers.\n\nBecause this means that it might be called as a result of a\nfailure a special safe mode is available which can be enabled\nwith the `from_error_handler` flag.  If enabled, failures in\nresponse processing will be logged and otherwise ignored.\n\n:internal:",
    "is_method": true,
    "class_name": "Flask",
    "parameters": [
      "self",
      "rv",
      "from_error_handler"
    ],
    "calls": [
      "self.make_response",
      "self.process_response",
      "request_finished.send",
      "self.logger.exception"
    ],
    "code_location": {
      "file": "app.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 922,
      "end_line": 951
    },
    "code_snippet": "def finalize_request(\n        self,\n        rv: ft.ResponseReturnValue | HTTPException,\n        from_error_handler: bool = False,\n    ) -> Response:\n        \"\"\"Given the return value from a view function this finalizes\n        the request by converting it into a response and invoking the\n        postprocessing functions.  This is invoked for both normal\n        request dispatching as well as error handlers.\n\n        Because this means that it might be called as a result of a\n        failure a sp..."
  },
  {
    "name": "make_default_options_response",
    "docstring": "This method is called to create the default ``OPTIONS`` response.\nThis can be changed through subclassing to change the default\nbehavior of ``OPTIONS`` responses.\n\n.. versionadded:: 0.7",
    "is_method": true,
    "class_name": "Flask",
    "parameters": [
      "self"
    ],
    "calls": [
      "adapter.allowed_methods",
      "self.response_class",
      "rv.allow.update"
    ],
    "code_location": {
      "file": "app.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 953,
      "end_line": 964
    },
    "code_snippet": "def make_default_options_response(self) -> Response:\n        \"\"\"This method is called to create the default ``OPTIONS`` response.\n        This can be changed through subclassing to change the default\n        behavior of ``OPTIONS`` responses.\n\n        .. versionadded:: 0.7\n        \"\"\"\n        adapter = request_ctx.url_adapter\n        methods = adapter.allowed_methods()  # type: ignore[union-attr]\n        rv = self.response_class()\n        rv.allow.update(methods)\n        return rv"
  },
  {
    "name": "ensure_sync",
    "docstring": "Ensure that the function is synchronous for WSGI workers.\nPlain ``def`` functions are returned as-is. ``async def``\nfunctions are wrapped to run and wait for the response.\n\nOverride this method to change how the app runs async views.\n\n.. versionadded:: 2.0",
    "is_method": true,
    "class_name": "Flask",
    "parameters": [
      "self",
      "func"
    ],
    "calls": [
      "iscoroutinefunction",
      "self.async_to_sync"
    ],
    "code_location": {
      "file": "app.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 966,
      "end_line": 978
    },
    "code_snippet": "def ensure_sync(self, func: t.Callable[..., t.Any]) -> t.Callable[..., t.Any]:\n        \"\"\"Ensure that the function is synchronous for WSGI workers.\n        Plain ``def`` functions are returned as-is. ``async def``\n        functions are wrapped to run and wait for the response.\n\n        Override this method to change how the app runs async views.\n\n        .. versionadded:: 2.0\n        \"\"\"\n        if iscoroutinefunction(func):\n            return self.async_to_sync(func)\n\n        return func"
  },
  {
    "name": "async_to_sync",
    "docstring": "Return a sync function that will run the coroutine function.\n\n.. code-block:: python\n\n    result = app.async_to_sync(func)(*args, **kwargs)\n\nOverride this method to change how the app converts async code\nto be synchronously callable.\n\n.. versionadded:: 2.0",
    "is_method": true,
    "class_name": "Flask",
    "parameters": [
      "self",
      "func"
    ],
    "calls": [
      "asgiref_async_to_sync",
      "RuntimeError"
    ],
    "code_location": {
      "file": "app.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 980,
      "end_line": 1001
    },
    "code_snippet": "def async_to_sync(\n        self, func: t.Callable[..., t.Coroutine[t.Any, t.Any, t.Any]]\n    ) -> t.Callable[..., t.Any]:\n        \"\"\"Return a sync function that will run the coroutine function.\n\n        .. code-block:: python\n\n            result = app.async_to_sync(func)(*args, **kwargs)\n\n        Override this method to change how the app converts async code\n        to be synchronously callable.\n\n        .. versionadded:: 2.0\n        \"\"\"\n        try:\n            from asgiref.sync import async_to..."
  },
  {
    "name": "url_for",
    "docstring": "Generate a URL to the given endpoint with the given values.\n\nThis is called by :func:`flask.url_for`, and can be called\ndirectly as well.\n\nAn *endpoint* is the name of a URL rule, usually added with\n:meth:`@app.route() <route>`, and usually the same name as the\nview function. A route defined in a :class:`~flask.Blueprint`\nwill prepend the blueprint's name separated by a ``.`` to the\nendpoint.\n\nIn some cases, such as email messages, you want URLs to include\nthe scheme and domain, like ``https://example.com/hello``. When\nnot in an active request, URLs will be external by default, but\nthis requires setting :data:`SERVER_NAME` so Flask knows what\ndomain to use. :data:`APPLICATION_ROOT` and\n:data:`PREFERRED_URL_SCHEME` should also be configured as\nneeded. This config is only used when not in an active request.\n\nFunctions can be decorated with :meth:`url_defaults` to modify\nkeyword arguments before the URL is built.\n\nIf building fails for some reason, such as an unknown endpoint\nor incorrect values, the app's :meth:`handle_url_build_error`\nmethod is called. If that returns a string, that is returned,\notherwise a :exc:`~werkzeug.routing.BuildError` is raised.\n\n:param endpoint: The endpoint name associated with the URL to\n    generate. If this starts with a ``.``, the current blueprint\n    name (if any) will be used.\n:param _anchor: If given, append this as ``#anchor`` to the URL.\n:param _method: If given, generate the URL associated with this\n    method for the endpoint.\n:param _scheme: If given, the URL will have this scheme if it\n    is external.\n:param _external: If given, prefer the URL to be internal\n    (False) or require it to be external (True). External URLs\n    include the scheme and domain. When not in an active\n    request, URLs are external by default.\n:param values: Values to use for the variable parts of the URL\n    rule. Unknown keys are appended as query string arguments,\n    like ``?a=b&c=d``.\n\n.. versionadded:: 2.2\n    Moved from ``flask.url_for``, which calls this method.",
    "is_method": true,
    "class_name": "Flask",
    "parameters": [
      "endpoint"
    ],
    "calls": [
      "_cv_request.get",
      "self.inject_url_defaults",
      "_cv_app.get",
      "ValueError",
      "url_adapter.build",
      "_url_quote",
      "self.create_url_adapter",
      "RuntimeError",
      "values.update",
      "self.handle_url_build_error"
    ],
    "code_location": {
      "file": "app.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 1003,
      "end_line": 1127
    },
    "code_snippet": "def url_for(\n        self,\n        /,\n        endpoint: str,\n        *,\n        _anchor: str | None = None,\n        _method: str | None = None,\n        _scheme: str | None = None,\n        _external: bool | None = None,\n        **values: t.Any,\n    ) -> str:\n        \"\"\"Generate a URL to the given endpoint with the given values.\n\n        This is called by :func:`flask.url_for`, and can be called\n        directly as well.\n\n        An *endpoint* is the name of a URL rule, usually added with\n        ..."
  },
  {
    "name": "make_response",
    "docstring": "Convert the return value from a view function to an instance of\n:attr:`response_class`.\n\n:param rv: the return value from the view function. The view function\n    must return a response. Returning ``None``, or the view ending\n    without returning, is not allowed. The following types are allowed\n    for ``view_rv``:\n\n    ``str``\n        A response object is created with the string encoded to UTF-8\n        as the body.\n\n    ``bytes``\n        A response object is created with the bytes as the body.\n\n    ``dict``\n        A dictionary that will be jsonify'd before being returned.\n\n    ``list``\n        A list that will be jsonify'd before being returned.\n\n    ``generator`` or ``iterator``\n        A generator that returns ``str`` or ``bytes`` to be\n        streamed as the response.\n\n    ``tuple``\n        Either ``(body, status, headers)``, ``(body, status)``, or\n        ``(body, headers)``, where ``body`` is any of the other types\n        allowed here, ``status`` is a string or an integer, and\n        ``headers`` is a dictionary or a list of ``(key, value)``\n        tuples. If ``body`` is a :attr:`response_class` instance,\n        ``status`` overwrites the exiting value and ``headers`` are\n        extended.\n\n    :attr:`response_class`\n        The object is returned unchanged.\n\n    other :class:`~werkzeug.wrappers.Response` class\n        The object is coerced to :attr:`response_class`.\n\n    :func:`callable`\n        The function is called as a WSGI application. The result is\n        used to create a response object.\n\n.. versionchanged:: 2.2\n    A generator will be converted to a streaming response.\n    A list will be converted to a JSON response.\n\n.. versionchanged:: 1.1\n    A dict will be converted to a JSON response.\n\n.. versionchanged:: 0.9\n   Previously a tuple was interpreted as the arguments for the\n   response object.",
    "is_method": true,
    "class_name": "Flask",
    "parameters": [
      "self",
      "rv"
    ],
    "calls": [
      "isinstance",
      "t.cast",
      "len",
      "TypeError",
      "isinstance",
      "isinstance",
      "rv.headers.update",
      "isinstance",
      "isinstance",
      "self.response_class",
      "isinstance",
      "isinstance",
      "TypeError",
      "self.json.response",
      "isinstance",
      "callable",
      "TypeError",
      "self.response_class.force_type",
      "with_traceback",
      "TypeError",
      "sys.exc_info",
      "type",
      "type"
    ],
    "code_location": {
      "file": "app.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 1129,
      "end_line": 1269
    },
    "code_snippet": "def make_response(self, rv: ft.ResponseReturnValue) -> Response:\n        \"\"\"Convert the return value from a view function to an instance of\n        :attr:`response_class`.\n\n        :param rv: the return value from the view function. The view function\n            must return a response. Returning ``None``, or the view ending\n            without returning, is not allowed. The following types are allowed\n            for ``view_rv``:\n\n            ``str``\n                A response object is created ..."
  },
  {
    "name": "preprocess_request",
    "docstring": "Called before the request is dispatched. Calls\n:attr:`url_value_preprocessors` registered with the app and the\ncurrent blueprint (if any). Then calls :attr:`before_request_funcs`\nregistered with the app and the blueprint.\n\nIf any :meth:`before_request` handler returns a non-None value, the\nvalue is handled as if it was the return value from the view, and\nfurther request handling is stopped.",
    "is_method": true,
    "class_name": "Flask",
    "parameters": [
      "self"
    ],
    "calls": [
      "reversed",
      "url_func",
      "self.ensure_sync"
    ],
    "code_location": {
      "file": "app.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 1271,
      "end_line": 1296
    },
    "code_snippet": "def preprocess_request(self) -> ft.ResponseReturnValue | None:\n        \"\"\"Called before the request is dispatched. Calls\n        :attr:`url_value_preprocessors` registered with the app and the\n        current blueprint (if any). Then calls :attr:`before_request_funcs`\n        registered with the app and the blueprint.\n\n        If any :meth:`before_request` handler returns a non-None value, the\n        value is handled as if it was the return value from the view, and\n        further request handl..."
  },
  {
    "name": "process_response",
    "docstring": "Can be overridden in order to modify the response object\nbefore it's sent to the WSGI server.  By default this will\ncall all the :meth:`after_request` decorated functions.\n\n.. versionchanged:: 0.5\n   As of Flask 0.5 the functions registered for after request\n   execution are called in reverse order of registration.\n\n:param response: a :attr:`response_class` object.\n:return: a new response object or the same, has to be an\n         instance of :attr:`response_class`.",
    "is_method": true,
    "class_name": "Flask",
    "parameters": [
      "self",
      "response"
    ],
    "calls": [
      "request_ctx._get_current_object",
      "chain",
      "self.session_interface.is_null_session",
      "self.session_interface.save_session",
      "self.ensure_sync",
      "reversed",
      "self.ensure_sync"
    ],
    "code_location": {
      "file": "app.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 1298,
      "end_line": 1324
    },
    "code_snippet": "def process_response(self, response: Response) -> Response:\n        \"\"\"Can be overridden in order to modify the response object\n        before it's sent to the WSGI server.  By default this will\n        call all the :meth:`after_request` decorated functions.\n\n        .. versionchanged:: 0.5\n           As of Flask 0.5 the functions registered for after request\n           execution are called in reverse order of registration.\n\n        :param response: a :attr:`response_class` object.\n        :retu..."
  },
  {
    "name": "do_teardown_request",
    "docstring": "Called after the request is dispatched and the response is\nreturned, right before the request context is popped.\n\nThis calls all functions decorated with\n:meth:`teardown_request`, and :meth:`Blueprint.teardown_request`\nif a blueprint handled the request. Finally, the\n:data:`request_tearing_down` signal is sent.\n\nThis is called by\n:meth:`RequestContext.pop() <flask.ctx.RequestContext.pop>`,\nwhich may be delayed during testing to maintain access to\nresources.\n\n:param exc: An unhandled exception raised while dispatching the\n    request. Detected from the current exception information if\n    not passed. Passed to each teardown function.\n\n.. versionchanged:: 0.9\n    Added the ``exc`` argument.",
    "is_method": true,
    "class_name": "Flask",
    "parameters": [
      "self",
      "exc"
    ],
    "calls": [
      "chain",
      "request_tearing_down.send",
      "sys.exc_info",
      "reversed",
      "self.ensure_sync"
    ],
    "code_location": {
      "file": "app.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 1326,
      "end_line": 1358
    },
    "code_snippet": "def do_teardown_request(\n        self,\n        exc: BaseException | None = _sentinel,  # type: ignore[assignment]\n    ) -> None:\n        \"\"\"Called after the request is dispatched and the response is\n        returned, right before the request context is popped.\n\n        This calls all functions decorated with\n        :meth:`teardown_request`, and :meth:`Blueprint.teardown_request`\n        if a blueprint handled the request. Finally, the\n        :data:`request_tearing_down` signal is sent.\n\n      ..."
  },
  {
    "name": "do_teardown_appcontext",
    "docstring": "Called right before the application context is popped.\n\nWhen handling a request, the application context is popped\nafter the request context. See :meth:`do_teardown_request`.\n\nThis calls all functions decorated with\n:meth:`teardown_appcontext`. Then the\n:data:`appcontext_tearing_down` signal is sent.\n\nThis is called by\n:meth:`AppContext.pop() <flask.ctx.AppContext.pop>`.\n\n.. versionadded:: 0.9",
    "is_method": true,
    "class_name": "Flask",
    "parameters": [
      "self",
      "exc"
    ],
    "calls": [
      "reversed",
      "appcontext_tearing_down.send",
      "sys.exc_info",
      "self.ensure_sync"
    ],
    "code_location": {
      "file": "app.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 1360,
      "end_line": 1384
    },
    "code_snippet": "def do_teardown_appcontext(\n        self,\n        exc: BaseException | None = _sentinel,  # type: ignore[assignment]\n    ) -> None:\n        \"\"\"Called right before the application context is popped.\n\n        When handling a request, the application context is popped\n        after the request context. See :meth:`do_teardown_request`.\n\n        This calls all functions decorated with\n        :meth:`teardown_appcontext`. Then the\n        :data:`appcontext_tearing_down` signal is sent.\n\n        This i..."
  },
  {
    "name": "app_context",
    "docstring": "Create an :class:`~flask.ctx.AppContext`. Use as a ``with``\nblock to push the context, which will make :data:`current_app`\npoint at this application.\n\nAn application context is automatically pushed by\n:meth:`RequestContext.push() <flask.ctx.RequestContext.push>`\nwhen handling a request, and when running a CLI command. Use\nthis to manually create a context outside of these situations.\n\n::\n\n    with app.app_context():\n        init_db()\n\nSee :doc:`/appcontext`.\n\n.. versionadded:: 0.9",
    "is_method": true,
    "class_name": "Flask",
    "parameters": [
      "self"
    ],
    "calls": [
      "AppContext"
    ],
    "code_location": {
      "file": "app.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 1386,
      "end_line": 1405
    },
    "code_snippet": "def app_context(self) -> AppContext:\n        \"\"\"Create an :class:`~flask.ctx.AppContext`. Use as a ``with``\n        block to push the context, which will make :data:`current_app`\n        point at this application.\n\n        An application context is automatically pushed by\n        :meth:`RequestContext.push() <flask.ctx.RequestContext.push>`\n        when handling a request, and when running a CLI command. Use\n        this to manually create a context outside of these situations.\n\n        ::\n\n    ..."
  },
  {
    "name": "request_context",
    "docstring": "Create a :class:`~flask.ctx.RequestContext` representing a\nWSGI environment. Use a ``with`` block to push the context,\nwhich will make :data:`request` point at this request.\n\nSee :doc:`/reqcontext`.\n\nTypically you should not call this from your own code. A request\ncontext is automatically pushed by the :meth:`wsgi_app` when\nhandling a request. Use :meth:`test_request_context` to create\nan environment and context instead of this method.\n\n:param environ: a WSGI environment",
    "is_method": true,
    "class_name": "Flask",
    "parameters": [
      "self",
      "environ"
    ],
    "calls": [
      "RequestContext"
    ],
    "code_location": {
      "file": "app.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 1407,
      "end_line": 1421
    },
    "code_snippet": "def request_context(self, environ: WSGIEnvironment) -> RequestContext:\n        \"\"\"Create a :class:`~flask.ctx.RequestContext` representing a\n        WSGI environment. Use a ``with`` block to push the context,\n        which will make :data:`request` point at this request.\n\n        See :doc:`/reqcontext`.\n\n        Typically you should not call this from your own code. A request\n        context is automatically pushed by the :meth:`wsgi_app` when\n        handling a request. Use :meth:`test_request_..."
  },
  {
    "name": "test_request_context",
    "docstring": "Create a :class:`~flask.ctx.RequestContext` for a WSGI\nenvironment created from the given values. This is mostly useful\nduring testing, where you may want to run a function that uses\nrequest data without dispatching a full request.\n\nSee :doc:`/reqcontext`.\n\nUse a ``with`` block to push the context, which will make\n:data:`request` point at the request for the created\nenvironment. ::\n\n    with app.test_request_context(...):\n        generate_report()\n\nWhen using the shell, it may be easier to push and pop the\ncontext manually to avoid indentation. ::\n\n    ctx = app.test_request_context(...)\n    ctx.push()\n    ...\n    ctx.pop()\n\nTakes the same arguments as Werkzeug's\n:class:`~werkzeug.test.EnvironBuilder`, with some defaults from\nthe application. See the linked Werkzeug docs for most of the\navailable arguments. Flask-specific behavior is listed here.\n\n:param path: URL path being requested.\n:param base_url: Base URL where the app is being served, which\n    ``path`` is relative to. If not given, built from\n    :data:`PREFERRED_URL_SCHEME`, ``subdomain``,\n    :data:`SERVER_NAME`, and :data:`APPLICATION_ROOT`.\n:param subdomain: Subdomain name to append to\n    :data:`SERVER_NAME`.\n:param url_scheme: Scheme to use instead of\n    :data:`PREFERRED_URL_SCHEME`.\n:param data: The request body, either as a string or a dict of\n    form keys and values.\n:param json: If given, this is serialized as JSON and passed as\n    ``data``. Also defaults ``content_type`` to\n    ``application/json``.\n:param args: other positional arguments passed to\n    :class:`~werkzeug.test.EnvironBuilder`.\n:param kwargs: other keyword arguments passed to\n    :class:`~werkzeug.test.EnvironBuilder`.",
    "is_method": true,
    "class_name": "Flask",
    "parameters": [
      "self"
    ],
    "calls": [
      "EnvironBuilder",
      "self.request_context",
      "builder.close",
      "builder.get_environ"
    ],
    "code_location": {
      "file": "app.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 1423,
      "end_line": 1477
    },
    "code_snippet": "def test_request_context(self, *args: t.Any, **kwargs: t.Any) -> RequestContext:\n        \"\"\"Create a :class:`~flask.ctx.RequestContext` for a WSGI\n        environment created from the given values. This is mostly useful\n        during testing, where you may want to run a function that uses\n        request data without dispatching a full request.\n\n        See :doc:`/reqcontext`.\n\n        Use a ``with`` block to push the context, which will make\n        :data:`request` point at the request for the..."
  },
  {
    "name": "wsgi_app",
    "docstring": "The actual WSGI application. This is not implemented in\n:meth:`__call__` so that middlewares can be applied without\nlosing a reference to the app object. Instead of doing this::\n\n    app = MyMiddleware(app)\n\nIt's a better idea to do this instead::\n\n    app.wsgi_app = MyMiddleware(app.wsgi_app)\n\nThen you still have the original application object around and\ncan continue to call methods on it.\n\n.. versionchanged:: 0.7\n    Teardown events for the request and app contexts are called\n    even if an unhandled error occurs. Other events may not be\n    called depending on when an error occurs during dispatch.\n    See :ref:`callbacks-and-errors`.\n\n:param environ: A WSGI environment.\n:param start_response: A callable accepting a status code,\n    a list of headers, and an optional exception context to\n    start the response.",
    "is_method": true,
    "class_name": "Flask",
    "parameters": [
      "self",
      "environ",
      "start_response"
    ],
    "calls": [
      "self.request_context",
      "response",
      "ctx.pop",
      "ctx.push",
      "self.full_dispatch_request",
      "self.should_ignore_error",
      "self.handle_exception",
      "_cv_app.get",
      "_cv_request.get",
      "sys.exc_info"
    ],
    "code_location": {
      "file": "app.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 1479,
      "end_line": 1527
    },
    "code_snippet": "def wsgi_app(\n        self, environ: WSGIEnvironment, start_response: StartResponse\n    ) -> cabc.Iterable[bytes]:\n        \"\"\"The actual WSGI application. This is not implemented in\n        :meth:`__call__` so that middlewares can be applied without\n        losing a reference to the app object. Instead of doing this::\n\n            app = MyMiddleware(app)\n\n        It's a better idea to do this instead::\n\n            app.wsgi_app = MyMiddleware(app.wsgi_app)\n\n        Then you still have the origin..."
  },
  {
    "name": "__call__",
    "docstring": "The WSGI server calls the Flask application object as the\nWSGI application. This calls :meth:`wsgi_app`, which can be\nwrapped to apply middleware.",
    "is_method": true,
    "class_name": "Flask",
    "parameters": [
      "self",
      "environ",
      "start_response"
    ],
    "calls": [
      "self.wsgi_app"
    ],
    "code_location": {
      "file": "app.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 1529,
      "end_line": 1536
    },
    "code_snippet": "def __call__(\n        self, environ: WSGIEnvironment, start_response: StartResponse\n    ) -> cabc.Iterable[bytes]:\n        \"\"\"The WSGI server calls the Flask application object as the\n        WSGI application. This calls :meth:`wsgi_app`, which can be\n        wrapped to apply middleware.\n        \"\"\"\n        return self.wsgi_app(environ, start_response)"
  },
  {
    "name": "permanent",
    "docstring": "This reflects the ``'_permanent'`` key in the dict.",
    "is_method": true,
    "class_name": "SessionMixin",
    "parameters": [
      "self"
    ],
    "calls": [
      "self.get"
    ],
    "code_location": {
      "file": "sessions.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 28,
      "end_line": 30
    },
    "code_snippet": "def permanent(self) -> bool:\n        \"\"\"This reflects the ``'_permanent'`` key in the dict.\"\"\"\n        return self.get(\"_permanent\", False)"
  },
  {
    "name": "permanent",
    "docstring": "",
    "is_method": true,
    "class_name": "SessionMixin",
    "parameters": [
      "self",
      "value"
    ],
    "calls": [
      "bool"
    ],
    "code_location": {
      "file": "sessions.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 33,
      "end_line": 34
    },
    "code_snippet": "def permanent(self, value: bool) -> None:\n        self[\"_permanent\"] = bool(value)"
  },
  {
    "name": "__init__",
    "docstring": "",
    "is_method": true,
    "class_name": "SecureCookieSession",
    "parameters": [
      "self",
      "initial"
    ],
    "calls": [
      "__init__",
      "super"
    ],
    "code_location": {
      "file": "sessions.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 74,
      "end_line": 82
    },
    "code_snippet": "def __init__(\n        self,\n        initial: c.Mapping[str, t.Any] | c.Iterable[tuple[str, t.Any]] | None = None,\n    ) -> None:\n        def on_update(self: te.Self) -> None:\n            self.modified = True\n            self.accessed = True\n\n        super().__init__(initial, on_update)"
  },
  {
    "name": "__getitem__",
    "docstring": "",
    "is_method": true,
    "class_name": "SecureCookieSession",
    "parameters": [
      "self",
      "key"
    ],
    "calls": [
      "__getitem__",
      "super"
    ],
    "code_location": {
      "file": "sessions.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 84,
      "end_line": 86
    },
    "code_snippet": "def __getitem__(self, key: str) -> t.Any:\n        self.accessed = True\n        return super().__getitem__(key)"
  },
  {
    "name": "get",
    "docstring": "",
    "is_method": true,
    "class_name": "SecureCookieSession",
    "parameters": [
      "self",
      "key",
      "default"
    ],
    "calls": [
      "get",
      "super"
    ],
    "code_location": {
      "file": "sessions.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 88,
      "end_line": 90
    },
    "code_snippet": "def get(self, key: str, default: t.Any = None) -> t.Any:\n        self.accessed = True\n        return super().get(key, default)"
  },
  {
    "name": "setdefault",
    "docstring": "",
    "is_method": true,
    "class_name": "SecureCookieSession",
    "parameters": [
      "self",
      "key",
      "default"
    ],
    "calls": [
      "setdefault",
      "super"
    ],
    "code_location": {
      "file": "sessions.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 92,
      "end_line": 94
    },
    "code_snippet": "def setdefault(self, key: str, default: t.Any = None) -> t.Any:\n        self.accessed = True\n        return super().setdefault(key, default)"
  },
  {
    "name": "_fail",
    "docstring": "",
    "is_method": true,
    "class_name": "NullSession",
    "parameters": [
      "self"
    ],
    "calls": [
      "RuntimeError"
    ],
    "code_location": {
      "file": "sessions.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 103,
      "end_line": 108
    },
    "code_snippet": "def _fail(self, *args: t.Any, **kwargs: t.Any) -> t.NoReturn:\n        raise RuntimeError(\n            \"The session is unavailable because no secret \"\n            \"key was set.  Set the secret_key on the \"\n            \"application to something unique and secret.\"\n        )"
  },
  {
    "name": "make_null_session",
    "docstring": "Creates a null session which acts as a replacement object if the\nreal session support could not be loaded due to a configuration\nerror.  This mainly aids the user experience because the job of the\nnull session is to still support lookup without complaining but\nmodifications are answered with a helpful error message of what\nfailed.\n\nThis creates an instance of :attr:`null_session_class` by default.",
    "is_method": true,
    "class_name": "SessionInterface",
    "parameters": [
      "self",
      "app"
    ],
    "calls": [
      "self.null_session_class"
    ],
    "code_location": {
      "file": "sessions.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 164,
      "end_line": 174
    },
    "code_snippet": "def make_null_session(self, app: Flask) -> NullSession:\n        \"\"\"Creates a null session which acts as a replacement object if the\n        real session support could not be loaded due to a configuration\n        error.  This mainly aids the user experience because the job of the\n        null session is to still support lookup without complaining but\n        modifications are answered with a helpful error message of what\n        failed.\n\n        This creates an instance of :attr:`null_session_cla..."
  },
  {
    "name": "is_null_session",
    "docstring": "Checks if a given object is a null session.  Null sessions are\nnot asked to be saved.\n\nThis checks if the object is an instance of :attr:`null_session_class`\nby default.",
    "is_method": true,
    "class_name": "SessionInterface",
    "parameters": [
      "self",
      "obj"
    ],
    "calls": [
      "isinstance"
    ],
    "code_location": {
      "file": "sessions.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 176,
      "end_line": 183
    },
    "code_snippet": "def is_null_session(self, obj: object) -> bool:\n        \"\"\"Checks if a given object is a null session.  Null sessions are\n        not asked to be saved.\n\n        This checks if the object is an instance of :attr:`null_session_class`\n        by default.\n        \"\"\"\n        return isinstance(obj, self.null_session_class)"
  },
  {
    "name": "get_cookie_name",
    "docstring": "The name of the session cookie. Uses``app.config[\"SESSION_COOKIE_NAME\"]``.",
    "is_method": true,
    "class_name": "SessionInterface",
    "parameters": [
      "self",
      "app"
    ],
    "calls": [],
    "code_location": {
      "file": "sessions.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 185,
      "end_line": 187
    },
    "code_snippet": "def get_cookie_name(self, app: Flask) -> str:\n        \"\"\"The name of the session cookie. Uses``app.config[\"SESSION_COOKIE_NAME\"]``.\"\"\"\n        return app.config[\"SESSION_COOKIE_NAME\"]"
  },
  {
    "name": "get_cookie_domain",
    "docstring": "The value of the ``Domain`` parameter on the session cookie. If not set,\nbrowsers will only send the cookie to the exact domain it was set from.\nOtherwise, they will send it to any subdomain of the given value as well.\n\nUses the :data:`SESSION_COOKIE_DOMAIN` config.\n\n.. versionchanged:: 2.3\n    Not set by default, does not fall back to ``SERVER_NAME``.",
    "is_method": true,
    "class_name": "SessionInterface",
    "parameters": [
      "self",
      "app"
    ],
    "calls": [],
    "code_location": {
      "file": "sessions.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 189,
      "end_line": 199
    },
    "code_snippet": "def get_cookie_domain(self, app: Flask) -> str | None:\n        \"\"\"The value of the ``Domain`` parameter on the session cookie. If not set,\n        browsers will only send the cookie to the exact domain it was set from.\n        Otherwise, they will send it to any subdomain of the given value as well.\n\n        Uses the :data:`SESSION_COOKIE_DOMAIN` config.\n\n        .. versionchanged:: 2.3\n            Not set by default, does not fall back to ``SERVER_NAME``.\n        \"\"\"\n        return app.config[\"..."
  },
  {
    "name": "get_cookie_path",
    "docstring": "Returns the path for which the cookie should be valid.  The\ndefault implementation uses the value from the ``SESSION_COOKIE_PATH``\nconfig var if it's set, and falls back to ``APPLICATION_ROOT`` or\nuses ``/`` if it's ``None``.",
    "is_method": true,
    "class_name": "SessionInterface",
    "parameters": [
      "self",
      "app"
    ],
    "calls": [],
    "code_location": {
      "file": "sessions.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 201,
      "end_line": 207
    },
    "code_snippet": "def get_cookie_path(self, app: Flask) -> str:\n        \"\"\"Returns the path for which the cookie should be valid.  The\n        default implementation uses the value from the ``SESSION_COOKIE_PATH``\n        config var if it's set, and falls back to ``APPLICATION_ROOT`` or\n        uses ``/`` if it's ``None``.\n        \"\"\"\n        return app.config[\"SESSION_COOKIE_PATH\"] or app.config[\"APPLICATION_ROOT\"]"
  },
  {
    "name": "get_cookie_httponly",
    "docstring": "Returns True if the session cookie should be httponly.  This\ncurrently just returns the value of the ``SESSION_COOKIE_HTTPONLY``\nconfig var.",
    "is_method": true,
    "class_name": "SessionInterface",
    "parameters": [
      "self",
      "app"
    ],
    "calls": [],
    "code_location": {
      "file": "sessions.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 209,
      "end_line": 214
    },
    "code_snippet": "def get_cookie_httponly(self, app: Flask) -> bool:\n        \"\"\"Returns True if the session cookie should be httponly.  This\n        currently just returns the value of the ``SESSION_COOKIE_HTTPONLY``\n        config var.\n        \"\"\"\n        return app.config[\"SESSION_COOKIE_HTTPONLY\"]"
  },
  {
    "name": "get_cookie_secure",
    "docstring": "Returns True if the cookie should be secure.  This currently\njust returns the value of the ``SESSION_COOKIE_SECURE`` setting.",
    "is_method": true,
    "class_name": "SessionInterface",
    "parameters": [
      "self",
      "app"
    ],
    "calls": [],
    "code_location": {
      "file": "sessions.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 216,
      "end_line": 220
    },
    "code_snippet": "def get_cookie_secure(self, app: Flask) -> bool:\n        \"\"\"Returns True if the cookie should be secure.  This currently\n        just returns the value of the ``SESSION_COOKIE_SECURE`` setting.\n        \"\"\"\n        return app.config[\"SESSION_COOKIE_SECURE\"]"
  },
  {
    "name": "get_cookie_samesite",
    "docstring": "Return ``'Strict'`` or ``'Lax'`` if the cookie should use the\n``SameSite`` attribute. This currently just returns the value of\nthe :data:`SESSION_COOKIE_SAMESITE` setting.",
    "is_method": true,
    "class_name": "SessionInterface",
    "parameters": [
      "self",
      "app"
    ],
    "calls": [],
    "code_location": {
      "file": "sessions.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 222,
      "end_line": 227
    },
    "code_snippet": "def get_cookie_samesite(self, app: Flask) -> str | None:\n        \"\"\"Return ``'Strict'`` or ``'Lax'`` if the cookie should use the\n        ``SameSite`` attribute. This currently just returns the value of\n        the :data:`SESSION_COOKIE_SAMESITE` setting.\n        \"\"\"\n        return app.config[\"SESSION_COOKIE_SAMESITE\"]"
  },
  {
    "name": "get_cookie_partitioned",
    "docstring": "Returns True if the cookie should be partitioned. By default, uses\nthe value of :data:`SESSION_COOKIE_PARTITIONED`.\n\n.. versionadded:: 3.1",
    "is_method": true,
    "class_name": "SessionInterface",
    "parameters": [
      "self",
      "app"
    ],
    "calls": [],
    "code_location": {
      "file": "sessions.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 229,
      "end_line": 235
    },
    "code_snippet": "def get_cookie_partitioned(self, app: Flask) -> bool:\n        \"\"\"Returns True if the cookie should be partitioned. By default, uses\n        the value of :data:`SESSION_COOKIE_PARTITIONED`.\n\n        .. versionadded:: 3.1\n        \"\"\"\n        return app.config[\"SESSION_COOKIE_PARTITIONED\"]"
  },
  {
    "name": "get_expiration_time",
    "docstring": "A helper method that returns an expiration date for the session\nor ``None`` if the session is linked to the browser session.  The\ndefault implementation returns now + the permanent session\nlifetime configured on the application.",
    "is_method": true,
    "class_name": "SessionInterface",
    "parameters": [
      "self",
      "app",
      "session"
    ],
    "calls": [
      "datetime.now"
    ],
    "code_location": {
      "file": "sessions.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 237,
      "end_line": 245
    },
    "code_snippet": "def get_expiration_time(self, app: Flask, session: SessionMixin) -> datetime | None:\n        \"\"\"A helper method that returns an expiration date for the session\n        or ``None`` if the session is linked to the browser session.  The\n        default implementation returns now + the permanent session\n        lifetime configured on the application.\n        \"\"\"\n        if session.permanent:\n            return datetime.now(timezone.utc) + app.permanent_session_lifetime\n        return None"
  },
  {
    "name": "should_set_cookie",
    "docstring": "Used by session backends to determine if a ``Set-Cookie`` header\nshould be set for this session cookie for this response. If the session\nhas been modified, the cookie is set. If the session is permanent and\nthe ``SESSION_REFRESH_EACH_REQUEST`` config is true, the cookie is\nalways set.\n\nThis check is usually skipped if the session was deleted.\n\n.. versionadded:: 0.11",
    "is_method": true,
    "class_name": "SessionInterface",
    "parameters": [
      "self",
      "app",
      "session"
    ],
    "calls": [],
    "code_location": {
      "file": "sessions.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 247,
      "end_line": 261
    },
    "code_snippet": "def should_set_cookie(self, app: Flask, session: SessionMixin) -> bool:\n        \"\"\"Used by session backends to determine if a ``Set-Cookie`` header\n        should be set for this session cookie for this response. If the session\n        has been modified, the cookie is set. If the session is permanent and\n        the ``SESSION_REFRESH_EACH_REQUEST`` config is true, the cookie is\n        always set.\n\n        This check is usually skipped if the session was deleted.\n\n        .. versionadded:: 0.11\n..."
  },
  {
    "name": "open_session",
    "docstring": "This is called at the beginning of each request, after\npushing the request context, before matching the URL.\n\nThis must return an object which implements a dictionary-like\ninterface as well as the :class:`SessionMixin` interface.\n\nThis will return ``None`` to indicate that loading failed in\nsome way that is not immediately an error. The request\ncontext will fall back to using :meth:`make_null_session`\nin this case.",
    "is_method": true,
    "class_name": "SessionInterface",
    "parameters": [
      "self",
      "app",
      "request"
    ],
    "calls": [
      "NotImplementedError"
    ],
    "code_location": {
      "file": "sessions.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 263,
      "end_line": 275
    },
    "code_snippet": "def open_session(self, app: Flask, request: Request) -> SessionMixin | None:\n        \"\"\"This is called at the beginning of each request, after\n        pushing the request context, before matching the URL.\n\n        This must return an object which implements a dictionary-like\n        interface as well as the :class:`SessionMixin` interface.\n\n        This will return ``None`` to indicate that loading failed in\n        some way that is not immediately an error. The request\n        context will fall..."
  },
  {
    "name": "save_session",
    "docstring": "This is called at the end of each request, after generating\na response, before removing the request context. It is skipped\nif :meth:`is_null_session` returns ``True``.",
    "is_method": true,
    "class_name": "SessionInterface",
    "parameters": [
      "self",
      "app",
      "session",
      "response"
    ],
    "calls": [
      "NotImplementedError"
    ],
    "code_location": {
      "file": "sessions.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 277,
      "end_line": 284
    },
    "code_snippet": "def save_session(\n        self, app: Flask, session: SessionMixin, response: Response\n    ) -> None:\n        \"\"\"This is called at the end of each request, after generating\n        a response, before removing the request context. It is skipped\n        if :meth:`is_null_session` returns ``True``.\n        \"\"\"\n        raise NotImplementedError()"
  },
  {
    "name": "_lazy_sha1",
    "docstring": "Don't access ``hashlib.sha1`` until runtime. FIPS builds may not include\nSHA-1, in which case the import and use as a default would fail before the\ndeveloper can configure something else.",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "string"
    ],
    "calls": [
      "hashlib.sha1"
    ],
    "code_location": {
      "file": "sessions.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 290,
      "end_line": 295
    },
    "code_snippet": "def _lazy_sha1(string: bytes = b\"\") -> t.Any:\n    \"\"\"Don't access ``hashlib.sha1`` until runtime. FIPS builds may not include\n    SHA-1, in which case the import and use as a default would fail before the\n    developer can configure something else.\n    \"\"\"\n    return hashlib.sha1(string)"
  },
  {
    "name": "get_signing_serializer",
    "docstring": "",
    "is_method": true,
    "class_name": "SecureCookieSessionInterface",
    "parameters": [
      "self",
      "app"
    ],
    "calls": [
      "keys.append",
      "URLSafeTimedSerializer",
      "keys.extend"
    ],
    "code_location": {
      "file": "sessions.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 317,
      "end_line": 335
    },
    "code_snippet": "def get_signing_serializer(self, app: Flask) -> URLSafeTimedSerializer | None:\n        if not app.secret_key:\n            return None\n\n        keys: list[str | bytes] = []\n\n        if fallbacks := app.config[\"SECRET_KEY_FALLBACKS\"]:\n            keys.extend(fallbacks)\n\n        keys.append(app.secret_key)  # itsdangerous expects current key at top\n        return URLSafeTimedSerializer(\n            keys,  # type: ignore[arg-type]\n            salt=self.salt,\n            serializer=self.serializer,\n ..."
  },
  {
    "name": "open_session",
    "docstring": "",
    "is_method": true,
    "class_name": "SecureCookieSessionInterface",
    "parameters": [
      "self",
      "app",
      "request"
    ],
    "calls": [
      "self.get_signing_serializer",
      "request.cookies.get",
      "int",
      "self.get_cookie_name",
      "self.session_class",
      "app.permanent_session_lifetime.total_seconds",
      "s.loads",
      "self.session_class",
      "self.session_class"
    ],
    "code_location": {
      "file": "sessions.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 337,
      "end_line": 349
    },
    "code_snippet": "def open_session(self, app: Flask, request: Request) -> SecureCookieSession | None:\n        s = self.get_signing_serializer(app)\n        if s is None:\n            return None\n        val = request.cookies.get(self.get_cookie_name(app))\n        if not val:\n            return self.session_class()\n        max_age = int(app.permanent_session_lifetime.total_seconds())\n        try:\n            data = s.loads(val, max_age=max_age)\n            return self.session_class(data)\n        except BadSignature:..."
  },
  {
    "name": "save_session",
    "docstring": "",
    "is_method": true,
    "class_name": "SecureCookieSessionInterface",
    "parameters": [
      "self",
      "app",
      "session",
      "response"
    ],
    "calls": [
      "self.get_cookie_name",
      "self.get_cookie_domain",
      "self.get_cookie_path",
      "self.get_cookie_secure",
      "self.get_cookie_partitioned",
      "self.get_cookie_samesite",
      "self.get_cookie_httponly",
      "self.get_expiration_time",
      "dumps",
      "response.set_cookie",
      "response.vary.add",
      "response.vary.add",
      "self.should_set_cookie",
      "dict",
      "response.delete_cookie",
      "response.vary.add",
      "self.get_signing_serializer"
    ],
    "code_location": {
      "file": "sessions.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 351,
      "end_line": 399
    },
    "code_snippet": "def save_session(\n        self, app: Flask, session: SessionMixin, response: Response\n    ) -> None:\n        name = self.get_cookie_name(app)\n        domain = self.get_cookie_domain(app)\n        path = self.get_cookie_path(app)\n        secure = self.get_cookie_secure(app)\n        partitioned = self.get_cookie_partitioned(app)\n        samesite = self.get_cookie_samesite(app)\n        httponly = self.get_cookie_httponly(app)\n\n        # Add a \"Vary: Cookie\" header if the session was accessed at all...."
  },
  {
    "name": "find_best_app",
    "docstring": "Given a module instance this tries to find the best possible\napplication in the module or raises an exception.",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "module"
    ],
    "calls": [
      "NoAppException",
      "getattr",
      "isinstance",
      "len",
      "getattr",
      "inspect.isfunction",
      "module.__dict__.values",
      "isinstance",
      "len",
      "NoAppException",
      "app_factory",
      "isinstance",
      "NoAppException",
      "_called_with_wrong_args"
    ],
    "code_location": {
      "file": "cli.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 41,
      "end_line": 91
    },
    "code_snippet": "def find_best_app(module: ModuleType) -> Flask:\n    \"\"\"Given a module instance this tries to find the best possible\n    application in the module or raises an exception.\n    \"\"\"\n    from . import Flask\n\n    # Search for the most common names first.\n    for attr_name in (\"app\", \"application\"):\n        app = getattr(module, attr_name, None)\n\n        if isinstance(app, Flask):\n            return app\n\n    # Otherwise find the only object that is a Flask instance.\n    matches = [v for v in module.__d..."
  },
  {
    "name": "_called_with_wrong_args",
    "docstring": "Check whether calling a function raised a ``TypeError`` because\nthe call failed or because something in the factory raised the\nerror.\n\n:param f: The function that was called.\n:return: ``True`` if the call failed.",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "f"
    ],
    "calls": [
      "sys.exc_info"
    ],
    "code_location": {
      "file": "cli.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 94,
      "end_line": 117
    },
    "code_snippet": "def _called_with_wrong_args(f: t.Callable[..., Flask]) -> bool:\n    \"\"\"Check whether calling a function raised a ``TypeError`` because\n    the call failed or because something in the factory raised the\n    error.\n\n    :param f: The function that was called.\n    :return: ``True`` if the call failed.\n    \"\"\"\n    tb = sys.exc_info()[2]\n\n    try:\n        while tb is not None:\n            if tb.tb_frame.f_code is f.__code__:\n                # In the function, it was called successfully.\n             ..."
  },
  {
    "name": "find_app_by_string",
    "docstring": "Check if the given string is a variable name or a function. Call\na function to get the app instance, or return the variable directly.",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "module",
      "app_name"
    ],
    "calls": [
      "isinstance",
      "inspect.isfunction",
      "isinstance",
      "NoAppException",
      "isinstance",
      "getattr",
      "ast.parse",
      "NoAppException",
      "NoAppException",
      "NoAppException",
      "attr",
      "app_name.strip",
      "isinstance",
      "NoAppException",
      "NoAppException",
      "ast.literal_eval",
      "ast.literal_eval",
      "NoAppException",
      "_called_with_wrong_args"
    ],
    "code_location": {
      "file": "cli.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 120,
      "end_line": 197
    },
    "code_snippet": "def find_app_by_string(module: ModuleType, app_name: str) -> Flask:\n    \"\"\"Check if the given string is a variable name or a function. Call\n    a function to get the app instance, or return the variable directly.\n    \"\"\"\n    from . import Flask\n\n    # Parse app_name as a single expression to determine if it's a valid\n    # attribute name or function call.\n    try:\n        expr = ast.parse(app_name.strip(), mode=\"eval\").body\n    except SyntaxError:\n        raise NoAppException(\n            f\"Fail..."
  },
  {
    "name": "prepare_import",
    "docstring": "Given a filename this will try to calculate the python path, add it\nto the search path and return the actual module name that is expected.",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "path"
    ],
    "calls": [
      "os.path.realpath",
      "os.path.splitext",
      "join",
      "os.path.basename",
      "os.path.dirname",
      "os.path.split",
      "module_name.append",
      "sys.path.insert",
      "os.path.exists",
      "os.path.join"
    ],
    "code_location": {
      "file": "cli.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 200,
      "end_line": 226
    },
    "code_snippet": "def prepare_import(path: str) -> str:\n    \"\"\"Given a filename this will try to calculate the python path, add it\n    to the search path and return the actual module name that is expected.\n    \"\"\"\n    path = os.path.realpath(path)\n\n    fname, ext = os.path.splitext(path)\n    if ext == \".py\":\n        path = fname\n\n    if os.path.basename(path) == \"__init__\":\n        path = os.path.dirname(path)\n\n    module_name = []\n\n    # move up until outside package structure (no __init__.py)\n    while True:\n  ..."
  },
  {
    "name": "locate_app",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "module_name",
      "app_name",
      "raise_if_not_found"
    ],
    "calls": [],
    "code_location": {
      "file": "cli.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 230,
      "end_line": 232
    },
    "code_snippet": "def locate_app(\n    module_name: str, app_name: str | None, raise_if_not_found: t.Literal[True] = True\n) -> Flask: ..."
  },
  {
    "name": "locate_app",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "module_name",
      "app_name",
      "raise_if_not_found"
    ],
    "calls": [],
    "code_location": {
      "file": "cli.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 236,
      "end_line": 238
    },
    "code_snippet": "def locate_app(\n    module_name: str, app_name: str | None, raise_if_not_found: t.Literal[False] = ...\n) -> Flask | None: ..."
  },
  {
    "name": "locate_app",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "module_name",
      "app_name",
      "raise_if_not_found"
    ],
    "calls": [
      "__import__",
      "find_best_app",
      "find_app_by_string",
      "NoAppException",
      "sys.exc_info",
      "NoAppException",
      "traceback.format_exc"
    ],
    "code_location": {
      "file": "cli.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 241,
      "end_line": 264
    },
    "code_snippet": "def locate_app(\n    module_name: str, app_name: str | None, raise_if_not_found: bool = True\n) -> Flask | None:\n    try:\n        __import__(module_name)\n    except ImportError:\n        # Reraise the ImportError if it occurred within the imported module.\n        # Determine this by checking whether the trace has a depth > 1.\n        if sys.exc_info()[2].tb_next:  # type: ignore[union-attr]\n            raise NoAppException(\n                f\"While importing {module_name!r}, an ImportError was\"\n    ..."
  },
  {
    "name": "get_version",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "ctx",
      "param",
      "value"
    ],
    "calls": [
      "importlib.metadata.version",
      "importlib.metadata.version",
      "click.echo",
      "ctx.exit",
      "platform.python_version"
    ],
    "code_location": {
      "file": "cli.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 267,
      "end_line": 280
    },
    "code_snippet": "def get_version(ctx: click.Context, param: click.Parameter, value: t.Any) -> None:\n    if not value or ctx.resilient_parsing:\n        return\n\n    flask_version = importlib.metadata.version(\"flask\")\n    werkzeug_version = importlib.metadata.version(\"werkzeug\")\n\n    click.echo(\n        f\"Python {platform.python_version()}\\n\"\n        f\"Flask {flask_version}\\n\"\n        f\"Werkzeug {werkzeug_version}\",\n        color=ctx.color,\n    )\n    ctx.exit()"
  },
  {
    "name": "__init__",
    "docstring": "",
    "is_method": true,
    "class_name": "ScriptInfo",
    "parameters": [
      "self",
      "app_import_path",
      "create_app",
      "set_debug_flag",
      "load_dotenv_defaults"
    ],
    "calls": [
      "get_load_dotenv"
    ],
    "code_location": {
      "file": "cli.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 305,
      "end_line": 331
    },
    "code_snippet": "def __init__(\n        self,\n        app_import_path: str | None = None,\n        create_app: t.Callable[..., Flask] | None = None,\n        set_debug_flag: bool = True,\n        load_dotenv_defaults: bool = True,\n    ) -> None:\n        #: Optionally the import path for the Flask application.\n        self.app_import_path = app_import_path\n        #: Optionally a function that is passed the script info to create\n        #: the instance of the application.\n        self.create_app = create_app\n        ..."
  },
  {
    "name": "load_app",
    "docstring": "Loads the Flask app (if not yet loaded) and returns it.  Calling\nthis multiple times will just result in the already loaded app to\nbe returned.",
    "is_method": true,
    "class_name": "ScriptInfo",
    "parameters": [
      "self"
    ],
    "calls": [
      "self.create_app",
      "NoAppException",
      "get_debug_flag",
      "prepare_import",
      "locate_app",
      "prepare_import",
      "locate_app",
      "re.split"
    ],
    "code_location": {
      "file": "cli.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 333,
      "end_line": 372
    },
    "code_snippet": "def load_app(self) -> Flask:\n        \"\"\"Loads the Flask app (if not yet loaded) and returns it.  Calling\n        this multiple times will just result in the already loaded app to\n        be returned.\n        \"\"\"\n        if self._loaded_app is not None:\n            return self._loaded_app\n        app: Flask | None = None\n        if self.create_app is not None:\n            app = self.create_app()\n        else:\n            if self.app_import_path:\n                path, name = (\n                    ..."
  },
  {
    "name": "with_appcontext",
    "docstring": "Wraps a callback so that it's guaranteed to be executed with the\nscript's application context.\n\nCustom commands (and their options) registered under ``app.cli`` or\n``blueprint.cli`` will always have an app context available, this\ndecorator is not required in that case.\n\n.. versionchanged:: 2.2\n    The app context is active for subcommands as well as the\n    decorated callback. The app context is always available to\n    ``app.cli`` command and parameter callbacks.",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "f"
    ],
    "calls": [
      "update_wrapper",
      "ctx.invoke",
      "load_app",
      "ctx.with_resource",
      "app.app_context",
      "ctx.ensure_object"
    ],
    "code_location": {
      "file": "cli.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 380,
      "end_line": 402
    },
    "code_snippet": "def with_appcontext(f: F) -> F:\n    \"\"\"Wraps a callback so that it's guaranteed to be executed with the\n    script's application context.\n\n    Custom commands (and their options) registered under ``app.cli`` or\n    ``blueprint.cli`` will always have an app context available, this\n    decorator is not required in that case.\n\n    .. versionchanged:: 2.2\n        The app context is active for subcommands as well as the\n        decorated callback. The app context is always available to\n        ``app...."
  },
  {
    "name": "command",
    "docstring": "This works exactly like the method of the same name on a regular\n:class:`click.Group` but it wraps callbacks in :func:`with_appcontext`\nunless it's disabled by passing ``with_appcontext=False``.",
    "is_method": true,
    "class_name": "AppGroup",
    "parameters": [
      "self"
    ],
    "calls": [
      "kwargs.pop",
      "with_appcontext",
      "command",
      "super"
    ],
    "code_location": {
      "file": "cli.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 413,
      "end_line": 427
    },
    "code_snippet": "def command(  # type: ignore[override]\n        self, *args: t.Any, **kwargs: t.Any\n    ) -> t.Callable[[t.Callable[..., t.Any]], click.Command]:\n        \"\"\"This works exactly like the method of the same name on a regular\n        :class:`click.Group` but it wraps callbacks in :func:`with_appcontext`\n        unless it's disabled by passing ``with_appcontext=False``.\n        \"\"\"\n        wrap_for_ctx = kwargs.pop(\"with_appcontext\", True)\n\n        def decorator(f: t.Callable[..., t.Any]) -> click.Com..."
  },
  {
    "name": "group",
    "docstring": "This works exactly like the method of the same name on a regular\n:class:`click.Group` but it defaults the group class to\n:class:`AppGroup`.",
    "is_method": true,
    "class_name": "AppGroup",
    "parameters": [
      "self"
    ],
    "calls": [
      "kwargs.setdefault",
      "group",
      "super"
    ],
    "code_location": {
      "file": "cli.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 429,
      "end_line": 437
    },
    "code_snippet": "def group(  # type: ignore[override]\n        self, *args: t.Any, **kwargs: t.Any\n    ) -> t.Callable[[t.Callable[..., t.Any]], click.Group]:\n        \"\"\"This works exactly like the method of the same name on a regular\n        :class:`click.Group` but it defaults the group class to\n        :class:`AppGroup`.\n        \"\"\"\n        kwargs.setdefault(\"cls\", AppGroup)\n        return super().group(*args, **kwargs)"
  },
  {
    "name": "_set_app",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "ctx",
      "param",
      "value"
    ],
    "calls": [
      "ctx.ensure_object"
    ],
    "code_location": {
      "file": "cli.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 440,
      "end_line": 446
    },
    "code_snippet": "def _set_app(ctx: click.Context, param: click.Option, value: str | None) -> str | None:\n    if value is None:\n        return None\n\n    info = ctx.ensure_object(ScriptInfo)\n    info.app_import_path = value\n    return value"
  },
  {
    "name": "_set_debug",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "ctx",
      "param",
      "value"
    ],
    "calls": [
      "ctx.get_parameter_source"
    ],
    "code_location": {
      "file": "cli.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 468,
      "end_line": 482
    },
    "code_snippet": "def _set_debug(ctx: click.Context, param: click.Option, value: bool) -> bool | None:\n    # If the flag isn't provided, it will default to False. Don't use\n    # that, let debug be set by env in that case.\n    source = ctx.get_parameter_source(param.name)  # type: ignore[arg-type]\n\n    if source is not None and source in (\n        ParameterSource.DEFAULT,\n        ParameterSource.DEFAULT_MAP,\n    ):\n        return None\n\n    # Set with env var instead of ScriptInfo.load so that it can be\n    # acce..."
  },
  {
    "name": "_env_file_callback",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "ctx",
      "param",
      "value"
    ],
    "calls": [
      "load_dotenv",
      "click.BadParameter"
    ],
    "code_location": {
      "file": "cli.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 493,
      "end_line": 512
    },
    "code_snippet": "def _env_file_callback(\n    ctx: click.Context, param: click.Option, value: str | None\n) -> str | None:\n    try:\n        import dotenv  # noqa: F401\n    except ImportError:\n        # Only show an error if a value was passed, otherwise we still want to\n        # call load_dotenv and show a message without exiting.\n        if value is not None:\n            raise click.BadParameter(\n                \"python-dotenv must be installed to load an env file.\",\n                ctx=ctx,\n                para..."
  },
  {
    "name": "__init__",
    "docstring": "",
    "is_method": true,
    "class_name": "FlaskGroup",
    "parameters": [
      "self",
      "add_default_commands",
      "create_app",
      "add_version_option",
      "load_dotenv",
      "set_debug_flag"
    ],
    "calls": [
      "list",
      "params.extend",
      "setdefault",
      "__init__",
      "params.append",
      "self.add_command",
      "self.add_command",
      "self.add_command",
      "extra.pop",
      "super"
    ],
    "code_location": {
      "file": "cli.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 563,
      "end_line": 598
    },
    "code_snippet": "def __init__(\n        self,\n        add_default_commands: bool = True,\n        create_app: t.Callable[..., Flask] | None = None,\n        add_version_option: bool = True,\n        load_dotenv: bool = True,\n        set_debug_flag: bool = True,\n        **extra: t.Any,\n    ) -> None:\n        params: list[click.Parameter] = list(extra.pop(\"params\", None) or ())\n        # Processing is done with option callbacks instead of a group\n        # callback. This allows users to make a custom group callback\n  ..."
  },
  {
    "name": "_load_plugin_commands",
    "docstring": "",
    "is_method": true,
    "class_name": "FlaskGroup",
    "parameters": [
      "self"
    ],
    "calls": [
      "importlib.metadata.entry_points",
      "self.add_command",
      "ep.load"
    ],
    "code_location": {
      "file": "cli.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 600,
      "end_line": 607
    },
    "code_snippet": "def _load_plugin_commands(self) -> None:\n        if self._loaded_plugin_commands:\n            return\n\n        for ep in importlib.metadata.entry_points(group=\"flask.commands\"):\n            self.add_command(ep.load(), ep.name)\n\n        self._loaded_plugin_commands = True"
  },
  {
    "name": "get_command",
    "docstring": "",
    "is_method": true,
    "class_name": "FlaskGroup",
    "parameters": [
      "self",
      "ctx",
      "name"
    ],
    "calls": [
      "self._load_plugin_commands",
      "get_command",
      "ctx.ensure_object",
      "app.cli.get_command",
      "info.load_app",
      "ctx.with_resource",
      "super",
      "click.secho",
      "current_app._get_current_object",
      "app.app_context",
      "e.format_message"
    ],
    "code_location": {
      "file": "cli.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 609,
      "end_line": 634
    },
    "code_snippet": "def get_command(self, ctx: click.Context, name: str) -> click.Command | None:\n        self._load_plugin_commands()\n        # Look up built-in and plugin commands, which should be\n        # available even if the app fails to load.\n        rv = super().get_command(ctx, name)\n\n        if rv is not None:\n            return rv\n\n        info = ctx.ensure_object(ScriptInfo)\n\n        # Look up commands provided by the app, showing an error and\n        # continuing if the app couldn't be loaded.\n        ..."
  },
  {
    "name": "list_commands",
    "docstring": "",
    "is_method": true,
    "class_name": "FlaskGroup",
    "parameters": [
      "self",
      "ctx"
    ],
    "calls": [
      "self._load_plugin_commands",
      "set",
      "ctx.ensure_object",
      "sorted",
      "list_commands",
      "rv.update",
      "cli.list_commands",
      "click.secho",
      "click.secho",
      "super",
      "info.load_app",
      "e.format_message",
      "traceback.format_exc"
    ],
    "code_location": {
      "file": "cli.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 636,
      "end_line": 655
    },
    "code_snippet": "def list_commands(self, ctx: click.Context) -> list[str]:\n        self._load_plugin_commands()\n        # Start with the built-in and plugin commands.\n        rv = set(super().list_commands(ctx))\n        info = ctx.ensure_object(ScriptInfo)\n\n        # Add commands provided by the app, showing an error and\n        # continuing if the app couldn't be loaded.\n        try:\n            rv.update(info.load_app().cli.list_commands(ctx))\n        except NoAppException as e:\n            # When an app could..."
  },
  {
    "name": "make_context",
    "docstring": "",
    "is_method": true,
    "class_name": "FlaskGroup",
    "parameters": [
      "self",
      "info_name",
      "args",
      "parent"
    ],
    "calls": [
      "make_context",
      "ScriptInfo",
      "super"
    ],
    "code_location": {
      "file": "cli.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 657,
      "end_line": 676
    },
    "code_snippet": "def make_context(\n        self,\n        info_name: str | None,\n        args: list[str],\n        parent: click.Context | None = None,\n        **extra: t.Any,\n    ) -> click.Context:\n        # Set a flag to tell app.run to become a no-op. If app.run was\n        # not in a __name__ == __main__ guard, it would start the server\n        # when importing, blocking whatever command is being called.\n        os.environ[\"FLASK_RUN_FROM_CLI\"] = \"true\"\n\n        if \"obj\" not in extra and \"obj\" not in self.con..."
  },
  {
    "name": "parse_args",
    "docstring": "",
    "is_method": true,
    "class_name": "FlaskGroup",
    "parameters": [
      "self",
      "ctx",
      "args"
    ],
    "calls": [
      "parse_args",
      "_env_file_option.handle_parse_result",
      "_app_option.handle_parse_result",
      "super",
      "len",
      "self.get_help_option_names"
    ],
    "code_location": {
      "file": "cli.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 678,
      "end_line": 688
    },
    "code_snippet": "def parse_args(self, ctx: click.Context, args: list[str]) -> list[str]:\n        if (not args and self.no_args_is_help) or (\n            len(args) == 1 and args[0] in self.get_help_option_names(ctx)\n        ):\n            # Attempt to load --env-file and --app early in case they\n            # were given as env vars. Otherwise no_args_is_help will not\n            # see commands from app.cli.\n            _env_file_option.handle_parse_result(ctx, {}, [])\n            _app_option.handle_parse_result(c..."
  },
  {
    "name": "_path_is_ancestor",
    "docstring": "Take ``other`` and remove the length of ``path`` from it. Then join it\nto ``path``. If it is the original value, ``path`` is an ancestor of\n``other``.",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "path",
      "other"
    ],
    "calls": [
      "os.path.join",
      "lstrip",
      "len"
    ],
    "code_location": {
      "file": "cli.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 691,
      "end_line": 695
    },
    "code_snippet": "def _path_is_ancestor(path: str, other: str) -> bool:\n    \"\"\"Take ``other`` and remove the length of ``path`` from it. Then join it\n    to ``path``. If it is the original value, ``path`` is an ancestor of\n    ``other``.\"\"\"\n    return os.path.join(path, other[len(path) :].lstrip(os.sep)) == other"
  },
  {
    "name": "load_dotenv",
    "docstring": "Load \"dotenv\" files to set environment variables. A given path takes\nprecedence over ``.env``, which takes precedence over ``.flaskenv``. After\nloading and combining these files, values are only set if the key is not\nalready set in ``os.environ``.\n\nThis is a no-op if `python-dotenv`_ is not installed.\n\n.. _python-dotenv: https://github.com/theskumar/python-dotenv#readme\n\n:param path: Load the file at this location.\n:param load_defaults: Search for and load the default ``.flaskenv`` and\n    ``.env`` files.\n:return: ``True`` if at least one env var was loaded.\n\n.. versionchanged:: 3.1\n    Added the ``load_defaults`` parameter. A given path takes precedence\n    over default files.\n\n.. versionchanged:: 2.0\n    The current directory is not changed to the location of the\n    loaded file.\n\n.. versionchanged:: 2.0\n    When loading the env files, set the default encoding to UTF-8.\n\n.. versionchanged:: 1.1.0\n    Returns ``False`` when python-dotenv is not installed, or when\n    the given path isn't a file.\n\n.. versionadded:: 1.0",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "path",
      "load_defaults"
    ],
    "calls": [
      "data.items",
      "bool",
      "os.path.isfile",
      "dotenv.dotenv_values",
      "dotenv.dotenv_values",
      "os.path.isfile",
      "os.path.isfile",
      "click.secho",
      "dotenv.find_dotenv"
    ],
    "code_location": {
      "file": "cli.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 698,
      "end_line": 763
    },
    "code_snippet": "def load_dotenv(\n    path: str | os.PathLike[str] | None = None, load_defaults: bool = True\n) -> bool:\n    \"\"\"Load \"dotenv\" files to set environment variables. A given path takes\n    precedence over ``.env``, which takes precedence over ``.flaskenv``. After\n    loading and combining these files, values are only set if the key is not\n    already set in ``os.environ``.\n\n    This is a no-op if `python-dotenv`_ is not installed.\n\n    .. _python-dotenv: https://github.com/theskumar/python-dotenv#read..."
  },
  {
    "name": "show_server_banner",
    "docstring": "Show extra startup messages the first time the server is run,\nignoring the reloader.",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "debug",
      "app_import_path"
    ],
    "calls": [
      "is_running_from_reloader",
      "click.echo",
      "click.echo"
    ],
    "code_location": {
      "file": "cli.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 766,
      "end_line": 777
    },
    "code_snippet": "def show_server_banner(debug: bool, app_import_path: str | None) -> None:\n    \"\"\"Show extra startup messages the first time the server is run,\n    ignoring the reloader.\n    \"\"\"\n    if is_running_from_reloader():\n        return\n\n    if app_import_path is not None:\n        click.echo(f\" * Serving Flask app '{app_import_path}'\")\n\n    if debug is not None:\n        click.echo(f\" * Debug mode: {'on' if debug else 'off'}\")"
  },
  {
    "name": "__init__",
    "docstring": "",
    "is_method": true,
    "class_name": "CertParamType",
    "parameters": [
      "self"
    ],
    "calls": [
      "click.Path"
    ],
    "code_location": {
      "file": "cli.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 788,
      "end_line": 789
    },
    "code_snippet": "def __init__(self) -> None:\n        self.path_type = click.Path(exists=True, dir_okay=False, resolve_path=True)"
  },
  {
    "name": "convert",
    "docstring": "",
    "is_method": true,
    "class_name": "CertParamType",
    "parameters": [
      "self",
      "value",
      "param",
      "ctx"
    ],
    "calls": [
      "self.path_type",
      "click.BadParameter",
      "lower",
      "import_string",
      "isinstance",
      "click.STRING",
      "click.BadParameter"
    ],
    "code_location": {
      "file": "cli.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 791,
      "end_line": 825
    },
    "code_snippet": "def convert(\n        self, value: t.Any, param: click.Parameter | None, ctx: click.Context | None\n    ) -> t.Any:\n        try:\n            import ssl\n        except ImportError:\n            raise click.BadParameter(\n                'Using \"--cert\" requires Python to be compiled with SSL support.',\n                ctx,\n                param,\n            ) from None\n\n        try:\n            return self.path_type(value, param, ctx)\n        except click.BadParameter:\n            value = click.STRIN..."
  },
  {
    "name": "_validate_key",
    "docstring": "The ``--key`` option must be specified when ``--cert`` is a file.\nModifies the ``cert`` param to be a ``(cert, key)`` pair if needed.",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "ctx",
      "param",
      "value"
    ],
    "calls": [
      "ctx.params.get",
      "isinstance",
      "click.BadParameter",
      "click.BadParameter",
      "click.BadParameter",
      "click.BadParameter"
    ],
    "code_location": {
      "file": "cli.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 828,
      "end_line": 864
    },
    "code_snippet": "def _validate_key(ctx: click.Context, param: click.Parameter, value: t.Any) -> t.Any:\n    \"\"\"The ``--key`` option must be specified when ``--cert`` is a file.\n    Modifies the ``cert`` param to be a ``(cert, key)`` pair if needed.\n    \"\"\"\n    cert = ctx.params.get(\"cert\")\n    is_adhoc = cert == \"adhoc\"\n\n    try:\n        import ssl\n    except ImportError:\n        is_context = False\n    else:\n        is_context = isinstance(cert, ssl.SSLContext)\n\n    if value is not None:\n        if is_adhoc:\n    ..."
  },
  {
    "name": "convert",
    "docstring": "",
    "is_method": true,
    "class_name": "SeparatedPathType",
    "parameters": [
      "self",
      "value",
      "param",
      "ctx"
    ],
    "calls": [
      "self.split_envvar_value",
      "super",
      "super_convert"
    ],
    "code_location": {
      "file": "cli.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 873,
      "end_line": 879
    },
    "code_snippet": "def convert(\n        self, value: t.Any, param: click.Parameter | None, ctx: click.Context | None\n    ) -> t.Any:\n        items = self.split_envvar_value(value)\n        # can't call no-arg super() inside list comprehension until Python 3.12\n        super_convert = super().convert\n        return [super_convert(item, param, ctx) for item in items]"
  },
  {
    "name": "run_command",
    "docstring": "Run a local development server.\n\nThis server is for development purposes only. It does not provide\nthe stability, security, or performance of production WSGI servers.\n\nThe reloader and debugger are enabled by default with the '--debug'\noption.",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "info",
      "host",
      "port",
      "reload",
      "debugger",
      "with_threads",
      "cert",
      "extra_files",
      "exclude_patterns"
    ],
    "calls": [
      "click.command",
      "click.option",
      "click.option",
      "click.option",
      "click.option",
      "click.option",
      "click.option",
      "click.option",
      "click.option",
      "click.option",
      "get_debug_flag",
      "show_server_banner",
      "run_simple",
      "info.load_app",
      "CertParamType",
      "click.Path",
      "SeparatedPathType",
      "SeparatedPathType",
      "is_running_from_reloader",
      "traceback.print_exc"
    ],
    "code_location": {
      "file": "cli.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 935,
      "end_line": 993
    },
    "code_snippet": "def run_command(\n    info: ScriptInfo,\n    host: str,\n    port: int,\n    reload: bool,\n    debugger: bool,\n    with_threads: bool,\n    cert: ssl.SSLContext | tuple[str, str | None] | t.Literal[\"adhoc\"] | None,\n    extra_files: list[str] | None,\n    exclude_patterns: list[str] | None,\n) -> None:\n    \"\"\"Run a local development server.\n\n    This server is for development purposes only. It does not provide\n    the stability, security, or performance of production WSGI servers.\n\n    The reloader and ..."
  },
  {
    "name": "shell_command",
    "docstring": "Run an interactive Python shell in the context of a given\nFlask application.  The application will populate the default\nnamespace of this shell according to its configuration.\n\nThis is useful for executing small snippets of management code\nwithout having to manually configure the application.",
    "is_method": false,
    "class_name": null,
    "parameters": [],
    "calls": [
      "click.command",
      "os.environ.get",
      "ctx.update",
      "getattr",
      "code.interact",
      "os.path.isfile",
      "current_app.make_shell_context",
      "interactive_hook",
      "open",
      "eval",
      "readline.set_completer",
      "compile",
      "f.read",
      "Completer"
    ],
    "code_location": {
      "file": "cli.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 1001,
      "end_line": 1045
    },
    "code_snippet": "def shell_command() -> None:\n    \"\"\"Run an interactive Python shell in the context of a given\n    Flask application.  The application will populate the default\n    namespace of this shell according to its configuration.\n\n    This is useful for executing small snippets of management code\n    without having to manually configure the application.\n    \"\"\"\n    import code\n\n    banner = (\n        f\"Python {sys.version} on {sys.platform}\\n\"\n        f\"App: {current_app.import_name}\\n\"\n        f\"Instance..."
  },
  {
    "name": "routes_command",
    "docstring": "Show all registered routes with endpoints and methods.",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "sort",
      "all_methods"
    ],
    "calls": [
      "click.command",
      "click.option",
      "click.option",
      "list",
      "any",
      "headers.append",
      "sorts.append",
      "rows.insert",
      "rows.insert",
      "join",
      "current_app.url_map.iter_rules",
      "click.echo",
      "set",
      "row.append",
      "rows.append",
      "headers.append",
      "sorts.append",
      "rows.sort",
      "max",
      "click.echo",
      "click.Choice",
      "join",
      "row.append",
      "range",
      "template.format",
      "sorted",
      "itemgetter",
      "len",
      "len",
      "enumerate",
      "sorts.index",
      "set"
    ],
    "code_location": {
      "file": "cli.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 1061,
      "end_line": 1107
    },
    "code_snippet": "def routes_command(sort: str, all_methods: bool) -> None:\n    \"\"\"Show all registered routes with endpoints and methods.\"\"\"\n    rules = list(current_app.url_map.iter_rules())\n\n    if not rules:\n        click.echo(\"No routes were registered.\")\n        return\n\n    ignored_methods = set() if all_methods else {\"HEAD\", \"OPTIONS\"}\n    host_matching = current_app.url_map.host_matching\n    has_domain = any(rule.host if host_matching else rule.subdomain for rule in rules)\n    rows = []\n\n    for rule in ru..."
  },
  {
    "name": "main",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [],
    "calls": [
      "cli.main"
    ],
    "code_location": {
      "file": "cli.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 1122,
      "end_line": 1123
    },
    "code_snippet": "def main() -> None:\n    cli.main()"
  },
  {
    "name": "__init__",
    "docstring": "",
    "is_method": true,
    "class_name": "ConfigAttribute",
    "parameters": [
      "self",
      "name",
      "get_converter"
    ],
    "calls": [],
    "code_location": {
      "file": "config.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 23,
      "end_line": 27
    },
    "code_snippet": "def __init__(\n        self, name: str, get_converter: t.Callable[[t.Any], T] | None = None\n    ) -> None:\n        self.__name__ = name\n        self.get_converter = get_converter"
  },
  {
    "name": "__get__",
    "docstring": "",
    "is_method": true,
    "class_name": "ConfigAttribute",
    "parameters": [
      "self",
      "obj",
      "owner"
    ],
    "calls": [],
    "code_location": {
      "file": "config.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 30,
      "end_line": 30
    },
    "code_snippet": "def __get__(self, obj: None, owner: None) -> te.Self: ..."
  },
  {
    "name": "__get__",
    "docstring": "",
    "is_method": true,
    "class_name": "ConfigAttribute",
    "parameters": [
      "self",
      "obj",
      "owner"
    ],
    "calls": [],
    "code_location": {
      "file": "config.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 33,
      "end_line": 33
    },
    "code_snippet": "def __get__(self, obj: App, owner: type[App]) -> T: ..."
  },
  {
    "name": "__get__",
    "docstring": "",
    "is_method": true,
    "class_name": "ConfigAttribute",
    "parameters": [
      "self",
      "obj",
      "owner"
    ],
    "calls": [
      "self.get_converter"
    ],
    "code_location": {
      "file": "config.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 35,
      "end_line": 44
    },
    "code_snippet": "def __get__(self, obj: App | None, owner: type[App] | None = None) -> T | te.Self:\n        if obj is None:\n            return self\n\n        rv = obj.config[self.__name__]\n\n        if self.get_converter is not None:\n            rv = self.get_converter(rv)\n\n        return rv"
  },
  {
    "name": "__set__",
    "docstring": "",
    "is_method": true,
    "class_name": "ConfigAttribute",
    "parameters": [
      "self",
      "obj",
      "value"
    ],
    "calls": [],
    "code_location": {
      "file": "config.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 46,
      "end_line": 47
    },
    "code_snippet": "def __set__(self, obj: App, value: t.Any) -> None:\n        obj.config[self.__name__] = value"
  },
  {
    "name": "__init__",
    "docstring": "",
    "is_method": true,
    "class_name": "Config",
    "parameters": [
      "self",
      "root_path",
      "defaults"
    ],
    "calls": [
      "__init__",
      "super"
    ],
    "code_location": {
      "file": "config.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 94,
      "end_line": 100
    },
    "code_snippet": "def __init__(\n        self,\n        root_path: str | os.PathLike[str],\n        defaults: dict[str, t.Any] | None = None,\n    ) -> None:\n        super().__init__(defaults or {})\n        self.root_path = root_path"
  },
  {
    "name": "from_envvar",
    "docstring": "Loads a configuration from an environment variable pointing to\na configuration file.  This is basically just a shortcut with nicer\nerror messages for this line of code::\n\n    app.config.from_pyfile(os.environ['YOURAPPLICATION_SETTINGS'])\n\n:param variable_name: name of the environment variable\n:param silent: set to ``True`` if you want silent failure for missing\n               files.\n:return: ``True`` if the file was loaded successfully.",
    "is_method": true,
    "class_name": "Config",
    "parameters": [
      "self",
      "variable_name",
      "silent"
    ],
    "calls": [
      "os.environ.get",
      "self.from_pyfile",
      "RuntimeError"
    ],
    "code_location": {
      "file": "config.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 102,
      "end_line": 124
    },
    "code_snippet": "def from_envvar(self, variable_name: str, silent: bool = False) -> bool:\n        \"\"\"Loads a configuration from an environment variable pointing to\n        a configuration file.  This is basically just a shortcut with nicer\n        error messages for this line of code::\n\n            app.config.from_pyfile(os.environ['YOURAPPLICATION_SETTINGS'])\n\n        :param variable_name: name of the environment variable\n        :param silent: set to ``True`` if you want silent failure for missing\n            ..."
  },
  {
    "name": "from_prefixed_env",
    "docstring": "Load any environment variables that start with ``FLASK_``,\ndropping the prefix from the env key for the config key. Values\nare passed through a loading function to attempt to convert them\nto more specific types than strings.\n\nKeys are loaded in :func:`sorted` order.\n\nThe default loading function attempts to parse values as any\nvalid JSON type, including dicts and lists.\n\nSpecific items in nested dicts can be set by separating the\nkeys with double underscores (``__``). If an intermediate key\ndoesn't exist, it will be initialized to an empty dict.\n\n:param prefix: Load env vars that start with this prefix,\n    separated with an underscore (``_``).\n:param loads: Pass each string value to this function and use\n    the returned value as the config value. If any error is\n    raised it is ignored and the value remains a string. The\n    default is :func:`json.loads`.\n\n.. versionadded:: 2.1",
    "is_method": true,
    "class_name": "Config",
    "parameters": [
      "self",
      "prefix"
    ],
    "calls": [
      "sorted",
      "key.removeprefix",
      "key.split",
      "key.startswith",
      "loads"
    ],
    "code_location": {
      "file": "config.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 126,
      "end_line": 185
    },
    "code_snippet": "def from_prefixed_env(\n        self, prefix: str = \"FLASK\", *, loads: t.Callable[[str], t.Any] = json.loads\n    ) -> bool:\n        \"\"\"Load any environment variables that start with ``FLASK_``,\n        dropping the prefix from the env key for the config key. Values\n        are passed through a loading function to attempt to convert them\n        to more specific types than strings.\n\n        Keys are loaded in :func:`sorted` order.\n\n        The default loading function attempts to parse values as a..."
  },
  {
    "name": "from_pyfile",
    "docstring": "Updates the values in the config from a Python file.  This function\nbehaves as if the file was imported as module with the\n:meth:`from_object` function.\n\n:param filename: the filename of the config.  This can either be an\n                 absolute filename or a filename relative to the\n                 root path.\n:param silent: set to ``True`` if you want silent failure for missing\n               files.\n:return: ``True`` if the file was loaded successfully.\n\n.. versionadded:: 0.7\n   `silent` parameter.",
    "is_method": true,
    "class_name": "Config",
    "parameters": [
      "self",
      "filename",
      "silent"
    ],
    "calls": [
      "os.path.join",
      "types.ModuleType",
      "self.from_object",
      "open",
      "exec",
      "compile",
      "config_file.read"
    ],
    "code_location": {
      "file": "config.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 187,
      "end_line": 216
    },
    "code_snippet": "def from_pyfile(\n        self, filename: str | os.PathLike[str], silent: bool = False\n    ) -> bool:\n        \"\"\"Updates the values in the config from a Python file.  This function\n        behaves as if the file was imported as module with the\n        :meth:`from_object` function.\n\n        :param filename: the filename of the config.  This can either be an\n                         absolute filename or a filename relative to the\n                         root path.\n        :param silent: set to ``T..."
  },
  {
    "name": "from_object",
    "docstring": "Updates the values from the given object.  An object can be of one\nof the following two types:\n\n-   a string: in this case the object with that name will be imported\n-   an actual object reference: that object is used directly\n\nObjects are usually either modules or classes. :meth:`from_object`\nloads only the uppercase attributes of the module/class. A ``dict``\nobject will not work with :meth:`from_object` because the keys of a\n``dict`` are not attributes of the ``dict`` class.\n\nExample of module-based configuration::\n\n    app.config.from_object('yourapplication.default_config')\n    from yourapplication import default_config\n    app.config.from_object(default_config)\n\nNothing is done to the object before loading. If the object is a\nclass and has ``@property`` attributes, it needs to be\ninstantiated before being passed to this method.\n\nYou should not use this function to load the actual configuration but\nrather configuration defaults.  The actual config should be loaded\nwith :meth:`from_pyfile` and ideally from a location not within the\npackage because the package might be installed system wide.\n\nSee :ref:`config-dev-prod` for an example of class-based configuration\nusing :meth:`from_object`.\n\n:param obj: an import name or object",
    "is_method": true,
    "class_name": "Config",
    "parameters": [
      "self",
      "obj"
    ],
    "calls": [
      "isinstance",
      "dir",
      "import_string",
      "key.isupper",
      "getattr"
    ],
    "code_location": {
      "file": "config.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 218,
      "end_line": 254
    },
    "code_snippet": "def from_object(self, obj: object | str) -> None:\n        \"\"\"Updates the values from the given object.  An object can be of one\n        of the following two types:\n\n        -   a string: in this case the object with that name will be imported\n        -   an actual object reference: that object is used directly\n\n        Objects are usually either modules or classes. :meth:`from_object`\n        loads only the uppercase attributes of the module/class. A ``dict``\n        object will not work with :m..."
  },
  {
    "name": "from_file",
    "docstring": "Update the values in the config from a file that is loaded\nusing the ``load`` parameter. The loaded data is passed to the\n:meth:`from_mapping` method.\n\n.. code-block:: python\n\n    import json\n    app.config.from_file(\"config.json\", load=json.load)\n\n    import tomllib\n    app.config.from_file(\"config.toml\", load=tomllib.load, text=False)\n\n:param filename: The path to the data file. This can be an\n    absolute path or relative to the config root path.\n:param load: A callable that takes a file handle and returns a\n    mapping of loaded data from the file.\n:type load: ``Callable[[Reader], Mapping]`` where ``Reader``\n    implements a ``read`` method.\n:param silent: Ignore the file if it doesn't exist.\n:param text: Open the file in text or binary mode.\n:return: ``True`` if the file was loaded successfully.\n\n.. versionchanged:: 2.3\n    The ``text`` parameter was added.\n\n.. versionadded:: 2.0",
    "is_method": true,
    "class_name": "Config",
    "parameters": [
      "self",
      "filename",
      "load",
      "silent",
      "text"
    ],
    "calls": [
      "os.path.join",
      "self.from_mapping",
      "open",
      "load"
    ],
    "code_location": {
      "file": "config.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 256,
      "end_line": 302
    },
    "code_snippet": "def from_file(\n        self,\n        filename: str | os.PathLike[str],\n        load: t.Callable[[t.IO[t.Any]], t.Mapping[str, t.Any]],\n        silent: bool = False,\n        text: bool = True,\n    ) -> bool:\n        \"\"\"Update the values in the config from a file that is loaded\n        using the ``load`` parameter. The loaded data is passed to the\n        :meth:`from_mapping` method.\n\n        .. code-block:: python\n\n            import json\n            app.config.from_file(\"config.json\", load=json...."
  },
  {
    "name": "from_mapping",
    "docstring": "Updates the config like :meth:`update` ignoring items with\nnon-upper keys.\n\n:return: Always returns ``True``.\n\n.. versionadded:: 0.11",
    "is_method": true,
    "class_name": "Config",
    "parameters": [
      "self",
      "mapping"
    ],
    "calls": [
      "mappings.update",
      "mappings.items",
      "mappings.update",
      "key.isupper"
    ],
    "code_location": {
      "file": "config.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 304,
      "end_line": 321
    },
    "code_snippet": "def from_mapping(\n        self, mapping: t.Mapping[str, t.Any] | None = None, **kwargs: t.Any\n    ) -> bool:\n        \"\"\"Updates the config like :meth:`update` ignoring items with\n        non-upper keys.\n\n        :return: Always returns ``True``.\n\n        .. versionadded:: 0.11\n        \"\"\"\n        mappings: dict[str, t.Any] = {}\n        if mapping is not None:\n            mappings.update(mapping)\n        mappings.update(kwargs)\n        for key, value in mappings.items():\n            if key.isuppe..."
  },
  {
    "name": "get_namespace",
    "docstring": "Returns a dictionary containing a subset of configuration options\nthat match the specified namespace/prefix. Example usage::\n\n    app.config['IMAGE_STORE_TYPE'] = 'fs'\n    app.config['IMAGE_STORE_PATH'] = '/var/app/images'\n    app.config['IMAGE_STORE_BASE_URL'] = 'http://img.website.com'\n    image_store_config = app.config.get_namespace('IMAGE_STORE_')\n\nThe resulting dictionary `image_store_config` would look like::\n\n    {\n        'type': 'fs',\n        'path': '/var/app/images',\n        'base_url': 'http://img.website.com'\n    }\n\nThis is often useful when configuration options map directly to\nkeyword arguments in functions or class constructors.\n\n:param namespace: a configuration namespace\n:param lowercase: a flag indicating if the keys of the resulting\n                  dictionary should be lowercase\n:param trim_namespace: a flag indicating if the keys of the resulting\n                  dictionary should not include the namespace\n\n.. versionadded:: 0.11",
    "is_method": true,
    "class_name": "Config",
    "parameters": [
      "self",
      "namespace",
      "lowercase",
      "trim_namespace"
    ],
    "calls": [
      "self.items",
      "k.startswith",
      "key.lower",
      "len"
    ],
    "code_location": {
      "file": "config.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 323,
      "end_line": 364
    },
    "code_snippet": "def get_namespace(\n        self, namespace: str, lowercase: bool = True, trim_namespace: bool = True\n    ) -> dict[str, t.Any]:\n        \"\"\"Returns a dictionary containing a subset of configuration options\n        that match the specified namespace/prefix. Example usage::\n\n            app.config['IMAGE_STORE_TYPE'] = 'fs'\n            app.config['IMAGE_STORE_PATH'] = '/var/app/images'\n            app.config['IMAGE_STORE_BASE_URL'] = 'http://img.website.com'\n            image_store_config = app.con..."
  },
  {
    "name": "__repr__",
    "docstring": "",
    "is_method": true,
    "class_name": "Config",
    "parameters": [
      "self"
    ],
    "calls": [
      "dict.__repr__",
      "type"
    ],
    "code_location": {
      "file": "config.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 366,
      "end_line": 367
    },
    "code_snippet": "def __repr__(self) -> str:\n        return f\"<{type(self).__name__} {dict.__repr__(self)}>\""
  },
  {
    "name": "max_content_length",
    "docstring": "The maximum number of bytes that will be read during this request. If\nthis limit is exceeded, a 413 :exc:`~werkzeug.exceptions.RequestEntityTooLarge`\nerror is raised. If it is set to ``None``, no limit is enforced at the\nFlask application level. However, if it is ``None`` and the request has\nno ``Content-Length`` header and the WSGI server does not indicate that\nit terminates the stream, then no data is read to avoid an infinite\nstream.\n\nEach request defaults to the :data:`MAX_CONTENT_LENGTH` config, which\ndefaults to ``None``. It can be set on a specific ``request`` to apply\nthe limit to that specific view. This should be set appropriately based\non an application's or view's specific needs.\n\n.. versionchanged:: 3.1\n    This can be set per-request.\n\n.. versionchanged:: 0.6\n    This is configurable through Flask config.",
    "is_method": true,
    "class_name": "Request",
    "parameters": [
      "self"
    ],
    "calls": [
      "super"
    ],
    "code_location": {
      "file": "wrappers.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 60,
      "end_line": 86
    },
    "code_snippet": "def max_content_length(self) -> int | None:\n        \"\"\"The maximum number of bytes that will be read during this request. If\n        this limit is exceeded, a 413 :exc:`~werkzeug.exceptions.RequestEntityTooLarge`\n        error is raised. If it is set to ``None``, no limit is enforced at the\n        Flask application level. However, if it is ``None`` and the request has\n        no ``Content-Length`` header and the WSGI server does not indicate that\n        it terminates the stream, then no data i..."
  },
  {
    "name": "max_content_length",
    "docstring": "",
    "is_method": true,
    "class_name": "Request",
    "parameters": [
      "self",
      "value"
    ],
    "calls": [],
    "code_location": {
      "file": "wrappers.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 89,
      "end_line": 90
    },
    "code_snippet": "def max_content_length(self, value: int | None) -> None:\n        self._max_content_length = value"
  },
  {
    "name": "max_form_memory_size",
    "docstring": "The maximum size in bytes any non-file form field may be in a\n``multipart/form-data`` body. If this limit is exceeded, a 413\n:exc:`~werkzeug.exceptions.RequestEntityTooLarge` error is raised. If it\nis set to ``None``, no limit is enforced at the Flask application level.\n\nEach request defaults to the :data:`MAX_FORM_MEMORY_SIZE` config, which\ndefaults to ``500_000``. It can be set on a specific ``request`` to\napply the limit to that specific view. This should be set appropriately\nbased on an application's or view's specific needs.\n\n.. versionchanged:: 3.1\n    This is configurable through Flask config.",
    "is_method": true,
    "class_name": "Request",
    "parameters": [
      "self"
    ],
    "calls": [
      "super"
    ],
    "code_location": {
      "file": "wrappers.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 93,
      "end_line": 113
    },
    "code_snippet": "def max_form_memory_size(self) -> int | None:\n        \"\"\"The maximum size in bytes any non-file form field may be in a\n        ``multipart/form-data`` body. If this limit is exceeded, a 413\n        :exc:`~werkzeug.exceptions.RequestEntityTooLarge` error is raised. If it\n        is set to ``None``, no limit is enforced at the Flask application level.\n\n        Each request defaults to the :data:`MAX_FORM_MEMORY_SIZE` config, which\n        defaults to ``500_000``. It can be set on a specific ``requ..."
  },
  {
    "name": "max_form_memory_size",
    "docstring": "",
    "is_method": true,
    "class_name": "Request",
    "parameters": [
      "self",
      "value"
    ],
    "calls": [],
    "code_location": {
      "file": "wrappers.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 116,
      "end_line": 117
    },
    "code_snippet": "def max_form_memory_size(self, value: int | None) -> None:\n        self._max_form_memory_size = value"
  },
  {
    "name": "max_form_parts",
    "docstring": "The maximum number of fields that may be present in a\n``multipart/form-data`` body. If this limit is exceeded, a 413\n:exc:`~werkzeug.exceptions.RequestEntityTooLarge` error is raised. If it\nis set to ``None``, no limit is enforced at the Flask application level.\n\nEach request defaults to the :data:`MAX_FORM_PARTS` config, which\ndefaults to ``1_000``. It can be set on a specific ``request`` to apply\nthe limit to that specific view. This should be set appropriately based\non an application's or view's specific needs.\n\n.. versionchanged:: 3.1\n    This is configurable through Flask config.",
    "is_method": true,
    "class_name": "Request",
    "parameters": [
      "self"
    ],
    "calls": [
      "super"
    ],
    "code_location": {
      "file": "wrappers.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 120,
      "end_line": 140
    },
    "code_snippet": "def max_form_parts(self) -> int | None:\n        \"\"\"The maximum number of fields that may be present in a\n        ``multipart/form-data`` body. If this limit is exceeded, a 413\n        :exc:`~werkzeug.exceptions.RequestEntityTooLarge` error is raised. If it\n        is set to ``None``, no limit is enforced at the Flask application level.\n\n        Each request defaults to the :data:`MAX_FORM_PARTS` config, which\n        defaults to ``1_000``. It can be set on a specific ``request`` to apply\n       ..."
  },
  {
    "name": "max_form_parts",
    "docstring": "",
    "is_method": true,
    "class_name": "Request",
    "parameters": [
      "self",
      "value"
    ],
    "calls": [],
    "code_location": {
      "file": "wrappers.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 143,
      "end_line": 144
    },
    "code_snippet": "def max_form_parts(self, value: int | None) -> None:\n        self._max_form_parts = value"
  },
  {
    "name": "endpoint",
    "docstring": "The endpoint that matched the request URL.\n\nThis will be ``None`` if matching failed or has not been\nperformed yet.\n\nThis in combination with :attr:`view_args` can be used to\nreconstruct the same URL or a modified URL.",
    "is_method": true,
    "class_name": "Request",
    "parameters": [
      "self"
    ],
    "calls": [],
    "code_location": {
      "file": "wrappers.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 147,
      "end_line": 159
    },
    "code_snippet": "def endpoint(self) -> str | None:\n        \"\"\"The endpoint that matched the request URL.\n\n        This will be ``None`` if matching failed or has not been\n        performed yet.\n\n        This in combination with :attr:`view_args` can be used to\n        reconstruct the same URL or a modified URL.\n        \"\"\"\n        if self.url_rule is not None:\n            return self.url_rule.endpoint  # type: ignore[no-any-return]\n\n        return None"
  },
  {
    "name": "blueprint",
    "docstring": "The registered name of the current blueprint.\n\nThis will be ``None`` if the endpoint is not part of a\nblueprint, or if URL matching failed or has not been performed\nyet.\n\nThis does not necessarily match the name the blueprint was\ncreated with. It may have been nested, or registered with a\ndifferent name.",
    "is_method": true,
    "class_name": "Request",
    "parameters": [
      "self"
    ],
    "calls": [
      "endpoint.rpartition"
    ],
    "code_location": {
      "file": "wrappers.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 162,
      "end_line": 178
    },
    "code_snippet": "def blueprint(self) -> str | None:\n        \"\"\"The registered name of the current blueprint.\n\n        This will be ``None`` if the endpoint is not part of a\n        blueprint, or if URL matching failed or has not been performed\n        yet.\n\n        This does not necessarily match the name the blueprint was\n        created with. It may have been nested, or registered with a\n        different name.\n        \"\"\"\n        endpoint = self.endpoint\n\n        if endpoint is not None and \".\" in endpoint:\n ..."
  },
  {
    "name": "blueprints",
    "docstring": "The registered names of the current blueprint upwards through\nparent blueprints.\n\nThis will be an empty list if there is no current blueprint, or\nif URL matching failed.\n\n.. versionadded:: 2.0.1",
    "is_method": true,
    "class_name": "Request",
    "parameters": [
      "self"
    ],
    "calls": [
      "_split_blueprint_path"
    ],
    "code_location": {
      "file": "wrappers.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 181,
      "end_line": 195
    },
    "code_snippet": "def blueprints(self) -> list[str]:\n        \"\"\"The registered names of the current blueprint upwards through\n        parent blueprints.\n\n        This will be an empty list if there is no current blueprint, or\n        if URL matching failed.\n\n        .. versionadded:: 2.0.1\n        \"\"\"\n        name = self.blueprint\n\n        if name is None:\n            return []\n\n        return _split_blueprint_path(name)"
  },
  {
    "name": "_load_form_data",
    "docstring": "",
    "is_method": true,
    "class_name": "Request",
    "parameters": [
      "self"
    ],
    "calls": [
      "_load_form_data",
      "attach_enctype_error_multidict",
      "super"
    ],
    "code_location": {
      "file": "wrappers.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 197,
      "end_line": 210
    },
    "code_snippet": "def _load_form_data(self) -> None:\n        super()._load_form_data()\n\n        # In debug mode we're replacing the files multidict with an ad-hoc\n        # subclass that raises a different error for key errors.\n        if (\n            current_app\n            and current_app.debug\n            and self.mimetype != \"multipart/form-data\"\n            and not self.files\n        ):\n            from .debughelpers import attach_enctype_error_multidict\n\n            attach_enctype_error_multidict(self)"
  },
  {
    "name": "on_json_loading_failed",
    "docstring": "",
    "is_method": true,
    "class_name": "Request",
    "parameters": [
      "self",
      "e"
    ],
    "calls": [
      "on_json_loading_failed",
      "BadRequest",
      "super"
    ],
    "code_location": {
      "file": "wrappers.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 212,
      "end_line": 219
    },
    "code_snippet": "def on_json_loading_failed(self, e: ValueError | None) -> t.Any:\n        try:\n            return super().on_json_loading_failed(e)\n        except BadRequest as ebr:\n            if current_app and current_app.debug:\n                raise\n\n            raise BadRequest() from ebr"
  },
  {
    "name": "max_cookie_size",
    "docstring": "Read-only view of the :data:`MAX_COOKIE_SIZE` config key.\n\nSee :attr:`~werkzeug.wrappers.Response.max_cookie_size` in\nWerkzeug's docs.",
    "is_method": true,
    "class_name": "Response",
    "parameters": [
      "self"
    ],
    "calls": [
      "super"
    ],
    "code_location": {
      "file": "wrappers.py",
      "path": "/data3/pwh/flask/src/flask",
      "start_line": 247,
      "end_line": 257
    },
    "code_snippet": "def max_cookie_size(self) -> int:  # type: ignore\n        \"\"\"Read-only view of the :data:`MAX_COOKIE_SIZE` config key.\n\n        See :attr:`~werkzeug.wrappers.Response.max_cookie_size` in\n        Werkzeug's docs.\n        \"\"\"\n        if current_app:\n            return current_app.config[\"MAX_COOKIE_SIZE\"]  # type: ignore[no-any-return]\n\n        # return Werkzeug's default when not in an app context\n        return super().max_cookie_size"
  },
  {
    "name": "dumps",
    "docstring": "Serialize data as JSON.\n\nIf :data:`~flask.current_app` is available, it will use its\n:meth:`app.json.dumps() <flask.json.provider.JSONProvider.dumps>`\nmethod, otherwise it will use :func:`json.dumps`.\n\n:param obj: The data to serialize.\n:param kwargs: Arguments passed to the ``dumps`` implementation.\n\n.. versionchanged:: 2.3\n    The ``app`` parameter was removed.\n\n.. versionchanged:: 2.2\n    Calls ``current_app.json.dumps``, allowing an app to override\n    the behavior.\n\n.. versionchanged:: 2.0.2\n    :class:`decimal.Decimal` is supported by converting to a string.\n\n.. versionchanged:: 2.0\n    ``encoding`` will be removed in Flask 2.1.\n\n.. versionchanged:: 1.0.3\n    ``app`` can be passed directly, rather than requiring an app\n    context for configuration.",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "obj"
    ],
    "calls": [
      "kwargs.setdefault",
      "_json.dumps",
      "current_app.json.dumps"
    ],
    "code_location": {
      "file": "__init__.py",
      "path": "/data3/pwh/flask/src/flask/json",
      "start_line": 13,
      "end_line": 44
    },
    "code_snippet": "def dumps(obj: t.Any, **kwargs: t.Any) -> str:\n    \"\"\"Serialize data as JSON.\n\n    If :data:`~flask.current_app` is available, it will use its\n    :meth:`app.json.dumps() <flask.json.provider.JSONProvider.dumps>`\n    method, otherwise it will use :func:`json.dumps`.\n\n    :param obj: The data to serialize.\n    :param kwargs: Arguments passed to the ``dumps`` implementation.\n\n    .. versionchanged:: 2.3\n        The ``app`` parameter was removed.\n\n    .. versionchanged:: 2.2\n        Calls ``current..."
  },
  {
    "name": "dump",
    "docstring": "Serialize data as JSON and write to a file.\n\nIf :data:`~flask.current_app` is available, it will use its\n:meth:`app.json.dump() <flask.json.provider.JSONProvider.dump>`\nmethod, otherwise it will use :func:`json.dump`.\n\n:param obj: The data to serialize.\n:param fp: A file opened for writing text. Should use the UTF-8\n    encoding to be valid JSON.\n:param kwargs: Arguments passed to the ``dump`` implementation.\n\n.. versionchanged:: 2.3\n    The ``app`` parameter was removed.\n\n.. versionchanged:: 2.2\n    Calls ``current_app.json.dump``, allowing an app to override\n    the behavior.\n\n.. versionchanged:: 2.0\n    Writing to a binary file, and the ``encoding`` argument, will be\n    removed in Flask 2.1.",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "obj",
      "fp"
    ],
    "calls": [
      "current_app.json.dump",
      "kwargs.setdefault",
      "_json.dump"
    ],
    "code_location": {
      "file": "__init__.py",
      "path": "/data3/pwh/flask/src/flask/json",
      "start_line": 47,
      "end_line": 74
    },
    "code_snippet": "def dump(obj: t.Any, fp: t.IO[str], **kwargs: t.Any) -> None:\n    \"\"\"Serialize data as JSON and write to a file.\n\n    If :data:`~flask.current_app` is available, it will use its\n    :meth:`app.json.dump() <flask.json.provider.JSONProvider.dump>`\n    method, otherwise it will use :func:`json.dump`.\n\n    :param obj: The data to serialize.\n    :param fp: A file opened for writing text. Should use the UTF-8\n        encoding to be valid JSON.\n    :param kwargs: Arguments passed to the ``dump`` implem..."
  },
  {
    "name": "loads",
    "docstring": "Deserialize data as JSON.\n\nIf :data:`~flask.current_app` is available, it will use its\n:meth:`app.json.loads() <flask.json.provider.JSONProvider.loads>`\nmethod, otherwise it will use :func:`json.loads`.\n\n:param s: Text or UTF-8 bytes.\n:param kwargs: Arguments passed to the ``loads`` implementation.\n\n.. versionchanged:: 2.3\n    The ``app`` parameter was removed.\n\n.. versionchanged:: 2.2\n    Calls ``current_app.json.loads``, allowing an app to override\n    the behavior.\n\n.. versionchanged:: 2.0\n    ``encoding`` will be removed in Flask 2.1. The data must be a\n    string or UTF-8 bytes.\n\n.. versionchanged:: 1.0.3\n    ``app`` can be passed directly, rather than requiring an app\n    context for configuration.",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "s"
    ],
    "calls": [
      "_json.loads",
      "current_app.json.loads"
    ],
    "code_location": {
      "file": "__init__.py",
      "path": "/data3/pwh/flask/src/flask/json",
      "start_line": 77,
      "end_line": 105
    },
    "code_snippet": "def loads(s: str | bytes, **kwargs: t.Any) -> t.Any:\n    \"\"\"Deserialize data as JSON.\n\n    If :data:`~flask.current_app` is available, it will use its\n    :meth:`app.json.loads() <flask.json.provider.JSONProvider.loads>`\n    method, otherwise it will use :func:`json.loads`.\n\n    :param s: Text or UTF-8 bytes.\n    :param kwargs: Arguments passed to the ``loads`` implementation.\n\n    .. versionchanged:: 2.3\n        The ``app`` parameter was removed.\n\n    .. versionchanged:: 2.2\n        Calls ``cur..."
  },
  {
    "name": "load",
    "docstring": "Deserialize data as JSON read from a file.\n\nIf :data:`~flask.current_app` is available, it will use its\n:meth:`app.json.load() <flask.json.provider.JSONProvider.load>`\nmethod, otherwise it will use :func:`json.load`.\n\n:param fp: A file opened for reading text or UTF-8 bytes.\n:param kwargs: Arguments passed to the ``load`` implementation.\n\n.. versionchanged:: 2.3\n    The ``app`` parameter was removed.\n\n.. versionchanged:: 2.2\n    Calls ``current_app.json.load``, allowing an app to override\n    the behavior.\n\n.. versionchanged:: 2.2\n    The ``app`` parameter will be removed in Flask 2.3.\n\n.. versionchanged:: 2.0\n    ``encoding`` will be removed in Flask 2.1. The file must be text\n    mode, or binary mode with UTF-8 bytes.",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "fp"
    ],
    "calls": [
      "_json.load",
      "current_app.json.load"
    ],
    "code_location": {
      "file": "__init__.py",
      "path": "/data3/pwh/flask/src/flask/json",
      "start_line": 108,
      "end_line": 135
    },
    "code_snippet": "def load(fp: t.IO[t.AnyStr], **kwargs: t.Any) -> t.Any:\n    \"\"\"Deserialize data as JSON read from a file.\n\n    If :data:`~flask.current_app` is available, it will use its\n    :meth:`app.json.load() <flask.json.provider.JSONProvider.load>`\n    method, otherwise it will use :func:`json.load`.\n\n    :param fp: A file opened for reading text or UTF-8 bytes.\n    :param kwargs: Arguments passed to the ``load`` implementation.\n\n    .. versionchanged:: 2.3\n        The ``app`` parameter was removed.\n\n    ..."
  },
  {
    "name": "jsonify",
    "docstring": "Serialize the given arguments as JSON, and return a\n:class:`~flask.Response` object with the ``application/json``\nmimetype. A dict or list returned from a view will be converted to a\nJSON response automatically without needing to call this.\n\nThis requires an active request or application context, and calls\n:meth:`app.json.response() <flask.json.provider.JSONProvider.response>`.\n\nIn debug mode, the output is formatted with indentation to make it\neasier to read. This may also be controlled by the provider.\n\nEither positional or keyword arguments can be given, not both.\nIf no arguments are given, ``None`` is serialized.\n\n:param args: A single value to serialize, or multiple values to\n    treat as a list to serialize.\n:param kwargs: Treat as a dict to serialize.\n\n.. versionchanged:: 2.2\n    Calls ``current_app.json.response``, allowing an app to override\n    the behavior.\n\n.. versionchanged:: 2.0.2\n    :class:`decimal.Decimal` is supported by converting to a string.\n\n.. versionchanged:: 0.11\n    Added support for serializing top-level arrays. This was a\n    security risk in ancient browsers. See :ref:`security-json`.\n\n.. versionadded:: 0.2",
    "is_method": false,
    "class_name": null,
    "parameters": [],
    "calls": [
      "current_app.json.response"
    ],
    "code_location": {
      "file": "__init__.py",
      "path": "/data3/pwh/flask/src/flask/json",
      "start_line": 138,
      "end_line": 170
    },
    "code_snippet": "def jsonify(*args: t.Any, **kwargs: t.Any) -> Response:\n    \"\"\"Serialize the given arguments as JSON, and return a\n    :class:`~flask.Response` object with the ``application/json``\n    mimetype. A dict or list returned from a view will be converted to a\n    JSON response automatically without needing to call this.\n\n    This requires an active request or application context, and calls\n    :meth:`app.json.response() <flask.json.provider.JSONProvider.response>`.\n\n    In debug mode, the output is fo..."
  },
  {
    "name": "__init__",
    "docstring": "",
    "is_method": true,
    "class_name": "JSONProvider",
    "parameters": [
      "self",
      "app"
    ],
    "calls": [
      "weakref.proxy"
    ],
    "code_location": {
      "file": "provider.py",
      "path": "/data3/pwh/flask/src/flask/json",
      "start_line": 38,
      "end_line": 39
    },
    "code_snippet": "def __init__(self, app: App) -> None:\n        self._app: App = weakref.proxy(app)"
  },
  {
    "name": "dumps",
    "docstring": "Serialize data as JSON.\n\n:param obj: The data to serialize.\n:param kwargs: May be passed to the underlying JSON library.",
    "is_method": true,
    "class_name": "JSONProvider",
    "parameters": [
      "self",
      "obj"
    ],
    "calls": [],
    "code_location": {
      "file": "provider.py",
      "path": "/data3/pwh/flask/src/flask/json",
      "start_line": 41,
      "end_line": 47
    },
    "code_snippet": "def dumps(self, obj: t.Any, **kwargs: t.Any) -> str:\n        \"\"\"Serialize data as JSON.\n\n        :param obj: The data to serialize.\n        :param kwargs: May be passed to the underlying JSON library.\n        \"\"\"\n        raise NotImplementedError"
  },
  {
    "name": "dump",
    "docstring": "Serialize data as JSON and write to a file.\n\n:param obj: The data to serialize.\n:param fp: A file opened for writing text. Should use the UTF-8\n    encoding to be valid JSON.\n:param kwargs: May be passed to the underlying JSON library.",
    "is_method": true,
    "class_name": "JSONProvider",
    "parameters": [
      "self",
      "obj",
      "fp"
    ],
    "calls": [
      "fp.write",
      "self.dumps"
    ],
    "code_location": {
      "file": "provider.py",
      "path": "/data3/pwh/flask/src/flask/json",
      "start_line": 49,
      "end_line": 57
    },
    "code_snippet": "def dump(self, obj: t.Any, fp: t.IO[str], **kwargs: t.Any) -> None:\n        \"\"\"Serialize data as JSON and write to a file.\n\n        :param obj: The data to serialize.\n        :param fp: A file opened for writing text. Should use the UTF-8\n            encoding to be valid JSON.\n        :param kwargs: May be passed to the underlying JSON library.\n        \"\"\"\n        fp.write(self.dumps(obj, **kwargs))"
  },
  {
    "name": "loads",
    "docstring": "Deserialize data as JSON.\n\n:param s: Text or UTF-8 bytes.\n:param kwargs: May be passed to the underlying JSON library.",
    "is_method": true,
    "class_name": "JSONProvider",
    "parameters": [
      "self",
      "s"
    ],
    "calls": [],
    "code_location": {
      "file": "provider.py",
      "path": "/data3/pwh/flask/src/flask/json",
      "start_line": 59,
      "end_line": 65
    },
    "code_snippet": "def loads(self, s: str | bytes, **kwargs: t.Any) -> t.Any:\n        \"\"\"Deserialize data as JSON.\n\n        :param s: Text or UTF-8 bytes.\n        :param kwargs: May be passed to the underlying JSON library.\n        \"\"\"\n        raise NotImplementedError"
  },
  {
    "name": "load",
    "docstring": "Deserialize data as JSON read from a file.\n\n:param fp: A file opened for reading text or UTF-8 bytes.\n:param kwargs: May be passed to the underlying JSON library.",
    "is_method": true,
    "class_name": "JSONProvider",
    "parameters": [
      "self",
      "fp"
    ],
    "calls": [
      "self.loads",
      "fp.read"
    ],
    "code_location": {
      "file": "provider.py",
      "path": "/data3/pwh/flask/src/flask/json",
      "start_line": 67,
      "end_line": 73
    },
    "code_snippet": "def load(self, fp: t.IO[t.AnyStr], **kwargs: t.Any) -> t.Any:\n        \"\"\"Deserialize data as JSON read from a file.\n\n        :param fp: A file opened for reading text or UTF-8 bytes.\n        :param kwargs: May be passed to the underlying JSON library.\n        \"\"\"\n        return self.loads(fp.read(), **kwargs)"
  },
  {
    "name": "_prepare_response_obj",
    "docstring": "",
    "is_method": true,
    "class_name": "JSONProvider",
    "parameters": [
      "self",
      "args",
      "kwargs"
    ],
    "calls": [
      "TypeError",
      "len"
    ],
    "code_location": {
      "file": "provider.py",
      "path": "/data3/pwh/flask/src/flask/json",
      "start_line": 75,
      "end_line": 87
    },
    "code_snippet": "def _prepare_response_obj(\n        self, args: tuple[t.Any, ...], kwargs: dict[str, t.Any]\n    ) -> t.Any:\n        if args and kwargs:\n            raise TypeError(\"app.json.response() takes either args or kwargs, not both\")\n\n        if not args and not kwargs:\n            return None\n\n        if len(args) == 1:\n            return args[0]\n\n        return args or kwargs"
  },
  {
    "name": "response",
    "docstring": "Serialize the given arguments as JSON, and return a\n:class:`~flask.Response` object with the ``application/json``\nmimetype.\n\nThe :func:`~flask.json.jsonify` function calls this method for\nthe current application.\n\nEither positional or keyword arguments can be given, not both.\nIf no arguments are given, ``None`` is serialized.\n\n:param args: A single value to serialize, or multiple values to\n    treat as a list to serialize.\n:param kwargs: Treat as a dict to serialize.",
    "is_method": true,
    "class_name": "JSONProvider",
    "parameters": [
      "self"
    ],
    "calls": [
      "self._prepare_response_obj",
      "self._app.response_class",
      "self.dumps"
    ],
    "code_location": {
      "file": "provider.py",
      "path": "/data3/pwh/flask/src/flask/json",
      "start_line": 89,
      "end_line": 105
    },
    "code_snippet": "def response(self, *args: t.Any, **kwargs: t.Any) -> Response:\n        \"\"\"Serialize the given arguments as JSON, and return a\n        :class:`~flask.Response` object with the ``application/json``\n        mimetype.\n\n        The :func:`~flask.json.jsonify` function calls this method for\n        the current application.\n\n        Either positional or keyword arguments can be given, not both.\n        If no arguments are given, ``None`` is serialized.\n\n        :param args: A single value to serialize,..."
  },
  {
    "name": "_default",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "o"
    ],
    "calls": [
      "isinstance",
      "isinstance",
      "hasattr",
      "TypeError",
      "http_date",
      "str",
      "dataclasses.is_dataclass",
      "dataclasses.asdict",
      "str",
      "o.__html__",
      "type"
    ],
    "code_location": {
      "file": "provider.py",
      "path": "/data3/pwh/flask/src/flask/json",
      "start_line": 108,
      "end_line": 121
    },
    "code_snippet": "def _default(o: t.Any) -> t.Any:\n    if isinstance(o, date):\n        return http_date(o)\n\n    if isinstance(o, (decimal.Decimal, uuid.UUID)):\n        return str(o)\n\n    if dataclasses and dataclasses.is_dataclass(o):\n        return dataclasses.asdict(o)  # type: ignore[arg-type]\n\n    if hasattr(o, \"__html__\"):\n        return str(o.__html__())\n\n    raise TypeError(f\"Object of type {type(o).__name__} is not JSON serializable\")"
  },
  {
    "name": "dumps",
    "docstring": "Serialize data as JSON to a string.\n\nKeyword arguments are passed to :func:`json.dumps`. Sets some\nparameter defaults from the :attr:`default`,\n:attr:`ensure_ascii`, and :attr:`sort_keys` attributes.\n\n:param obj: The data to serialize.\n:param kwargs: Passed to :func:`json.dumps`.",
    "is_method": true,
    "class_name": "DefaultJSONProvider",
    "parameters": [
      "self",
      "obj"
    ],
    "calls": [
      "kwargs.setdefault",
      "kwargs.setdefault",
      "kwargs.setdefault",
      "json.dumps"
    ],
    "code_location": {
      "file": "provider.py",
      "path": "/data3/pwh/flask/src/flask/json",
      "start_line": 166,
      "end_line": 179
    },
    "code_snippet": "def dumps(self, obj: t.Any, **kwargs: t.Any) -> str:\n        \"\"\"Serialize data as JSON to a string.\n\n        Keyword arguments are passed to :func:`json.dumps`. Sets some\n        parameter defaults from the :attr:`default`,\n        :attr:`ensure_ascii`, and :attr:`sort_keys` attributes.\n\n        :param obj: The data to serialize.\n        :param kwargs: Passed to :func:`json.dumps`.\n        \"\"\"\n        kwargs.setdefault(\"default\", self.default)\n        kwargs.setdefault(\"ensure_ascii\", self.ensur..."
  },
  {
    "name": "loads",
    "docstring": "Deserialize data as JSON from a string or bytes.\n\n:param s: Text or UTF-8 bytes.\n:param kwargs: Passed to :func:`json.loads`.",
    "is_method": true,
    "class_name": "DefaultJSONProvider",
    "parameters": [
      "self",
      "s"
    ],
    "calls": [
      "json.loads"
    ],
    "code_location": {
      "file": "provider.py",
      "path": "/data3/pwh/flask/src/flask/json",
      "start_line": 181,
      "end_line": 187
    },
    "code_snippet": "def loads(self, s: str | bytes, **kwargs: t.Any) -> t.Any:\n        \"\"\"Deserialize data as JSON from a string or bytes.\n\n        :param s: Text or UTF-8 bytes.\n        :param kwargs: Passed to :func:`json.loads`.\n        \"\"\"\n        return json.loads(s, **kwargs)"
  },
  {
    "name": "response",
    "docstring": "Serialize the given arguments as JSON, and return a\n:class:`~flask.Response` object with it. The response mimetype\nwill be \"application/json\" and can be changed with\n:attr:`mimetype`.\n\nIf :attr:`compact` is ``False`` or debug mode is enabled, the\noutput will be formatted to be easier to read.\n\nEither positional or keyword arguments can be given, not both.\nIf no arguments are given, ``None`` is serialized.\n\n:param args: A single value to serialize, or multiple values to\n    treat as a list to serialize.\n:param kwargs: Treat as a dict to serialize.",
    "is_method": true,
    "class_name": "DefaultJSONProvider",
    "parameters": [
      "self"
    ],
    "calls": [
      "self._prepare_response_obj",
      "self._app.response_class",
      "dump_args.setdefault",
      "dump_args.setdefault",
      "self.dumps"
    ],
    "code_location": {
      "file": "provider.py",
      "path": "/data3/pwh/flask/src/flask/json",
      "start_line": 189,
      "end_line": 215
    },
    "code_snippet": "def response(self, *args: t.Any, **kwargs: t.Any) -> Response:\n        \"\"\"Serialize the given arguments as JSON, and return a\n        :class:`~flask.Response` object with it. The response mimetype\n        will be \"application/json\" and can be changed with\n        :attr:`mimetype`.\n\n        If :attr:`compact` is ``False`` or debug mode is enabled, the\n        output will be formatted to be easier to read.\n\n        Either positional or keyword arguments can be given, not both.\n        If no argume..."
  },
  {
    "name": "__init__",
    "docstring": "Create a tagger for the given serializer.",
    "is_method": true,
    "class_name": "JSONTag",
    "parameters": [
      "self",
      "serializer"
    ],
    "calls": [],
    "code_location": {
      "file": "tag.py",
      "path": "/data3/pwh/flask/src/flask/json",
      "start_line": 69,
      "end_line": 71
    },
    "code_snippet": "def __init__(self, serializer: TaggedJSONSerializer) -> None:\n        \"\"\"Create a tagger for the given serializer.\"\"\"\n        self.serializer = serializer"
  },
  {
    "name": "check",
    "docstring": "Check if the given value should be tagged by this tag.",
    "is_method": true,
    "class_name": "JSONTag",
    "parameters": [
      "self",
      "value"
    ],
    "calls": [],
    "code_location": {
      "file": "tag.py",
      "path": "/data3/pwh/flask/src/flask/json",
      "start_line": 73,
      "end_line": 75
    },
    "code_snippet": "def check(self, value: t.Any) -> bool:\n        \"\"\"Check if the given value should be tagged by this tag.\"\"\"\n        raise NotImplementedError"
  },
  {
    "name": "to_json",
    "docstring": "Convert the Python object to an object that is a valid JSON type.\nThe tag will be added later.",
    "is_method": true,
    "class_name": "JSONTag",
    "parameters": [
      "self",
      "value"
    ],
    "calls": [],
    "code_location": {
      "file": "tag.py",
      "path": "/data3/pwh/flask/src/flask/json",
      "start_line": 77,
      "end_line": 80
    },
    "code_snippet": "def to_json(self, value: t.Any) -> t.Any:\n        \"\"\"Convert the Python object to an object that is a valid JSON type.\n        The tag will be added later.\"\"\"\n        raise NotImplementedError"
  },
  {
    "name": "to_python",
    "docstring": "Convert the JSON representation back to the correct type. The tag\nwill already be removed.",
    "is_method": true,
    "class_name": "JSONTag",
    "parameters": [
      "self",
      "value"
    ],
    "calls": [],
    "code_location": {
      "file": "tag.py",
      "path": "/data3/pwh/flask/src/flask/json",
      "start_line": 82,
      "end_line": 85
    },
    "code_snippet": "def to_python(self, value: t.Any) -> t.Any:\n        \"\"\"Convert the JSON representation back to the correct type. The tag\n        will already be removed.\"\"\"\n        raise NotImplementedError"
  },
  {
    "name": "tag",
    "docstring": "Convert the value to a valid JSON type and add the tag structure\naround it.",
    "is_method": true,
    "class_name": "JSONTag",
    "parameters": [
      "self",
      "value"
    ],
    "calls": [
      "self.to_json"
    ],
    "code_location": {
      "file": "tag.py",
      "path": "/data3/pwh/flask/src/flask/json",
      "start_line": 87,
      "end_line": 90
    },
    "code_snippet": "def tag(self, value: t.Any) -> dict[str, t.Any]:\n        \"\"\"Convert the value to a valid JSON type and add the tag structure\n        around it.\"\"\"\n        return {self.key: self.to_json(value)}"
  },
  {
    "name": "check",
    "docstring": "",
    "is_method": true,
    "class_name": "TagDict",
    "parameters": [
      "self",
      "value"
    ],
    "calls": [
      "isinstance",
      "len",
      "next",
      "iter"
    ],
    "code_location": {
      "file": "tag.py",
      "path": "/data3/pwh/flask/src/flask/json",
      "start_line": 103,
      "end_line": 108
    },
    "code_snippet": "def check(self, value: t.Any) -> bool:\n        return (\n            isinstance(value, dict)\n            and len(value) == 1\n            and next(iter(value)) in self.serializer.tags\n        )"
  },
  {
    "name": "to_json",
    "docstring": "",
    "is_method": true,
    "class_name": "TagDict",
    "parameters": [
      "self",
      "value"
    ],
    "calls": [
      "next",
      "iter",
      "self.serializer.tag"
    ],
    "code_location": {
      "file": "tag.py",
      "path": "/data3/pwh/flask/src/flask/json",
      "start_line": 110,
      "end_line": 112
    },
    "code_snippet": "def to_json(self, value: t.Any) -> t.Any:\n        key = next(iter(value))\n        return {f\"{key}__\": self.serializer.tag(value[key])}"
  },
  {
    "name": "to_python",
    "docstring": "",
    "is_method": true,
    "class_name": "TagDict",
    "parameters": [
      "self",
      "value"
    ],
    "calls": [
      "next",
      "iter"
    ],
    "code_location": {
      "file": "tag.py",
      "path": "/data3/pwh/flask/src/flask/json",
      "start_line": 114,
      "end_line": 116
    },
    "code_snippet": "def to_python(self, value: t.Any) -> t.Any:\n        key = next(iter(value))\n        return {key[:-2]: value[key]}"
  },
  {
    "name": "check",
    "docstring": "",
    "is_method": true,
    "class_name": "PassDict",
    "parameters": [
      "self",
      "value"
    ],
    "calls": [
      "isinstance"
    ],
    "code_location": {
      "file": "tag.py",
      "path": "/data3/pwh/flask/src/flask/json",
      "start_line": 122,
      "end_line": 123
    },
    "code_snippet": "def check(self, value: t.Any) -> bool:\n        return isinstance(value, dict)"
  },
  {
    "name": "to_json",
    "docstring": "",
    "is_method": true,
    "class_name": "PassDict",
    "parameters": [
      "self",
      "value"
    ],
    "calls": [
      "self.serializer.tag",
      "value.items"
    ],
    "code_location": {
      "file": "tag.py",
      "path": "/data3/pwh/flask/src/flask/json",
      "start_line": 125,
      "end_line": 128
    },
    "code_snippet": "def to_json(self, value: t.Any) -> t.Any:\n        # JSON objects may only have string keys, so don't bother tagging the\n        # key here.\n        return {k: self.serializer.tag(v) for k, v in value.items()}"
  },
  {
    "name": "check",
    "docstring": "",
    "is_method": true,
    "class_name": "TagTuple",
    "parameters": [
      "self",
      "value"
    ],
    "calls": [
      "isinstance"
    ],
    "code_location": {
      "file": "tag.py",
      "path": "/data3/pwh/flask/src/flask/json",
      "start_line": 137,
      "end_line": 138
    },
    "code_snippet": "def check(self, value: t.Any) -> bool:\n        return isinstance(value, tuple)"
  },
  {
    "name": "to_json",
    "docstring": "",
    "is_method": true,
    "class_name": "TagTuple",
    "parameters": [
      "self",
      "value"
    ],
    "calls": [
      "self.serializer.tag"
    ],
    "code_location": {
      "file": "tag.py",
      "path": "/data3/pwh/flask/src/flask/json",
      "start_line": 140,
      "end_line": 141
    },
    "code_snippet": "def to_json(self, value: t.Any) -> t.Any:\n        return [self.serializer.tag(item) for item in value]"
  },
  {
    "name": "to_python",
    "docstring": "",
    "is_method": true,
    "class_name": "TagTuple",
    "parameters": [
      "self",
      "value"
    ],
    "calls": [
      "tuple"
    ],
    "code_location": {
      "file": "tag.py",
      "path": "/data3/pwh/flask/src/flask/json",
      "start_line": 143,
      "end_line": 144
    },
    "code_snippet": "def to_python(self, value: t.Any) -> t.Any:\n        return tuple(value)"
  },
  {
    "name": "check",
    "docstring": "",
    "is_method": true,
    "class_name": "PassList",
    "parameters": [
      "self",
      "value"
    ],
    "calls": [
      "isinstance"
    ],
    "code_location": {
      "file": "tag.py",
      "path": "/data3/pwh/flask/src/flask/json",
      "start_line": 150,
      "end_line": 151
    },
    "code_snippet": "def check(self, value: t.Any) -> bool:\n        return isinstance(value, list)"
  },
  {
    "name": "to_json",
    "docstring": "",
    "is_method": true,
    "class_name": "PassList",
    "parameters": [
      "self",
      "value"
    ],
    "calls": [
      "self.serializer.tag"
    ],
    "code_location": {
      "file": "tag.py",
      "path": "/data3/pwh/flask/src/flask/json",
      "start_line": 153,
      "end_line": 154
    },
    "code_snippet": "def to_json(self, value: t.Any) -> t.Any:\n        return [self.serializer.tag(item) for item in value]"
  },
  {
    "name": "check",
    "docstring": "",
    "is_method": true,
    "class_name": "TagBytes",
    "parameters": [
      "self",
      "value"
    ],
    "calls": [
      "isinstance"
    ],
    "code_location": {
      "file": "tag.py",
      "path": "/data3/pwh/flask/src/flask/json",
      "start_line": 163,
      "end_line": 164
    },
    "code_snippet": "def check(self, value: t.Any) -> bool:\n        return isinstance(value, bytes)"
  },
  {
    "name": "to_json",
    "docstring": "",
    "is_method": true,
    "class_name": "TagBytes",
    "parameters": [
      "self",
      "value"
    ],
    "calls": [
      "decode",
      "b64encode"
    ],
    "code_location": {
      "file": "tag.py",
      "path": "/data3/pwh/flask/src/flask/json",
      "start_line": 166,
      "end_line": 167
    },
    "code_snippet": "def to_json(self, value: t.Any) -> t.Any:\n        return b64encode(value).decode(\"ascii\")"
  },
  {
    "name": "to_python",
    "docstring": "",
    "is_method": true,
    "class_name": "TagBytes",
    "parameters": [
      "self",
      "value"
    ],
    "calls": [
      "b64decode"
    ],
    "code_location": {
      "file": "tag.py",
      "path": "/data3/pwh/flask/src/flask/json",
      "start_line": 169,
      "end_line": 170
    },
    "code_snippet": "def to_python(self, value: t.Any) -> t.Any:\n        return b64decode(value)"
  },
  {
    "name": "check",
    "docstring": "",
    "is_method": true,
    "class_name": "TagMarkup",
    "parameters": [
      "self",
      "value"
    ],
    "calls": [
      "callable",
      "getattr"
    ],
    "code_location": {
      "file": "tag.py",
      "path": "/data3/pwh/flask/src/flask/json",
      "start_line": 181,
      "end_line": 182
    },
    "code_snippet": "def check(self, value: t.Any) -> bool:\n        return callable(getattr(value, \"__html__\", None))"
  },
  {
    "name": "to_json",
    "docstring": "",
    "is_method": true,
    "class_name": "TagMarkup",
    "parameters": [
      "self",
      "value"
    ],
    "calls": [
      "str",
      "value.__html__"
    ],
    "code_location": {
      "file": "tag.py",
      "path": "/data3/pwh/flask/src/flask/json",
      "start_line": 184,
      "end_line": 185
    },
    "code_snippet": "def to_json(self, value: t.Any) -> t.Any:\n        return str(value.__html__())"
  },
  {
    "name": "to_python",
    "docstring": "",
    "is_method": true,
    "class_name": "TagMarkup",
    "parameters": [
      "self",
      "value"
    ],
    "calls": [
      "Markup"
    ],
    "code_location": {
      "file": "tag.py",
      "path": "/data3/pwh/flask/src/flask/json",
      "start_line": 187,
      "end_line": 188
    },
    "code_snippet": "def to_python(self, value: t.Any) -> t.Any:\n        return Markup(value)"
  },
  {
    "name": "check",
    "docstring": "",
    "is_method": true,
    "class_name": "TagUUID",
    "parameters": [
      "self",
      "value"
    ],
    "calls": [
      "isinstance"
    ],
    "code_location": {
      "file": "tag.py",
      "path": "/data3/pwh/flask/src/flask/json",
      "start_line": 195,
      "end_line": 196
    },
    "code_snippet": "def check(self, value: t.Any) -> bool:\n        return isinstance(value, UUID)"
  },
  {
    "name": "to_json",
    "docstring": "",
    "is_method": true,
    "class_name": "TagUUID",
    "parameters": [
      "self",
      "value"
    ],
    "calls": [],
    "code_location": {
      "file": "tag.py",
      "path": "/data3/pwh/flask/src/flask/json",
      "start_line": 198,
      "end_line": 199
    },
    "code_snippet": "def to_json(self, value: t.Any) -> t.Any:\n        return value.hex"
  },
  {
    "name": "to_python",
    "docstring": "",
    "is_method": true,
    "class_name": "TagUUID",
    "parameters": [
      "self",
      "value"
    ],
    "calls": [
      "UUID"
    ],
    "code_location": {
      "file": "tag.py",
      "path": "/data3/pwh/flask/src/flask/json",
      "start_line": 201,
      "end_line": 202
    },
    "code_snippet": "def to_python(self, value: t.Any) -> t.Any:\n        return UUID(value)"
  },
  {
    "name": "check",
    "docstring": "",
    "is_method": true,
    "class_name": "TagDateTime",
    "parameters": [
      "self",
      "value"
    ],
    "calls": [
      "isinstance"
    ],
    "code_location": {
      "file": "tag.py",
      "path": "/data3/pwh/flask/src/flask/json",
      "start_line": 209,
      "end_line": 210
    },
    "code_snippet": "def check(self, value: t.Any) -> bool:\n        return isinstance(value, datetime)"
  },
  {
    "name": "to_json",
    "docstring": "",
    "is_method": true,
    "class_name": "TagDateTime",
    "parameters": [
      "self",
      "value"
    ],
    "calls": [
      "http_date"
    ],
    "code_location": {
      "file": "tag.py",
      "path": "/data3/pwh/flask/src/flask/json",
      "start_line": 212,
      "end_line": 213
    },
    "code_snippet": "def to_json(self, value: t.Any) -> t.Any:\n        return http_date(value)"
  },
  {
    "name": "to_python",
    "docstring": "",
    "is_method": true,
    "class_name": "TagDateTime",
    "parameters": [
      "self",
      "value"
    ],
    "calls": [
      "parse_date"
    ],
    "code_location": {
      "file": "tag.py",
      "path": "/data3/pwh/flask/src/flask/json",
      "start_line": 215,
      "end_line": 216
    },
    "code_snippet": "def to_python(self, value: t.Any) -> t.Any:\n        return parse_date(value)"
  },
  {
    "name": "__init__",
    "docstring": "",
    "is_method": true,
    "class_name": "TaggedJSONSerializer",
    "parameters": [
      "self"
    ],
    "calls": [
      "self.register"
    ],
    "code_location": {
      "file": "tag.py",
      "path": "/data3/pwh/flask/src/flask/json",
      "start_line": 249,
      "end_line": 254
    },
    "code_snippet": "def __init__(self) -> None:\n        self.tags: dict[str, JSONTag] = {}\n        self.order: list[JSONTag] = []\n\n        for cls in self.default_tags:\n            self.register(cls)"
  },
  {
    "name": "register",
    "docstring": "Register a new tag with this serializer.\n\n:param tag_class: tag class to register. Will be instantiated with this\n    serializer instance.\n:param force: overwrite an existing tag. If false (default), a\n    :exc:`KeyError` is raised.\n:param index: index to insert the new tag in the tag order. Useful when\n    the new tag is a special case of an existing tag. If ``None``\n    (default), the tag is appended to the end of the order.\n\n:raise KeyError: if the tag key is already registered and ``force`` is\n    not true.",
    "is_method": true,
    "class_name": "TaggedJSONSerializer",
    "parameters": [
      "self",
      "tag_class",
      "force",
      "index"
    ],
    "calls": [
      "tag_class",
      "self.order.append",
      "self.order.insert",
      "KeyError"
    ],
    "code_location": {
      "file": "tag.py",
      "path": "/data3/pwh/flask/src/flask/json",
      "start_line": 256,
      "end_line": 287
    },
    "code_snippet": "def register(\n        self,\n        tag_class: type[JSONTag],\n        force: bool = False,\n        index: int | None = None,\n    ) -> None:\n        \"\"\"Register a new tag with this serializer.\n\n        :param tag_class: tag class to register. Will be instantiated with this\n            serializer instance.\n        :param force: overwrite an existing tag. If false (default), a\n            :exc:`KeyError` is raised.\n        :param index: index to insert the new tag in the tag order. Useful when\n    ..."
  },
  {
    "name": "tag",
    "docstring": "Convert a value to a tagged representation if necessary.",
    "is_method": true,
    "class_name": "TaggedJSONSerializer",
    "parameters": [
      "self",
      "value"
    ],
    "calls": [
      "tag.check",
      "tag.tag"
    ],
    "code_location": {
      "file": "tag.py",
      "path": "/data3/pwh/flask/src/flask/json",
      "start_line": 289,
      "end_line": 295
    },
    "code_snippet": "def tag(self, value: t.Any) -> t.Any:\n        \"\"\"Convert a value to a tagged representation if necessary.\"\"\"\n        for tag in self.order:\n            if tag.check(value):\n                return tag.tag(value)\n\n        return value"
  },
  {
    "name": "untag",
    "docstring": "Convert a tagged representation back to the original type.",
    "is_method": true,
    "class_name": "TaggedJSONSerializer",
    "parameters": [
      "self",
      "value"
    ],
    "calls": [
      "next",
      "to_python",
      "len",
      "iter"
    ],
    "code_location": {
      "file": "tag.py",
      "path": "/data3/pwh/flask/src/flask/json",
      "start_line": 297,
      "end_line": 307
    },
    "code_snippet": "def untag(self, value: dict[str, t.Any]) -> t.Any:\n        \"\"\"Convert a tagged representation back to the original type.\"\"\"\n        if len(value) != 1:\n            return value\n\n        key = next(iter(value))\n\n        if key not in self.tags:\n            return value\n\n        return self.tags[key].to_python(value[key])"
  },
  {
    "name": "_untag_scan",
    "docstring": "",
    "is_method": true,
    "class_name": "TaggedJSONSerializer",
    "parameters": [
      "self",
      "value"
    ],
    "calls": [
      "isinstance",
      "self.untag",
      "isinstance",
      "self._untag_scan",
      "value.items",
      "self._untag_scan"
    ],
    "code_location": {
      "file": "tag.py",
      "path": "/data3/pwh/flask/src/flask/json",
      "start_line": 309,
      "end_line": 319
    },
    "code_snippet": "def _untag_scan(self, value: t.Any) -> t.Any:\n        if isinstance(value, dict):\n            # untag each item recursively\n            value = {k: self._untag_scan(v) for k, v in value.items()}\n            # untag the dict itself\n            value = self.untag(value)\n        elif isinstance(value, list):\n            # untag each item recursively\n            value = [self._untag_scan(item) for item in value]\n\n        return value"
  },
  {
    "name": "dumps",
    "docstring": "Tag the value and dump it to a compact JSON string.",
    "is_method": true,
    "class_name": "TaggedJSONSerializer",
    "parameters": [
      "self",
      "value"
    ],
    "calls": [
      "dumps",
      "self.tag"
    ],
    "code_location": {
      "file": "tag.py",
      "path": "/data3/pwh/flask/src/flask/json",
      "start_line": 321,
      "end_line": 323
    },
    "code_snippet": "def dumps(self, value: t.Any) -> str:\n        \"\"\"Tag the value and dump it to a compact JSON string.\"\"\"\n        return dumps(self.tag(value), separators=(\",\", \":\"))"
  },
  {
    "name": "loads",
    "docstring": "Load data from a JSON string and deserialized any tagged objects.",
    "is_method": true,
    "class_name": "TaggedJSONSerializer",
    "parameters": [
      "self",
      "value"
    ],
    "calls": [
      "self._untag_scan",
      "loads"
    ],
    "code_location": {
      "file": "tag.py",
      "path": "/data3/pwh/flask/src/flask/json",
      "start_line": 325,
      "end_line": 327
    },
    "code_snippet": "def loads(self, value: str) -> t.Any:\n        \"\"\"Load data from a JSON string and deserialized any tagged objects.\"\"\"\n        return self._untag_scan(loads(value))"
  },
  {
    "name": "__init__",
    "docstring": "",
    "is_method": true,
    "class_name": "BlueprintSetupState",
    "parameters": [
      "self",
      "blueprint",
      "app",
      "options",
      "first_registration"
    ],
    "calls": [
      "self.options.get",
      "self.options.get",
      "self.options.get",
      "self.options.get",
      "dict",
      "self.url_defaults.update",
      "self.options.get"
    ],
    "code_location": {
      "file": "blueprints.py",
      "path": "/data3/pwh/flask/src/flask/sansio",
      "start_line": 41,
      "end_line": 85
    },
    "code_snippet": "def __init__(\n        self,\n        blueprint: Blueprint,\n        app: App,\n        options: t.Any,\n        first_registration: bool,\n    ) -> None:\n        #: a reference to the current application\n        self.app = app\n\n        #: a reference to the blueprint that created this setup state.\n        self.blueprint = blueprint\n\n        #: a dictionary with all options that were passed to the\n        #: :meth:`~flask.Flask.register_blueprint` method.\n        self.options = options\n\n        #: as ..."
  },
  {
    "name": "add_url_rule",
    "docstring": "A helper method to register a rule (and optionally a view function)\nto the application.  The endpoint is automatically prefixed with the\nblueprint's name.",
    "is_method": true,
    "class_name": "BlueprintSetupState",
    "parameters": [
      "self",
      "rule",
      "endpoint",
      "view_func"
    ],
    "calls": [
      "options.setdefault",
      "self.app.add_url_rule",
      "_endpoint_from_view_func",
      "dict",
      "lstrip",
      "join",
      "options.pop",
      "self.url_prefix.rstrip",
      "rule.lstrip"
    ],
    "code_location": {
      "file": "blueprints.py",
      "path": "/data3/pwh/flask/src/flask/sansio",
      "start_line": 87,
      "end_line": 116
    },
    "code_snippet": "def add_url_rule(\n        self,\n        rule: str,\n        endpoint: str | None = None,\n        view_func: ft.RouteCallable | None = None,\n        **options: t.Any,\n    ) -> None:\n        \"\"\"A helper method to register a rule (and optionally a view function)\n        to the application.  The endpoint is automatically prefixed with the\n        blueprint's name.\n        \"\"\"\n        if self.url_prefix is not None:\n            if rule:\n                rule = \"/\".join((self.url_prefix.rstrip(\"/\"), rul..."
  },
  {
    "name": "__init__",
    "docstring": "",
    "is_method": true,
    "class_name": "Blueprint",
    "parameters": [
      "self",
      "name",
      "import_name",
      "static_folder",
      "static_url_path",
      "template_folder",
      "url_prefix",
      "subdomain",
      "url_defaults",
      "root_path",
      "cli_group"
    ],
    "calls": [
      "__init__",
      "ValueError",
      "ValueError",
      "super"
    ],
    "code_location": {
      "file": "blueprints.py",
      "path": "/data3/pwh/flask/src/flask/sansio",
      "start_line": 174,
      "end_line": 211
    },
    "code_snippet": "def __init__(\n        self,\n        name: str,\n        import_name: str,\n        static_folder: str | os.PathLike[str] | None = None,\n        static_url_path: str | None = None,\n        template_folder: str | os.PathLike[str] | None = None,\n        url_prefix: str | None = None,\n        subdomain: str | None = None,\n        url_defaults: dict[str, t.Any] | None = None,\n        root_path: str | None = None,\n        cli_group: str | None = _sentinel,  # type: ignore[assignment]\n    ):\n        supe..."
  },
  {
    "name": "_check_setup_finished",
    "docstring": "",
    "is_method": true,
    "class_name": "Blueprint",
    "parameters": [
      "self",
      "f_name"
    ],
    "calls": [
      "AssertionError"
    ],
    "code_location": {
      "file": "blueprints.py",
      "path": "/data3/pwh/flask/src/flask/sansio",
      "start_line": 213,
      "end_line": 221
    },
    "code_snippet": "def _check_setup_finished(self, f_name: str) -> None:\n        if self._got_registered_once:\n            raise AssertionError(\n                f\"The setup method '{f_name}' can no longer be called on the blueprint\"\n                f\" '{self.name}'. It has already been registered at least once, any\"\n                \" changes will not be applied consistently.\\n\"\n                \"Make sure all imports, decorators, functions, etc. needed to set up\"\n                \" the blueprint are done before regi..."
  },
  {
    "name": "record",
    "docstring": "Registers a function that is called when the blueprint is\nregistered on the application.  This function is called with the\nstate as argument as returned by the :meth:`make_setup_state`\nmethod.",
    "is_method": true,
    "class_name": "Blueprint",
    "parameters": [
      "self",
      "func"
    ],
    "calls": [
      "self.deferred_functions.append"
    ],
    "code_location": {
      "file": "blueprints.py",
      "path": "/data3/pwh/flask/src/flask/sansio",
      "start_line": 224,
      "end_line": 230
    },
    "code_snippet": "def record(self, func: DeferredSetupFunction) -> None:\n        \"\"\"Registers a function that is called when the blueprint is\n        registered on the application.  This function is called with the\n        state as argument as returned by the :meth:`make_setup_state`\n        method.\n        \"\"\"\n        self.deferred_functions.append(func)"
  },
  {
    "name": "record_once",
    "docstring": "Works like :meth:`record` but wraps the function in another\nfunction that will ensure the function is only called once.  If the\nblueprint is registered a second time on the application, the\nfunction passed is not called.",
    "is_method": true,
    "class_name": "Blueprint",
    "parameters": [
      "self",
      "func"
    ],
    "calls": [
      "self.record",
      "update_wrapper",
      "func"
    ],
    "code_location": {
      "file": "blueprints.py",
      "path": "/data3/pwh/flask/src/flask/sansio",
      "start_line": 233,
      "end_line": 244
    },
    "code_snippet": "def record_once(self, func: DeferredSetupFunction) -> None:\n        \"\"\"Works like :meth:`record` but wraps the function in another\n        function that will ensure the function is only called once.  If the\n        blueprint is registered a second time on the application, the\n        function passed is not called.\n        \"\"\"\n\n        def wrapper(state: BlueprintSetupState) -> None:\n            if state.first_registration:\n                func(state)\n\n        self.record(update_wrapper(wrapper, ..."
  },
  {
    "name": "make_setup_state",
    "docstring": "Creates an instance of :meth:`~flask.blueprints.BlueprintSetupState`\nobject that is later passed to the register callback functions.\nSubclasses can override this to return a subclass of the setup state.",
    "is_method": true,
    "class_name": "Blueprint",
    "parameters": [
      "self",
      "app",
      "options",
      "first_registration"
    ],
    "calls": [
      "BlueprintSetupState"
    ],
    "code_location": {
      "file": "blueprints.py",
      "path": "/data3/pwh/flask/src/flask/sansio",
      "start_line": 246,
      "end_line": 253
    },
    "code_snippet": "def make_setup_state(\n        self, app: App, options: dict[str, t.Any], first_registration: bool = False\n    ) -> BlueprintSetupState:\n        \"\"\"Creates an instance of :meth:`~flask.blueprints.BlueprintSetupState`\n        object that is later passed to the register callback functions.\n        Subclasses can override this to return a subclass of the setup state.\n        \"\"\"\n        return BlueprintSetupState(self, app, options, first_registration)"
  },
  {
    "name": "register_blueprint",
    "docstring": "Register a :class:`~flask.Blueprint` on this blueprint. Keyword\narguments passed to this method will override the defaults set\non the blueprint.\n\n.. versionchanged:: 2.0.1\n    The ``name`` option can be used to change the (pre-dotted)\n    name the blueprint is registered with. This allows the same\n    blueprint to be registered multiple times with unique names\n    for ``url_for``.\n\n.. versionadded:: 2.0",
    "is_method": true,
    "class_name": "Blueprint",
    "parameters": [
      "self",
      "blueprint"
    ],
    "calls": [
      "self._blueprints.append",
      "ValueError"
    ],
    "code_location": {
      "file": "blueprints.py",
      "path": "/data3/pwh/flask/src/flask/sansio",
      "start_line": 256,
      "end_line": 271
    },
    "code_snippet": "def register_blueprint(self, blueprint: Blueprint, **options: t.Any) -> None:\n        \"\"\"Register a :class:`~flask.Blueprint` on this blueprint. Keyword\n        arguments passed to this method will override the defaults set\n        on the blueprint.\n\n        .. versionchanged:: 2.0.1\n            The ``name`` option can be used to change the (pre-dotted)\n            name the blueprint is registered with. This allows the same\n            blueprint to be registered multiple times with unique names\n..."
  },
  {
    "name": "register",
    "docstring": "Called by :meth:`Flask.register_blueprint` to register all\nviews and callbacks registered on the blueprint with the\napplication. Creates a :class:`.BlueprintSetupState` and calls\neach :meth:`record` callback with it.\n\n:param app: The application this blueprint is being registered\n    with.\n:param options: Keyword arguments forwarded from\n    :meth:`~Flask.register_blueprint`.\n\n.. versionchanged:: 2.3\n    Nested blueprints now correctly apply subdomains.\n\n.. versionchanged:: 2.1\n    Registering the same blueprint with the same name multiple\n    times is an error.\n\n.. versionchanged:: 2.0.1\n    Nested blueprints are registered with their dotted name.\n    This allows different blueprints with the same name to be\n    nested at different locations.\n\n.. versionchanged:: 2.0.1\n    The ``name`` option can be used to change the (pre-dotted)\n    name the blueprint is registered with. This allows the same\n    blueprint to be registered multiple times with unique names\n    for ``url_for``.",
    "is_method": true,
    "class_name": "Blueprint",
    "parameters": [
      "self",
      "app",
      "options"
    ],
    "calls": [
      "options.get",
      "options.get",
      "lstrip",
      "self.make_setup_state",
      "options.get",
      "ValueError",
      "any",
      "state.add_url_rule",
      "self._merge_blueprint_funcs",
      "deferred",
      "bp_options.copy",
      "bp_options.get",
      "bp_options.get",
      "blueprint.register",
      "app.cli.commands.update",
      "app.cli.add_command",
      "app.cli.add_command",
      "bp_url_prefix.lstrip",
      "app.blueprints.values",
      "state.url_prefix.rstrip"
    ],
    "code_location": {
      "file": "blueprints.py",
      "path": "/data3/pwh/flask/src/flask/sansio",
      "start_line": 273,
      "end_line": 377
    },
    "code_snippet": "def register(self, app: App, options: dict[str, t.Any]) -> None:\n        \"\"\"Called by :meth:`Flask.register_blueprint` to register all\n        views and callbacks registered on the blueprint with the\n        application. Creates a :class:`.BlueprintSetupState` and calls\n        each :meth:`record` callback with it.\n\n        :param app: The application this blueprint is being registered\n            with.\n        :param options: Keyword arguments forwarded from\n            :meth:`~Flask.register_b..."
  },
  {
    "name": "_merge_blueprint_funcs",
    "docstring": "",
    "is_method": true,
    "class_name": "Blueprint",
    "parameters": [
      "self",
      "app",
      "name"
    ],
    "calls": [
      "self.error_handler_spec.items",
      "self.view_functions.items",
      "extend",
      "extend",
      "extend",
      "extend",
      "extend",
      "extend",
      "bp_dict.items",
      "defaultdict",
      "extend",
      "value.items",
      "code_values.items"
    ],
    "code_location": {
      "file": "blueprints.py",
      "path": "/data3/pwh/flask/src/flask/sansio",
      "start_line": 379,
      "end_line": 410
    },
    "code_snippet": "def _merge_blueprint_funcs(self, app: App, name: str) -> None:\n        def extend(\n            bp_dict: dict[ft.AppOrBlueprintKey, list[t.Any]],\n            parent_dict: dict[ft.AppOrBlueprintKey, list[t.Any]],\n        ) -> None:\n            for key, values in bp_dict.items():\n                key = name if key is None else f\"{name}.{key}\"\n                parent_dict[key].extend(values)\n\n        for key, value in self.error_handler_spec.items():\n            key = name if key is None else f\"{name}..."
  },
  {
    "name": "add_url_rule",
    "docstring": "Register a URL rule with the blueprint. See :meth:`.Flask.add_url_rule` for\nfull documentation.\n\nThe URL rule is prefixed with the blueprint's URL prefix. The endpoint name,\nused with :func:`url_for`, is prefixed with the blueprint's name.",
    "is_method": true,
    "class_name": "Blueprint",
    "parameters": [
      "self",
      "rule",
      "endpoint",
      "view_func",
      "provide_automatic_options"
    ],
    "calls": [
      "self.record",
      "ValueError",
      "hasattr",
      "ValueError",
      "s.add_url_rule"
    ],
    "code_location": {
      "file": "blueprints.py",
      "path": "/data3/pwh/flask/src/flask/sansio",
      "start_line": 413,
      "end_line": 441
    },
    "code_snippet": "def add_url_rule(\n        self,\n        rule: str,\n        endpoint: str | None = None,\n        view_func: ft.RouteCallable | None = None,\n        provide_automatic_options: bool | None = None,\n        **options: t.Any,\n    ) -> None:\n        \"\"\"Register a URL rule with the blueprint. See :meth:`.Flask.add_url_rule` for\n        full documentation.\n\n        The URL rule is prefixed with the blueprint's URL prefix. The endpoint name,\n        used with :func:`url_for`, is prefixed with the blueprin..."
  },
  {
    "name": "app_template_filter",
    "docstring": "Register a template filter, available in any template rendered by the\napplication. Equivalent to :meth:`.Flask.template_filter`.\n\n:param name: the optional name of the filter, otherwise the\n             function name will be used.",
    "is_method": true,
    "class_name": "Blueprint",
    "parameters": [
      "self",
      "name"
    ],
    "calls": [
      "self.add_app_template_filter"
    ],
    "code_location": {
      "file": "blueprints.py",
      "path": "/data3/pwh/flask/src/flask/sansio",
      "start_line": 444,
      "end_line": 458
    },
    "code_snippet": "def app_template_filter(\n        self, name: str | None = None\n    ) -> t.Callable[[T_template_filter], T_template_filter]:\n        \"\"\"Register a template filter, available in any template rendered by the\n        application. Equivalent to :meth:`.Flask.template_filter`.\n\n        :param name: the optional name of the filter, otherwise the\n                     function name will be used.\n        \"\"\"\n\n        def decorator(f: T_template_filter) -> T_template_filter:\n            self.add_app_templa..."
  },
  {
    "name": "add_app_template_filter",
    "docstring": "Register a template filter, available in any template rendered by the\napplication. Works like the :meth:`app_template_filter` decorator. Equivalent to\n:meth:`.Flask.add_template_filter`.\n\n:param name: the optional name of the filter, otherwise the\n             function name will be used.",
    "is_method": true,
    "class_name": "Blueprint",
    "parameters": [
      "self",
      "f",
      "name"
    ],
    "calls": [
      "self.record_once"
    ],
    "code_location": {
      "file": "blueprints.py",
      "path": "/data3/pwh/flask/src/flask/sansio",
      "start_line": 461,
      "end_line": 475
    },
    "code_snippet": "def add_app_template_filter(\n        self, f: ft.TemplateFilterCallable, name: str | None = None\n    ) -> None:\n        \"\"\"Register a template filter, available in any template rendered by the\n        application. Works like the :meth:`app_template_filter` decorator. Equivalent to\n        :meth:`.Flask.add_template_filter`.\n\n        :param name: the optional name of the filter, otherwise the\n                     function name will be used.\n        \"\"\"\n\n        def register_template(state: Bluepr..."
  },
  {
    "name": "app_template_test",
    "docstring": "Register a template test, available in any template rendered by the\napplication. Equivalent to :meth:`.Flask.template_test`.\n\n.. versionadded:: 0.10\n\n:param name: the optional name of the test, otherwise the\n             function name will be used.",
    "is_method": true,
    "class_name": "Blueprint",
    "parameters": [
      "self",
      "name"
    ],
    "calls": [
      "self.add_app_template_test"
    ],
    "code_location": {
      "file": "blueprints.py",
      "path": "/data3/pwh/flask/src/flask/sansio",
      "start_line": 478,
      "end_line": 494
    },
    "code_snippet": "def app_template_test(\n        self, name: str | None = None\n    ) -> t.Callable[[T_template_test], T_template_test]:\n        \"\"\"Register a template test, available in any template rendered by the\n        application. Equivalent to :meth:`.Flask.template_test`.\n\n        .. versionadded:: 0.10\n\n        :param name: the optional name of the test, otherwise the\n                     function name will be used.\n        \"\"\"\n\n        def decorator(f: T_template_test) -> T_template_test:\n            sel..."
  },
  {
    "name": "add_app_template_test",
    "docstring": "Register a template test, available in any template rendered by the\napplication. Works like the :meth:`app_template_test` decorator. Equivalent to\n:meth:`.Flask.add_template_test`.\n\n.. versionadded:: 0.10\n\n:param name: the optional name of the test, otherwise the\n             function name will be used.",
    "is_method": true,
    "class_name": "Blueprint",
    "parameters": [
      "self",
      "f",
      "name"
    ],
    "calls": [
      "self.record_once"
    ],
    "code_location": {
      "file": "blueprints.py",
      "path": "/data3/pwh/flask/src/flask/sansio",
      "start_line": 497,
      "end_line": 513
    },
    "code_snippet": "def add_app_template_test(\n        self, f: ft.TemplateTestCallable, name: str | None = None\n    ) -> None:\n        \"\"\"Register a template test, available in any template rendered by the\n        application. Works like the :meth:`app_template_test` decorator. Equivalent to\n        :meth:`.Flask.add_template_test`.\n\n        .. versionadded:: 0.10\n\n        :param name: the optional name of the test, otherwise the\n                     function name will be used.\n        \"\"\"\n\n        def register_te..."
  },
  {
    "name": "app_template_global",
    "docstring": "Register a template global, available in any template rendered by the\napplication. Equivalent to :meth:`.Flask.template_global`.\n\n.. versionadded:: 0.10\n\n:param name: the optional name of the global, otherwise the\n             function name will be used.",
    "is_method": true,
    "class_name": "Blueprint",
    "parameters": [
      "self",
      "name"
    ],
    "calls": [
      "self.add_app_template_global"
    ],
    "code_location": {
      "file": "blueprints.py",
      "path": "/data3/pwh/flask/src/flask/sansio",
      "start_line": 516,
      "end_line": 532
    },
    "code_snippet": "def app_template_global(\n        self, name: str | None = None\n    ) -> t.Callable[[T_template_global], T_template_global]:\n        \"\"\"Register a template global, available in any template rendered by the\n        application. Equivalent to :meth:`.Flask.template_global`.\n\n        .. versionadded:: 0.10\n\n        :param name: the optional name of the global, otherwise the\n                     function name will be used.\n        \"\"\"\n\n        def decorator(f: T_template_global) -> T_template_global:..."
  },
  {
    "name": "add_app_template_global",
    "docstring": "Register a template global, available in any template rendered by the\napplication. Works like the :meth:`app_template_global` decorator. Equivalent to\n:meth:`.Flask.add_template_global`.\n\n.. versionadded:: 0.10\n\n:param name: the optional name of the global, otherwise the\n             function name will be used.",
    "is_method": true,
    "class_name": "Blueprint",
    "parameters": [
      "self",
      "f",
      "name"
    ],
    "calls": [
      "self.record_once"
    ],
    "code_location": {
      "file": "blueprints.py",
      "path": "/data3/pwh/flask/src/flask/sansio",
      "start_line": 535,
      "end_line": 551
    },
    "code_snippet": "def add_app_template_global(\n        self, f: ft.TemplateGlobalCallable, name: str | None = None\n    ) -> None:\n        \"\"\"Register a template global, available in any template rendered by the\n        application. Works like the :meth:`app_template_global` decorator. Equivalent to\n        :meth:`.Flask.add_template_global`.\n\n        .. versionadded:: 0.10\n\n        :param name: the optional name of the global, otherwise the\n                     function name will be used.\n        \"\"\"\n\n        def..."
  },
  {
    "name": "before_app_request",
    "docstring": "Like :meth:`before_request`, but before every request, not only those handled\nby the blueprint. Equivalent to :meth:`.Flask.before_request`.",
    "is_method": true,
    "class_name": "Blueprint",
    "parameters": [
      "self",
      "f"
    ],
    "calls": [
      "self.record_once",
      "append",
      "s.app.before_request_funcs.setdefault"
    ],
    "code_location": {
      "file": "blueprints.py",
      "path": "/data3/pwh/flask/src/flask/sansio",
      "start_line": 554,
      "end_line": 561
    },
    "code_snippet": "def before_app_request(self, f: T_before_request) -> T_before_request:\n        \"\"\"Like :meth:`before_request`, but before every request, not only those handled\n        by the blueprint. Equivalent to :meth:`.Flask.before_request`.\n        \"\"\"\n        self.record_once(\n            lambda s: s.app.before_request_funcs.setdefault(None, []).append(f)\n        )\n        return f"
  },
  {
    "name": "after_app_request",
    "docstring": "Like :meth:`after_request`, but after every request, not only those handled\nby the blueprint. Equivalent to :meth:`.Flask.after_request`.",
    "is_method": true,
    "class_name": "Blueprint",
    "parameters": [
      "self",
      "f"
    ],
    "calls": [
      "self.record_once",
      "append",
      "s.app.after_request_funcs.setdefault"
    ],
    "code_location": {
      "file": "blueprints.py",
      "path": "/data3/pwh/flask/src/flask/sansio",
      "start_line": 564,
      "end_line": 571
    },
    "code_snippet": "def after_app_request(self, f: T_after_request) -> T_after_request:\n        \"\"\"Like :meth:`after_request`, but after every request, not only those handled\n        by the blueprint. Equivalent to :meth:`.Flask.after_request`.\n        \"\"\"\n        self.record_once(\n            lambda s: s.app.after_request_funcs.setdefault(None, []).append(f)\n        )\n        return f"
  },
  {
    "name": "teardown_app_request",
    "docstring": "Like :meth:`teardown_request`, but after every request, not only those\nhandled by the blueprint. Equivalent to :meth:`.Flask.teardown_request`.",
    "is_method": true,
    "class_name": "Blueprint",
    "parameters": [
      "self",
      "f"
    ],
    "calls": [
      "self.record_once",
      "append",
      "s.app.teardown_request_funcs.setdefault"
    ],
    "code_location": {
      "file": "blueprints.py",
      "path": "/data3/pwh/flask/src/flask/sansio",
      "start_line": 574,
      "end_line": 581
    },
    "code_snippet": "def teardown_app_request(self, f: T_teardown) -> T_teardown:\n        \"\"\"Like :meth:`teardown_request`, but after every request, not only those\n        handled by the blueprint. Equivalent to :meth:`.Flask.teardown_request`.\n        \"\"\"\n        self.record_once(\n            lambda s: s.app.teardown_request_funcs.setdefault(None, []).append(f)\n        )\n        return f"
  },
  {
    "name": "app_context_processor",
    "docstring": "Like :meth:`context_processor`, but for templates rendered by every view, not\nonly by the blueprint. Equivalent to :meth:`.Flask.context_processor`.",
    "is_method": true,
    "class_name": "Blueprint",
    "parameters": [
      "self",
      "f"
    ],
    "calls": [
      "self.record_once",
      "append",
      "s.app.template_context_processors.setdefault"
    ],
    "code_location": {
      "file": "blueprints.py",
      "path": "/data3/pwh/flask/src/flask/sansio",
      "start_line": 584,
      "end_line": 593
    },
    "code_snippet": "def app_context_processor(\n        self, f: T_template_context_processor\n    ) -> T_template_context_processor:\n        \"\"\"Like :meth:`context_processor`, but for templates rendered by every view, not\n        only by the blueprint. Equivalent to :meth:`.Flask.context_processor`.\n        \"\"\"\n        self.record_once(\n            lambda s: s.app.template_context_processors.setdefault(None, []).append(f)\n        )\n        return f"
  },
  {
    "name": "app_errorhandler",
    "docstring": "Like :meth:`errorhandler`, but for every request, not only those handled by\nthe blueprint. Equivalent to :meth:`.Flask.errorhandler`.",
    "is_method": true,
    "class_name": "Blueprint",
    "parameters": [
      "self",
      "code"
    ],
    "calls": [
      "self.record_once",
      "state.app.errorhandler"
    ],
    "code_location": {
      "file": "blueprints.py",
      "path": "/data3/pwh/flask/src/flask/sansio",
      "start_line": 596,
      "end_line": 610
    },
    "code_snippet": "def app_errorhandler(\n        self, code: type[Exception] | int\n    ) -> t.Callable[[T_error_handler], T_error_handler]:\n        \"\"\"Like :meth:`errorhandler`, but for every request, not only those handled by\n        the blueprint. Equivalent to :meth:`.Flask.errorhandler`.\n        \"\"\"\n\n        def decorator(f: T_error_handler) -> T_error_handler:\n            def from_blueprint(state: BlueprintSetupState) -> None:\n                state.app.errorhandler(code)(f)\n\n            self.record_once(from_..."
  },
  {
    "name": "app_url_value_preprocessor",
    "docstring": "Like :meth:`url_value_preprocessor`, but for every request, not only those\nhandled by the blueprint. Equivalent to :meth:`.Flask.url_value_preprocessor`.",
    "is_method": true,
    "class_name": "Blueprint",
    "parameters": [
      "self",
      "f"
    ],
    "calls": [
      "self.record_once",
      "append",
      "s.app.url_value_preprocessors.setdefault"
    ],
    "code_location": {
      "file": "blueprints.py",
      "path": "/data3/pwh/flask/src/flask/sansio",
      "start_line": 613,
      "end_line": 622
    },
    "code_snippet": "def app_url_value_preprocessor(\n        self, f: T_url_value_preprocessor\n    ) -> T_url_value_preprocessor:\n        \"\"\"Like :meth:`url_value_preprocessor`, but for every request, not only those\n        handled by the blueprint. Equivalent to :meth:`.Flask.url_value_preprocessor`.\n        \"\"\"\n        self.record_once(\n            lambda s: s.app.url_value_preprocessors.setdefault(None, []).append(f)\n        )\n        return f"
  },
  {
    "name": "app_url_defaults",
    "docstring": "Like :meth:`url_defaults`, but for every request, not only those handled by\nthe blueprint. Equivalent to :meth:`.Flask.url_defaults`.",
    "is_method": true,
    "class_name": "Blueprint",
    "parameters": [
      "self",
      "f"
    ],
    "calls": [
      "self.record_once",
      "append",
      "s.app.url_default_functions.setdefault"
    ],
    "code_location": {
      "file": "blueprints.py",
      "path": "/data3/pwh/flask/src/flask/sansio",
      "start_line": 625,
      "end_line": 632
    },
    "code_snippet": "def app_url_defaults(self, f: T_url_defaults) -> T_url_defaults:\n        \"\"\"Like :meth:`url_defaults`, but for every request, not only those handled by\n        the blueprint. Equivalent to :meth:`.Flask.url_defaults`.\n        \"\"\"\n        self.record_once(\n            lambda s: s.app.url_default_functions.setdefault(None, []).append(f)\n        )\n        return f"
  },
  {
    "name": "_make_timedelta",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "value"
    ],
    "calls": [
      "timedelta",
      "isinstance"
    ],
    "code_location": {
      "file": "app.py",
      "path": "/data3/pwh/flask/src/flask/sansio",
      "start_line": 52,
      "end_line": 56
    },
    "code_snippet": "def _make_timedelta(value: timedelta | int | None) -> timedelta | None:\n    if value is None or isinstance(value, timedelta):\n        return value\n\n    return timedelta(seconds=value)"
  },
  {
    "name": "__init__",
    "docstring": "",
    "is_method": true,
    "class_name": "App",
    "parameters": [
      "self",
      "import_name",
      "static_url_path",
      "static_folder",
      "static_host",
      "host_matching",
      "subdomain_matching",
      "template_folder",
      "instance_path",
      "instance_relative_config",
      "root_path"
    ],
    "calls": [
      "__init__",
      "self.make_config",
      "self.make_aborter",
      "self.json_provider_class",
      "self.url_map_class",
      "self.auto_find_instance_path",
      "super",
      "os.path.isabs",
      "ValueError"
    ],
    "code_location": {
      "file": "app.py",
      "path": "/data3/pwh/flask/src/flask/sansio",
      "start_line": 282,
      "end_line": 411
    },
    "code_snippet": "def __init__(\n        self,\n        import_name: str,\n        static_url_path: str | None = None,\n        static_folder: str | os.PathLike[str] | None = \"static\",\n        static_host: str | None = None,\n        host_matching: bool = False,\n        subdomain_matching: bool = False,\n        template_folder: str | os.PathLike[str] | None = \"templates\",\n        instance_path: str | None = None,\n        instance_relative_config: bool = False,\n        root_path: str | None = None,\n    ) -> None:\n     ..."
  },
  {
    "name": "_check_setup_finished",
    "docstring": "",
    "is_method": true,
    "class_name": "App",
    "parameters": [
      "self",
      "f_name"
    ],
    "calls": [
      "AssertionError"
    ],
    "code_location": {
      "file": "app.py",
      "path": "/data3/pwh/flask/src/flask/sansio",
      "start_line": 413,
      "end_line": 423
    },
    "code_snippet": "def _check_setup_finished(self, f_name: str) -> None:\n        if self._got_first_request:\n            raise AssertionError(\n                f\"The setup method '{f_name}' can no longer be called\"\n                \" on the application. It has already handled its first\"\n                \" request, any changes will not be applied\"\n                \" consistently.\\n\"\n                \"Make sure all imports, decorators, functions, etc.\"\n                \" needed to set up the application are done before\"\n ..."
  },
  {
    "name": "name",
    "docstring": "The name of the application.  This is usually the import name\nwith the difference that it's guessed from the run file if the\nimport name is main.  This name is used as a display name when\nFlask needs the name of the application.  It can be set and overridden\nto change the value.\n\n.. versionadded:: 0.8",
    "is_method": true,
    "class_name": "App",
    "parameters": [
      "self"
    ],
    "calls": [
      "getattr",
      "os.path.splitext",
      "os.path.basename"
    ],
    "code_location": {
      "file": "app.py",
      "path": "/data3/pwh/flask/src/flask/sansio",
      "start_line": 426,
      "end_line": 440
    },
    "code_snippet": "def name(self) -> str:\n        \"\"\"The name of the application.  This is usually the import name\n        with the difference that it's guessed from the run file if the\n        import name is main.  This name is used as a display name when\n        Flask needs the name of the application.  It can be set and overridden\n        to change the value.\n\n        .. versionadded:: 0.8\n        \"\"\"\n        if self.import_name == \"__main__\":\n            fn: str | None = getattr(sys.modules[\"__main__\"], \"__fil..."
  },
  {
    "name": "logger",
    "docstring": "A standard Python :class:`~logging.Logger` for the app, with\nthe same name as :attr:`name`.\n\nIn debug mode, the logger's :attr:`~logging.Logger.level` will\nbe set to :data:`~logging.DEBUG`.\n\nIf there are no handlers configured, a default handler will be\nadded. See :doc:`/logging` for more information.\n\n.. versionchanged:: 1.1.0\n    The logger takes the same name as :attr:`name` rather than\n    hard-coding ``\"flask.app\"``.\n\n.. versionchanged:: 1.0.0\n    Behavior was simplified. The logger is always named\n    ``\"flask.app\"``. The level is only set during configuration,\n    it doesn't check ``app.debug`` each time. Only one format is\n    used, not different ones depending on ``app.debug``. No\n    handlers are removed, and a handler is only added if no\n    handlers are already configured.\n\n.. versionadded:: 0.3",
    "is_method": true,
    "class_name": "App",
    "parameters": [
      "self"
    ],
    "calls": [
      "create_logger"
    ],
    "code_location": {
      "file": "app.py",
      "path": "/data3/pwh/flask/src/flask/sansio",
      "start_line": 443,
      "end_line": 467
    },
    "code_snippet": "def logger(self) -> logging.Logger:\n        \"\"\"A standard Python :class:`~logging.Logger` for the app, with\n        the same name as :attr:`name`.\n\n        In debug mode, the logger's :attr:`~logging.Logger.level` will\n        be set to :data:`~logging.DEBUG`.\n\n        If there are no handlers configured, a default handler will be\n        added. See :doc:`/logging` for more information.\n\n        .. versionchanged:: 1.1.0\n            The logger takes the same name as :attr:`name` rather than\n    ..."
  },
  {
    "name": "jinja_env",
    "docstring": "The Jinja environment used to load templates.\n\nThe environment is created the first time this property is\naccessed. Changing :attr:`jinja_options` after that will have no\neffect.",
    "is_method": true,
    "class_name": "App",
    "parameters": [
      "self"
    ],
    "calls": [
      "self.create_jinja_environment"
    ],
    "code_location": {
      "file": "app.py",
      "path": "/data3/pwh/flask/src/flask/sansio",
      "start_line": 470,
      "end_line": 477
    },
    "code_snippet": "def jinja_env(self) -> Environment:\n        \"\"\"The Jinja environment used to load templates.\n\n        The environment is created the first time this property is\n        accessed. Changing :attr:`jinja_options` after that will have no\n        effect.\n        \"\"\"\n        return self.create_jinja_environment()"
  },
  {
    "name": "create_jinja_environment",
    "docstring": "",
    "is_method": true,
    "class_name": "App",
    "parameters": [
      "self"
    ],
    "calls": [
      "NotImplementedError"
    ],
    "code_location": {
      "file": "app.py",
      "path": "/data3/pwh/flask/src/flask/sansio",
      "start_line": 479,
      "end_line": 480
    },
    "code_snippet": "def create_jinja_environment(self) -> Environment:\n        raise NotImplementedError()"
  },
  {
    "name": "make_config",
    "docstring": "Used to create the config attribute by the Flask constructor.\nThe `instance_relative` parameter is passed in from the constructor\nof Flask (there named `instance_relative_config`) and indicates if\nthe config should be relative to the instance path or the root path\nof the application.\n\n.. versionadded:: 0.8",
    "is_method": true,
    "class_name": "App",
    "parameters": [
      "self",
      "instance_relative"
    ],
    "calls": [
      "dict",
      "get_debug_flag",
      "self.config_class"
    ],
    "code_location": {
      "file": "app.py",
      "path": "/data3/pwh/flask/src/flask/sansio",
      "start_line": 482,
      "end_line": 496
    },
    "code_snippet": "def make_config(self, instance_relative: bool = False) -> Config:\n        \"\"\"Used to create the config attribute by the Flask constructor.\n        The `instance_relative` parameter is passed in from the constructor\n        of Flask (there named `instance_relative_config`) and indicates if\n        the config should be relative to the instance path or the root path\n        of the application.\n\n        .. versionadded:: 0.8\n        \"\"\"\n        root_path = self.root_path\n        if instance_relative..."
  },
  {
    "name": "make_aborter",
    "docstring": "Create the object to assign to :attr:`aborter`. That object\nis called by :func:`flask.abort` to raise HTTP errors, and can\nbe called directly as well.\n\nBy default, this creates an instance of :attr:`aborter_class`,\nwhich defaults to :class:`werkzeug.exceptions.Aborter`.\n\n.. versionadded:: 2.2",
    "is_method": true,
    "class_name": "App",
    "parameters": [
      "self"
    ],
    "calls": [
      "self.aborter_class"
    ],
    "code_location": {
      "file": "app.py",
      "path": "/data3/pwh/flask/src/flask/sansio",
      "start_line": 498,
      "end_line": 508
    },
    "code_snippet": "def make_aborter(self) -> Aborter:\n        \"\"\"Create the object to assign to :attr:`aborter`. That object\n        is called by :func:`flask.abort` to raise HTTP errors, and can\n        be called directly as well.\n\n        By default, this creates an instance of :attr:`aborter_class`,\n        which defaults to :class:`werkzeug.exceptions.Aborter`.\n\n        .. versionadded:: 2.2\n        \"\"\"\n        return self.aborter_class()"
  },
  {
    "name": "auto_find_instance_path",
    "docstring": "Tries to locate the instance path if it was not provided to the\nconstructor of the application class.  It will basically calculate\nthe path to a folder named ``instance`` next to your main file or\nthe package.\n\n.. versionadded:: 0.8",
    "is_method": true,
    "class_name": "App",
    "parameters": [
      "self"
    ],
    "calls": [
      "find_package",
      "os.path.join",
      "os.path.join"
    ],
    "code_location": {
      "file": "app.py",
      "path": "/data3/pwh/flask/src/flask/sansio",
      "start_line": 510,
      "end_line": 521
    },
    "code_snippet": "def auto_find_instance_path(self) -> str:\n        \"\"\"Tries to locate the instance path if it was not provided to the\n        constructor of the application class.  It will basically calculate\n        the path to a folder named ``instance`` next to your main file or\n        the package.\n\n        .. versionadded:: 0.8\n        \"\"\"\n        prefix, package_path = find_package(self.import_name)\n        if prefix is None:\n            return os.path.join(package_path, \"instance\")\n        return os.path...."
  },
  {
    "name": "create_global_jinja_loader",
    "docstring": "Creates the loader for the Jinja2 environment.  Can be used to\noverride just the loader and keeping the rest unchanged.  It's\ndiscouraged to override this function.  Instead one should override\nthe :meth:`jinja_loader` function instead.\n\nThe global loader dispatches between the loaders of the application\nand the individual blueprints.\n\n.. versionadded:: 0.7",
    "is_method": true,
    "class_name": "App",
    "parameters": [
      "self"
    ],
    "calls": [
      "DispatchingJinjaLoader"
    ],
    "code_location": {
      "file": "app.py",
      "path": "/data3/pwh/flask/src/flask/sansio",
      "start_line": 523,
      "end_line": 534
    },
    "code_snippet": "def create_global_jinja_loader(self) -> DispatchingJinjaLoader:\n        \"\"\"Creates the loader for the Jinja2 environment.  Can be used to\n        override just the loader and keeping the rest unchanged.  It's\n        discouraged to override this function.  Instead one should override\n        the :meth:`jinja_loader` function instead.\n\n        The global loader dispatches between the loaders of the application\n        and the individual blueprints.\n\n        .. versionadded:: 0.7\n        \"\"\"\n     ..."
  },
  {
    "name": "select_jinja_autoescape",
    "docstring": "Returns ``True`` if autoescaping should be active for the given\ntemplate name. If no template name is given, returns `True`.\n\n.. versionchanged:: 2.2\n    Autoescaping is now enabled by default for ``.svg`` files.\n\n.. versionadded:: 0.5",
    "is_method": true,
    "class_name": "App",
    "parameters": [
      "self",
      "filename"
    ],
    "calls": [
      "filename.endswith"
    ],
    "code_location": {
      "file": "app.py",
      "path": "/data3/pwh/flask/src/flask/sansio",
      "start_line": 536,
      "end_line": 547
    },
    "code_snippet": "def select_jinja_autoescape(self, filename: str) -> bool:\n        \"\"\"Returns ``True`` if autoescaping should be active for the given\n        template name. If no template name is given, returns `True`.\n\n        .. versionchanged:: 2.2\n            Autoescaping is now enabled by default for ``.svg`` files.\n\n        .. versionadded:: 0.5\n        \"\"\"\n        if filename is None:\n            return True\n        return filename.endswith((\".html\", \".htm\", \".xml\", \".xhtml\", \".svg\"))"
  },
  {
    "name": "debug",
    "docstring": "Whether debug mode is enabled. When using ``flask run`` to start the\ndevelopment server, an interactive debugger will be shown for unhandled\nexceptions, and the server will be reloaded when code changes. This maps to the\n:data:`DEBUG` config key. It may not behave as expected if set late.\n\n**Do not enable debug mode when deploying in production.**\n\nDefault: ``False``",
    "is_method": true,
    "class_name": "App",
    "parameters": [
      "self"
    ],
    "calls": [],
    "code_location": {
      "file": "app.py",
      "path": "/data3/pwh/flask/src/flask/sansio",
      "start_line": 550,
      "end_line": 560
    },
    "code_snippet": "def debug(self) -> bool:\n        \"\"\"Whether debug mode is enabled. When using ``flask run`` to start the\n        development server, an interactive debugger will be shown for unhandled\n        exceptions, and the server will be reloaded when code changes. This maps to the\n        :data:`DEBUG` config key. It may not behave as expected if set late.\n\n        **Do not enable debug mode when deploying in production.**\n\n        Default: ``False``\n        \"\"\"\n        return self.config[\"DEBUG\"]"
  },
  {
    "name": "debug",
    "docstring": "",
    "is_method": true,
    "class_name": "App",
    "parameters": [
      "self",
      "value"
    ],
    "calls": [],
    "code_location": {
      "file": "app.py",
      "path": "/data3/pwh/flask/src/flask/sansio",
      "start_line": 563,
      "end_line": 567
    },
    "code_snippet": "def debug(self, value: bool) -> None:\n        self.config[\"DEBUG\"] = value\n\n        if self.config[\"TEMPLATES_AUTO_RELOAD\"] is None:\n            self.jinja_env.auto_reload = value"
  },
  {
    "name": "register_blueprint",
    "docstring": "Register a :class:`~flask.Blueprint` on the application. Keyword\narguments passed to this method will override the defaults set on the\nblueprint.\n\nCalls the blueprint's :meth:`~flask.Blueprint.register` method after\nrecording the blueprint in the application's :attr:`blueprints`.\n\n:param blueprint: The blueprint to register.\n:param url_prefix: Blueprint routes will be prefixed with this.\n:param subdomain: Blueprint routes will match on this subdomain.\n:param url_defaults: Blueprint routes will use these default values for\n    view arguments.\n:param options: Additional keyword arguments are passed to\n    :class:`~flask.blueprints.BlueprintSetupState`. They can be\n    accessed in :meth:`~flask.Blueprint.record` callbacks.\n\n.. versionchanged:: 2.0.1\n    The ``name`` option can be used to change the (pre-dotted)\n    name the blueprint is registered with. This allows the same\n    blueprint to be registered multiple times with unique names\n    for ``url_for``.\n\n.. versionadded:: 0.7",
    "is_method": true,
    "class_name": "App",
    "parameters": [
      "self",
      "blueprint"
    ],
    "calls": [
      "blueprint.register"
    ],
    "code_location": {
      "file": "app.py",
      "path": "/data3/pwh/flask/src/flask/sansio",
      "start_line": 570,
      "end_line": 595
    },
    "code_snippet": "def register_blueprint(self, blueprint: Blueprint, **options: t.Any) -> None:\n        \"\"\"Register a :class:`~flask.Blueprint` on the application. Keyword\n        arguments passed to this method will override the defaults set on the\n        blueprint.\n\n        Calls the blueprint's :meth:`~flask.Blueprint.register` method after\n        recording the blueprint in the application's :attr:`blueprints`.\n\n        :param blueprint: The blueprint to register.\n        :param url_prefix: Blueprint routes ..."
  },
  {
    "name": "iter_blueprints",
    "docstring": "Iterates over all blueprints by the order they were registered.\n\n.. versionadded:: 0.11",
    "is_method": true,
    "class_name": "App",
    "parameters": [
      "self"
    ],
    "calls": [
      "self.blueprints.values"
    ],
    "code_location": {
      "file": "app.py",
      "path": "/data3/pwh/flask/src/flask/sansio",
      "start_line": 597,
      "end_line": 602
    },
    "code_snippet": "def iter_blueprints(self) -> t.ValuesView[Blueprint]:\n        \"\"\"Iterates over all blueprints by the order they were registered.\n\n        .. versionadded:: 0.11\n        \"\"\"\n        return self.blueprints.values()"
  },
  {
    "name": "add_url_rule",
    "docstring": "",
    "is_method": true,
    "class_name": "App",
    "parameters": [
      "self",
      "rule",
      "endpoint",
      "view_func",
      "provide_automatic_options"
    ],
    "calls": [
      "options.pop",
      "isinstance",
      "set",
      "self.url_rule_class",
      "self.url_map.add",
      "_endpoint_from_view_func",
      "TypeError",
      "item.upper",
      "getattr",
      "getattr",
      "self.view_functions.get",
      "getattr",
      "required_methods.add",
      "AssertionError"
    ],
    "code_location": {
      "file": "app.py",
      "path": "/data3/pwh/flask/src/flask/sansio",
      "start_line": 605,
      "end_line": 661
    },
    "code_snippet": "def add_url_rule(\n        self,\n        rule: str,\n        endpoint: str | None = None,\n        view_func: ft.RouteCallable | None = None,\n        provide_automatic_options: bool | None = None,\n        **options: t.Any,\n    ) -> None:\n        if endpoint is None:\n            endpoint = _endpoint_from_view_func(view_func)  # type: ignore\n        options[\"endpoint\"] = endpoint\n        methods = options.pop(\"methods\", None)\n\n        # if the methods are not given and the view_func object knows its\n..."
  },
  {
    "name": "template_filter",
    "docstring": "A decorator that is used to register custom template filter.\nYou can specify a name for the filter, otherwise the function\nname will be used. Example::\n\n  @app.template_filter()\n  def reverse(s):\n      return s[::-1]\n\n:param name: the optional name of the filter, otherwise the\n             function name will be used.",
    "is_method": true,
    "class_name": "App",
    "parameters": [
      "self",
      "name"
    ],
    "calls": [
      "self.add_template_filter"
    ],
    "code_location": {
      "file": "app.py",
      "path": "/data3/pwh/flask/src/flask/sansio",
      "start_line": 664,
      "end_line": 683
    },
    "code_snippet": "def template_filter(\n        self, name: str | None = None\n    ) -> t.Callable[[T_template_filter], T_template_filter]:\n        \"\"\"A decorator that is used to register custom template filter.\n        You can specify a name for the filter, otherwise the function\n        name will be used. Example::\n\n          @app.template_filter()\n          def reverse(s):\n              return s[::-1]\n\n        :param name: the optional name of the filter, otherwise the\n                     function name will be ..."
  },
  {
    "name": "add_template_filter",
    "docstring": "Register a custom template filter.  Works exactly like the\n:meth:`template_filter` decorator.\n\n:param name: the optional name of the filter, otherwise the\n             function name will be used.",
    "is_method": true,
    "class_name": "App",
    "parameters": [
      "self",
      "f",
      "name"
    ],
    "calls": [],
    "code_location": {
      "file": "app.py",
      "path": "/data3/pwh/flask/src/flask/sansio",
      "start_line": 686,
      "end_line": 695
    },
    "code_snippet": "def add_template_filter(\n        self, f: ft.TemplateFilterCallable, name: str | None = None\n    ) -> None:\n        \"\"\"Register a custom template filter.  Works exactly like the\n        :meth:`template_filter` decorator.\n\n        :param name: the optional name of the filter, otherwise the\n                     function name will be used.\n        \"\"\"\n        self.jinja_env.filters[name or f.__name__] = f"
  },
  {
    "name": "template_test",
    "docstring": "A decorator that is used to register custom template test.\nYou can specify a name for the test, otherwise the function\nname will be used. Example::\n\n  @app.template_test()\n  def is_prime(n):\n      if n == 2:\n          return True\n      for i in range(2, int(math.ceil(math.sqrt(n))) + 1):\n          if n % i == 0:\n              return False\n      return True\n\n.. versionadded:: 0.10\n\n:param name: the optional name of the test, otherwise the\n             function name will be used.",
    "is_method": true,
    "class_name": "App",
    "parameters": [
      "self",
      "name"
    ],
    "calls": [
      "self.add_template_test"
    ],
    "code_location": {
      "file": "app.py",
      "path": "/data3/pwh/flask/src/flask/sansio",
      "start_line": 698,
      "end_line": 724
    },
    "code_snippet": "def template_test(\n        self, name: str | None = None\n    ) -> t.Callable[[T_template_test], T_template_test]:\n        \"\"\"A decorator that is used to register custom template test.\n        You can specify a name for the test, otherwise the function\n        name will be used. Example::\n\n          @app.template_test()\n          def is_prime(n):\n              if n == 2:\n                  return True\n              for i in range(2, int(math.ceil(math.sqrt(n))) + 1):\n                  if n % i == ..."
  },
  {
    "name": "add_template_test",
    "docstring": "Register a custom template test.  Works exactly like the\n:meth:`template_test` decorator.\n\n.. versionadded:: 0.10\n\n:param name: the optional name of the test, otherwise the\n             function name will be used.",
    "is_method": true,
    "class_name": "App",
    "parameters": [
      "self",
      "f",
      "name"
    ],
    "calls": [],
    "code_location": {
      "file": "app.py",
      "path": "/data3/pwh/flask/src/flask/sansio",
      "start_line": 727,
      "end_line": 738
    },
    "code_snippet": "def add_template_test(\n        self, f: ft.TemplateTestCallable, name: str | None = None\n    ) -> None:\n        \"\"\"Register a custom template test.  Works exactly like the\n        :meth:`template_test` decorator.\n\n        .. versionadded:: 0.10\n\n        :param name: the optional name of the test, otherwise the\n                     function name will be used.\n        \"\"\"\n        self.jinja_env.tests[name or f.__name__] = f"
  },
  {
    "name": "template_global",
    "docstring": "A decorator that is used to register a custom template global function.\nYou can specify a name for the global function, otherwise the function\nname will be used. Example::\n\n    @app.template_global()\n    def double(n):\n        return 2 * n\n\n.. versionadded:: 0.10\n\n:param name: the optional name of the global function, otherwise the\n             function name will be used.",
    "is_method": true,
    "class_name": "App",
    "parameters": [
      "self",
      "name"
    ],
    "calls": [
      "self.add_template_global"
    ],
    "code_location": {
      "file": "app.py",
      "path": "/data3/pwh/flask/src/flask/sansio",
      "start_line": 741,
      "end_line": 762
    },
    "code_snippet": "def template_global(\n        self, name: str | None = None\n    ) -> t.Callable[[T_template_global], T_template_global]:\n        \"\"\"A decorator that is used to register a custom template global function.\n        You can specify a name for the global function, otherwise the function\n        name will be used. Example::\n\n            @app.template_global()\n            def double(n):\n                return 2 * n\n\n        .. versionadded:: 0.10\n\n        :param name: the optional name of the global fun..."
  },
  {
    "name": "add_template_global",
    "docstring": "Register a custom template global function. Works exactly like the\n:meth:`template_global` decorator.\n\n.. versionadded:: 0.10\n\n:param name: the optional name of the global function, otherwise the\n             function name will be used.",
    "is_method": true,
    "class_name": "App",
    "parameters": [
      "self",
      "f",
      "name"
    ],
    "calls": [],
    "code_location": {
      "file": "app.py",
      "path": "/data3/pwh/flask/src/flask/sansio",
      "start_line": 765,
      "end_line": 776
    },
    "code_snippet": "def add_template_global(\n        self, f: ft.TemplateGlobalCallable, name: str | None = None\n    ) -> None:\n        \"\"\"Register a custom template global function. Works exactly like the\n        :meth:`template_global` decorator.\n\n        .. versionadded:: 0.10\n\n        :param name: the optional name of the global function, otherwise the\n                     function name will be used.\n        \"\"\"\n        self.jinja_env.globals[name or f.__name__] = f"
  },
  {
    "name": "teardown_appcontext",
    "docstring": "Registers a function to be called when the application\ncontext is popped. The application context is typically popped\nafter the request context for each request, at the end of CLI\ncommands, or after a manually pushed context ends.\n\n.. code-block:: python\n\n    with app.app_context():\n        ...\n\nWhen the ``with`` block exits (or ``ctx.pop()`` is called), the\nteardown functions are called just before the app context is\nmade inactive. Since a request context typically also manages an\napplication context it would also be called when you pop a\nrequest context.\n\nWhen a teardown function was called because of an unhandled\nexception it will be passed an error object. If an\n:meth:`errorhandler` is registered, it will handle the exception\nand the teardown will not receive it.\n\nTeardown functions must avoid raising exceptions. If they\nexecute code that might fail they must surround that code with a\n``try``/``except`` block and log any errors.\n\nThe return values of teardown functions are ignored.\n\n.. versionadded:: 0.9",
    "is_method": true,
    "class_name": "App",
    "parameters": [
      "self",
      "f"
    ],
    "calls": [
      "self.teardown_appcontext_funcs.append"
    ],
    "code_location": {
      "file": "app.py",
      "path": "/data3/pwh/flask/src/flask/sansio",
      "start_line": 779,
      "end_line": 810
    },
    "code_snippet": "def teardown_appcontext(self, f: T_teardown) -> T_teardown:\n        \"\"\"Registers a function to be called when the application\n        context is popped. The application context is typically popped\n        after the request context for each request, at the end of CLI\n        commands, or after a manually pushed context ends.\n\n        .. code-block:: python\n\n            with app.app_context():\n                ...\n\n        When the ``with`` block exits (or ``ctx.pop()`` is called), the\n        tear..."
  },
  {
    "name": "shell_context_processor",
    "docstring": "Registers a shell context processor function.\n\n.. versionadded:: 0.11",
    "is_method": true,
    "class_name": "App",
    "parameters": [
      "self",
      "f"
    ],
    "calls": [
      "self.shell_context_processors.append"
    ],
    "code_location": {
      "file": "app.py",
      "path": "/data3/pwh/flask/src/flask/sansio",
      "start_line": 813,
      "end_line": 821
    },
    "code_snippet": "def shell_context_processor(\n        self, f: T_shell_context_processor\n    ) -> T_shell_context_processor:\n        \"\"\"Registers a shell context processor function.\n\n        .. versionadded:: 0.11\n        \"\"\"\n        self.shell_context_processors.append(f)\n        return f"
  },
  {
    "name": "_find_error_handler",
    "docstring": "Return a registered error handler for an exception in this order:\nblueprint handler for a specific code, app handler for a specific code,\nblueprint handler for an exception class, app handler for an exception\nclass, or ``None`` if a suitable handler is not found.",
    "is_method": true,
    "class_name": "App",
    "parameters": [
      "self",
      "e",
      "blueprints"
    ],
    "calls": [
      "self._get_exc_class_and_code",
      "type",
      "handler_map.get"
    ],
    "code_location": {
      "file": "app.py",
      "path": "/data3/pwh/flask/src/flask/sansio",
      "start_line": 823,
      "end_line": 846
    },
    "code_snippet": "def _find_error_handler(\n        self, e: Exception, blueprints: list[str]\n    ) -> ft.ErrorHandlerCallable | None:\n        \"\"\"Return a registered error handler for an exception in this order:\n        blueprint handler for a specific code, app handler for a specific code,\n        blueprint handler for an exception class, app handler for an exception\n        class, or ``None`` if a suitable handler is not found.\n        \"\"\"\n        exc_class, code = self._get_exc_class_and_code(type(e))\n        n..."
  },
  {
    "name": "trap_http_exception",
    "docstring": "Checks if an HTTP exception should be trapped or not.  By default\nthis will return ``False`` for all exceptions except for a bad request\nkey error if ``TRAP_BAD_REQUEST_ERRORS`` is set to ``True``.  It\nalso returns ``True`` if ``TRAP_HTTP_EXCEPTIONS`` is set to ``True``.\n\nThis is called for all HTTP exceptions raised by a view function.\nIf it returns ``True`` for any exception the error handler for this\nexception is not called and it shows up as regular exception in the\ntraceback.  This is helpful for debugging implicitly raised HTTP\nexceptions.\n\n.. versionchanged:: 1.0\n    Bad request errors are not trapped by default in debug mode.\n\n.. versionadded:: 0.8",
    "is_method": true,
    "class_name": "App",
    "parameters": [
      "self",
      "e"
    ],
    "calls": [
      "isinstance",
      "isinstance"
    ],
    "code_location": {
      "file": "app.py",
      "path": "/data3/pwh/flask/src/flask/sansio",
      "start_line": 848,
      "end_line": 881
    },
    "code_snippet": "def trap_http_exception(self, e: Exception) -> bool:\n        \"\"\"Checks if an HTTP exception should be trapped or not.  By default\n        this will return ``False`` for all exceptions except for a bad request\n        key error if ``TRAP_BAD_REQUEST_ERRORS`` is set to ``True``.  It\n        also returns ``True`` if ``TRAP_HTTP_EXCEPTIONS`` is set to ``True``.\n\n        This is called for all HTTP exceptions raised by a view function.\n        If it returns ``True`` for any exception the error handle..."
  },
  {
    "name": "should_ignore_error",
    "docstring": "This is called to figure out if an error should be ignored\nor not as far as the teardown system is concerned.  If this\nfunction returns ``True`` then the teardown handlers will not be\npassed the error.\n\n.. versionadded:: 0.10",
    "is_method": true,
    "class_name": "App",
    "parameters": [
      "self",
      "error"
    ],
    "calls": [],
    "code_location": {
      "file": "app.py",
      "path": "/data3/pwh/flask/src/flask/sansio",
      "start_line": 883,
      "end_line": 891
    },
    "code_snippet": "def should_ignore_error(self, error: BaseException | None) -> bool:\n        \"\"\"This is called to figure out if an error should be ignored\n        or not as far as the teardown system is concerned.  If this\n        function returns ``True`` then the teardown handlers will not be\n        passed the error.\n\n        .. versionadded:: 0.10\n        \"\"\"\n        return False"
  },
  {
    "name": "redirect",
    "docstring": "Create a redirect response object.\n\nThis is called by :func:`flask.redirect`, and can be called\ndirectly as well.\n\n:param location: The URL to redirect to.\n:param code: The status code for the redirect.\n\n.. versionadded:: 2.2\n    Moved from ``flask.redirect``, which calls this method.",
    "is_method": true,
    "class_name": "App",
    "parameters": [
      "self",
      "location",
      "code"
    ],
    "calls": [
      "_wz_redirect"
    ],
    "code_location": {
      "file": "app.py",
      "path": "/data3/pwh/flask/src/flask/sansio",
      "start_line": 893,
      "end_line": 909
    },
    "code_snippet": "def redirect(self, location: str, code: int = 302) -> BaseResponse:\n        \"\"\"Create a redirect response object.\n\n        This is called by :func:`flask.redirect`, and can be called\n        directly as well.\n\n        :param location: The URL to redirect to.\n        :param code: The status code for the redirect.\n\n        .. versionadded:: 2.2\n            Moved from ``flask.redirect``, which calls this method.\n        \"\"\"\n        return _wz_redirect(\n            location,\n            code=code,\n ..."
  },
  {
    "name": "inject_url_defaults",
    "docstring": "Injects the URL defaults for the given endpoint directly into\nthe values dictionary passed.  This is used internally and\nautomatically called on URL building.\n\n.. versionadded:: 0.7",
    "is_method": true,
    "class_name": "App",
    "parameters": [
      "self",
      "endpoint",
      "values"
    ],
    "calls": [
      "chain",
      "reversed",
      "_split_blueprint_path",
      "func",
      "endpoint.rpartition"
    ],
    "code_location": {
      "file": "app.py",
      "path": "/data3/pwh/flask/src/flask/sansio",
      "start_line": 911,
      "end_line": 930
    },
    "code_snippet": "def inject_url_defaults(self, endpoint: str, values: dict[str, t.Any]) -> None:\n        \"\"\"Injects the URL defaults for the given endpoint directly into\n        the values dictionary passed.  This is used internally and\n        automatically called on URL building.\n\n        .. versionadded:: 0.7\n        \"\"\"\n        names: t.Iterable[str | None] = (None,)\n\n        # url_for may be called outside a request context, parse the\n        # passed endpoint instead of using request.blueprints.\n        if..."
  },
  {
    "name": "handle_url_build_error",
    "docstring": "Called by :meth:`.url_for` if a\n:exc:`~werkzeug.routing.BuildError` was raised. If this returns\na value, it will be returned by ``url_for``, otherwise the error\nwill be re-raised.\n\nEach function in :attr:`url_build_error_handlers` is called with\n``error``, ``endpoint`` and ``values``. If a function returns\n``None`` or raises a ``BuildError``, it is skipped. Otherwise,\nits return value is returned by ``url_for``.\n\n:param error: The active ``BuildError`` being handled.\n:param endpoint: The endpoint being built.\n:param values: The keyword arguments passed to ``url_for``.",
    "is_method": true,
    "class_name": "App",
    "parameters": [
      "self",
      "error",
      "endpoint",
      "values"
    ],
    "calls": [
      "handler",
      "sys.exc_info"
    ],
    "code_location": {
      "file": "app.py",
      "path": "/data3/pwh/flask/src/flask/sansio",
      "start_line": 932,
      "end_line": 964
    },
    "code_snippet": "def handle_url_build_error(\n        self, error: BuildError, endpoint: str, values: dict[str, t.Any]\n    ) -> str:\n        \"\"\"Called by :meth:`.url_for` if a\n        :exc:`~werkzeug.routing.BuildError` was raised. If this returns\n        a value, it will be returned by ``url_for``, otherwise the error\n        will be re-raised.\n\n        Each function in :attr:`url_build_error_handlers` is called with\n        ``error``, ``endpoint`` and ``values``. If a function returns\n        ``None`` or raises..."
  },
  {
    "name": "setupmethod",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "f"
    ],
    "calls": [
      "t.cast",
      "self._check_setup_finished",
      "f",
      "update_wrapper"
    ],
    "code_location": {
      "file": "scaffold.py",
      "path": "/data3/pwh/flask/src/flask/sansio",
      "start_line": 42,
      "end_line": 49
    },
    "code_snippet": "def setupmethod(f: F) -> F:\n    f_name = f.__name__\n\n    def wrapper_func(self: Scaffold, *args: t.Any, **kwargs: t.Any) -> t.Any:\n        self._check_setup_finished(f_name)\n        return f(self, *args, **kwargs)\n\n    return t.cast(F, update_wrapper(wrapper_func, f))"
  },
  {
    "name": "__init__",
    "docstring": "",
    "is_method": true,
    "class_name": "Scaffold",
    "parameters": [
      "self",
      "import_name",
      "static_folder",
      "static_url_path",
      "template_folder",
      "root_path"
    ],
    "calls": [
      "defaultdict",
      "defaultdict",
      "defaultdict",
      "defaultdict",
      "defaultdict",
      "defaultdict",
      "defaultdict",
      "get_root_path",
      "defaultdict"
    ],
    "code_location": {
      "file": "scaffold.py",
      "path": "/data3/pwh/flask/src/flask/sansio",
      "start_line": 75,
      "end_line": 215
    },
    "code_snippet": "def __init__(\n        self,\n        import_name: str,\n        static_folder: str | os.PathLike[str] | None = None,\n        static_url_path: str | None = None,\n        template_folder: str | os.PathLike[str] | None = None,\n        root_path: str | None = None,\n    ):\n        #: The name of the package or module that this object belongs\n        #: to. Do not change this once it is set by the constructor.\n        self.import_name = import_name\n\n        self.static_folder = static_folder\n        sel..."
  },
  {
    "name": "__repr__",
    "docstring": "",
    "is_method": true,
    "class_name": "Scaffold",
    "parameters": [
      "self"
    ],
    "calls": [
      "type"
    ],
    "code_location": {
      "file": "scaffold.py",
      "path": "/data3/pwh/flask/src/flask/sansio",
      "start_line": 217,
      "end_line": 218
    },
    "code_snippet": "def __repr__(self) -> str:\n        return f\"<{type(self).__name__} {self.name!r}>\""
  },
  {
    "name": "_check_setup_finished",
    "docstring": "",
    "is_method": true,
    "class_name": "Scaffold",
    "parameters": [
      "self",
      "f_name"
    ],
    "calls": [],
    "code_location": {
      "file": "scaffold.py",
      "path": "/data3/pwh/flask/src/flask/sansio",
      "start_line": 220,
      "end_line": 221
    },
    "code_snippet": "def _check_setup_finished(self, f_name: str) -> None:\n        raise NotImplementedError"
  },
  {
    "name": "static_folder",
    "docstring": "The absolute path to the configured static folder. ``None``\nif no static folder is set.",
    "is_method": true,
    "class_name": "Scaffold",
    "parameters": [
      "self"
    ],
    "calls": [
      "os.path.join"
    ],
    "code_location": {
      "file": "scaffold.py",
      "path": "/data3/pwh/flask/src/flask/sansio",
      "start_line": 224,
      "end_line": 231
    },
    "code_snippet": "def static_folder(self) -> str | None:\n        \"\"\"The absolute path to the configured static folder. ``None``\n        if no static folder is set.\n        \"\"\"\n        if self._static_folder is not None:\n            return os.path.join(self.root_path, self._static_folder)\n        else:\n            return None"
  },
  {
    "name": "static_folder",
    "docstring": "",
    "is_method": true,
    "class_name": "Scaffold",
    "parameters": [
      "self",
      "value"
    ],
    "calls": [
      "rstrip",
      "os.fspath"
    ],
    "code_location": {
      "file": "scaffold.py",
      "path": "/data3/pwh/flask/src/flask/sansio",
      "start_line": 234,
      "end_line": 238
    },
    "code_snippet": "def static_folder(self, value: str | os.PathLike[str] | None) -> None:\n        if value is not None:\n            value = os.fspath(value).rstrip(r\"\\/\")\n\n        self._static_folder = value"
  },
  {
    "name": "has_static_folder",
    "docstring": "``True`` if :attr:`static_folder` is set.\n\n.. versionadded:: 0.5",
    "is_method": true,
    "class_name": "Scaffold",
    "parameters": [
      "self"
    ],
    "calls": [],
    "code_location": {
      "file": "scaffold.py",
      "path": "/data3/pwh/flask/src/flask/sansio",
      "start_line": 241,
      "end_line": 246
    },
    "code_snippet": "def has_static_folder(self) -> bool:\n        \"\"\"``True`` if :attr:`static_folder` is set.\n\n        .. versionadded:: 0.5\n        \"\"\"\n        return self.static_folder is not None"
  },
  {
    "name": "static_url_path",
    "docstring": "The URL prefix that the static route will be accessible from.\n\nIf it was not configured during init, it is derived from\n:attr:`static_folder`.",
    "is_method": true,
    "class_name": "Scaffold",
    "parameters": [
      "self"
    ],
    "calls": [
      "os.path.basename",
      "rstrip"
    ],
    "code_location": {
      "file": "scaffold.py",
      "path": "/data3/pwh/flask/src/flask/sansio",
      "start_line": 249,
      "end_line": 262
    },
    "code_snippet": "def static_url_path(self) -> str | None:\n        \"\"\"The URL prefix that the static route will be accessible from.\n\n        If it was not configured during init, it is derived from\n        :attr:`static_folder`.\n        \"\"\"\n        if self._static_url_path is not None:\n            return self._static_url_path\n\n        if self.static_folder is not None:\n            basename = os.path.basename(self.static_folder)\n            return f\"/{basename}\".rstrip(\"/\")\n\n        return None"
  },
  {
    "name": "static_url_path",
    "docstring": "",
    "is_method": true,
    "class_name": "Scaffold",
    "parameters": [
      "self",
      "value"
    ],
    "calls": [
      "value.rstrip"
    ],
    "code_location": {
      "file": "scaffold.py",
      "path": "/data3/pwh/flask/src/flask/sansio",
      "start_line": 265,
      "end_line": 269
    },
    "code_snippet": "def static_url_path(self, value: str | None) -> None:\n        if value is not None:\n            value = value.rstrip(\"/\")\n\n        self._static_url_path = value"
  },
  {
    "name": "jinja_loader",
    "docstring": "The Jinja loader for this object's templates. By default this\nis a class :class:`jinja2.loaders.FileSystemLoader` to\n:attr:`template_folder` if it is set.\n\n.. versionadded:: 0.5",
    "is_method": true,
    "class_name": "Scaffold",
    "parameters": [
      "self"
    ],
    "calls": [
      "FileSystemLoader",
      "os.path.join"
    ],
    "code_location": {
      "file": "scaffold.py",
      "path": "/data3/pwh/flask/src/flask/sansio",
      "start_line": 272,
      "end_line": 282
    },
    "code_snippet": "def jinja_loader(self) -> BaseLoader | None:\n        \"\"\"The Jinja loader for this object's templates. By default this\n        is a class :class:`jinja2.loaders.FileSystemLoader` to\n        :attr:`template_folder` if it is set.\n\n        .. versionadded:: 0.5\n        \"\"\"\n        if self.template_folder is not None:\n            return FileSystemLoader(os.path.join(self.root_path, self.template_folder))\n        else:\n            return None"
  },
  {
    "name": "_method_route",
    "docstring": "",
    "is_method": true,
    "class_name": "Scaffold",
    "parameters": [
      "self",
      "method",
      "rule",
      "options"
    ],
    "calls": [
      "self.route",
      "TypeError"
    ],
    "code_location": {
      "file": "scaffold.py",
      "path": "/data3/pwh/flask/src/flask/sansio",
      "start_line": 284,
      "end_line": 293
    },
    "code_snippet": "def _method_route(\n        self,\n        method: str,\n        rule: str,\n        options: dict[str, t.Any],\n    ) -> t.Callable[[T_route], T_route]:\n        if \"methods\" in options:\n            raise TypeError(\"Use the 'route' decorator to use the 'methods' argument.\")\n\n        return self.route(rule, methods=[method], **options)"
  },
  {
    "name": "get",
    "docstring": "Shortcut for :meth:`route` with ``methods=[\"GET\"]``.\n\n.. versionadded:: 2.0",
    "is_method": true,
    "class_name": "Scaffold",
    "parameters": [
      "self",
      "rule"
    ],
    "calls": [
      "self._method_route"
    ],
    "code_location": {
      "file": "scaffold.py",
      "path": "/data3/pwh/flask/src/flask/sansio",
      "start_line": 296,
      "end_line": 301
    },
    "code_snippet": "def get(self, rule: str, **options: t.Any) -> t.Callable[[T_route], T_route]:\n        \"\"\"Shortcut for :meth:`route` with ``methods=[\"GET\"]``.\n\n        .. versionadded:: 2.0\n        \"\"\"\n        return self._method_route(\"GET\", rule, options)"
  },
  {
    "name": "post",
    "docstring": "Shortcut for :meth:`route` with ``methods=[\"POST\"]``.\n\n.. versionadded:: 2.0",
    "is_method": true,
    "class_name": "Scaffold",
    "parameters": [
      "self",
      "rule"
    ],
    "calls": [
      "self._method_route"
    ],
    "code_location": {
      "file": "scaffold.py",
      "path": "/data3/pwh/flask/src/flask/sansio",
      "start_line": 304,
      "end_line": 309
    },
    "code_snippet": "def post(self, rule: str, **options: t.Any) -> t.Callable[[T_route], T_route]:\n        \"\"\"Shortcut for :meth:`route` with ``methods=[\"POST\"]``.\n\n        .. versionadded:: 2.0\n        \"\"\"\n        return self._method_route(\"POST\", rule, options)"
  },
  {
    "name": "put",
    "docstring": "Shortcut for :meth:`route` with ``methods=[\"PUT\"]``.\n\n.. versionadded:: 2.0",
    "is_method": true,
    "class_name": "Scaffold",
    "parameters": [
      "self",
      "rule"
    ],
    "calls": [
      "self._method_route"
    ],
    "code_location": {
      "file": "scaffold.py",
      "path": "/data3/pwh/flask/src/flask/sansio",
      "start_line": 312,
      "end_line": 317
    },
    "code_snippet": "def put(self, rule: str, **options: t.Any) -> t.Callable[[T_route], T_route]:\n        \"\"\"Shortcut for :meth:`route` with ``methods=[\"PUT\"]``.\n\n        .. versionadded:: 2.0\n        \"\"\"\n        return self._method_route(\"PUT\", rule, options)"
  },
  {
    "name": "delete",
    "docstring": "Shortcut for :meth:`route` with ``methods=[\"DELETE\"]``.\n\n.. versionadded:: 2.0",
    "is_method": true,
    "class_name": "Scaffold",
    "parameters": [
      "self",
      "rule"
    ],
    "calls": [
      "self._method_route"
    ],
    "code_location": {
      "file": "scaffold.py",
      "path": "/data3/pwh/flask/src/flask/sansio",
      "start_line": 320,
      "end_line": 325
    },
    "code_snippet": "def delete(self, rule: str, **options: t.Any) -> t.Callable[[T_route], T_route]:\n        \"\"\"Shortcut for :meth:`route` with ``methods=[\"DELETE\"]``.\n\n        .. versionadded:: 2.0\n        \"\"\"\n        return self._method_route(\"DELETE\", rule, options)"
  },
  {
    "name": "patch",
    "docstring": "Shortcut for :meth:`route` with ``methods=[\"PATCH\"]``.\n\n.. versionadded:: 2.0",
    "is_method": true,
    "class_name": "Scaffold",
    "parameters": [
      "self",
      "rule"
    ],
    "calls": [
      "self._method_route"
    ],
    "code_location": {
      "file": "scaffold.py",
      "path": "/data3/pwh/flask/src/flask/sansio",
      "start_line": 328,
      "end_line": 333
    },
    "code_snippet": "def patch(self, rule: str, **options: t.Any) -> t.Callable[[T_route], T_route]:\n        \"\"\"Shortcut for :meth:`route` with ``methods=[\"PATCH\"]``.\n\n        .. versionadded:: 2.0\n        \"\"\"\n        return self._method_route(\"PATCH\", rule, options)"
  },
  {
    "name": "route",
    "docstring": "Decorate a view function to register it with the given URL\nrule and options. Calls :meth:`add_url_rule`, which has more\ndetails about the implementation.\n\n.. code-block:: python\n\n    @app.route(\"/\")\n    def index():\n        return \"Hello, World!\"\n\nSee :ref:`url-route-registrations`.\n\nThe endpoint name for the route defaults to the name of the view\nfunction if the ``endpoint`` parameter isn't passed.\n\nThe ``methods`` parameter defaults to ``[\"GET\"]``. ``HEAD`` and\n``OPTIONS`` are added automatically.\n\n:param rule: The URL rule string.\n:param options: Extra options passed to the\n    :class:`~werkzeug.routing.Rule` object.",
    "is_method": true,
    "class_name": "Scaffold",
    "parameters": [
      "self",
      "rule"
    ],
    "calls": [
      "options.pop",
      "self.add_url_rule"
    ],
    "code_location": {
      "file": "scaffold.py",
      "path": "/data3/pwh/flask/src/flask/sansio",
      "start_line": 336,
      "end_line": 365
    },
    "code_snippet": "def route(self, rule: str, **options: t.Any) -> t.Callable[[T_route], T_route]:\n        \"\"\"Decorate a view function to register it with the given URL\n        rule and options. Calls :meth:`add_url_rule`, which has more\n        details about the implementation.\n\n        .. code-block:: python\n\n            @app.route(\"/\")\n            def index():\n                return \"Hello, World!\"\n\n        See :ref:`url-route-registrations`.\n\n        The endpoint name for the route defaults to the name of the ..."
  },
  {
    "name": "add_url_rule",
    "docstring": "Register a rule for routing incoming requests and building\nURLs. The :meth:`route` decorator is a shortcut to call this\nwith the ``view_func`` argument. These are equivalent:\n\n.. code-block:: python\n\n    @app.route(\"/\")\n    def index():\n        ...\n\n.. code-block:: python\n\n    def index():\n        ...\n\n    app.add_url_rule(\"/\", view_func=index)\n\nSee :ref:`url-route-registrations`.\n\nThe endpoint name for the route defaults to the name of the view\nfunction if the ``endpoint`` parameter isn't passed. An error\nwill be raised if a function has already been registered for the\nendpoint.\n\nThe ``methods`` parameter defaults to ``[\"GET\"]``. ``HEAD`` is\nalways added automatically, and ``OPTIONS`` is added\nautomatically by default.\n\n``view_func`` does not necessarily need to be passed, but if the\nrule should participate in routing an endpoint name must be\nassociated with a view function at some point with the\n:meth:`endpoint` decorator.\n\n.. code-block:: python\n\n    app.add_url_rule(\"/\", endpoint=\"index\")\n\n    @app.endpoint(\"index\")\n    def index():\n        ...\n\nIf ``view_func`` has a ``required_methods`` attribute, those\nmethods are added to the passed and automatic methods. If it\nhas a ``provide_automatic_methods`` attribute, it is used as the\ndefault if the parameter is not passed.\n\n:param rule: The URL rule string.\n:param endpoint: The endpoint name to associate with the rule\n    and view function. Used when routing and building URLs.\n    Defaults to ``view_func.__name__``.\n:param view_func: The view function to associate with the\n    endpoint name.\n:param provide_automatic_options: Add the ``OPTIONS`` method and\n    respond to ``OPTIONS`` requests automatically.\n:param options: Extra options passed to the\n    :class:`~werkzeug.routing.Rule` object.",
    "is_method": true,
    "class_name": "Scaffold",
    "parameters": [
      "self",
      "rule",
      "endpoint",
      "view_func",
      "provide_automatic_options"
    ],
    "calls": [],
    "code_location": {
      "file": "scaffold.py",
      "path": "/data3/pwh/flask/src/flask/sansio",
      "start_line": 368,
      "end_line": 433
    },
    "code_snippet": "def add_url_rule(\n        self,\n        rule: str,\n        endpoint: str | None = None,\n        view_func: ft.RouteCallable | None = None,\n        provide_automatic_options: bool | None = None,\n        **options: t.Any,\n    ) -> None:\n        \"\"\"Register a rule for routing incoming requests and building\n        URLs. The :meth:`route` decorator is a shortcut to call this\n        with the ``view_func`` argument. These are equivalent:\n\n        .. code-block:: python\n\n            @app.route(\"/\")\n  ..."
  },
  {
    "name": "endpoint",
    "docstring": "Decorate a view function to register it for the given\nendpoint. Used if a rule is added without a ``view_func`` with\n:meth:`add_url_rule`.\n\n.. code-block:: python\n\n    app.add_url_rule(\"/ex\", endpoint=\"example\")\n\n    @app.endpoint(\"example\")\n    def example():\n        ...\n\n:param endpoint: The endpoint name to associate with the view\n    function.",
    "is_method": true,
    "class_name": "Scaffold",
    "parameters": [
      "self",
      "endpoint"
    ],
    "calls": [],
    "code_location": {
      "file": "scaffold.py",
      "path": "/data3/pwh/flask/src/flask/sansio",
      "start_line": 436,
      "end_line": 457
    },
    "code_snippet": "def endpoint(self, endpoint: str) -> t.Callable[[F], F]:\n        \"\"\"Decorate a view function to register it for the given\n        endpoint. Used if a rule is added without a ``view_func`` with\n        :meth:`add_url_rule`.\n\n        .. code-block:: python\n\n            app.add_url_rule(\"/ex\", endpoint=\"example\")\n\n            @app.endpoint(\"example\")\n            def example():\n                ...\n\n        :param endpoint: The endpoint name to associate with the view\n            function.\n        \"\"..."
  },
  {
    "name": "before_request",
    "docstring": "Register a function to run before each request.\n\nFor example, this can be used to open a database connection, or\nto load the logged in user from the session.\n\n.. code-block:: python\n\n    @app.before_request\n    def load_user():\n        if \"user_id\" in session:\n            g.user = db.session.get(session[\"user_id\"])\n\nThe function will be called without any arguments. If it returns\na non-``None`` value, the value is handled as if it was the\nreturn value from the view, and further request handling is\nstopped.\n\nThis is available on both app and blueprint objects. When used on an app, this\nexecutes before every request. When used on a blueprint, this executes before\nevery request that the blueprint handles. To register with a blueprint and\nexecute before every request, use :meth:`.Blueprint.before_app_request`.",
    "is_method": true,
    "class_name": "Scaffold",
    "parameters": [
      "self",
      "f"
    ],
    "calls": [
      "append",
      "self.before_request_funcs.setdefault"
    ],
    "code_location": {
      "file": "scaffold.py",
      "path": "/data3/pwh/flask/src/flask/sansio",
      "start_line": 460,
      "end_line": 484
    },
    "code_snippet": "def before_request(self, f: T_before_request) -> T_before_request:\n        \"\"\"Register a function to run before each request.\n\n        For example, this can be used to open a database connection, or\n        to load the logged in user from the session.\n\n        .. code-block:: python\n\n            @app.before_request\n            def load_user():\n                if \"user_id\" in session:\n                    g.user = db.session.get(session[\"user_id\"])\n\n        The function will be called without any ..."
  },
  {
    "name": "after_request",
    "docstring": "Register a function to run after each request to this object.\n\nThe function is called with the response object, and must return\na response object. This allows the functions to modify or\nreplace the response before it is sent.\n\nIf a function raises an exception, any remaining\n``after_request`` functions will not be called. Therefore, this\nshould not be used for actions that must execute, such as to\nclose resources. Use :meth:`teardown_request` for that.\n\nThis is available on both app and blueprint objects. When used on an app, this\nexecutes after every request. When used on a blueprint, this executes after\nevery request that the blueprint handles. To register with a blueprint and\nexecute after every request, use :meth:`.Blueprint.after_app_request`.",
    "is_method": true,
    "class_name": "Scaffold",
    "parameters": [
      "self",
      "f"
    ],
    "calls": [
      "append",
      "self.after_request_funcs.setdefault"
    ],
    "code_location": {
      "file": "scaffold.py",
      "path": "/data3/pwh/flask/src/flask/sansio",
      "start_line": 487,
      "end_line": 505
    },
    "code_snippet": "def after_request(self, f: T_after_request) -> T_after_request:\n        \"\"\"Register a function to run after each request to this object.\n\n        The function is called with the response object, and must return\n        a response object. This allows the functions to modify or\n        replace the response before it is sent.\n\n        If a function raises an exception, any remaining\n        ``after_request`` functions will not be called. Therefore, this\n        should not be used for actions that m..."
  },
  {
    "name": "teardown_request",
    "docstring": "Register a function to be called when the request context is\npopped. Typically this happens at the end of each request, but\ncontexts may be pushed manually as well during testing.\n\n.. code-block:: python\n\n    with app.test_request_context():\n        ...\n\nWhen the ``with`` block exits (or ``ctx.pop()`` is called), the\nteardown functions are called just before the request context is\nmade inactive.\n\nWhen a teardown function was called because of an unhandled\nexception it will be passed an error object. If an\n:meth:`errorhandler` is registered, it will handle the exception\nand the teardown will not receive it.\n\nTeardown functions must avoid raising exceptions. If they\nexecute code that might fail they must surround that code with a\n``try``/``except`` block and log any errors.\n\nThe return values of teardown functions are ignored.\n\nThis is available on both app and blueprint objects. When used on an app, this\nexecutes after every request. When used on a blueprint, this executes after\nevery request that the blueprint handles. To register with a blueprint and\nexecute after every request, use :meth:`.Blueprint.teardown_app_request`.",
    "is_method": true,
    "class_name": "Scaffold",
    "parameters": [
      "self",
      "f"
    ],
    "calls": [
      "append",
      "self.teardown_request_funcs.setdefault"
    ],
    "code_location": {
      "file": "scaffold.py",
      "path": "/data3/pwh/flask/src/flask/sansio",
      "start_line": 508,
      "end_line": 539
    },
    "code_snippet": "def teardown_request(self, f: T_teardown) -> T_teardown:\n        \"\"\"Register a function to be called when the request context is\n        popped. Typically this happens at the end of each request, but\n        contexts may be pushed manually as well during testing.\n\n        .. code-block:: python\n\n            with app.test_request_context():\n                ...\n\n        When the ``with`` block exits (or ``ctx.pop()`` is called), the\n        teardown functions are called just before the request con..."
  },
  {
    "name": "context_processor",
    "docstring": "Registers a template context processor function. These functions run before\nrendering a template. The keys of the returned dict are added as variables\navailable in the template.\n\nThis is available on both app and blueprint objects. When used on an app, this\nis called for every rendered template. When used on a blueprint, this is called\nfor templates rendered from the blueprint's views. To register with a blueprint\nand affect every template, use :meth:`.Blueprint.app_context_processor`.",
    "is_method": true,
    "class_name": "Scaffold",
    "parameters": [
      "self",
      "f"
    ],
    "calls": [
      "append"
    ],
    "code_location": {
      "file": "scaffold.py",
      "path": "/data3/pwh/flask/src/flask/sansio",
      "start_line": 542,
      "end_line": 556
    },
    "code_snippet": "def context_processor(\n        self,\n        f: T_template_context_processor,\n    ) -> T_template_context_processor:\n        \"\"\"Registers a template context processor function. These functions run before\n        rendering a template. The keys of the returned dict are added as variables\n        available in the template.\n\n        This is available on both app and blueprint objects. When used on an app, this\n        is called for every rendered template. When used on a blueprint, this is called\n  ..."
  },
  {
    "name": "url_value_preprocessor",
    "docstring": "Register a URL value preprocessor function for all view\nfunctions in the application. These functions will be called before the\n:meth:`before_request` functions.\n\nThe function can modify the values captured from the matched url before\nthey are passed to the view. For example, this can be used to pop a\ncommon language code value and place it in ``g`` rather than pass it to\nevery view.\n\nThe function is passed the endpoint name and values dict. The return\nvalue is ignored.\n\nThis is available on both app and blueprint objects. When used on an app, this\nis called for every request. When used on a blueprint, this is called for\nrequests that the blueprint handles. To register with a blueprint and affect\nevery request, use :meth:`.Blueprint.app_url_value_preprocessor`.",
    "is_method": true,
    "class_name": "Scaffold",
    "parameters": [
      "self",
      "f"
    ],
    "calls": [
      "append"
    ],
    "code_location": {
      "file": "scaffold.py",
      "path": "/data3/pwh/flask/src/flask/sansio",
      "start_line": 559,
      "end_line": 581
    },
    "code_snippet": "def url_value_preprocessor(\n        self,\n        f: T_url_value_preprocessor,\n    ) -> T_url_value_preprocessor:\n        \"\"\"Register a URL value preprocessor function for all view\n        functions in the application. These functions will be called before the\n        :meth:`before_request` functions.\n\n        The function can modify the values captured from the matched url before\n        they are passed to the view. For example, this can be used to pop a\n        common language code value and p..."
  },
  {
    "name": "url_defaults",
    "docstring": "Callback function for URL defaults for all view functions of the\napplication.  It's called with the endpoint and values and should\nupdate the values passed in place.\n\nThis is available on both app and blueprint objects. When used on an app, this\nis called for every request. When used on a blueprint, this is called for\nrequests that the blueprint handles. To register with a blueprint and affect\nevery request, use :meth:`.Blueprint.app_url_defaults`.",
    "is_method": true,
    "class_name": "Scaffold",
    "parameters": [
      "self",
      "f"
    ],
    "calls": [
      "append"
    ],
    "code_location": {
      "file": "scaffold.py",
      "path": "/data3/pwh/flask/src/flask/sansio",
      "start_line": 584,
      "end_line": 595
    },
    "code_snippet": "def url_defaults(self, f: T_url_defaults) -> T_url_defaults:\n        \"\"\"Callback function for URL defaults for all view functions of the\n        application.  It's called with the endpoint and values and should\n        update the values passed in place.\n\n        This is available on both app and blueprint objects. When used on an app, this\n        is called for every request. When used on a blueprint, this is called for\n        requests that the blueprint handles. To register with a blueprint an..."
  },
  {
    "name": "errorhandler",
    "docstring": "Register a function to handle errors by code or exception class.\n\nA decorator that is used to register a function given an\nerror code.  Example::\n\n    @app.errorhandler(404)\n    def page_not_found(error):\n        return 'This page does not exist', 404\n\nYou can also register handlers for arbitrary exceptions::\n\n    @app.errorhandler(DatabaseError)\n    def special_exception_handler(error):\n        return 'Database connection failed', 500\n\nThis is available on both app and blueprint objects. When used on an app, this\ncan handle errors from every request. When used on a blueprint, this can handle\nerrors from requests that the blueprint handles. To register with a blueprint\nand affect every request, use :meth:`.Blueprint.app_errorhandler`.\n\n.. versionadded:: 0.7\n    Use :meth:`register_error_handler` instead of modifying\n    :attr:`error_handler_spec` directly, for application wide error\n    handlers.\n\n.. versionadded:: 0.7\n   One can now additionally also register custom exception types\n   that do not necessarily have to be a subclass of the\n   :class:`~werkzeug.exceptions.HTTPException` class.\n\n:param code_or_exception: the code as integer for the handler, or\n                          an arbitrary exception",
    "is_method": true,
    "class_name": "Scaffold",
    "parameters": [
      "self",
      "code_or_exception"
    ],
    "calls": [
      "self.register_error_handler"
    ],
    "code_location": {
      "file": "scaffold.py",
      "path": "/data3/pwh/flask/src/flask/sansio",
      "start_line": 598,
      "end_line": 639
    },
    "code_snippet": "def errorhandler(\n        self, code_or_exception: type[Exception] | int\n    ) -> t.Callable[[T_error_handler], T_error_handler]:\n        \"\"\"Register a function to handle errors by code or exception class.\n\n        A decorator that is used to register a function given an\n        error code.  Example::\n\n            @app.errorhandler(404)\n            def page_not_found(error):\n                return 'This page does not exist', 404\n\n        You can also register handlers for arbitrary exceptions::\n..."
  },
  {
    "name": "register_error_handler",
    "docstring": "Alternative error attach function to the :meth:`errorhandler`\ndecorator that is more straightforward to use for non decorator\nusage.\n\n.. versionadded:: 0.7",
    "is_method": true,
    "class_name": "Scaffold",
    "parameters": [
      "self",
      "code_or_exception",
      "f"
    ],
    "calls": [
      "self._get_exc_class_and_code"
    ],
    "code_location": {
      "file": "scaffold.py",
      "path": "/data3/pwh/flask/src/flask/sansio",
      "start_line": 642,
      "end_line": 654
    },
    "code_snippet": "def register_error_handler(\n        self,\n        code_or_exception: type[Exception] | int,\n        f: ft.ErrorHandlerCallable,\n    ) -> None:\n        \"\"\"Alternative error attach function to the :meth:`errorhandler`\n        decorator that is more straightforward to use for non decorator\n        usage.\n\n        .. versionadded:: 0.7\n        \"\"\"\n        exc_class, code = self._get_exc_class_and_code(code_or_exception)\n        self.error_handler_spec[None][code][exc_class] = f"
  },
  {
    "name": "_get_exc_class_and_code",
    "docstring": "Get the exception class being handled. For HTTP status codes\nor ``HTTPException`` subclasses, return both the exception and\nstatus code.\n\n:param exc_class_or_code: Any exception class, or an HTTP status\n    code as an integer.",
    "is_method": true,
    "class_name": "Scaffold",
    "parameters": [
      "exc_class_or_code"
    ],
    "calls": [
      "isinstance",
      "isinstance",
      "issubclass",
      "TypeError",
      "issubclass",
      "ValueError",
      "ValueError"
    ],
    "code_location": {
      "file": "scaffold.py",
      "path": "/data3/pwh/flask/src/flask/sansio",
      "start_line": 657,
      "end_line": 698
    },
    "code_snippet": "def _get_exc_class_and_code(\n        exc_class_or_code: type[Exception] | int,\n    ) -> tuple[type[Exception], int | None]:\n        \"\"\"Get the exception class being handled. For HTTP status codes\n        or ``HTTPException`` subclasses, return both the exception and\n        status code.\n\n        :param exc_class_or_code: Any exception class, or an HTTP status\n            code as an integer.\n        \"\"\"\n        exc_class: type[Exception]\n\n        if isinstance(exc_class_or_code, int):\n           ..."
  },
  {
    "name": "_endpoint_from_view_func",
    "docstring": "Internal helper that returns the default endpoint for a given\nfunction.  This always is the function name.",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "view_func"
    ],
    "calls": [],
    "code_location": {
      "file": "scaffold.py",
      "path": "/data3/pwh/flask/src/flask/sansio",
      "start_line": 701,
      "end_line": 706
    },
    "code_snippet": "def _endpoint_from_view_func(view_func: ft.RouteCallable) -> str:\n    \"\"\"Internal helper that returns the default endpoint for a given\n    function.  This always is the function name.\n    \"\"\"\n    assert view_func is not None, \"expected view func if endpoint is not provided.\"\n    return view_func.__name__"
  },
  {
    "name": "_find_package_path",
    "docstring": "Find the path that contains the package or module.",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "import_name"
    ],
    "calls": [
      "import_name.partition",
      "importlib.util.find_spec",
      "os.path.dirname",
      "ValueError",
      "os.getcwd",
      "importlib.util.find_spec",
      "os.path.dirname",
      "os.path.dirname",
      "pathlib.Path",
      "next",
      "os.path.dirname",
      "os.path.commonpath",
      "package_path.is_relative_to"
    ],
    "code_location": {
      "file": "scaffold.py",
      "path": "/data3/pwh/flask/src/flask/sansio",
      "start_line": 709,
      "end_line": 751
    },
    "code_snippet": "def _find_package_path(import_name: str) -> str:\n    \"\"\"Find the path that contains the package or module.\"\"\"\n    root_mod_name, _, _ = import_name.partition(\".\")\n\n    try:\n        root_spec = importlib.util.find_spec(root_mod_name)\n\n        if root_spec is None:\n            raise ValueError(\"not found\")\n    except (ImportError, ValueError):\n        # ImportError: the machinery told us it does not exist\n        # ValueError:\n        #    - the module name was invalid\n        #    - the module na..."
  },
  {
    "name": "find_package",
    "docstring": "Find the prefix that a package is installed under, and the path\nthat it would be imported from.\n\nThe prefix is the directory containing the standard directory\nhierarchy (lib, bin, etc.). If the package is not installed to the\nsystem (:attr:`sys.prefix`) or a virtualenv (``site-packages``),\n``None`` is returned.\n\nThe path is the entry in :attr:`sys.path` that contains the package\nfor import. If the package is not installed, it's assumed that the\npackage was imported from the current working directory.",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "import_name"
    ],
    "calls": [
      "_find_package_path",
      "os.path.abspath",
      "is_relative_to",
      "os.path.split",
      "site_folder.lower",
      "os.path.split",
      "pathlib.PurePath",
      "folder.lower",
      "lower",
      "os.path.dirname",
      "os.path.basename"
    ],
    "code_location": {
      "file": "scaffold.py",
      "path": "/data3/pwh/flask/src/flask/sansio",
      "start_line": 754,
      "end_line": 792
    },
    "code_snippet": "def find_package(import_name: str) -> tuple[str | None, str]:\n    \"\"\"Find the prefix that a package is installed under, and the path\n    that it would be imported from.\n\n    The prefix is the directory containing the standard directory\n    hierarchy (lib, bin, etc.). If the package is not installed to the\n    system (:attr:`sys.prefix`) or a virtualenv (``site-packages``),\n    ``None`` is returned.\n\n    The path is the entry in :attr:`sys.path` that contains the package\n    for import. If the pa..."
  },
  {
    "name": "fixture_app",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [],
    "calls": [
      "pytest.fixture"
    ],
    "code_location": {
      "file": "conftest.py",
      "path": "/data3/pwh/flask/examples/javascript/tests",
      "start_line": 7,
      "end_line": 10
    },
    "code_snippet": "def fixture_app():\n    app.testing = True\n    yield app\n    app.testing = False"
  },
  {
    "name": "client",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app"
    ],
    "calls": [
      "app.test_client"
    ],
    "code_location": {
      "file": "conftest.py",
      "path": "/data3/pwh/flask/examples/javascript/tests",
      "start_line": 14,
      "end_line": 15
    },
    "code_snippet": "def client(app):\n    return app.test_client()"
  },
  {
    "name": "test_index",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "client",
      "path",
      "template_name"
    ],
    "calls": [
      "pytest.mark.parametrize",
      "template_rendered.connected_to",
      "client.get"
    ],
    "code_location": {
      "file": "test_js_example.py",
      "path": "/data3/pwh/flask/examples/javascript/tests",
      "start_line": 14,
      "end_line": 19
    },
    "code_snippet": "def test_index(app, client, path, template_name):\n    def check(sender, template, context):\n        assert template.name == template_name\n\n    with template_rendered.connected_to(check, app):\n        client.get(path)"
  },
  {
    "name": "test_add",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "client",
      "a",
      "b",
      "result"
    ],
    "calls": [
      "pytest.mark.parametrize",
      "client.post",
      "response.get_json"
    ],
    "code_location": {
      "file": "test_js_example.py",
      "path": "/data3/pwh/flask/examples/javascript/tests",
      "start_line": 25,
      "end_line": 27
    },
    "code_snippet": "def test_add(client, a, b, result):\n    response = client.post(\"/add\", data={\"a\": a, \"b\": b})\n    assert response.get_json()[\"result\"] == result"
  },
  {
    "name": "index",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "js"
    ],
    "calls": [
      "app.route",
      "app.route",
      "render_template"
    ],
    "code_location": {
      "file": "views.py",
      "path": "/data3/pwh/flask/examples/javascript/js_example",
      "start_line": 10,
      "end_line": 11
    },
    "code_snippet": "def index(js):\n    return render_template(f\"{js}.html\", js=js)"
  },
  {
    "name": "add",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [],
    "calls": [
      "app.route",
      "request.form.get",
      "request.form.get",
      "jsonify"
    ],
    "code_location": {
      "file": "views.py",
      "path": "/data3/pwh/flask/examples/javascript/js_example",
      "start_line": 15,
      "end_line": 18
    },
    "code_snippet": "def add():\n    a = request.form.get(\"a\", 0, type=float)\n    b = request.form.get(\"b\", 0, type=float)\n    return jsonify(result=a + b)"
  },
  {
    "name": "get_db",
    "docstring": "Connect to the application's configured database. The connection\nis unique for each request and will be reused if this is called\nagain.",
    "is_method": false,
    "class_name": null,
    "parameters": [],
    "calls": [
      "sqlite3.connect"
    ],
    "code_location": {
      "file": "db.py",
      "path": "/data3/pwh/flask/examples/tutorial/flaskr",
      "start_line": 9,
      "end_line": 20
    },
    "code_snippet": "def get_db():\n    \"\"\"Connect to the application's configured database. The connection\n    is unique for each request and will be reused if this is called\n    again.\n    \"\"\"\n    if \"db\" not in g:\n        g.db = sqlite3.connect(\n            current_app.config[\"DATABASE\"], detect_types=sqlite3.PARSE_DECLTYPES\n        )\n        g.db.row_factory = sqlite3.Row\n\n    return g.db"
  },
  {
    "name": "close_db",
    "docstring": "If this request connected to the database, close the\nconnection.",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "e"
    ],
    "calls": [
      "g.pop",
      "db.close"
    ],
    "code_location": {
      "file": "db.py",
      "path": "/data3/pwh/flask/examples/tutorial/flaskr",
      "start_line": 23,
      "end_line": 30
    },
    "code_snippet": "def close_db(e=None):\n    \"\"\"If this request connected to the database, close the\n    connection.\n    \"\"\"\n    db = g.pop(\"db\", None)\n\n    if db is not None:\n        db.close()"
  },
  {
    "name": "init_db",
    "docstring": "Clear existing data and create new tables.",
    "is_method": false,
    "class_name": null,
    "parameters": [],
    "calls": [
      "get_db",
      "current_app.open_resource",
      "db.executescript",
      "decode",
      "f.read"
    ],
    "code_location": {
      "file": "db.py",
      "path": "/data3/pwh/flask/examples/tutorial/flaskr",
      "start_line": 33,
      "end_line": 38
    },
    "code_snippet": "def init_db():\n    \"\"\"Clear existing data and create new tables.\"\"\"\n    db = get_db()\n\n    with current_app.open_resource(\"schema.sql\") as f:\n        db.executescript(f.read().decode(\"utf8\"))"
  },
  {
    "name": "init_db_command",
    "docstring": "Clear existing data and create new tables.",
    "is_method": false,
    "class_name": null,
    "parameters": [],
    "calls": [
      "click.command",
      "init_db",
      "click.echo"
    ],
    "code_location": {
      "file": "db.py",
      "path": "/data3/pwh/flask/examples/tutorial/flaskr",
      "start_line": 42,
      "end_line": 45
    },
    "code_snippet": "def init_db_command():\n    \"\"\"Clear existing data and create new tables.\"\"\"\n    init_db()\n    click.echo(\"Initialized the database.\")"
  },
  {
    "name": "init_app",
    "docstring": "Register database functions with the Flask app. This is called by\nthe application factory.",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app"
    ],
    "calls": [
      "app.teardown_appcontext",
      "app.cli.add_command"
    ],
    "code_location": {
      "file": "db.py",
      "path": "/data3/pwh/flask/examples/tutorial/flaskr",
      "start_line": 51,
      "end_line": 56
    },
    "code_snippet": "def init_app(app):\n    \"\"\"Register database functions with the Flask app. This is called by\n    the application factory.\n    \"\"\"\n    app.teardown_appcontext(close_db)\n    app.cli.add_command(init_db_command)"
  },
  {
    "name": "create_app",
    "docstring": "Create and configure an instance of the Flask application.",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "test_config"
    ],
    "calls": [
      "Flask",
      "app.config.from_mapping",
      "app.route",
      "db.init_app",
      "app.register_blueprint",
      "app.register_blueprint",
      "app.add_url_rule",
      "app.config.from_pyfile",
      "app.config.update",
      "os.makedirs",
      "os.path.join"
    ],
    "code_location": {
      "file": "__init__.py",
      "path": "/data3/pwh/flask/examples/tutorial/flaskr",
      "start_line": 6,
      "end_line": 51
    },
    "code_snippet": "def create_app(test_config=None):\n    \"\"\"Create and configure an instance of the Flask application.\"\"\"\n    app = Flask(__name__, instance_relative_config=True)\n    app.config.from_mapping(\n        # a default secret that should be overridden by instance config\n        SECRET_KEY=\"dev\",\n        # store the database in the instance folder\n        DATABASE=os.path.join(app.instance_path, \"flaskr.sqlite\"),\n    )\n\n    if test_config is None:\n        # load the instance config, if it exists, when not ..."
  },
  {
    "name": "index",
    "docstring": "Show all the posts, most recent first.",
    "is_method": false,
    "class_name": null,
    "parameters": [],
    "calls": [
      "bp.route",
      "get_db",
      "fetchall",
      "render_template",
      "db.execute"
    ],
    "code_location": {
      "file": "blog.py",
      "path": "/data3/pwh/flask/examples/tutorial/flaskr",
      "start_line": 17,
      "end_line": 25
    },
    "code_snippet": "def index():\n    \"\"\"Show all the posts, most recent first.\"\"\"\n    db = get_db()\n    posts = db.execute(\n        \"SELECT p.id, title, body, created, author_id, username\"\n        \" FROM post p JOIN user u ON p.author_id = u.id\"\n        \" ORDER BY created DESC\"\n    ).fetchall()\n    return render_template(\"blog/index.html\", posts=posts)"
  },
  {
    "name": "get_post",
    "docstring": "Get a post and its author by id.\n\nChecks that the id exists and optionally that the current user is\nthe author.\n\n:param id: id of post to get\n:param check_author: require the current user to be the author\n:return: the post with author information\n:raise 404: if a post with the given id doesn't exist\n:raise 403: if the current user isn't the author",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "id",
      "check_author"
    ],
    "calls": [
      "fetchone",
      "abort",
      "abort",
      "execute",
      "get_db"
    ],
    "code_location": {
      "file": "blog.py",
      "path": "/data3/pwh/flask/examples/tutorial/flaskr",
      "start_line": 28,
      "end_line": 57
    },
    "code_snippet": "def get_post(id, check_author=True):\n    \"\"\"Get a post and its author by id.\n\n    Checks that the id exists and optionally that the current user is\n    the author.\n\n    :param id: id of post to get\n    :param check_author: require the current user to be the author\n    :return: the post with author information\n    :raise 404: if a post with the given id doesn't exist\n    :raise 403: if the current user isn't the author\n    \"\"\"\n    post = (\n        get_db()\n        .execute(\n            \"SELECT p...."
  },
  {
    "name": "create",
    "docstring": "Create a new post for the current user.",
    "is_method": false,
    "class_name": null,
    "parameters": [],
    "calls": [
      "bp.route",
      "render_template",
      "flash",
      "get_db",
      "db.execute",
      "db.commit",
      "redirect",
      "url_for"
    ],
    "code_location": {
      "file": "blog.py",
      "path": "/data3/pwh/flask/examples/tutorial/flaskr",
      "start_line": 62,
      "end_line": 83
    },
    "code_snippet": "def create():\n    \"\"\"Create a new post for the current user.\"\"\"\n    if request.method == \"POST\":\n        title = request.form[\"title\"]\n        body = request.form[\"body\"]\n        error = None\n\n        if not title:\n            error = \"Title is required.\"\n\n        if error is not None:\n            flash(error)\n        else:\n            db = get_db()\n            db.execute(\n                \"INSERT INTO post (title, body, author_id) VALUES (?, ?, ?)\",\n                (title, body, g.user[\"id\"]),\n ..."
  },
  {
    "name": "update",
    "docstring": "Update a post if the current user is the author.",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "id"
    ],
    "calls": [
      "bp.route",
      "get_post",
      "render_template",
      "flash",
      "get_db",
      "db.execute",
      "db.commit",
      "redirect",
      "url_for"
    ],
    "code_location": {
      "file": "blog.py",
      "path": "/data3/pwh/flask/examples/tutorial/flaskr",
      "start_line": 88,
      "end_line": 110
    },
    "code_snippet": "def update(id):\n    \"\"\"Update a post if the current user is the author.\"\"\"\n    post = get_post(id)\n\n    if request.method == \"POST\":\n        title = request.form[\"title\"]\n        body = request.form[\"body\"]\n        error = None\n\n        if not title:\n            error = \"Title is required.\"\n\n        if error is not None:\n            flash(error)\n        else:\n            db = get_db()\n            db.execute(\n                \"UPDATE post SET title = ?, body = ? WHERE id = ?\", (title, body, id)\n  ..."
  },
  {
    "name": "delete",
    "docstring": "Delete a post.\n\nEnsures that the post exists and that the logged in user is the\nauthor of the post.",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "id"
    ],
    "calls": [
      "bp.route",
      "get_post",
      "get_db",
      "db.execute",
      "db.commit",
      "redirect",
      "url_for"
    ],
    "code_location": {
      "file": "blog.py",
      "path": "/data3/pwh/flask/examples/tutorial/flaskr",
      "start_line": 115,
      "end_line": 125
    },
    "code_snippet": "def delete(id):\n    \"\"\"Delete a post.\n\n    Ensures that the post exists and that the logged in user is the\n    author of the post.\n    \"\"\"\n    get_post(id)\n    db = get_db()\n    db.execute(\"DELETE FROM post WHERE id = ?\", (id,))\n    db.commit()\n    return redirect(url_for(\"blog.index\"))"
  },
  {
    "name": "login_required",
    "docstring": "View decorator that redirects anonymous users to the login page.",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "view"
    ],
    "calls": [
      "functools.wraps",
      "view",
      "redirect",
      "url_for"
    ],
    "code_location": {
      "file": "auth.py",
      "path": "/data3/pwh/flask/examples/tutorial/flaskr",
      "start_line": 19,
      "end_line": 29
    },
    "code_snippet": "def login_required(view):\n    \"\"\"View decorator that redirects anonymous users to the login page.\"\"\"\n\n    @functools.wraps(view)\n    def wrapped_view(**kwargs):\n        if g.user is None:\n            return redirect(url_for(\"auth.login\"))\n\n        return view(**kwargs)\n\n    return wrapped_view"
  },
  {
    "name": "load_logged_in_user",
    "docstring": "If a user id is stored in the session, load the user object from\nthe database into ``g.user``.",
    "is_method": false,
    "class_name": null,
    "parameters": [],
    "calls": [
      "session.get",
      "fetchone",
      "execute",
      "get_db"
    ],
    "code_location": {
      "file": "auth.py",
      "path": "/data3/pwh/flask/examples/tutorial/flaskr",
      "start_line": 33,
      "end_line": 43
    },
    "code_snippet": "def load_logged_in_user():\n    \"\"\"If a user id is stored in the session, load the user object from\n    the database into ``g.user``.\"\"\"\n    user_id = session.get(\"user_id\")\n\n    if user_id is None:\n        g.user = None\n    else:\n        g.user = (\n            get_db().execute(\"SELECT * FROM user WHERE id = ?\", (user_id,)).fetchone()\n        )"
  },
  {
    "name": "register",
    "docstring": "Register a new user.\n\nValidates that the username is not already taken. Hashes the\npassword for security.",
    "is_method": false,
    "class_name": null,
    "parameters": [],
    "calls": [
      "bp.route",
      "render_template",
      "get_db",
      "flash",
      "db.execute",
      "db.commit",
      "redirect",
      "url_for",
      "generate_password_hash"
    ],
    "code_location": {
      "file": "auth.py",
      "path": "/data3/pwh/flask/examples/tutorial/flaskr",
      "start_line": 47,
      "end_line": 81
    },
    "code_snippet": "def register():\n    \"\"\"Register a new user.\n\n    Validates that the username is not already taken. Hashes the\n    password for security.\n    \"\"\"\n    if request.method == \"POST\":\n        username = request.form[\"username\"]\n        password = request.form[\"password\"]\n        db = get_db()\n        error = None\n\n        if not username:\n            error = \"Username is required.\"\n        elif not password:\n            error = \"Password is required.\"\n\n        if error is None:\n            try:\n      ..."
  },
  {
    "name": "login",
    "docstring": "Log in a registered user by adding the user id to the session.",
    "is_method": false,
    "class_name": null,
    "parameters": [],
    "calls": [
      "bp.route",
      "render_template",
      "get_db",
      "fetchone",
      "flash",
      "session.clear",
      "redirect",
      "db.execute",
      "check_password_hash",
      "url_for"
    ],
    "code_location": {
      "file": "auth.py",
      "path": "/data3/pwh/flask/examples/tutorial/flaskr",
      "start_line": 85,
      "end_line": 109
    },
    "code_snippet": "def login():\n    \"\"\"Log in a registered user by adding the user id to the session.\"\"\"\n    if request.method == \"POST\":\n        username = request.form[\"username\"]\n        password = request.form[\"password\"]\n        db = get_db()\n        error = None\n        user = db.execute(\n            \"SELECT * FROM user WHERE username = ?\", (username,)\n        ).fetchone()\n\n        if user is None:\n            error = \"Incorrect username.\"\n        elif not check_password_hash(user[\"password\"], password):\n   ..."
  },
  {
    "name": "logout",
    "docstring": "Clear the current session, including the stored user id.",
    "is_method": false,
    "class_name": null,
    "parameters": [],
    "calls": [
      "bp.route",
      "session.clear",
      "redirect",
      "url_for"
    ],
    "code_location": {
      "file": "auth.py",
      "path": "/data3/pwh/flask/examples/tutorial/flaskr",
      "start_line": 113,
      "end_line": 116
    },
    "code_snippet": "def logout():\n    \"\"\"Clear the current session, including the stored user id.\"\"\"\n    session.clear()\n    return redirect(url_for(\"index\"))"
  },
  {
    "name": "test_register",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "client",
      "app"
    ],
    "calls": [
      "client.post",
      "app.app_context",
      "client.get",
      "fetchone",
      "execute",
      "get_db"
    ],
    "code_location": {
      "file": "test_auth.py",
      "path": "/data3/pwh/flask/examples/tutorial/tests",
      "start_line": 8,
      "end_line": 21
    },
    "code_snippet": "def test_register(client, app):\n    # test that viewing the page renders without template errors\n    assert client.get(\"/auth/register\").status_code == 200\n\n    # test that successful registration redirects to the login page\n    response = client.post(\"/auth/register\", data={\"username\": \"a\", \"password\": \"a\"})\n    assert response.headers[\"Location\"] == \"/auth/login\"\n\n    # test that the user was inserted into the database\n    with app.app_context():\n        assert (\n            get_db().execute(\"..."
  },
  {
    "name": "test_register_validate_input",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "client",
      "username",
      "password",
      "message"
    ],
    "calls": [
      "pytest.mark.parametrize",
      "client.post"
    ],
    "code_location": {
      "file": "test_auth.py",
      "path": "/data3/pwh/flask/examples/tutorial/tests",
      "start_line": 32,
      "end_line": 36
    },
    "code_snippet": "def test_register_validate_input(client, username, password, message):\n    response = client.post(\n        \"/auth/register\", data={\"username\": username, \"password\": password}\n    )\n    assert message in response.data"
  },
  {
    "name": "test_login",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "client",
      "auth"
    ],
    "calls": [
      "auth.login",
      "client.get",
      "client.get"
    ],
    "code_location": {
      "file": "test_auth.py",
      "path": "/data3/pwh/flask/examples/tutorial/tests",
      "start_line": 39,
      "end_line": 52
    },
    "code_snippet": "def test_login(client, auth):\n    # test that viewing the page renders without template errors\n    assert client.get(\"/auth/login\").status_code == 200\n\n    # test that successful login redirects to the index page\n    response = auth.login()\n    assert response.headers[\"Location\"] == \"/\"\n\n    # login request set the user_id in the session\n    # check that the user is loaded from the session\n    with client:\n        client.get(\"/\")\n        assert session[\"user_id\"] == 1\n        assert g.user[\"user..."
  },
  {
    "name": "test_login_validate_input",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "auth",
      "username",
      "password",
      "message"
    ],
    "calls": [
      "pytest.mark.parametrize",
      "auth.login"
    ],
    "code_location": {
      "file": "test_auth.py",
      "path": "/data3/pwh/flask/examples/tutorial/tests",
      "start_line": 59,
      "end_line": 61
    },
    "code_snippet": "def test_login_validate_input(auth, username, password, message):\n    response = auth.login(username, password)\n    assert message in response.data"
  },
  {
    "name": "test_logout",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "client",
      "auth"
    ],
    "calls": [
      "auth.login",
      "auth.logout"
    ],
    "code_location": {
      "file": "test_auth.py",
      "path": "/data3/pwh/flask/examples/tutorial/tests",
      "start_line": 64,
      "end_line": 69
    },
    "code_snippet": "def test_logout(client, auth):\n    auth.login()\n\n    with client:\n        auth.logout()\n        assert \"user_id\" not in session"
  },
  {
    "name": "test_get_close_db",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app"
    ],
    "calls": [
      "app.app_context",
      "get_db",
      "pytest.raises",
      "db.execute",
      "str",
      "get_db"
    ],
    "code_location": {
      "file": "test_db.py",
      "path": "/data3/pwh/flask/examples/tutorial/tests",
      "start_line": 8,
      "end_line": 16
    },
    "code_snippet": "def test_get_close_db(app):\n    with app.app_context():\n        db = get_db()\n        assert db is get_db()\n\n    with pytest.raises(sqlite3.ProgrammingError) as e:\n        db.execute(\"SELECT 1\")\n\n    assert \"closed\" in str(e.value)"
  },
  {
    "name": "test_init_db_command",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "runner",
      "monkeypatch"
    ],
    "calls": [
      "monkeypatch.setattr",
      "runner.invoke"
    ],
    "code_location": {
      "file": "test_db.py",
      "path": "/data3/pwh/flask/examples/tutorial/tests",
      "start_line": 19,
      "end_line": 29
    },
    "code_snippet": "def test_init_db_command(runner, monkeypatch):\n    class Recorder:\n        called = False\n\n    def fake_init_db():\n        Recorder.called = True\n\n    monkeypatch.setattr(\"flaskr.db.init_db\", fake_init_db)\n    result = runner.invoke(args=[\"init-db\"])\n    assert \"Initialized\" in result.output\n    assert Recorder.called"
  },
  {
    "name": "app",
    "docstring": "Create and configure a new app instance for each test.",
    "is_method": false,
    "class_name": null,
    "parameters": [],
    "calls": [
      "tempfile.mkstemp",
      "create_app",
      "os.close",
      "os.unlink",
      "app.app_context",
      "init_db",
      "executescript",
      "get_db"
    ],
    "code_location": {
      "file": "conftest.py",
      "path": "/data3/pwh/flask/examples/tutorial/tests",
      "start_line": 16,
      "end_line": 32
    },
    "code_snippet": "def app():\n    \"\"\"Create and configure a new app instance for each test.\"\"\"\n    # create a temporary file to isolate the database for each test\n    db_fd, db_path = tempfile.mkstemp()\n    # create the app with common test config\n    app = create_app({\"TESTING\": True, \"DATABASE\": db_path})\n\n    # create the database and load test data\n    with app.app_context():\n        init_db()\n        get_db().executescript(_data_sql)\n\n    yield app\n\n    # close and remove the temporary database\n    os.close(d..."
  },
  {
    "name": "client",
    "docstring": "A test client for the app.",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app"
    ],
    "calls": [
      "app.test_client"
    ],
    "code_location": {
      "file": "conftest.py",
      "path": "/data3/pwh/flask/examples/tutorial/tests",
      "start_line": 36,
      "end_line": 38
    },
    "code_snippet": "def client(app):\n    \"\"\"A test client for the app.\"\"\"\n    return app.test_client()"
  },
  {
    "name": "runner",
    "docstring": "A test runner for the app's Click commands.",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app"
    ],
    "calls": [
      "app.test_cli_runner"
    ],
    "code_location": {
      "file": "conftest.py",
      "path": "/data3/pwh/flask/examples/tutorial/tests",
      "start_line": 42,
      "end_line": 44
    },
    "code_snippet": "def runner(app):\n    \"\"\"A test runner for the app's Click commands.\"\"\"\n    return app.test_cli_runner()"
  },
  {
    "name": "__init__",
    "docstring": "",
    "is_method": true,
    "class_name": "AuthActions",
    "parameters": [
      "self",
      "client"
    ],
    "calls": [],
    "code_location": {
      "file": "conftest.py",
      "path": "/data3/pwh/flask/examples/tutorial/tests",
      "start_line": 48,
      "end_line": 49
    },
    "code_snippet": "def __init__(self, client):\n        self._client = client"
  },
  {
    "name": "login",
    "docstring": "",
    "is_method": true,
    "class_name": "AuthActions",
    "parameters": [
      "self",
      "username",
      "password"
    ],
    "calls": [
      "self._client.post"
    ],
    "code_location": {
      "file": "conftest.py",
      "path": "/data3/pwh/flask/examples/tutorial/tests",
      "start_line": 51,
      "end_line": 54
    },
    "code_snippet": "def login(self, username=\"test\", password=\"test\"):\n        return self._client.post(\n            \"/auth/login\", data={\"username\": username, \"password\": password}\n        )"
  },
  {
    "name": "logout",
    "docstring": "",
    "is_method": true,
    "class_name": "AuthActions",
    "parameters": [
      "self"
    ],
    "calls": [
      "self._client.get"
    ],
    "code_location": {
      "file": "conftest.py",
      "path": "/data3/pwh/flask/examples/tutorial/tests",
      "start_line": 56,
      "end_line": 57
    },
    "code_snippet": "def logout(self):\n        return self._client.get(\"/auth/logout\")"
  },
  {
    "name": "auth",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "client"
    ],
    "calls": [
      "AuthActions"
    ],
    "code_location": {
      "file": "conftest.py",
      "path": "/data3/pwh/flask/examples/tutorial/tests",
      "start_line": 61,
      "end_line": 62
    },
    "code_snippet": "def auth(client):\n    return AuthActions(client)"
  },
  {
    "name": "test_config",
    "docstring": "Test create_app without passing test config.",
    "is_method": false,
    "class_name": null,
    "parameters": [],
    "calls": [
      "create_app",
      "create_app"
    ],
    "code_location": {
      "file": "test_factory.py",
      "path": "/data3/pwh/flask/examples/tutorial/tests",
      "start_line": 4,
      "end_line": 7
    },
    "code_snippet": "def test_config():\n    \"\"\"Test create_app without passing test config.\"\"\"\n    assert not create_app().testing\n    assert create_app({\"TESTING\": True}).testing"
  },
  {
    "name": "test_hello",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "client"
    ],
    "calls": [
      "client.get"
    ],
    "code_location": {
      "file": "test_factory.py",
      "path": "/data3/pwh/flask/examples/tutorial/tests",
      "start_line": 10,
      "end_line": 12
    },
    "code_snippet": "def test_hello(client):\n    response = client.get(\"/hello\")\n    assert response.data == b\"Hello, World!\""
  },
  {
    "name": "test_index",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "client",
      "auth"
    ],
    "calls": [
      "client.get",
      "auth.login",
      "client.get"
    ],
    "code_location": {
      "file": "test_blog.py",
      "path": "/data3/pwh/flask/examples/tutorial/tests",
      "start_line": 6,
      "end_line": 16
    },
    "code_snippet": "def test_index(client, auth):\n    response = client.get(\"/\")\n    assert b\"Log In\" in response.data\n    assert b\"Register\" in response.data\n\n    auth.login()\n    response = client.get(\"/\")\n    assert b\"test title\" in response.data\n    assert b\"by test on 2018-01-01\" in response.data\n    assert b\"test\\nbody\" in response.data\n    assert b'href=\"/1/update\"' in response.data"
  },
  {
    "name": "test_login_required",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "client",
      "path"
    ],
    "calls": [
      "pytest.mark.parametrize",
      "client.post"
    ],
    "code_location": {
      "file": "test_blog.py",
      "path": "/data3/pwh/flask/examples/tutorial/tests",
      "start_line": 20,
      "end_line": 22
    },
    "code_snippet": "def test_login_required(client, path):\n    response = client.post(path)\n    assert response.headers[\"Location\"] == \"/auth/login\""
  },
  {
    "name": "test_author_required",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "client",
      "auth"
    ],
    "calls": [
      "auth.login",
      "app.app_context",
      "get_db",
      "db.execute",
      "db.commit",
      "client.post",
      "client.post",
      "client.get"
    ],
    "code_location": {
      "file": "test_blog.py",
      "path": "/data3/pwh/flask/examples/tutorial/tests",
      "start_line": 25,
      "end_line": 37
    },
    "code_snippet": "def test_author_required(app, client, auth):\n    # change the post author to another user\n    with app.app_context():\n        db = get_db()\n        db.execute(\"UPDATE post SET author_id = 2 WHERE id = 1\")\n        db.commit()\n\n    auth.login()\n    # current user can't modify other user's post\n    assert client.post(\"/1/update\").status_code == 403\n    assert client.post(\"/1/delete\").status_code == 403\n    # current user doesn't see edit link\n    assert b'href=\"/1/update\"' not in client.get(\"/\").da..."
  },
  {
    "name": "test_exists_required",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "client",
      "auth",
      "path"
    ],
    "calls": [
      "pytest.mark.parametrize",
      "auth.login",
      "client.post"
    ],
    "code_location": {
      "file": "test_blog.py",
      "path": "/data3/pwh/flask/examples/tutorial/tests",
      "start_line": 41,
      "end_line": 43
    },
    "code_snippet": "def test_exists_required(client, auth, path):\n    auth.login()\n    assert client.post(path).status_code == 404"
  },
  {
    "name": "test_create",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "client",
      "auth",
      "app"
    ],
    "calls": [
      "auth.login",
      "client.post",
      "app.app_context",
      "get_db",
      "client.get",
      "fetchone",
      "db.execute"
    ],
    "code_location": {
      "file": "test_blog.py",
      "path": "/data3/pwh/flask/examples/tutorial/tests",
      "start_line": 46,
      "end_line": 54
    },
    "code_snippet": "def test_create(client, auth, app):\n    auth.login()\n    assert client.get(\"/create\").status_code == 200\n    client.post(\"/create\", data={\"title\": \"created\", \"body\": \"\"})\n\n    with app.app_context():\n        db = get_db()\n        count = db.execute(\"SELECT COUNT(id) FROM post\").fetchone()[0]\n        assert count == 2"
  },
  {
    "name": "test_update",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "client",
      "auth",
      "app"
    ],
    "calls": [
      "auth.login",
      "client.post",
      "app.app_context",
      "get_db",
      "fetchone",
      "client.get",
      "db.execute"
    ],
    "code_location": {
      "file": "test_blog.py",
      "path": "/data3/pwh/flask/examples/tutorial/tests",
      "start_line": 57,
      "end_line": 65
    },
    "code_snippet": "def test_update(client, auth, app):\n    auth.login()\n    assert client.get(\"/1/update\").status_code == 200\n    client.post(\"/1/update\", data={\"title\": \"updated\", \"body\": \"\"})\n\n    with app.app_context():\n        db = get_db()\n        post = db.execute(\"SELECT * FROM post WHERE id = 1\").fetchone()\n        assert post[\"title\"] == \"updated\""
  },
  {
    "name": "test_create_update_validate",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "client",
      "auth",
      "path"
    ],
    "calls": [
      "pytest.mark.parametrize",
      "auth.login",
      "client.post"
    ],
    "code_location": {
      "file": "test_blog.py",
      "path": "/data3/pwh/flask/examples/tutorial/tests",
      "start_line": 69,
      "end_line": 72
    },
    "code_snippet": "def test_create_update_validate(client, auth, path):\n    auth.login()\n    response = client.post(path, data={\"title\": \"\", \"body\": \"\"})\n    assert b\"Title is required.\" in response.data"
  },
  {
    "name": "test_delete",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "client",
      "auth",
      "app"
    ],
    "calls": [
      "auth.login",
      "client.post",
      "app.app_context",
      "get_db",
      "fetchone",
      "db.execute"
    ],
    "code_location": {
      "file": "test_blog.py",
      "path": "/data3/pwh/flask/examples/tutorial/tests",
      "start_line": 75,
      "end_line": 83
    },
    "code_snippet": "def test_delete(client, auth, app):\n    auth.login()\n    response = client.post(\"/1/delete\")\n    assert response.headers[\"Location\"] == \"/\"\n\n    with app.app_context():\n        db = get_db()\n        post = db.execute(\"SELECT * FROM post WHERE id = 1\").fetchone()\n        assert post is None"
  },
  {
    "name": "create_app",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [],
    "calls": [
      "Flask",
      "app.config.from_mapping",
      "app.config.from_prefixed_env",
      "celery_init_app",
      "app.route",
      "app.register_blueprint",
      "render_template",
      "dict"
    ],
    "code_location": {
      "file": "__init__.py",
      "path": "/data3/pwh/flask/examples/celery/src/task_app",
      "start_line": 7,
      "end_line": 26
    },
    "code_snippet": "def create_app() -> Flask:\n    app = Flask(__name__)\n    app.config.from_mapping(\n        CELERY=dict(\n            broker_url=\"redis://localhost\",\n            result_backend=\"redis://localhost\",\n            task_ignore_result=True,\n        ),\n    )\n    app.config.from_prefixed_env()\n    celery_init_app(app)\n\n    @app.route(\"/\")\n    def index() -> str:\n        return render_template(\"index.html\")\n\n    from . import views\n\n    app.register_blueprint(views.bp)\n    return app"
  },
  {
    "name": "celery_init_app",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app"
    ],
    "calls": [
      "Celery",
      "celery_app.config_from_object",
      "celery_app.set_default",
      "app.app_context",
      "self.run"
    ],
    "code_location": {
      "file": "__init__.py",
      "path": "/data3/pwh/flask/examples/celery/src/task_app",
      "start_line": 29,
      "end_line": 39
    },
    "code_snippet": "def celery_init_app(app: Flask) -> Celery:\n    class FlaskTask(Task):\n        def __call__(self, *args: object, **kwargs: object) -> object:\n            with app.app_context():\n                return self.run(*args, **kwargs)\n\n    celery_app = Celery(app.name, task_cls=FlaskTask)\n    celery_app.config_from_object(app.config[\"CELERY\"])\n    celery_app.set_default()\n    app.extensions[\"celery\"] = celery_app\n    return celery_app"
  },
  {
    "name": "result",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "id"
    ],
    "calls": [
      "bp.get",
      "AsyncResult",
      "result.ready",
      "result.successful",
      "result.get"
    ],
    "code_location": {
      "file": "views.py",
      "path": "/data3/pwh/flask/examples/celery/src/task_app",
      "start_line": 11,
      "end_line": 18
    },
    "code_snippet": "def result(id: str) -> dict[str, object]:\n    result = AsyncResult(id)\n    ready = result.ready()\n    return {\n        \"ready\": ready,\n        \"successful\": result.successful() if ready else None,\n        \"value\": result.get() if ready else result.result,\n    }"
  },
  {
    "name": "add",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [],
    "calls": [
      "bp.post",
      "request.form.get",
      "request.form.get",
      "tasks.add.delay"
    ],
    "code_location": {
      "file": "views.py",
      "path": "/data3/pwh/flask/examples/celery/src/task_app",
      "start_line": 22,
      "end_line": 26
    },
    "code_snippet": "def add() -> dict[str, object]:\n    a = request.form.get(\"a\", type=int)\n    b = request.form.get(\"b\", type=int)\n    result = tasks.add.delay(a, b)\n    return {\"result_id\": result.id}"
  },
  {
    "name": "block",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [],
    "calls": [
      "bp.post",
      "tasks.block.delay"
    ],
    "code_location": {
      "file": "views.py",
      "path": "/data3/pwh/flask/examples/celery/src/task_app",
      "start_line": 30,
      "end_line": 32
    },
    "code_snippet": "def block() -> dict[str, object]:\n    result = tasks.block.delay()\n    return {\"result_id\": result.id}"
  },
  {
    "name": "process",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [],
    "calls": [
      "bp.post",
      "tasks.process.delay",
      "request.form.get"
    ],
    "code_location": {
      "file": "views.py",
      "path": "/data3/pwh/flask/examples/celery/src/task_app",
      "start_line": 36,
      "end_line": 38
    },
    "code_snippet": "def process() -> dict[str, object]:\n    result = tasks.process.delay(total=request.form.get(\"total\", type=int))\n    return {\"result_id\": result.id}"
  },
  {
    "name": "add",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "a",
      "b"
    ],
    "calls": [
      "shared_task"
    ],
    "code_location": {
      "file": "tasks.py",
      "path": "/data3/pwh/flask/examples/celery/src/task_app",
      "start_line": 8,
      "end_line": 9
    },
    "code_snippet": "def add(a: int, b: int) -> int:\n    return a + b"
  },
  {
    "name": "block",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [],
    "calls": [
      "shared_task",
      "time.sleep"
    ],
    "code_location": {
      "file": "tasks.py",
      "path": "/data3/pwh/flask/examples/celery/src/task_app",
      "start_line": 13,
      "end_line": 14
    },
    "code_snippet": "def block() -> None:\n    time.sleep(5)"
  },
  {
    "name": "process",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "self",
      "total"
    ],
    "calls": [
      "shared_task",
      "range",
      "self.update_state",
      "time.sleep"
    ],
    "code_location": {
      "file": "tasks.py",
      "path": "/data3/pwh/flask/examples/celery/src/task_app",
      "start_line": 18,
      "end_line": 23
    },
    "code_snippet": "def process(self: Task, total: int) -> object:\n    for i in range(total):\n        self.update_state(state=\"PROGRESS\", meta={\"current\": i + 1, \"total\": total})\n        time.sleep(1)\n\n    return {\"current\": total, \"total\": total}"
  },
  {
    "name": "test_bad_request_debug_message",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "client",
      "debug"
    ],
    "calls": [
      "pytest.mark.parametrize",
      "app.route",
      "client.post",
      "flask.request.get_json"
    ],
    "code_location": {
      "file": "test_json.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 15,
      "end_line": 27
    },
    "code_snippet": "def test_bad_request_debug_message(app, client, debug):\n    app.config[\"DEBUG\"] = debug\n    app.config[\"TRAP_BAD_REQUEST_ERRORS\"] = False\n\n    @app.route(\"/json\", methods=[\"POST\"])\n    def post_json():\n        flask.request.get_json()\n        return None\n\n    rv = client.post(\"/json\", data=None, content_type=\"application/json\")\n    assert rv.status_code == 400\n    contains = b\"Failed to decode JSON object\" in rv.data\n    assert contains == debug"
  },
  {
    "name": "test_json_bad_requests",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "client"
    ],
    "calls": [
      "app.route",
      "client.post",
      "flask.jsonify",
      "str",
      "flask.request.get_json"
    ],
    "code_location": {
      "file": "test_json.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 30,
      "end_line": 36
    },
    "code_snippet": "def test_json_bad_requests(app, client):\n    @app.route(\"/json\", methods=[\"POST\"])\n    def return_json():\n        return flask.jsonify(foo=str(flask.request.get_json()))\n\n    rv = client.post(\"/json\", data=\"malformed\", content_type=\"application/json\")\n    assert rv.status_code == 400"
  },
  {
    "name": "test_json_custom_mimetypes",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "client"
    ],
    "calls": [
      "app.route",
      "client.post",
      "flask.request.get_json"
    ],
    "code_location": {
      "file": "test_json.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 39,
      "end_line": 45
    },
    "code_snippet": "def test_json_custom_mimetypes(app, client):\n    @app.route(\"/json\", methods=[\"POST\"])\n    def return_json():\n        return flask.request.get_json()\n\n    rv = client.post(\"/json\", data='\"foo\"', content_type=\"application/x+json\")\n    assert rv.data == b\"foo\""
  },
  {
    "name": "test_json_as_unicode",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "test_value",
      "expected",
      "app",
      "app_ctx"
    ],
    "calls": [
      "pytest.mark.parametrize",
      "app.json.dumps"
    ],
    "code_location": {
      "file": "test_json.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 51,
      "end_line": 54
    },
    "code_snippet": "def test_json_as_unicode(test_value, expected, app, app_ctx):\n    app.json.ensure_ascii = test_value\n    rv = app.json.dumps(\"\\N{SNOWMAN}\")\n    assert rv == expected"
  },
  {
    "name": "test_json_dump_to_file",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "app_ctx"
    ],
    "calls": [
      "io.StringIO",
      "flask.json.dump",
      "out.seek",
      "flask.json.load"
    ],
    "code_location": {
      "file": "test_json.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 57,
      "end_line": 64
    },
    "code_snippet": "def test_json_dump_to_file(app, app_ctx):\n    test_data = {\"name\": \"Flask\"}\n    out = io.StringIO()\n\n    flask.json.dump(test_data, out)\n    out.seek(0)\n    rv = flask.json.load(out)\n    assert rv == test_data"
  },
  {
    "name": "test_jsonify_basic_types",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "test_value",
      "app",
      "client"
    ],
    "calls": [
      "pytest.mark.parametrize",
      "app.add_url_rule",
      "client.get",
      "flask.json.loads",
      "flask.jsonify"
    ],
    "code_location": {
      "file": "test_json.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 70,
      "end_line": 75
    },
    "code_snippet": "def test_jsonify_basic_types(test_value, app, client):\n    url = \"/jsonify_basic_types\"\n    app.add_url_rule(url, url, lambda x=test_value: flask.jsonify(x))\n    rv = client.get(url)\n    assert rv.mimetype == \"application/json\"\n    assert flask.json.loads(rv.data) == test_value"
  },
  {
    "name": "test_jsonify_dicts",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "client"
    ],
    "calls": [
      "app.route",
      "app.route",
      "flask.jsonify",
      "flask.jsonify",
      "client.get",
      "flask.json.loads"
    ],
    "code_location": {
      "file": "test_json.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 78,
      "end_line": 102
    },
    "code_snippet": "def test_jsonify_dicts(app, client):\n    d = {\n        \"a\": 0,\n        \"b\": 23,\n        \"c\": 3.14,\n        \"d\": \"t\",\n        \"e\": \"Hi\",\n        \"f\": True,\n        \"g\": False,\n        \"h\": [\"test list\", 10, False],\n        \"i\": {\"test\": \"dict\"},\n    }\n\n    @app.route(\"/kw\")\n    def return_kwargs():\n        return flask.jsonify(**d)\n\n    @app.route(\"/dict\")\n    def return_dict():\n        return flask.jsonify(d)\n\n    for url in \"/kw\", \"/dict\":\n        rv = client.get(url)\n        assert rv.mimetype..."
  },
  {
    "name": "test_jsonify_arrays",
    "docstring": "Test jsonify of lists and args unpacking.",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "client"
    ],
    "calls": [
      "app.route",
      "app.route",
      "flask.jsonify",
      "flask.jsonify",
      "client.get",
      "flask.json.loads"
    ],
    "code_location": {
      "file": "test_json.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 105,
      "end_line": 130
    },
    "code_snippet": "def test_jsonify_arrays(app, client):\n    \"\"\"Test jsonify of lists and args unpacking.\"\"\"\n    a_list = [\n        0,\n        42,\n        3.14,\n        \"t\",\n        \"hello\",\n        True,\n        False,\n        [\"test list\", 2, False],\n        {\"test\": \"dict\"},\n    ]\n\n    @app.route(\"/args_unpack\")\n    def return_args_unpack():\n        return flask.jsonify(*a_list)\n\n    @app.route(\"/array\")\n    def return_array():\n        return flask.jsonify(a_list)\n\n    for url in \"/args_unpack\", \"/array\":\n     ..."
  },
  {
    "name": "test_jsonify_datetime",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "client",
      "value"
    ],
    "calls": [
      "pytest.mark.parametrize",
      "app.route",
      "client.get",
      "flask.jsonify",
      "http_date",
      "datetime.datetime",
      "datetime.date"
    ],
    "code_location": {
      "file": "test_json.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 136,
      "end_line": 142
    },
    "code_snippet": "def test_jsonify_datetime(app, client, value):\n    @app.route(\"/\")\n    def index():\n        return flask.jsonify(value=value)\n\n    r = client.get()\n    assert r.json[\"value\"] == http_date(value)"
  },
  {
    "name": "__init__",
    "docstring": "",
    "is_method": true,
    "class_name": "FixedOffset",
    "parameters": [
      "self",
      "hours",
      "name"
    ],
    "calls": [
      "datetime.timedelta"
    ],
    "code_location": {
      "file": "test_json.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 152,
      "end_line": 154
    },
    "code_snippet": "def __init__(self, hours, name):\n        self.__offset = datetime.timedelta(hours=hours)\n        self.__name = name"
  },
  {
    "name": "utcoffset",
    "docstring": "",
    "is_method": true,
    "class_name": "FixedOffset",
    "parameters": [
      "self",
      "dt"
    ],
    "calls": [],
    "code_location": {
      "file": "test_json.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 156,
      "end_line": 157
    },
    "code_snippet": "def utcoffset(self, dt):\n        return self.__offset"
  },
  {
    "name": "tzname",
    "docstring": "",
    "is_method": true,
    "class_name": "FixedOffset",
    "parameters": [
      "self",
      "dt"
    ],
    "calls": [],
    "code_location": {
      "file": "test_json.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 159,
      "end_line": 160
    },
    "code_snippet": "def tzname(self, dt):\n        return self.__name"
  },
  {
    "name": "dst",
    "docstring": "",
    "is_method": true,
    "class_name": "FixedOffset",
    "parameters": [
      "self",
      "dt"
    ],
    "calls": [
      "datetime.timedelta"
    ],
    "code_location": {
      "file": "test_json.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 162,
      "end_line": 163
    },
    "code_snippet": "def dst(self, dt):\n        return datetime.timedelta()"
  },
  {
    "name": "test_jsonify_aware_datetimes",
    "docstring": "Test if aware datetime.datetime objects are converted into GMT.",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "tz"
    ],
    "calls": [
      "pytest.mark.parametrize",
      "FixedOffset",
      "datetime.datetime",
      "FixedOffset",
      "strftime",
      "flask.json.dumps",
      "dt.astimezone"
    ],
    "code_location": {
      "file": "test_json.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 167,
      "end_line": 173
    },
    "code_snippet": "def test_jsonify_aware_datetimes(tz):\n    \"\"\"Test if aware datetime.datetime objects are converted into GMT.\"\"\"\n    tzinfo = FixedOffset(hours=tz[1], name=tz[0])\n    dt = datetime.datetime(2017, 1, 1, 12, 34, 56, tzinfo=tzinfo)\n    gmt = FixedOffset(hours=0, name=\"GMT\")\n    expected = dt.astimezone(gmt).strftime('\"%a, %d %b %Y %H:%M:%S %Z\"')\n    assert flask.json.dumps(dt) == expected"
  },
  {
    "name": "test_jsonify_uuid_types",
    "docstring": "Test jsonify with uuid.UUID types",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "client"
    ],
    "calls": [
      "uuid.UUID",
      "app.add_url_rule",
      "client.get",
      "uuid.UUID",
      "flask.json.loads",
      "str",
      "flask.jsonify"
    ],
    "code_location": {
      "file": "test_json.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 176,
      "end_line": 188
    },
    "code_snippet": "def test_jsonify_uuid_types(app, client):\n    \"\"\"Test jsonify with uuid.UUID types\"\"\"\n\n    test_uuid = uuid.UUID(bytes=b\"\\xde\\xad\\xbe\\xef\" * 4)\n    url = \"/uuid_test\"\n    app.add_url_rule(url, url, lambda: flask.jsonify(x=test_uuid))\n\n    rv = client.get(url)\n\n    rv_x = flask.json.loads(rv.data)[\"x\"]\n    assert rv_x == str(test_uuid)\n    rv_uuid = uuid.UUID(rv_x)\n    assert rv_uuid == test_uuid"
  },
  {
    "name": "test_json_decimal",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [],
    "calls": [
      "flask.json.dumps",
      "decimal.Decimal"
    ],
    "code_location": {
      "file": "test_json.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 191,
      "end_line": 193
    },
    "code_snippet": "def test_json_decimal():\n    rv = flask.json.dumps(decimal.Decimal(\"0.003\"))\n    assert rv == '\"0.003\"'"
  },
  {
    "name": "test_json_attr",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "client"
    ],
    "calls": [
      "app.route",
      "client.post",
      "flask.request.get_json",
      "str",
      "flask.json.dumps"
    ],
    "code_location": {
      "file": "test_json.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 196,
      "end_line": 207
    },
    "code_snippet": "def test_json_attr(app, client):\n    @app.route(\"/add\", methods=[\"POST\"])\n    def add():\n        json = flask.request.get_json()\n        return str(json[\"a\"] + json[\"b\"])\n\n    rv = client.post(\n        \"/add\",\n        data=flask.json.dumps({\"a\": 1, \"b\": 2}),\n        content_type=\"application/json\",\n    )\n    assert rv.data == b\"3\""
  },
  {
    "name": "test_tojson_filter",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "req_ctx"
    ],
    "calls": [
      "flask.render_template_string",
      "datetime.datetime"
    ],
    "code_location": {
      "file": "test_json.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 210,
      "end_line": 220
    },
    "code_snippet": "def test_tojson_filter(app, req_ctx):\n    # The tojson filter is tested in Jinja, this confirms that it's\n    # using Flask's dumps.\n    rv = flask.render_template_string(\n        \"const data = {{ data|tojson }};\",\n        data={\"name\": \"</script>\", \"time\": datetime.datetime(2021, 2, 1, 7, 15)},\n    )\n    assert rv == (\n        'const data = {\"name\": \"\\\\u003c/script\\\\u003e\",'\n        ' \"time\": \"Mon, 01 Feb 2021 07:15:00 GMT\"};'\n    )"
  },
  {
    "name": "test_json_customization",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "client"
    ],
    "calls": [
      "CustomProvider",
      "app.route",
      "client.post",
      "isinstance",
      "DefaultJSONProvider.default",
      "flask.json.dumps",
      "kwargs.setdefault",
      "loads",
      "flask.json.dumps",
      "X",
      "flask.request.get_json",
      "len",
      "super"
    ],
    "code_location": {
      "file": "test_json.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 223,
      "end_line": 257
    },
    "code_snippet": "def test_json_customization(app, client):\n    class X:  # noqa: B903, for Python2 compatibility\n        def __init__(self, val):\n            self.val = val\n\n    def default(o):\n        if isinstance(o, X):\n            return f\"<{o.val}>\"\n\n        return DefaultJSONProvider.default(o)\n\n    class CustomProvider(DefaultJSONProvider):\n        def object_hook(self, obj):\n            if len(obj) == 1 and \"_foo\" in obj:\n                return X(obj[\"_foo\"])\n\n            return obj\n\n        def loads(se..."
  },
  {
    "name": "_has_encoding",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "name"
    ],
    "calls": [
      "codecs.lookup"
    ],
    "code_location": {
      "file": "test_json.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 260,
      "end_line": 267
    },
    "code_snippet": "def _has_encoding(name):\n    try:\n        import codecs\n\n        codecs.lookup(name)\n        return True\n    except LookupError:\n        return False"
  },
  {
    "name": "test_json_key_sorting",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "client"
    ],
    "calls": [
      "dict.fromkeys",
      "app.route",
      "client.get",
      "range",
      "flask.jsonify",
      "x.strip",
      "splitlines",
      "decode",
      "rv.data.strip"
    ],
    "code_location": {
      "file": "test_json.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 270,
      "end_line": 337
    },
    "code_snippet": "def test_json_key_sorting(app, client):\n    app.debug = True\n    assert app.json.sort_keys\n    d = dict.fromkeys(range(20), \"foo\")\n\n    @app.route(\"/\")\n    def index():\n        return flask.jsonify(values=d)\n\n    rv = client.get(\"/\")\n    lines = [x.strip() for x in rv.data.strip().decode(\"utf-8\").splitlines()]\n    sorted_by_str = [\n        \"{\",\n        '\"values\": {',\n        '\"0\": \"foo\",',\n        '\"1\": \"foo\",',\n        '\"10\": \"foo\",',\n        '\"11\": \"foo\",',\n        '\"12\": \"foo\",',\n        '\"13..."
  },
  {
    "name": "test_html_method",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [],
    "calls": [
      "json.dumps",
      "ObjectWithHTML"
    ],
    "code_location": {
      "file": "test_json.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 340,
      "end_line": 346
    },
    "code_snippet": "def test_html_method():\n    class ObjectWithHTML:\n        def __html__(self):\n            return \"<p>test</p>\"\n\n    result = json.dumps(ObjectWithHTML())\n    assert result == '\"<p>test</p>\"'"
  },
  {
    "name": "test_suppressed_exception_logging",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [],
    "calls": [
      "StringIO",
      "SuppressedFlask",
      "app.route",
      "get",
      "Exception",
      "out.getvalue",
      "app.test_client"
    ],
    "code_location": {
      "file": "test_subclassing.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 6,
      "end_line": 21
    },
    "code_snippet": "def test_suppressed_exception_logging():\n    class SuppressedFlask(flask.Flask):\n        def log_exception(self, exc_info):\n            pass\n\n    out = StringIO()\n    app = SuppressedFlask(__name__)\n\n    @app.route(\"/\")\n    def index():\n        raise Exception(\"test\")\n\n    rv = app.test_client().get(\"/\", errors_stream=out)\n    assert rv.status_code == 500\n    assert b\"Internal Server Error\" in rv.data\n    assert not out.getvalue()"
  },
  {
    "name": "test_dump_load_unchanged",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "data"
    ],
    "calls": [
      "pytest.mark.parametrize",
      "TaggedJSONSerializer",
      "s.loads",
      "Markup",
      "uuid4",
      "replace",
      "s.dumps",
      "datetime.now"
    ],
    "code_location": {
      "file": "test_json_tag.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 27,
      "end_line": 29
    },
    "code_snippet": "def test_dump_load_unchanged(data):\n    s = TaggedJSONSerializer()\n    assert s.loads(s.dumps(data)) == data"
  },
  {
    "name": "test_duplicate_tag",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [],
    "calls": [
      "TaggedJSONSerializer",
      "pytest.raises",
      "s.register",
      "isinstance",
      "isinstance"
    ],
    "code_location": {
      "file": "test_json_tag.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 32,
      "end_line": 40
    },
    "code_snippet": "def test_duplicate_tag():\n    class TagDict(JSONTag):\n        key = \" d\"\n\n    s = TaggedJSONSerializer()\n    pytest.raises(KeyError, s.register, TagDict)\n    s.register(TagDict, force=True, index=0)\n    assert isinstance(s.tags[\" d\"], TagDict)\n    assert isinstance(s.order[0], TagDict)"
  },
  {
    "name": "test_custom_tag",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [],
    "calls": [
      "TaggedJSONSerializer",
      "s.register",
      "isinstance",
      "self.serializer.tag",
      "Foo",
      "s.loads",
      "s.dumps",
      "Foo"
    ],
    "code_location": {
      "file": "test_json_tag.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 43,
      "end_line": 63
    },
    "code_snippet": "def test_custom_tag():\n    class Foo:  # noqa: B903, for Python2 compatibility\n        def __init__(self, data):\n            self.data = data\n\n    class TagFoo(JSONTag):\n        __slots__ = ()\n        key = \" f\"\n\n        def check(self, value):\n            return isinstance(value, Foo)\n\n        def to_json(self, value):\n            return self.serializer.tag(value.data)\n\n        def to_python(self, value):\n            return Foo(value)\n\n    s = TaggedJSONSerializer()\n    s.register(TagFoo)\n    a..."
  },
  {
    "name": "test_tag_interface",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [],
    "calls": [
      "JSONTag",
      "pytest.raises",
      "pytest.raises",
      "pytest.raises"
    ],
    "code_location": {
      "file": "test_json_tag.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 66,
      "end_line": 70
    },
    "code_snippet": "def test_tag_interface():\n    t = JSONTag(None)\n    pytest.raises(NotImplementedError, t.check, None)\n    pytest.raises(NotImplementedError, t.to_json, None)\n    pytest.raises(NotImplementedError, t.to_python, None)"
  },
  {
    "name": "test_tag_order",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [],
    "calls": [
      "TaggedJSONSerializer",
      "s.register",
      "isinstance",
      "s.register",
      "isinstance"
    ],
    "code_location": {
      "file": "test_json_tag.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 73,
      "end_line": 86
    },
    "code_snippet": "def test_tag_order():\n    class Tag1(JSONTag):\n        key = \" 1\"\n\n    class Tag2(JSONTag):\n        key = \" 2\"\n\n    s = TaggedJSONSerializer()\n\n    s.register(Tag1, index=-1)\n    assert isinstance(s.order[-2], Tag1)\n\n    s.register(Tag2, index=None)\n    assert isinstance(s.order[-1], Tag2)"
  },
  {
    "name": "test_environ_defaults_from_config",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "client"
    ],
    "calls": [
      "app.route",
      "app.test_request_context",
      "client.get"
    ],
    "code_location": {
      "file": "test_testing.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 15,
      "end_line": 27
    },
    "code_snippet": "def test_environ_defaults_from_config(app, client):\n    app.config[\"SERVER_NAME\"] = \"example.com:1234\"\n    app.config[\"APPLICATION_ROOT\"] = \"/foo\"\n\n    @app.route(\"/\")\n    def index():\n        return flask.request.url\n\n    ctx = app.test_request_context()\n    assert ctx.request.url == \"http://example.com:1234/foo/\"\n\n    rv = client.get(\"/\")\n    assert rv.data == b\"http://example.com:1234/foo/\""
  },
  {
    "name": "test_environ_defaults",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "client",
      "app_ctx",
      "req_ctx"
    ],
    "calls": [
      "app.route",
      "app.test_request_context",
      "client.get"
    ],
    "code_location": {
      "file": "test_testing.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 30,
      "end_line": 39
    },
    "code_snippet": "def test_environ_defaults(app, client, app_ctx, req_ctx):\n    @app.route(\"/\")\n    def index():\n        return flask.request.url\n\n    ctx = app.test_request_context()\n    assert ctx.request.url == \"http://localhost/\"\n    with client:\n        rv = client.get(\"/\")\n        assert rv.data == b\"http://localhost/\""
  },
  {
    "name": "test_environ_base_default",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "client"
    ],
    "calls": [
      "app.route",
      "client.get",
      "importlib.metadata.version"
    ],
    "code_location": {
      "file": "test_testing.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 42,
      "end_line": 54
    },
    "code_snippet": "def test_environ_base_default(app, client):\n    @app.route(\"/\")\n    def index():\n        flask.g.remote_addr = flask.request.remote_addr\n        flask.g.user_agent = flask.request.user_agent.string\n        return \"\"\n\n    with client:\n        client.get(\"/\")\n        assert flask.g.remote_addr == \"127.0.0.1\"\n        assert flask.g.user_agent == (\n            f\"Werkzeug/{importlib.metadata.version('werkzeug')}\"\n        )"
  },
  {
    "name": "test_environ_base_modified",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "client"
    ],
    "calls": [
      "app.route",
      "client.get"
    ],
    "code_location": {
      "file": "test_testing.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 57,
      "end_line": 70
    },
    "code_snippet": "def test_environ_base_modified(app, client):\n    @app.route(\"/\")\n    def index():\n        flask.g.remote_addr = flask.request.remote_addr\n        flask.g.user_agent = flask.request.user_agent.string\n        return \"\"\n\n    client.environ_base[\"REMOTE_ADDR\"] = \"192.168.0.22\"\n    client.environ_base[\"HTTP_USER_AGENT\"] = \"Foo\"\n\n    with client:\n        client.get(\"/\")\n        assert flask.g.remote_addr == \"192.168.0.22\"\n        assert flask.g.user_agent == \"Foo\""
  },
  {
    "name": "test_client_open_environ",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "client",
      "request"
    ],
    "calls": [
      "app.route",
      "EnvironBuilder",
      "request.addfinalizer",
      "client.open",
      "builder.get_environ",
      "client.open"
    ],
    "code_location": {
      "file": "test_testing.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 73,
      "end_line": 87
    },
    "code_snippet": "def test_client_open_environ(app, client, request):\n    @app.route(\"/index\")\n    def index():\n        return flask.request.remote_addr\n\n    builder = EnvironBuilder(app, path=\"/index\", method=\"GET\")\n    request.addfinalizer(builder.close)\n\n    rv = client.open(builder)\n    assert rv.data == b\"127.0.0.1\"\n\n    environ = builder.get_environ()\n    client.environ_base[\"REMOTE_ADDR\"] = \"127.0.0.2\"\n    rv = client.open(environ)\n    assert rv.data == b\"127.0.0.2\""
  },
  {
    "name": "test_specify_url_scheme",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "client"
    ],
    "calls": [
      "app.route",
      "app.test_request_context",
      "client.get"
    ],
    "code_location": {
      "file": "test_testing.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 90,
      "end_line": 99
    },
    "code_snippet": "def test_specify_url_scheme(app, client):\n    @app.route(\"/\")\n    def index():\n        return flask.request.url\n\n    ctx = app.test_request_context(url_scheme=\"https\")\n    assert ctx.request.url == \"https://localhost/\"\n\n    rv = client.get(\"/\", url_scheme=\"https\")\n    assert rv.data == b\"https://localhost/\""
  },
  {
    "name": "test_path_is_url",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app"
    ],
    "calls": [
      "EnvironBuilder"
    ],
    "code_location": {
      "file": "test_testing.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 102,
      "end_line": 107
    },
    "code_snippet": "def test_path_is_url(app):\n    eb = EnvironBuilder(app, \"https://example.com/\")\n    assert eb.url_scheme == \"https\"\n    assert eb.host == \"example.com\"\n    assert eb.script_root == \"\"\n    assert eb.path == \"/\""
  },
  {
    "name": "test_environbuilder_json_dumps",
    "docstring": "EnvironBuilder.json_dumps() takes settings from the app.",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app"
    ],
    "calls": [
      "EnvironBuilder",
      "decode",
      "eb.input_stream.read"
    ],
    "code_location": {
      "file": "test_testing.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 110,
      "end_line": 114
    },
    "code_snippet": "def test_environbuilder_json_dumps(app):\n    \"\"\"EnvironBuilder.json_dumps() takes settings from the app.\"\"\"\n    app.json.ensure_ascii = False\n    eb = EnvironBuilder(app, json=\"\\u20ac\")\n    assert eb.input_stream.read().decode(\"utf8\") == '\"\\u20ac\"'"
  },
  {
    "name": "test_blueprint_with_subdomain",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [],
    "calls": [
      "flask.Flask",
      "app.test_client",
      "flask.Blueprint",
      "bp.route",
      "app.register_blueprint",
      "app.test_request_context",
      "client.get"
    ],
    "code_location": {
      "file": "test_testing.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 117,
      "end_line": 138
    },
    "code_snippet": "def test_blueprint_with_subdomain():\n    app = flask.Flask(__name__, subdomain_matching=True)\n    app.config[\"SERVER_NAME\"] = \"example.com:1234\"\n    app.config[\"APPLICATION_ROOT\"] = \"/foo\"\n    client = app.test_client()\n\n    bp = flask.Blueprint(\"company\", __name__, subdomain=\"xxx\")\n\n    @bp.route(\"/\")\n    def index():\n        return flask.request.url\n\n    app.register_blueprint(bp)\n\n    ctx = app.test_request_context(\"/\", subdomain=\"xxx\")\n    assert ctx.request.url == \"http://xxx.example.com:12..."
  },
  {
    "name": "test_redirect_keep_session",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "client",
      "app_ctx"
    ],
    "calls": [
      "app.route",
      "app.route",
      "flask.session.get",
      "client.get",
      "client.get",
      "client.post",
      "client.get",
      "flask.redirect",
      "flask.session.get",
      "flask.session.get"
    ],
    "code_location": {
      "file": "test_testing.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 141,
      "end_line": 166
    },
    "code_snippet": "def test_redirect_keep_session(app, client, app_ctx):\n    @app.route(\"/\", methods=[\"GET\", \"POST\"])\n    def index():\n        if flask.request.method == \"POST\":\n            return flask.redirect(\"/getsession\")\n        flask.session[\"data\"] = \"foo\"\n        return \"index\"\n\n    @app.route(\"/getsession\")\n    def get_session():\n        return flask.session.get(\"data\", \"<missing>\")\n\n    with client:\n        rv = client.get(\"/getsession\")\n        assert rv.data == b\"<missing>\"\n\n        rv = client.get(\"/..."
  },
  {
    "name": "test_session_transactions",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "client"
    ],
    "calls": [
      "app.route",
      "str",
      "client.get",
      "client.session_transaction",
      "client.session_transaction",
      "len",
      "len",
      "len"
    ],
    "code_location": {
      "file": "test_testing.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 169,
      "end_line": 183
    },
    "code_snippet": "def test_session_transactions(app, client):\n    @app.route(\"/\")\n    def index():\n        return str(flask.session[\"foo\"])\n\n    with client:\n        with client.session_transaction() as sess:\n            assert len(sess) == 0\n            sess[\"foo\"] = [42]\n            assert len(sess) == 1\n        rv = client.get(\"/\")\n        assert rv.data == b\"[42]\"\n        with client.session_transaction() as sess:\n            assert len(sess) == 1\n            assert sess[\"foo\"] == [42]"
  },
  {
    "name": "test_session_transactions_no_null_sessions",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [],
    "calls": [
      "flask.Flask",
      "app.test_client",
      "pytest.raises",
      "str",
      "c.session_transaction"
    ],
    "code_location": {
      "file": "test_testing.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 186,
      "end_line": 193
    },
    "code_snippet": "def test_session_transactions_no_null_sessions():\n    app = flask.Flask(__name__)\n\n    with app.test_client() as c:\n        with pytest.raises(RuntimeError) as e:\n            with c.session_transaction():\n                pass\n        assert \"Session backend did not open a session\" in str(e.value)"
  },
  {
    "name": "test_session_transactions_keep_context",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "client",
      "req_ctx"
    ],
    "calls": [
      "client.get",
      "flask.request._get_current_object",
      "client.session_transaction",
      "flask.request._get_current_object"
    ],
    "code_location": {
      "file": "test_testing.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 196,
      "end_line": 201
    },
    "code_snippet": "def test_session_transactions_keep_context(app, client, req_ctx):\n    client.get(\"/\")\n    req = flask.request._get_current_object()\n    assert req is not None\n    with client.session_transaction():\n        assert req is flask.request._get_current_object()"
  },
  {
    "name": "test_session_transaction_needs_cookies",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app"
    ],
    "calls": [
      "app.test_client",
      "pytest.raises",
      "c.session_transaction"
    ],
    "code_location": {
      "file": "test_testing.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 204,
      "end_line": 209
    },
    "code_snippet": "def test_session_transaction_needs_cookies(app):\n    c = app.test_client(use_cookies=False)\n\n    with pytest.raises(TypeError, match=\"Cookies are disabled.\"):\n        with c.session_transaction():\n            pass"
  },
  {
    "name": "test_test_client_context_binding",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "client"
    ],
    "calls": [
      "app.route",
      "app.route",
      "client.get",
      "client.get",
      "pytest.raises",
      "hasattr"
    ],
    "code_location": {
      "file": "test_testing.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 212,
      "end_line": 238
    },
    "code_snippet": "def test_test_client_context_binding(app, client):\n    app.testing = False\n\n    @app.route(\"/\")\n    def index():\n        flask.g.value = 42\n        return \"Hello World!\"\n\n    @app.route(\"/other\")\n    def other():\n        raise ZeroDivisionError\n\n    with client:\n        resp = client.get(\"/\")\n        assert flask.g.value == 42\n        assert resp.data == b\"Hello World!\"\n        assert resp.status_code == 200\n\n    with client:\n        resp = client.get(\"/other\")\n        assert not hasattr(flask.g..."
  },
  {
    "name": "test_reuse_client",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "client"
    ],
    "calls": [
      "client.get",
      "client.get"
    ],
    "code_location": {
      "file": "test_testing.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 241,
      "end_line": 248
    },
    "code_snippet": "def test_reuse_client(client):\n    c = client\n\n    with c:\n        assert client.get(\"/\").status_code == 404\n\n    with c:\n        assert client.get(\"/\").status_code == 404"
  },
  {
    "name": "test_full_url_request",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "client"
    ],
    "calls": [
      "app.route",
      "client.post"
    ],
    "code_location": {
      "file": "test_testing.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 251,
      "end_line": 260
    },
    "code_snippet": "def test_full_url_request(app, client):\n    @app.route(\"/action\", methods=[\"POST\"])\n    def action():\n        return \"x\"\n\n    with client:\n        rv = client.post(\"http://domain.com/action?vodka=42\", data={\"gin\": 43})\n        assert rv.status_code == 200\n        assert \"gin\" in flask.request.form\n        assert \"vodka\" in flask.request.args"
  },
  {
    "name": "test_json_request_and_response",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "client"
    ],
    "calls": [
      "app.route",
      "jsonify",
      "client.post",
      "flask.request.get_json",
      "flask.request.get_json",
      "rv.get_json"
    ],
    "code_location": {
      "file": "test_testing.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 263,
      "end_line": 279
    },
    "code_snippet": "def test_json_request_and_response(app, client):\n    @app.route(\"/echo\", methods=[\"POST\"])\n    def echo():\n        return jsonify(flask.request.get_json())\n\n    with client:\n        json_data = {\"drink\": {\"gin\": 1, \"tonic\": True}, \"price\": 10}\n        rv = client.post(\"/echo\", json=json_data)\n\n        # Request should be in JSON\n        assert flask.request.is_json\n        assert flask.request.get_json() == json_data\n\n        # Response should be in JSON\n        assert rv.status_code == 200\n    ..."
  },
  {
    "name": "test_client_json_no_app_context",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "client"
    ],
    "calls": [
      "app.route",
      "Namespace",
      "appcontext_popped.connected_to",
      "client.post",
      "rv.get_data"
    ],
    "code_location": {
      "file": "test_testing.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 282,
      "end_line": 299
    },
    "code_snippet": "def test_client_json_no_app_context(app, client):\n    @app.route(\"/hello\", methods=[\"POST\"])\n    def hello():\n        return f\"Hello, {flask.request.json['name']}!\"\n\n    class Namespace:\n        count = 0\n\n        def add(self, app):\n            self.count += 1\n\n    ns = Namespace()\n\n    with appcontext_popped.connected_to(ns.add, app):\n        rv = client.post(\"/hello\", json={\"name\": \"Flask\"})\n\n    assert rv.get_data(as_text=True) == \"Hello, Flask!\"\n    assert ns.count == 1"
  },
  {
    "name": "test_subdomain",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [],
    "calls": [
      "flask.Flask",
      "app.test_client",
      "app.route",
      "app.test_request_context",
      "flask.url_for",
      "client.get"
    ],
    "code_location": {
      "file": "test_testing.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 302,
      "end_line": 318
    },
    "code_snippet": "def test_subdomain():\n    app = flask.Flask(__name__, subdomain_matching=True)\n    app.config[\"SERVER_NAME\"] = \"example.com\"\n    client = app.test_client()\n\n    @app.route(\"/\", subdomain=\"<company_id>\")\n    def view(company_id):\n        return company_id\n\n    with app.test_request_context():\n        url = flask.url_for(\"view\", company_id=\"xxx\")\n\n    with client:\n        response = client.get(url)\n\n    assert 200 == response.status_code\n    assert b\"xxx\" == response.data"
  },
  {
    "name": "test_nosubdomain",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "client"
    ],
    "calls": [
      "app.route",
      "app.test_request_context",
      "flask.url_for",
      "client.get"
    ],
    "code_location": {
      "file": "test_testing.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 321,
      "end_line": 335
    },
    "code_snippet": "def test_nosubdomain(app, client):\n    app.config[\"SERVER_NAME\"] = \"example.com\"\n\n    @app.route(\"/<company_id>\")\n    def view(company_id):\n        return company_id\n\n    with app.test_request_context():\n        url = flask.url_for(\"view\", company_id=\"xxx\")\n\n    with client:\n        response = client.get(url)\n\n    assert 200 == response.status_code\n    assert b\"xxx\" == response.data"
  },
  {
    "name": "test_cli_runner_class",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app"
    ],
    "calls": [
      "app.test_cli_runner",
      "isinstance",
      "app.test_cli_runner",
      "isinstance"
    ],
    "code_location": {
      "file": "test_testing.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 338,
      "end_line": 347
    },
    "code_snippet": "def test_cli_runner_class(app):\n    runner = app.test_cli_runner()\n    assert isinstance(runner, FlaskCliRunner)\n\n    class SubRunner(FlaskCliRunner):\n        pass\n\n    app.test_cli_runner_class = SubRunner\n    runner = app.test_cli_runner()\n    assert isinstance(runner, SubRunner)"
  },
  {
    "name": "test_cli_invoke",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app"
    ],
    "calls": [
      "app.cli.command",
      "app.test_cli_runner",
      "runner.invoke",
      "runner.invoke",
      "click.echo"
    ],
    "code_location": {
      "file": "test_testing.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 350,
      "end_line": 361
    },
    "code_snippet": "def test_cli_invoke(app):\n    @app.cli.command(\"hello\")\n    def hello_command():\n        click.echo(\"Hello, World!\")\n\n    runner = app.test_cli_runner()\n    # invoke with command name\n    result = runner.invoke(args=[\"hello\"])\n    assert \"Hello\" in result.output\n    # invoke with command object\n    result = runner.invoke(hello_command)\n    assert \"Hello\" in result.output"
  },
  {
    "name": "test_cli_custom_obj",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app"
    ],
    "calls": [
      "app.cli.command",
      "ScriptInfo",
      "app.test_cli_runner",
      "runner.invoke",
      "click.echo"
    ],
    "code_location": {
      "file": "test_testing.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 364,
      "end_line": 379
    },
    "code_snippet": "def test_cli_custom_obj(app):\n    class NS:\n        called = False\n\n    def create_app():\n        NS.called = True\n        return app\n\n    @app.cli.command(\"hello\")\n    def hello_command():\n        click.echo(\"Hello, World!\")\n\n    script_info = ScriptInfo(create_app=create_app)\n    runner = app.test_cli_runner()\n    runner.invoke(hello_command, obj=script_info)\n    assert NS.called"
  },
  {
    "name": "test_client_pop_all_preserved",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "req_ctx",
      "client"
    ],
    "calls": [
      "app.route",
      "rv.close",
      "flask.stream_with_context",
      "client.get",
      "_cv_request.get"
    ],
    "code_location": {
      "file": "test_testing.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 382,
      "end_line": 396
    },
    "code_snippet": "def test_client_pop_all_preserved(app, req_ctx, client):\n    @app.route(\"/\")\n    def index():\n        # stream_with_context pushes a third context, preserved by response\n        return flask.stream_with_context(\"hello\")\n\n    # req_ctx fixture pushed an initial context\n    with client:\n        # request pushes a second request context, preserved by client\n        rv = client.get(\"/\")\n\n    # close the response, releasing the context held by stream_with_context\n    rv.close()\n    # only req_ctx fix..."
  },
  {
    "name": "test_max_content_length",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "client"
    ],
    "calls": [
      "app.post",
      "app.errorhandler",
      "client.post",
      "AssertionError"
    ],
    "code_location": {
      "file": "test_request.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 9,
      "end_line": 22
    },
    "code_snippet": "def test_max_content_length(app: Flask, client: FlaskClient) -> None:\n    app.config[\"MAX_CONTENT_LENGTH\"] = 50\n\n    @app.post(\"/\")\n    def index():\n        request.form[\"myfile\"]\n        AssertionError()\n\n    @app.errorhandler(413)\n    def catcher(error):\n        return \"42\"\n\n    rv = client.post(\"/\", data={\"myfile\": \"foo\" * 50})\n    assert rv.data == b\"42\""
  },
  {
    "name": "test_limit_config",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app"
    ],
    "calls": [
      "Request",
      "app.app_context",
      "app.app_context"
    ],
    "code_location": {
      "file": "test_request.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 25,
      "end_line": 54
    },
    "code_snippet": "def test_limit_config(app: Flask):\n    app.config[\"MAX_CONTENT_LENGTH\"] = 100\n    app.config[\"MAX_FORM_MEMORY_SIZE\"] = 50\n    app.config[\"MAX_FORM_PARTS\"] = 3\n    r = Request({})\n\n    # no app context, use Werkzeug defaults\n    assert r.max_content_length is None\n    assert r.max_form_memory_size == 500_000\n    assert r.max_form_parts == 1_000\n\n    # in app context, use config\n    with app.app_context():\n        assert r.max_content_length == 100\n        assert r.max_form_memory_size == 50\n     ..."
  },
  {
    "name": "test_trusted_hosts_config",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app"
    ],
    "calls": [
      "app.get",
      "app.test_client",
      "client.get",
      "client.get",
      "client.get"
    ],
    "code_location": {
      "file": "test_request.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 57,
      "end_line": 70
    },
    "code_snippet": "def test_trusted_hosts_config(app: Flask) -> None:\n    app.config[\"TRUSTED_HOSTS\"] = [\"example.test\", \".other.test\"]\n\n    @app.get(\"/\")\n    def index() -> str:\n        return \"\"\n\n    client = app.test_client()\n    r = client.get(base_url=\"http://example.test\")\n    assert r.status_code == 200\n    r = client.get(base_url=\"http://a.other.test\")\n    assert r.status_code == 200\n    r = client.get(base_url=\"http://bad.test\")\n    assert r.status_code == 400"
  },
  {
    "name": "test_open_session_with_endpoint",
    "docstring": "If request.endpoint (or other URL matching behavior) is needed\nwhile loading the session, RequestContext.match_request() can be\ncalled manually.",
    "is_method": false,
    "class_name": null,
    "parameters": [],
    "calls": [
      "flask.Flask",
      "MySessionInterface",
      "app.get",
      "get",
      "request_ctx.match_request",
      "app.test_client"
    ],
    "code_location": {
      "file": "test_session_interface.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 6,
      "end_line": 28
    },
    "code_snippet": "def test_open_session_with_endpoint():\n    \"\"\"If request.endpoint (or other URL matching behavior) is needed\n    while loading the session, RequestContext.match_request() can be\n    called manually.\n    \"\"\"\n\n    class MySessionInterface(SessionInterface):\n        def save_session(self, app, session, response):\n            pass\n\n        def open_session(self, app, request):\n            request_ctx.match_request()\n            assert request.endpoint is not None\n\n    app = flask.Flask(__name__)\n   ..."
  },
  {
    "name": "test_error_handler_no_match",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "client"
    ],
    "calls": [
      "app.errorhandler",
      "app.errorhandler",
      "app.route",
      "app.route",
      "app.route",
      "isinstance",
      "pytest.raises",
      "app.register_error_handler",
      "str",
      "pytest.raises",
      "app.register_error_handler",
      "str",
      "isinstance",
      "pytest.raises",
      "app.register_error_handler",
      "str",
      "CustomException",
      "KeyError",
      "flask.abort",
      "CustomException",
      "client.get",
      "client.get",
      "client.get",
      "type"
    ],
    "code_location": {
      "file": "test_user_error_handler.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 10,
      "end_line": 58
    },
    "code_snippet": "def test_error_handler_no_match(app, client):\n    class CustomException(Exception):\n        pass\n\n    @app.errorhandler(CustomException)\n    def custom_exception_handler(e):\n        assert isinstance(e, CustomException)\n        return \"custom\"\n\n    with pytest.raises(TypeError) as exc_info:\n        app.register_error_handler(CustomException(), None)\n\n    assert \"CustomException() is an instance, not a class.\" in str(exc_info.value)\n\n    with pytest.raises(ValueError) as exc_info:\n        app.reg..."
  },
  {
    "name": "test_error_handler_subclass",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app"
    ],
    "calls": [
      "app.errorhandler",
      "app.errorhandler",
      "app.route",
      "app.route",
      "app.route",
      "app.test_client",
      "isinstance",
      "isinstance",
      "ParentException",
      "ChildExceptionUnregistered",
      "ChildExceptionRegistered",
      "c.get",
      "c.get",
      "c.get"
    ],
    "code_location": {
      "file": "test_user_error_handler.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 61,
      "end_line": 97
    },
    "code_snippet": "def test_error_handler_subclass(app):\n    class ParentException(Exception):\n        pass\n\n    class ChildExceptionUnregistered(ParentException):\n        pass\n\n    class ChildExceptionRegistered(ParentException):\n        pass\n\n    @app.errorhandler(ParentException)\n    def parent_exception_handler(e):\n        assert isinstance(e, ParentException)\n        return \"parent\"\n\n    @app.errorhandler(ChildExceptionRegistered)\n    def child_exception_handler(e):\n        assert isinstance(e, ChildException..."
  },
  {
    "name": "test_error_handler_http_subclass",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app"
    ],
    "calls": [
      "app.errorhandler",
      "app.errorhandler",
      "app.route",
      "app.route",
      "app.route",
      "app.test_client",
      "isinstance",
      "isinstance",
      "Forbidden",
      "ForbiddenSubclassRegistered",
      "ForbiddenSubclassUnregistered",
      "c.get",
      "c.get",
      "c.get"
    ],
    "code_location": {
      "file": "test_user_error_handler.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 100,
      "end_line": 133
    },
    "code_snippet": "def test_error_handler_http_subclass(app):\n    class ForbiddenSubclassRegistered(Forbidden):\n        pass\n\n    class ForbiddenSubclassUnregistered(Forbidden):\n        pass\n\n    @app.errorhandler(403)\n    def code_exception_handler(e):\n        assert isinstance(e, Forbidden)\n        return \"forbidden\"\n\n    @app.errorhandler(ForbiddenSubclassRegistered)\n    def subclass_exception_handler(e):\n        assert isinstance(e, ForbiddenSubclassRegistered)\n        return \"forbidden-registered\"\n\n    @app.r..."
  },
  {
    "name": "test_error_handler_blueprint",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app"
    ],
    "calls": [
      "flask.Blueprint",
      "bp.errorhandler",
      "bp.route",
      "app.errorhandler",
      "app.route",
      "app.register_blueprint",
      "app.test_client",
      "InternalServerError",
      "InternalServerError",
      "c.get",
      "c.get"
    ],
    "code_location": {
      "file": "test_user_error_handler.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 136,
      "end_line": 160
    },
    "code_snippet": "def test_error_handler_blueprint(app):\n    bp = flask.Blueprint(\"bp\", __name__)\n\n    @bp.errorhandler(500)\n    def bp_exception_handler(e):\n        return \"bp-error\"\n\n    @bp.route(\"/error\")\n    def bp_test():\n        raise InternalServerError()\n\n    @app.errorhandler(500)\n    def app_exception_handler(e):\n        return \"app-error\"\n\n    @app.route(\"/error\")\n    def app_test():\n        raise InternalServerError()\n\n    app.register_blueprint(bp, url_prefix=\"/bp\")\n\n    c = app.test_client()\n\n    a..."
  },
  {
    "name": "test_default_error_handler",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [],
    "calls": [
      "flask.Blueprint",
      "bp.errorhandler",
      "bp.errorhandler",
      "bp.route",
      "bp.route",
      "flask.Flask",
      "app.errorhandler",
      "app.errorhandler",
      "app.route",
      "app.route",
      "app.register_blueprint",
      "app.test_client",
      "isinstance",
      "isinstance",
      "isinstance",
      "NotFound",
      "Forbidden",
      "isinstance",
      "isinstance",
      "isinstance",
      "Forbidden",
      "c.get",
      "c.get",
      "c.get",
      "c.get",
      "c.get"
    ],
    "code_location": {
      "file": "test_user_error_handler.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 163,
      "end_line": 214
    },
    "code_snippet": "def test_default_error_handler():\n    bp = flask.Blueprint(\"bp\", __name__)\n\n    @bp.errorhandler(HTTPException)\n    def bp_exception_handler(e):\n        assert isinstance(e, HTTPException)\n        assert isinstance(e, NotFound)\n        return \"bp-default\"\n\n    @bp.errorhandler(Forbidden)\n    def bp_forbidden_handler(e):\n        assert isinstance(e, Forbidden)\n        return \"bp-forbidden\"\n\n    @bp.route(\"/undefined\")\n    def bp_registered_test():\n        raise NotFound()\n\n    @bp.route(\"/forbidd..."
  },
  {
    "name": "app",
    "docstring": "",
    "is_method": true,
    "class_name": "TestGenericHandlers",
    "parameters": [
      "self",
      "app"
    ],
    "calls": [
      "pytest.fixture",
      "app.route",
      "app.route",
      "app.route",
      "app.route",
      "self.Custom",
      "KeyError",
      "flask.abort",
      "InternalServerError"
    ],
    "code_location": {
      "file": "test_user_error_handler.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 224,
      "end_line": 242
    },
    "code_snippet": "def app(self, app):\n        @app.route(\"/custom\")\n        def do_custom():\n            raise self.Custom()\n\n        @app.route(\"/error\")\n        def do_error():\n            raise KeyError()\n\n        @app.route(\"/abort\")\n        def do_abort():\n            flask.abort(500)\n\n        @app.route(\"/raise\")\n        def do_raise():\n            raise InternalServerError()\n\n        app.config[\"PROPAGATE_EXCEPTIONS\"] = False\n        return app"
  },
  {
    "name": "report_error",
    "docstring": "",
    "is_method": true,
    "class_name": "TestGenericHandlers",
    "parameters": [
      "self",
      "e"
    ],
    "calls": [
      "getattr",
      "type",
      "type"
    ],
    "code_location": {
      "file": "test_user_error_handler.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 244,
      "end_line": 250
    },
    "code_snippet": "def report_error(self, e):\n        original = getattr(e, \"original_exception\", None)\n\n        if original is not None:\n            return f\"wrapped {type(original).__name__}\"\n\n        return f\"direct {type(e).__name__}\""
  },
  {
    "name": "test_handle_class_or_code",
    "docstring": "``InternalServerError`` and ``500`` are aliases, they should\nhave the same behavior. Both should only receive\n``InternalServerError``, which might wrap another error.",
    "is_method": true,
    "class_name": "TestGenericHandlers",
    "parameters": [
      "self",
      "app",
      "client",
      "to_handle"
    ],
    "calls": [
      "pytest.mark.parametrize",
      "app.errorhandler",
      "isinstance",
      "self.report_error",
      "client.get",
      "client.get",
      "client.get",
      "client.get"
    ],
    "code_location": {
      "file": "test_user_error_handler.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 253,
      "end_line": 267
    },
    "code_snippet": "def test_handle_class_or_code(self, app, client, to_handle):\n        \"\"\"``InternalServerError`` and ``500`` are aliases, they should\n        have the same behavior. Both should only receive\n        ``InternalServerError``, which might wrap another error.\n        \"\"\"\n\n        @app.errorhandler(to_handle)\n        def handle_500(e):\n            assert isinstance(e, InternalServerError)\n            return self.report_error(e)\n\n        assert client.get(\"/custom\").data == b\"wrapped Custom\"\n        as..."
  },
  {
    "name": "test_handle_generic_http",
    "docstring": "``HTTPException`` should only receive ``HTTPException``\nsubclasses. It will receive ``404`` routing exceptions.",
    "is_method": true,
    "class_name": "TestGenericHandlers",
    "parameters": [
      "self",
      "app",
      "client"
    ],
    "calls": [
      "app.errorhandler",
      "isinstance",
      "str",
      "client.get",
      "client.get",
      "client.get"
    ],
    "code_location": {
      "file": "test_user_error_handler.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 269,
      "end_line": 281
    },
    "code_snippet": "def test_handle_generic_http(self, app, client):\n        \"\"\"``HTTPException`` should only receive ``HTTPException``\n        subclasses. It will receive ``404`` routing exceptions.\n        \"\"\"\n\n        @app.errorhandler(HTTPException)\n        def handle_http(e):\n            assert isinstance(e, HTTPException)\n            return str(e.code)\n\n        assert client.get(\"/error\").data == b\"500\"\n        assert client.get(\"/abort\").data == b\"500\"\n        assert client.get(\"/not-found\").data == b\"404\""
  },
  {
    "name": "test_handle_generic",
    "docstring": "Generic ``Exception`` will handle all exceptions directly,\nincluding ``HTTPExceptions``.",
    "is_method": true,
    "class_name": "TestGenericHandlers",
    "parameters": [
      "self",
      "app",
      "client"
    ],
    "calls": [
      "app.errorhandler",
      "self.report_error",
      "client.get",
      "client.get",
      "client.get",
      "client.get"
    ],
    "code_location": {
      "file": "test_user_error_handler.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 283,
      "end_line": 295
    },
    "code_snippet": "def test_handle_generic(self, app, client):\n        \"\"\"Generic ``Exception`` will handle all exceptions directly,\n        including ``HTTPExceptions``.\n        \"\"\"\n\n        @app.errorhandler(Exception)\n        def handle_exception(e):\n            return self.report_error(e)\n\n        assert client.get(\"/custom\").data == b\"direct Custom\"\n        assert client.get(\"/error\").data == b\"direct KeyError\"\n        assert client.get(\"/abort\").data == b\"direct InternalServerError\"\n        assert client.get..."
  },
  {
    "name": "test_teardown_on_pop",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app"
    ],
    "calls": [
      "app.test_request_context",
      "ctx.push",
      "ctx.pop",
      "buffer.append"
    ],
    "code_location": {
      "file": "test_reqctx.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 16,
      "end_line": 27
    },
    "code_snippet": "def test_teardown_on_pop(app):\n    buffer = []\n\n    @app.teardown_request\n    def end_of_request(exception):\n        buffer.append(exception)\n\n    ctx = app.test_request_context()\n    ctx.push()\n    assert buffer == []\n    ctx.pop()\n    assert buffer == [None]"
  },
  {
    "name": "test_teardown_with_previous_exception",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app"
    ],
    "calls": [
      "buffer.append",
      "Exception",
      "app.test_request_context"
    ],
    "code_location": {
      "file": "test_reqctx.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 30,
      "end_line": 44
    },
    "code_snippet": "def test_teardown_with_previous_exception(app):\n    buffer = []\n\n    @app.teardown_request\n    def end_of_request(exception):\n        buffer.append(exception)\n\n    try:\n        raise Exception(\"dummy\")\n    except Exception:\n        pass\n\n    with app.test_request_context():\n        assert buffer == []\n    assert buffer == [None]"
  },
  {
    "name": "test_teardown_with_handled_exception",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app"
    ],
    "calls": [
      "buffer.append",
      "app.test_request_context",
      "Exception"
    ],
    "code_location": {
      "file": "test_reqctx.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 47,
      "end_line": 60
    },
    "code_snippet": "def test_teardown_with_handled_exception(app):\n    buffer = []\n\n    @app.teardown_request\n    def end_of_request(exception):\n        buffer.append(exception)\n\n    with app.test_request_context():\n        assert buffer == []\n        try:\n            raise Exception(\"dummy\")\n        except Exception:\n            pass\n    assert buffer == [None]"
  },
  {
    "name": "test_proper_test_request_context",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app"
    ],
    "calls": [
      "app.config.update",
      "app.route",
      "app.route",
      "app.config.update",
      "app.config.update",
      "app.test_request_context",
      "app.test_request_context",
      "warnings.catch_warnings",
      "warnings.filterwarnings",
      "app.test_request_context",
      "app.test_request_context",
      "flask.url_for",
      "flask.url_for",
      "app.test_request_context"
    ],
    "code_location": {
      "file": "test_reqctx.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 63,
      "end_line": 104
    },
    "code_snippet": "def test_proper_test_request_context(app):\n    app.config.update(SERVER_NAME=\"localhost.localdomain:5000\")\n\n    @app.route(\"/\")\n    def index():\n        return None\n\n    @app.route(\"/\", subdomain=\"foo\")\n    def sub():\n        return None\n\n    with app.test_request_context(\"/\"):\n        assert (\n            flask.url_for(\"index\", _external=True)\n            == \"http://localhost.localdomain:5000/\"\n        )\n\n    with app.test_request_context(\"/\"):\n        assert (\n            flask.url_for(\"sub\", ..."
  },
  {
    "name": "test_context_binding",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app"
    ],
    "calls": [
      "app.route",
      "app.route",
      "app.test_request_context",
      "app.test_request_context",
      "index",
      "meh"
    ],
    "code_location": {
      "file": "test_reqctx.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 107,
      "end_line": 120
    },
    "code_snippet": "def test_context_binding(app):\n    @app.route(\"/\")\n    def index():\n        return f\"Hello {flask.request.args['name']}!\"\n\n    @app.route(\"/meh\")\n    def meh():\n        return flask.request.url\n\n    with app.test_request_context(\"/?name=World\"):\n        assert index() == \"Hello World!\"\n    with app.test_request_context(\"/meh\"):\n        assert meh() == \"http://localhost/meh\"\n    assert not flask.request"
  },
  {
    "name": "test_context_test",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app"
    ],
    "calls": [
      "app.test_request_context",
      "ctx.push",
      "flask.has_request_context",
      "flask.has_request_context",
      "ctx.pop"
    ],
    "code_location": {
      "file": "test_reqctx.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 123,
      "end_line": 132
    },
    "code_snippet": "def test_context_test(app):\n    assert not flask.request\n    assert not flask.has_request_context()\n    ctx = app.test_request_context()\n    ctx.push()\n    try:\n        assert flask.request\n        assert flask.has_request_context()\n    finally:\n        ctx.pop()"
  },
  {
    "name": "test_manual_context_binding",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app"
    ],
    "calls": [
      "app.route",
      "app.test_request_context",
      "ctx.push",
      "ctx.pop",
      "index",
      "pytest.raises",
      "index"
    ],
    "code_location": {
      "file": "test_reqctx.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 135,
      "end_line": 145
    },
    "code_snippet": "def test_manual_context_binding(app):\n    @app.route(\"/\")\n    def index():\n        return f\"Hello {flask.request.args['name']}!\"\n\n    ctx = app.test_request_context(\"/?name=World\")\n    ctx.push()\n    assert index() == \"Hello World!\"\n    ctx.pop()\n    with pytest.raises(RuntimeError):\n        index()"
  },
  {
    "name": "test_greenlet_context_copying",
    "docstring": "",
    "is_method": true,
    "class_name": "TestGreenletContextCopying",
    "parameters": [
      "self",
      "app",
      "client"
    ],
    "calls": [
      "app.route",
      "client.get",
      "run",
      "request_ctx.copy",
      "greenlets.append",
      "greenlet",
      "flask.session.get"
    ],
    "code_location": {
      "file": "test_reqctx.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 150,
      "end_line": 177
    },
    "code_snippet": "def test_greenlet_context_copying(self, app, client):\n        greenlets = []\n\n        @app.route(\"/\")\n        def index():\n            flask.session[\"fizz\"] = \"buzz\"\n            reqctx = request_ctx.copy()\n\n            def g():\n                assert not flask.request\n                assert not flask.current_app\n                with reqctx:\n                    assert flask.request\n                    assert flask.current_app == app\n                    assert flask.request.path == \"/\"\n           ..."
  },
  {
    "name": "test_greenlet_context_copying_api",
    "docstring": "",
    "is_method": true,
    "class_name": "TestGreenletContextCopying",
    "parameters": [
      "self",
      "app",
      "client"
    ],
    "calls": [
      "app.route",
      "client.get",
      "run",
      "greenlets.append",
      "greenlet",
      "flask.session.get"
    ],
    "code_location": {
      "file": "test_reqctx.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 179,
      "end_line": 202
    },
    "code_snippet": "def test_greenlet_context_copying_api(self, app, client):\n        greenlets = []\n\n        @app.route(\"/\")\n        def index():\n            flask.session[\"fizz\"] = \"buzz\"\n\n            @flask.copy_current_request_context\n            def g():\n                assert flask.request\n                assert flask.current_app == app\n                assert flask.request.path == \"/\"\n                assert flask.request.args[\"foo\"] == \"bar\"\n                assert flask.session.get(\"fizz\") == \"buzz\"\n         ..."
  },
  {
    "name": "test_session_error_pops_context",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [],
    "calls": [
      "CustomFlask",
      "app.route",
      "get",
      "FailingSessionInterface",
      "AssertionError",
      "SessionError",
      "app.test_client"
    ],
    "code_location": {
      "file": "test_reqctx.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 205,
      "end_line": 226
    },
    "code_snippet": "def test_session_error_pops_context():\n    class SessionError(Exception):\n        pass\n\n    class FailingSessionInterface(SessionInterface):\n        def open_session(self, app, request):\n            raise SessionError()\n\n    class CustomFlask(flask.Flask):\n        session_interface = FailingSessionInterface()\n\n    app = CustomFlask(__name__)\n\n    @app.route(\"/\")\n    def index():\n        # shouldn't get here\n        AssertionError()\n\n    response = app.test_client().get(\"/\")\n    assert response.s..."
  },
  {
    "name": "test_session_dynamic_cookie_name",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [],
    "calls": [
      "CustomFlask",
      "app.route",
      "app.route",
      "app.route",
      "app.route",
      "app.test_client",
      "PathAwareSessionInterface",
      "flask.session.get",
      "flask.session.get",
      "flask.request.url.endswith",
      "test_client.post",
      "test_client.post",
      "test_client.get",
      "test_client.get",
      "get_cookie_name",
      "super"
    ],
    "code_location": {
      "file": "test_reqctx.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 229,
      "end_line": 277
    },
    "code_snippet": "def test_session_dynamic_cookie_name():\n    # This session interface will use a cookie with a different name if the\n    # requested url ends with the string \"dynamic_cookie\"\n    class PathAwareSessionInterface(SecureCookieSessionInterface):\n        def get_cookie_name(self, app):\n            if flask.request.url.endswith(\"dynamic_cookie\"):\n                return \"dynamic_cookie_name\"\n            else:\n                return super().get_cookie_name(app)\n\n    class CustomFlask(flask.Flask):\n      ..."
  },
  {
    "name": "test_bad_environ_raises_bad_request",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [],
    "calls": [
      "flask.Flask",
      "EnvironBuilder",
      "builder.get_environ",
      "app.request_context",
      "app.full_dispatch_request"
    ],
    "code_location": {
      "file": "test_reqctx.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 280,
      "end_line": 293
    },
    "code_snippet": "def test_bad_environ_raises_bad_request():\n    app = flask.Flask(__name__)\n\n    from flask.testing import EnvironBuilder\n\n    builder = EnvironBuilder(app)\n    environ = builder.get_environ()\n\n    # use a non-printable character in the Host - this is key to this test\n    environ[\"HTTP_HOST\"] = \"\\x8a\"\n\n    with app.request_context(environ):\n        response = app.full_dispatch_request()\n    assert response.status_code == 400"
  },
  {
    "name": "test_environ_for_valid_idna_completes",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [],
    "calls": [
      "flask.Flask",
      "app.route",
      "EnvironBuilder",
      "builder.get_environ",
      "app.request_context",
      "app.full_dispatch_request"
    ],
    "code_location": {
      "file": "test_reqctx.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 296,
      "end_line": 314
    },
    "code_snippet": "def test_environ_for_valid_idna_completes():\n    app = flask.Flask(__name__)\n\n    @app.route(\"/\")\n    def index():\n        return \"Hello World!\"\n\n    from flask.testing import EnvironBuilder\n\n    builder = EnvironBuilder(app)\n    environ = builder.get_environ()\n\n    # these characters are all IDNA-compatible\n    environ[\"HTTP_HOST\"] = \"ąśźäüжŠßя.com\"\n\n    with app.request_context(environ):\n        response = app.full_dispatch_request()\n\n    assert response.status_code == 200"
  },
  {
    "name": "test_normal_environ_completes",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [],
    "calls": [
      "flask.Flask",
      "app.route",
      "get",
      "app.test_client"
    ],
    "code_location": {
      "file": "test_reqctx.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 317,
      "end_line": 325
    },
    "code_snippet": "def test_normal_environ_completes():\n    app = flask.Flask(__name__)\n\n    @app.route(\"/\")\n    def index():\n        return \"Hello World!\"\n\n    response = app.test_client().get(\"/\", headers={\"host\": \"xn--on-0ia.com\"})\n    assert response.status_code == 200"
  },
  {
    "name": "common_object_test",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app"
    ],
    "calls": [],
    "code_location": {
      "file": "test_config.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 13,
      "end_line": 16
    },
    "code_snippet": "def common_object_test(app):\n    assert app.secret_key == \"config\"\n    assert app.config[\"TEST_KEY\"] == \"foo\"\n    assert \"TestConfig\" not in app.config"
  },
  {
    "name": "test_config_from_pyfile",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [],
    "calls": [
      "flask.Flask",
      "app.config.from_pyfile",
      "common_object_test",
      "__file__.rsplit"
    ],
    "code_location": {
      "file": "test_config.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 19,
      "end_line": 22
    },
    "code_snippet": "def test_config_from_pyfile():\n    app = flask.Flask(__name__)\n    app.config.from_pyfile(f\"{__file__.rsplit('.', 1)[0]}.py\")\n    common_object_test(app)"
  },
  {
    "name": "test_config_from_object",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [],
    "calls": [
      "flask.Flask",
      "app.config.from_object",
      "common_object_test"
    ],
    "code_location": {
      "file": "test_config.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 25,
      "end_line": 28
    },
    "code_snippet": "def test_config_from_object():\n    app = flask.Flask(__name__)\n    app.config.from_object(__name__)\n    common_object_test(app)"
  },
  {
    "name": "test_config_from_file_json",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [],
    "calls": [
      "flask.Flask",
      "os.path.dirname",
      "app.config.from_file",
      "common_object_test",
      "os.path.abspath",
      "os.path.join"
    ],
    "code_location": {
      "file": "test_config.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 31,
      "end_line": 35
    },
    "code_snippet": "def test_config_from_file_json():\n    app = flask.Flask(__name__)\n    current_dir = os.path.dirname(os.path.abspath(__file__))\n    app.config.from_file(os.path.join(current_dir, \"static\", \"config.json\"), json.load)\n    common_object_test(app)"
  },
  {
    "name": "test_config_from_file_toml",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [],
    "calls": [
      "pytest.importorskip",
      "flask.Flask",
      "os.path.dirname",
      "app.config.from_file",
      "common_object_test",
      "os.path.abspath",
      "os.path.join"
    ],
    "code_location": {
      "file": "test_config.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 38,
      "end_line": 45
    },
    "code_snippet": "def test_config_from_file_toml():\n    tomllib = pytest.importorskip(\"tomllib\", reason=\"tomllib added in 3.11\")\n    app = flask.Flask(__name__)\n    current_dir = os.path.dirname(os.path.abspath(__file__))\n    app.config.from_file(\n        os.path.join(current_dir, \"static\", \"config.toml\"), tomllib.load, text=False\n    )\n    common_object_test(app)"
  },
  {
    "name": "test_from_prefixed_env",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "monkeypatch"
    ],
    "calls": [
      "monkeypatch.setenv",
      "monkeypatch.setenv",
      "monkeypatch.setenv",
      "monkeypatch.setenv",
      "monkeypatch.setenv",
      "monkeypatch.setenv",
      "monkeypatch.setenv",
      "flask.Flask",
      "app.config.from_prefixed_env"
    ],
    "code_location": {
      "file": "test_config.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 48,
      "end_line": 66
    },
    "code_snippet": "def test_from_prefixed_env(monkeypatch):\n    monkeypatch.setenv(\"FLASK_STRING\", \"value\")\n    monkeypatch.setenv(\"FLASK_BOOL\", \"true\")\n    monkeypatch.setenv(\"FLASK_INT\", \"1\")\n    monkeypatch.setenv(\"FLASK_FLOAT\", \"1.2\")\n    monkeypatch.setenv(\"FLASK_LIST\", \"[1, 2]\")\n    monkeypatch.setenv(\"FLASK_DICT\", '{\"k\": \"v\"}')\n    monkeypatch.setenv(\"NOT_FLASK_OTHER\", \"other\")\n\n    app = flask.Flask(__name__)\n    app.config.from_prefixed_env()\n\n    assert app.config[\"STRING\"] == \"value\"\n    assert app.conf..."
  },
  {
    "name": "test_from_prefixed_env_custom_prefix",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "monkeypatch"
    ],
    "calls": [
      "monkeypatch.setenv",
      "monkeypatch.setenv",
      "flask.Flask",
      "app.config.from_prefixed_env"
    ],
    "code_location": {
      "file": "test_config.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 69,
      "end_line": 76
    },
    "code_snippet": "def test_from_prefixed_env_custom_prefix(monkeypatch):\n    monkeypatch.setenv(\"FLASK_A\", \"a\")\n    monkeypatch.setenv(\"NOT_FLASK_A\", \"b\")\n\n    app = flask.Flask(__name__)\n    app.config.from_prefixed_env(\"NOT_FLASK\")\n\n    assert app.config[\"A\"] == \"b\""
  },
  {
    "name": "test_from_prefixed_env_nested",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "monkeypatch"
    ],
    "calls": [
      "monkeypatch.setenv",
      "monkeypatch.setenv",
      "monkeypatch.setenv",
      "monkeypatch.setenv",
      "flask.Flask",
      "app.config.from_prefixed_env"
    ],
    "code_location": {
      "file": "test_config.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 79,
      "end_line": 107
    },
    "code_snippet": "def test_from_prefixed_env_nested(monkeypatch):\n    monkeypatch.setenv(\"FLASK_EXIST__ok\", \"other\")\n    monkeypatch.setenv(\"FLASK_EXIST__inner__ik\", \"2\")\n    monkeypatch.setenv(\"FLASK_EXIST__new__more\", '{\"k\": false}')\n    monkeypatch.setenv(\"FLASK_NEW__K\", \"v\")\n\n    app = flask.Flask(__name__)\n    app.config[\"EXIST\"] = {\"ok\": \"value\", \"flag\": True, \"inner\": {\"ik\": 1}}\n    app.config.from_prefixed_env()\n\n    if os.name != \"nt\":\n        assert app.config[\"EXIST\"] == {\n            \"ok\": \"other\",\n  ..."
  },
  {
    "name": "test_config_from_mapping",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [],
    "calls": [
      "flask.Flask",
      "app.config.from_mapping",
      "common_object_test",
      "flask.Flask",
      "app.config.from_mapping",
      "common_object_test",
      "flask.Flask",
      "app.config.from_mapping",
      "common_object_test",
      "flask.Flask",
      "app.config.from_mapping",
      "common_object_test",
      "flask.Flask",
      "pytest.raises",
      "app.config.from_mapping"
    ],
    "code_location": {
      "file": "test_config.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 110,
      "end_line": 129
    },
    "code_snippet": "def test_config_from_mapping():\n    app = flask.Flask(__name__)\n    app.config.from_mapping({\"SECRET_KEY\": \"config\", \"TEST_KEY\": \"foo\"})\n    common_object_test(app)\n\n    app = flask.Flask(__name__)\n    app.config.from_mapping([(\"SECRET_KEY\", \"config\"), (\"TEST_KEY\", \"foo\")])\n    common_object_test(app)\n\n    app = flask.Flask(__name__)\n    app.config.from_mapping(SECRET_KEY=\"config\", TEST_KEY=\"foo\")\n    common_object_test(app)\n\n    app = flask.Flask(__name__)\n    app.config.from_mapping(SECRET_KEY..."
  },
  {
    "name": "test_config_from_class",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [],
    "calls": [
      "flask.Flask",
      "app.config.from_object",
      "common_object_test"
    ],
    "code_location": {
      "file": "test_config.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 132,
      "end_line": 141
    },
    "code_snippet": "def test_config_from_class():\n    class Base:\n        TEST_KEY = \"foo\"\n\n    class Test(Base):\n        SECRET_KEY = \"config\"\n\n    app = flask.Flask(__name__)\n    app.config.from_object(Test)\n    common_object_test(app)"
  },
  {
    "name": "test_config_from_envvar",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "monkeypatch"
    ],
    "calls": [
      "monkeypatch.setattr",
      "flask.Flask",
      "monkeypatch.setattr",
      "app.config.from_envvar",
      "common_object_test",
      "pytest.raises",
      "app.config.from_envvar",
      "str",
      "app.config.from_envvar",
      "__file__.rsplit"
    ],
    "code_location": {
      "file": "test_config.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 144,
      "end_line": 158
    },
    "code_snippet": "def test_config_from_envvar(monkeypatch):\n    monkeypatch.setattr(\"os.environ\", {})\n    app = flask.Flask(__name__)\n\n    with pytest.raises(RuntimeError) as e:\n        app.config.from_envvar(\"FOO_SETTINGS\")\n\n    assert \"'FOO_SETTINGS' is not set\" in str(e.value)\n    assert not app.config.from_envvar(\"FOO_SETTINGS\", silent=True)\n\n    monkeypatch.setattr(\n        \"os.environ\", {\"FOO_SETTINGS\": f\"{__file__.rsplit('.', 1)[0]}.py\"}\n    )\n    assert app.config.from_envvar(\"FOO_SETTINGS\")\n    common_ob..."
  },
  {
    "name": "test_config_from_envvar_missing",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "monkeypatch"
    ],
    "calls": [
      "monkeypatch.setattr",
      "flask.Flask",
      "str",
      "msg.startswith",
      "msg.endswith",
      "pytest.raises",
      "app.config.from_envvar",
      "app.config.from_envvar"
    ],
    "code_location": {
      "file": "test_config.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 161,
      "end_line": 171
    },
    "code_snippet": "def test_config_from_envvar_missing(monkeypatch):\n    monkeypatch.setattr(\"os.environ\", {\"FOO_SETTINGS\": \"missing.cfg\"})\n    app = flask.Flask(__name__)\n    with pytest.raises(IOError) as e:\n        app.config.from_envvar(\"FOO_SETTINGS\")\n    msg = str(e.value)\n    assert msg.startswith(\n        \"[Errno 2] Unable to load configuration file (No such file or directory):\"\n    )\n    assert msg.endswith(\"missing.cfg'\")\n    assert not app.config.from_envvar(\"FOO_SETTINGS\", silent=True)"
  },
  {
    "name": "test_config_missing",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [],
    "calls": [
      "flask.Flask",
      "str",
      "msg.startswith",
      "msg.endswith",
      "pytest.raises",
      "app.config.from_pyfile",
      "app.config.from_pyfile"
    ],
    "code_location": {
      "file": "test_config.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 174,
      "end_line": 183
    },
    "code_snippet": "def test_config_missing():\n    app = flask.Flask(__name__)\n    with pytest.raises(IOError) as e:\n        app.config.from_pyfile(\"missing.cfg\")\n    msg = str(e.value)\n    assert msg.startswith(\n        \"[Errno 2] Unable to load configuration file (No such file or directory):\"\n    )\n    assert msg.endswith(\"missing.cfg'\")\n    assert not app.config.from_pyfile(\"missing.cfg\", silent=True)"
  },
  {
    "name": "test_config_missing_file",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [],
    "calls": [
      "flask.Flask",
      "str",
      "msg.startswith",
      "msg.endswith",
      "pytest.raises",
      "app.config.from_file",
      "app.config.from_file"
    ],
    "code_location": {
      "file": "test_config.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 186,
      "end_line": 195
    },
    "code_snippet": "def test_config_missing_file():\n    app = flask.Flask(__name__)\n    with pytest.raises(IOError) as e:\n        app.config.from_file(\"missing.json\", load=json.load)\n    msg = str(e.value)\n    assert msg.startswith(\n        \"[Errno 2] Unable to load configuration file (No such file or directory):\"\n    )\n    assert msg.endswith(\"missing.json'\")\n    assert not app.config.from_file(\"missing.json\", load=json.load, silent=True)"
  },
  {
    "name": "test_custom_config_class",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [],
    "calls": [
      "Flask",
      "isinstance",
      "app.config.from_object",
      "common_object_test"
    ],
    "code_location": {
      "file": "test_config.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 198,
      "end_line": 208
    },
    "code_snippet": "def test_custom_config_class():\n    class Config(flask.Config):\n        pass\n\n    class Flask(flask.Flask):\n        config_class = Config\n\n    app = Flask(__name__)\n    assert isinstance(app.config, Config)\n    app.config.from_object(__name__)\n    common_object_test(app)"
  },
  {
    "name": "test_session_lifetime",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [],
    "calls": [
      "flask.Flask"
    ],
    "code_location": {
      "file": "test_config.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 211,
      "end_line": 214
    },
    "code_snippet": "def test_session_lifetime():\n    app = flask.Flask(__name__)\n    app.config[\"PERMANENT_SESSION_LIFETIME\"] = 42\n    assert app.permanent_session_lifetime.seconds == 42"
  },
  {
    "name": "test_get_namespace",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [],
    "calls": [
      "flask.Flask",
      "app.config.get_namespace",
      "app.config.get_namespace",
      "app.config.get_namespace",
      "app.config.get_namespace",
      "len",
      "len",
      "len",
      "len"
    ],
    "code_location": {
      "file": "test_config.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 217,
      "end_line": 240
    },
    "code_snippet": "def test_get_namespace():\n    app = flask.Flask(__name__)\n    app.config[\"FOO_OPTION_1\"] = \"foo option 1\"\n    app.config[\"FOO_OPTION_2\"] = \"foo option 2\"\n    app.config[\"BAR_STUFF_1\"] = \"bar stuff 1\"\n    app.config[\"BAR_STUFF_2\"] = \"bar stuff 2\"\n    foo_options = app.config.get_namespace(\"FOO_\")\n    assert 2 == len(foo_options)\n    assert \"foo option 1\" == foo_options[\"option_1\"]\n    assert \"foo option 2\" == foo_options[\"option_2\"]\n    bar_options = app.config.get_namespace(\"BAR_\", lowercase=Fal..."
  },
  {
    "name": "test_from_pyfile_weird_encoding",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "tmp_path",
      "encoding"
    ],
    "calls": [
      "pytest.mark.parametrize",
      "f.write_text",
      "flask.Flask",
      "app.config.from_pyfile",
      "os.fspath"
    ],
    "code_location": {
      "file": "test_config.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 244,
      "end_line": 250
    },
    "code_snippet": "def test_from_pyfile_weird_encoding(tmp_path, encoding):\n    f = tmp_path / \"my_config.py\"\n    f.write_text(f'# -*- coding: {encoding} -*-\\nTEST_VALUE = \"föö\"\\n', encoding)\n    app = flask.Flask(__name__)\n    app.config.from_pyfile(os.fspath(f))\n    value = app.config[\"TEST_VALUE\"]\n    assert value == \"föö\""
  },
  {
    "name": "_standard_os_environ",
    "docstring": "Set up ``os.environ`` at the start of the test session to have\nstandard values. Returns a list of operations that is used by\n:func:`._reset_os_environ` after each test.",
    "is_method": false,
    "class_name": null,
    "parameters": [],
    "calls": [
      "pytest.fixture",
      "monkeypatch.MonkeyPatch",
      "mp.undo",
      "mp.delenv",
      "mp.setenv"
    ],
    "code_location": {
      "file": "conftest.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 12,
      "end_line": 33
    },
    "code_snippet": "def _standard_os_environ():\n    \"\"\"Set up ``os.environ`` at the start of the test session to have\n    standard values. Returns a list of operations that is used by\n    :func:`._reset_os_environ` after each test.\n    \"\"\"\n    mp = monkeypatch.MonkeyPatch()\n    out = (\n        (os.environ, \"FLASK_ENV_FILE\", monkeypatch.notset),\n        (os.environ, \"FLASK_APP\", monkeypatch.notset),\n        (os.environ, \"FLASK_DEBUG\", monkeypatch.notset),\n        (os.environ, \"FLASK_RUN_FROM_CLI\", monkeypatch.notset..."
  },
  {
    "name": "_reset_os_environ",
    "docstring": "Reset ``os.environ`` to the standard environ after each test,\nin case a test changed something without cleaning up.",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "monkeypatch",
      "_standard_os_environ"
    ],
    "calls": [
      "pytest.fixture",
      "monkeypatch._setitem.extend"
    ],
    "code_location": {
      "file": "conftest.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 37,
      "end_line": 41
    },
    "code_snippet": "def _reset_os_environ(monkeypatch, _standard_os_environ):\n    \"\"\"Reset ``os.environ`` to the standard environ after each test,\n    in case a test changed something without cleaning up.\n    \"\"\"\n    monkeypatch._setitem.extend(_standard_os_environ)"
  },
  {
    "name": "app",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [],
    "calls": [
      "Flask",
      "app.config.update",
      "os.path.dirname"
    ],
    "code_location": {
      "file": "conftest.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 45,
      "end_line": 51
    },
    "code_snippet": "def app():\n    app = Flask(\"flask_test\", root_path=os.path.dirname(__file__))\n    app.config.update(\n        TESTING=True,\n        SECRET_KEY=\"test key\",\n    )\n    return app"
  },
  {
    "name": "app_ctx",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app"
    ],
    "calls": [
      "app.app_context"
    ],
    "code_location": {
      "file": "conftest.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 55,
      "end_line": 57
    },
    "code_snippet": "def app_ctx(app):\n    with app.app_context() as ctx:\n        yield ctx"
  },
  {
    "name": "req_ctx",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app"
    ],
    "calls": [
      "app.test_request_context"
    ],
    "code_location": {
      "file": "conftest.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 61,
      "end_line": 63
    },
    "code_snippet": "def req_ctx(app):\n    with app.test_request_context() as ctx:\n        yield ctx"
  },
  {
    "name": "client",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app"
    ],
    "calls": [
      "app.test_client"
    ],
    "code_location": {
      "file": "conftest.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 67,
      "end_line": 68
    },
    "code_snippet": "def client(app):\n    return app.test_client()"
  },
  {
    "name": "test_apps",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "monkeypatch"
    ],
    "calls": [
      "monkeypatch.syspath_prepend",
      "set",
      "os.path.join",
      "sys.modules.keys",
      "sys.modules.keys",
      "sys.modules.pop",
      "os.path.dirname"
    ],
    "code_location": {
      "file": "conftest.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 72,
      "end_line": 81
    },
    "code_snippet": "def test_apps(monkeypatch):\n    monkeypatch.syspath_prepend(os.path.join(os.path.dirname(__file__), \"test_apps\"))\n    original_modules = set(sys.modules.keys())\n\n    yield\n\n    # Remove any imports cached during the test. Otherwise \"import app\"\n    # will work in the next test even though it's no longer on the path.\n    for key in sys.modules.keys() - original_modules:\n        sys.modules.pop(key)"
  },
  {
    "name": "leak_detector",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [],
    "calls": [
      "pytest.fixture",
      "leaks.append",
      "request_ctx.pop",
      "request_ctx._get_current_object"
    ],
    "code_location": {
      "file": "conftest.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 85,
      "end_line": 95
    },
    "code_snippet": "def leak_detector():\n    yield\n\n    # make sure we're not leaking a request context since we are\n    # testing flask internally in debug mode in a few cases\n    leaks = []\n    while request_ctx:\n        leaks.append(request_ctx._get_current_object())\n        request_ctx.pop()\n\n    assert leaks == []"
  },
  {
    "name": "modules_tmp_path",
    "docstring": "A temporary directory added to sys.path.",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "tmp_path",
      "monkeypatch"
    ],
    "calls": [
      "rv.mkdir",
      "monkeypatch.syspath_prepend",
      "os.fspath"
    ],
    "code_location": {
      "file": "conftest.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 99,
      "end_line": 104
    },
    "code_snippet": "def modules_tmp_path(tmp_path, monkeypatch):\n    \"\"\"A temporary directory added to sys.path.\"\"\"\n    rv = tmp_path / \"modules_tmp\"\n    rv.mkdir()\n    monkeypatch.syspath_prepend(os.fspath(rv))\n    return rv"
  },
  {
    "name": "modules_tmp_path_prefix",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "modules_tmp_path",
      "monkeypatch"
    ],
    "calls": [
      "monkeypatch.setattr",
      "os.fspath"
    ],
    "code_location": {
      "file": "conftest.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 108,
      "end_line": 110
    },
    "code_snippet": "def modules_tmp_path_prefix(modules_tmp_path, monkeypatch):\n    monkeypatch.setattr(sys, \"prefix\", os.fspath(modules_tmp_path))\n    return modules_tmp_path"
  },
  {
    "name": "site_packages",
    "docstring": "Create a fake site-packages.",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "modules_tmp_path",
      "monkeypatch"
    ],
    "calls": [
      "rv.mkdir",
      "monkeypatch.syspath_prepend",
      "os.fspath"
    ],
    "code_location": {
      "file": "conftest.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 114,
      "end_line": 120
    },
    "code_snippet": "def site_packages(modules_tmp_path, monkeypatch):\n    \"\"\"Create a fake site-packages.\"\"\"\n    py_dir = f\"python{sys.version_info.major}.{sys.version_info.minor}\"\n    rv = modules_tmp_path / \"lib\" / py_dir / \"site-packages\"\n    rv.mkdir(parents=True)\n    monkeypatch.syspath_prepend(os.fspath(rv))\n    return rv"
  },
  {
    "name": "purge_module",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "request"
    ],
    "calls": [
      "request.addfinalizer",
      "sys.modules.pop"
    ],
    "code_location": {
      "file": "conftest.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 124,
      "end_line": 128
    },
    "code_snippet": "def purge_module(request):\n    def inner(name):\n        request.addfinalizer(lambda: sys.modules.pop(name, None))\n\n    return inner"
  },
  {
    "name": "_async_app",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [],
    "calls": [
      "pytest.fixture",
      "Flask",
      "app.route",
      "app.route",
      "app.errorhandler",
      "app.route",
      "Blueprint",
      "blueprint.route",
      "blueprint.errorhandler",
      "blueprint.route",
      "app.register_blueprint",
      "app.add_url_rule",
      "app.add_url_rule",
      "AppError",
      "BlueprintError",
      "asyncio.sleep",
      "asyncio.sleep",
      "AsyncView.as_view",
      "AsyncMethodView.as_view"
    ],
    "code_location": {
      "file": "test_async.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 41,
      "end_line": 78
    },
    "code_snippet": "def _async_app():\n    app = Flask(__name__)\n\n    @app.route(\"/\", methods=[\"GET\", \"POST\"])\n    @app.route(\"/home\", methods=[\"GET\", \"POST\"])\n    async def index():\n        await asyncio.sleep(0)\n        return request.method\n\n    @app.errorhandler(AppError)\n    async def handle(_):\n        return \"\", 412\n\n    @app.route(\"/error\")\n    async def error():\n        raise AppError()\n\n    blueprint = Blueprint(\"bp\", __name__)\n\n    @blueprint.route(\"/\", methods=[\"GET\", \"POST\"])\n    async def bp_index():\n ..."
  },
  {
    "name": "test_async_route",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "path",
      "async_app"
    ],
    "calls": [
      "pytest.mark.parametrize",
      "async_app.test_client",
      "test_client.get",
      "test_client.post",
      "response.get_data",
      "response.get_data"
    ],
    "code_location": {
      "file": "test_async.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 82,
      "end_line": 87
    },
    "code_snippet": "def test_async_route(path, async_app):\n    test_client = async_app.test_client()\n    response = test_client.get(path)\n    assert b\"GET\" in response.get_data()\n    response = test_client.post(path)\n    assert b\"POST\" in response.get_data()"
  },
  {
    "name": "test_async_error_handler",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "path",
      "async_app"
    ],
    "calls": [
      "pytest.mark.parametrize",
      "async_app.test_client",
      "test_client.get"
    ],
    "code_location": {
      "file": "test_async.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 91,
      "end_line": 94
    },
    "code_snippet": "def test_async_error_handler(path, async_app):\n    test_client = async_app.test_client()\n    response = test_client.get(path)\n    assert response.status_code == 412"
  },
  {
    "name": "test_async_before_after_request",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [],
    "calls": [
      "Flask",
      "app.route",
      "Blueprint",
      "blueprint.route",
      "app.register_blueprint",
      "app.test_client",
      "test_client.get",
      "test_client.get"
    ],
    "code_location": {
      "file": "test_async.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 97,
      "end_line": 145
    },
    "code_snippet": "def test_async_before_after_request():\n    app_before_called = False\n    app_after_called = False\n    bp_before_called = False\n    bp_after_called = False\n\n    app = Flask(__name__)\n\n    @app.route(\"/\")\n    def index():\n        return \"\"\n\n    @app.before_request\n    async def before():\n        nonlocal app_before_called\n        app_before_called = True\n\n    @app.after_request\n    async def after(response):\n        nonlocal app_after_called\n        app_after_called = True\n        return response\n..."
  },
  {
    "name": "__init__",
    "docstring": "",
    "is_method": true,
    "class_name": "FakePath",
    "parameters": [
      "self",
      "path"
    ],
    "calls": [],
    "code_location": {
      "file": "test_helpers.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 18,
      "end_line": 19
    },
    "code_snippet": "def __init__(self, path):\n        self.path = path"
  },
  {
    "name": "__fspath__",
    "docstring": "",
    "is_method": true,
    "class_name": "FakePath",
    "parameters": [
      "self"
    ],
    "calls": [],
    "code_location": {
      "file": "test_helpers.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 21,
      "end_line": 22
    },
    "code_snippet": "def __fspath__(self):\n        return self.path"
  },
  {
    "name": "__init__",
    "docstring": "",
    "is_method": true,
    "class_name": "PyBytesIO",
    "parameters": [
      "self"
    ],
    "calls": [
      "io.BytesIO"
    ],
    "code_location": {
      "file": "test_helpers.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 26,
      "end_line": 27
    },
    "code_snippet": "def __init__(self, *args, **kwargs):\n        self._io = io.BytesIO(*args, **kwargs)"
  },
  {
    "name": "__getattr__",
    "docstring": "",
    "is_method": true,
    "class_name": "PyBytesIO",
    "parameters": [
      "self",
      "name"
    ],
    "calls": [
      "getattr"
    ],
    "code_location": {
      "file": "test_helpers.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 29,
      "end_line": 30
    },
    "code_snippet": "def __getattr__(self, name):\n        return getattr(self._io, name)"
  },
  {
    "name": "test_send_file",
    "docstring": "",
    "is_method": true,
    "class_name": "TestSendfile",
    "parameters": [
      "self",
      "app",
      "req_ctx"
    ],
    "calls": [
      "flask.send_file",
      "rv.close",
      "app.open_resource",
      "f.read"
    ],
    "code_location": {
      "file": "test_helpers.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 34,
      "end_line": 43
    },
    "code_snippet": "def test_send_file(self, app, req_ctx):\n        rv = flask.send_file(\"static/index.html\")\n        assert rv.direct_passthrough\n        assert rv.mimetype == \"text/html\"\n\n        with app.open_resource(\"static/index.html\") as f:\n            rv.direct_passthrough = False\n            assert rv.data == f.read()\n\n        rv.close()"
  },
  {
    "name": "test_static_file",
    "docstring": "",
    "is_method": true,
    "class_name": "TestSendfile",
    "parameters": [
      "self",
      "app",
      "req_ctx"
    ],
    "calls": [
      "app.send_static_file",
      "rv.close",
      "flask.send_file",
      "rv.close",
      "app.send_static_file",
      "rv.close",
      "flask.send_file",
      "rv.close",
      "app.send_static_file",
      "rv.close",
      "StaticFileApp",
      "FakePath",
      "app.test_request_context",
      "app.send_static_file",
      "rv.close",
      "flask.send_file",
      "rv.close"
    ],
    "code_location": {
      "file": "test_helpers.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 45,
      "end_line": 90
    },
    "code_snippet": "def test_static_file(self, app, req_ctx):\n        # Default max_age is None.\n\n        # Test with static file handler.\n        rv = app.send_static_file(\"index.html\")\n        assert rv.cache_control.max_age is None\n        rv.close()\n\n        # Test with direct use of send_file.\n        rv = flask.send_file(\"static/index.html\")\n        assert rv.cache_control.max_age is None\n        rv.close()\n\n        app.config[\"SEND_FILE_MAX_AGE_DEFAULT\"] = 3600\n\n        # Test with static file handler.\n     ..."
  },
  {
    "name": "test_send_from_directory",
    "docstring": "",
    "is_method": true,
    "class_name": "TestSendfile",
    "parameters": [
      "self",
      "app",
      "req_ctx"
    ],
    "calls": [
      "os.path.join",
      "flask.send_from_directory",
      "rv.close",
      "os.path.dirname",
      "rv.data.strip"
    ],
    "code_location": {
      "file": "test_helpers.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 92,
      "end_line": 99
    },
    "code_snippet": "def test_send_from_directory(self, app, req_ctx):\n        app.root_path = os.path.join(\n            os.path.dirname(__file__), \"test_apps\", \"subdomaintestmodule\"\n        )\n        rv = flask.send_from_directory(\"static\", \"hello.txt\")\n        rv.direct_passthrough = False\n        assert rv.data.strip() == b\"Hello Subdomain\"\n        rv.close()"
  },
  {
    "name": "test_url_for_with_anchor",
    "docstring": "",
    "is_method": true,
    "class_name": "TestUrlFor",
    "parameters": [
      "self",
      "app",
      "req_ctx"
    ],
    "calls": [
      "app.route",
      "flask.url_for"
    ],
    "code_location": {
      "file": "test_helpers.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 103,
      "end_line": 108
    },
    "code_snippet": "def test_url_for_with_anchor(self, app, req_ctx):\n        @app.route(\"/\")\n        def index():\n            return \"42\"\n\n        assert flask.url_for(\"index\", _anchor=\"x y\") == \"/#x%20y\""
  },
  {
    "name": "test_url_for_with_scheme",
    "docstring": "",
    "is_method": true,
    "class_name": "TestUrlFor",
    "parameters": [
      "self",
      "app",
      "req_ctx"
    ],
    "calls": [
      "app.route",
      "flask.url_for"
    ],
    "code_location": {
      "file": "test_helpers.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 110,
      "end_line": 118
    },
    "code_snippet": "def test_url_for_with_scheme(self, app, req_ctx):\n        @app.route(\"/\")\n        def index():\n            return \"42\"\n\n        assert (\n            flask.url_for(\"index\", _external=True, _scheme=\"https\")\n            == \"https://localhost/\"\n        )"
  },
  {
    "name": "test_url_for_with_scheme_not_external",
    "docstring": "",
    "is_method": true,
    "class_name": "TestUrlFor",
    "parameters": [
      "self",
      "app",
      "req_ctx"
    ],
    "calls": [
      "app.add_url_rule",
      "flask.url_for",
      "pytest.raises",
      "flask.url_for"
    ],
    "code_location": {
      "file": "test_helpers.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 120,
      "end_line": 129
    },
    "code_snippet": "def test_url_for_with_scheme_not_external(self, app, req_ctx):\n        app.add_url_rule(\"/\", endpoint=\"index\")\n\n        # Implicit external with scheme.\n        url = flask.url_for(\"index\", _scheme=\"https\")\n        assert url == \"https://localhost/\"\n\n        # Error when external=False with scheme\n        with pytest.raises(ValueError):\n            flask.url_for(\"index\", _scheme=\"https\", _external=False)"
  },
  {
    "name": "test_url_for_with_alternating_schemes",
    "docstring": "",
    "is_method": true,
    "class_name": "TestUrlFor",
    "parameters": [
      "self",
      "app",
      "req_ctx"
    ],
    "calls": [
      "app.route",
      "flask.url_for",
      "flask.url_for",
      "flask.url_for"
    ],
    "code_location": {
      "file": "test_helpers.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 131,
      "end_line": 141
    },
    "code_snippet": "def test_url_for_with_alternating_schemes(self, app, req_ctx):\n        @app.route(\"/\")\n        def index():\n            return \"42\"\n\n        assert flask.url_for(\"index\", _external=True) == \"http://localhost/\"\n        assert (\n            flask.url_for(\"index\", _external=True, _scheme=\"https\")\n            == \"https://localhost/\"\n        )\n        assert flask.url_for(\"index\", _external=True) == \"http://localhost/\""
  },
  {
    "name": "test_url_with_method",
    "docstring": "",
    "is_method": true,
    "class_name": "TestUrlFor",
    "parameters": [
      "self",
      "app",
      "req_ctx"
    ],
    "calls": [
      "MyView.as_view",
      "app.add_url_rule",
      "app.add_url_rule",
      "app.add_url_rule",
      "flask.url_for",
      "flask.url_for",
      "flask.url_for"
    ],
    "code_location": {
      "file": "test_helpers.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 143,
      "end_line": 162
    },
    "code_snippet": "def test_url_with_method(self, app, req_ctx):\n        from flask.views import MethodView\n\n        class MyView(MethodView):\n            def get(self, id=None):\n                if id is None:\n                    return \"List\"\n                return f\"Get {id:d}\"\n\n            def post(self):\n                return \"Create\"\n\n        myview = MyView.as_view(\"myview\")\n        app.add_url_rule(\"/myview/\", methods=[\"GET\"], view_func=myview)\n        app.add_url_rule(\"/myview/<int:id>\", methods=[\"GET\"], ..."
  },
  {
    "name": "test_url_for_with_self",
    "docstring": "",
    "is_method": true,
    "class_name": "TestUrlFor",
    "parameters": [
      "self",
      "app",
      "req_ctx"
    ],
    "calls": [
      "app.route",
      "flask.url_for"
    ],
    "code_location": {
      "file": "test_helpers.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 164,
      "end_line": 169
    },
    "code_snippet": "def test_url_for_with_self(self, app, req_ctx):\n        @app.route(\"/<self>\")\n        def index(self):\n            return \"42\"\n\n        assert flask.url_for(\"index\", self=\"2\") == \"/2\""
  },
  {
    "name": "test_redirect_no_app",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [],
    "calls": [
      "flask.redirect"
    ],
    "code_location": {
      "file": "test_helpers.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 172,
      "end_line": 175
    },
    "code_snippet": "def test_redirect_no_app():\n    response = flask.redirect(\"https://localhost\", 307)\n    assert response.location == \"https://localhost\"\n    assert response.status_code == 307"
  },
  {
    "name": "test_redirect_with_app",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app"
    ],
    "calls": [
      "app.app_context",
      "pytest.raises",
      "flask.redirect"
    ],
    "code_location": {
      "file": "test_helpers.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 178,
      "end_line": 185
    },
    "code_snippet": "def test_redirect_with_app(app):\n    def redirect(location, code=302):\n        raise ValueError\n\n    app.redirect = redirect\n\n    with app.app_context(), pytest.raises(ValueError):\n        flask.redirect(\"other\")"
  },
  {
    "name": "test_abort_no_app",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [],
    "calls": [
      "pytest.raises",
      "flask.abort",
      "pytest.raises",
      "flask.abort"
    ],
    "code_location": {
      "file": "test_helpers.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 188,
      "end_line": 193
    },
    "code_snippet": "def test_abort_no_app():\n    with pytest.raises(werkzeug.exceptions.Unauthorized):\n        flask.abort(401)\n\n    with pytest.raises(LookupError):\n        flask.abort(900)"
  },
  {
    "name": "test_app_aborter_class",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [],
    "calls": [
      "MyFlask",
      "isinstance"
    ],
    "code_location": {
      "file": "test_helpers.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 196,
      "end_line": 204
    },
    "code_snippet": "def test_app_aborter_class():\n    class MyAborter(werkzeug.exceptions.Aborter):\n        pass\n\n    class MyFlask(flask.Flask):\n        aborter_class = MyAborter\n\n    app = MyFlask(__name__)\n    assert isinstance(app.aborter, MyAborter)"
  },
  {
    "name": "test_abort_with_app",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app"
    ],
    "calls": [
      "app.app_context",
      "pytest.raises",
      "flask.abort"
    ],
    "code_location": {
      "file": "test_helpers.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 207,
      "end_line": 214
    },
    "code_snippet": "def test_abort_with_app(app):\n    class My900Error(werkzeug.exceptions.HTTPException):\n        code = 900\n\n    app.aborter.mapping[900] = My900Error\n\n    with app.app_context(), pytest.raises(My900Error):\n        flask.abort(900)"
  },
  {
    "name": "test_name_with_import_error",
    "docstring": "",
    "is_method": true,
    "class_name": "TestNoImports",
    "parameters": [
      "self",
      "modules_tmp_path"
    ],
    "calls": [
      "write_text",
      "flask.Flask",
      "AssertionError"
    ],
    "code_location": {
      "file": "test_helpers.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 228,
      "end_line": 233
    },
    "code_snippet": "def test_name_with_import_error(self, modules_tmp_path):\n        (modules_tmp_path / \"importerror.py\").write_text(\"raise NotImplementedError()\")\n        try:\n            flask.Flask(\"importerror\")\n        except NotImplementedError:\n            AssertionError(\"Flask(import_name) is importing import_name.\")"
  },
  {
    "name": "test_streaming_with_context",
    "docstring": "",
    "is_method": true,
    "class_name": "TestStreaming",
    "parameters": [
      "self",
      "app",
      "client"
    ],
    "calls": [
      "app.route",
      "client.get",
      "flask.Response",
      "flask.stream_with_context",
      "generate"
    ],
    "code_location": {
      "file": "test_helpers.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 237,
      "end_line": 248
    },
    "code_snippet": "def test_streaming_with_context(self, app, client):\n        @app.route(\"/\")\n        def index():\n            def generate():\n                yield \"Hello \"\n                yield flask.request.args[\"name\"]\n                yield \"!\"\n\n            return flask.Response(flask.stream_with_context(generate()))\n\n        rv = client.get(\"/?name=World\")\n        assert rv.data == b\"Hello World!\""
  },
  {
    "name": "test_streaming_with_context_as_decorator",
    "docstring": "",
    "is_method": true,
    "class_name": "TestStreaming",
    "parameters": [
      "self",
      "app",
      "client"
    ],
    "calls": [
      "app.route",
      "client.get",
      "flask.Response",
      "generate"
    ],
    "code_location": {
      "file": "test_helpers.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 250,
      "end_line": 262
    },
    "code_snippet": "def test_streaming_with_context_as_decorator(self, app, client):\n        @app.route(\"/\")\n        def index():\n            @flask.stream_with_context\n            def generate(hello):\n                yield hello\n                yield flask.request.args[\"name\"]\n                yield \"!\"\n\n            return flask.Response(generate(\"Hello \"))\n\n        rv = client.get(\"/?name=World\")\n        assert rv.data == b\"Hello World!\""
  },
  {
    "name": "test_streaming_with_context_and_custom_close",
    "docstring": "",
    "is_method": true,
    "class_name": "TestStreaming",
    "parameters": [
      "self",
      "app",
      "client"
    ],
    "calls": [
      "app.route",
      "client.get",
      "flask.Response",
      "called.append",
      "next",
      "flask.stream_with_context",
      "Wrapper",
      "generate"
    ],
    "code_location": {
      "file": "test_helpers.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 264,
      "end_line": 293
    },
    "code_snippet": "def test_streaming_with_context_and_custom_close(self, app, client):\n        called = []\n\n        class Wrapper:\n            def __init__(self, gen):\n                self._gen = gen\n\n            def __iter__(self):\n                return self\n\n            def close(self):\n                called.append(42)\n\n            def __next__(self):\n                return next(self._gen)\n\n            next = __next__\n\n        @app.route(\"/\")\n        def index():\n            def generate():\n                yi..."
  },
  {
    "name": "test_stream_keeps_session",
    "docstring": "",
    "is_method": true,
    "class_name": "TestStreaming",
    "parameters": [
      "self",
      "app",
      "client"
    ],
    "calls": [
      "app.route",
      "client.get",
      "flask.Response",
      "gen"
    ],
    "code_location": {
      "file": "test_helpers.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 295,
      "end_line": 307
    },
    "code_snippet": "def test_stream_keeps_session(self, app, client):\n        @app.route(\"/\")\n        def index():\n            flask.session[\"test\"] = \"flask\"\n\n            @flask.stream_with_context\n            def gen():\n                yield flask.session[\"test\"]\n\n            return flask.Response(gen())\n\n        rv = client.get(\"/\")\n        assert rv.data == b\"flask\""
  },
  {
    "name": "test_get_debug_flag",
    "docstring": "",
    "is_method": true,
    "class_name": "TestHelpers",
    "parameters": [
      "self",
      "monkeypatch",
      "debug",
      "expect"
    ],
    "calls": [
      "pytest.mark.parametrize",
      "monkeypatch.setenv",
      "get_debug_flag"
    ],
    "code_location": {
      "file": "test_helpers.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 321,
      "end_line": 323
    },
    "code_snippet": "def test_get_debug_flag(self, monkeypatch, debug, expect):\n        monkeypatch.setenv(\"FLASK_DEBUG\", debug)\n        assert get_debug_flag() == expect"
  },
  {
    "name": "test_make_response",
    "docstring": "",
    "is_method": true,
    "class_name": "TestHelpers",
    "parameters": [
      "self"
    ],
    "calls": [
      "flask.Flask",
      "app.test_request_context",
      "flask.helpers.make_response",
      "flask.helpers.make_response"
    ],
    "code_location": {
      "file": "test_helpers.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 325,
      "end_line": 335
    },
    "code_snippet": "def test_make_response(self):\n        app = flask.Flask(__name__)\n        with app.test_request_context():\n            rv = flask.helpers.make_response()\n            assert rv.status_code == 200\n            assert rv.mimetype == \"text/html\"\n\n            rv = flask.helpers.make_response(\"Hello\")\n            assert rv.status_code == 200\n            assert rv.data == b\"Hello\"\n            assert rv.mimetype == \"text/html\""
  },
  {
    "name": "test_open_resource",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "mode"
    ],
    "calls": [
      "pytest.mark.parametrize",
      "flask.Flask",
      "app.open_resource",
      "str",
      "f.read"
    ],
    "code_location": {
      "file": "test_helpers.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 339,
      "end_line": 343
    },
    "code_snippet": "def test_open_resource(mode):\n    app = flask.Flask(__name__)\n\n    with app.open_resource(\"static/index.html\", mode) as f:\n        assert \"<h1>Hello World!</h1>\" in str(f.read())"
  },
  {
    "name": "test_open_resource_exceptions",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "mode"
    ],
    "calls": [
      "pytest.mark.parametrize",
      "flask.Flask",
      "pytest.raises",
      "app.open_resource"
    ],
    "code_location": {
      "file": "test_helpers.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 347,
      "end_line": 351
    },
    "code_snippet": "def test_open_resource_exceptions(mode):\n    app = flask.Flask(__name__)\n\n    with pytest.raises(ValueError):\n        app.open_resource(\"static/index.html\", mode)"
  },
  {
    "name": "test_open_resource_with_encoding",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "tmp_path",
      "encoding"
    ],
    "calls": [
      "pytest.mark.parametrize",
      "flask.Flask",
      "write_text",
      "app.open_resource",
      "os.fspath",
      "f.read"
    ],
    "code_location": {
      "file": "test_helpers.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 355,
      "end_line": 360
    },
    "code_snippet": "def test_open_resource_with_encoding(tmp_path, encoding):\n    app = flask.Flask(__name__, root_path=os.fspath(tmp_path))\n    (tmp_path / \"test\").write_text(\"test\", encoding=encoding)\n\n    with app.open_resource(\"test\", mode=\"rt\", encoding=encoding) as f:\n        assert f.read() == \"test\""
  },
  {
    "name": "test_aborting",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app"
    ],
    "calls": [
      "app.errorhandler",
      "app.route",
      "app.route",
      "str",
      "flask.abort",
      "Foo",
      "app.test_client",
      "c.get",
      "rpartition",
      "c.get",
      "flask.redirect",
      "flask.url_for"
    ],
    "code_location": {
      "file": "test_regression.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 4,
      "end_line": 30
    },
    "code_snippet": "def test_aborting(app):\n    class Foo(Exception):\n        whatever = 42\n\n    @app.errorhandler(Foo)\n    def handle_foo(e):\n        return str(e.whatever)\n\n    @app.route(\"/\")\n    def index():\n        raise flask.abort(flask.redirect(flask.url_for(\"test\")))\n\n    @app.route(\"/test\")\n    def test():\n        raise Foo()\n\n    with app.test_client() as c:\n        rv = c.get(\"/\")\n        location_parts = rv.headers[\"Location\"].rpartition(\"/\")\n\n        if location_parts[0]:\n            # For older Werkz..."
  },
  {
    "name": "test_template_rendered",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "client"
    ],
    "calls": [
      "app.route",
      "flask.template_rendered.connect",
      "flask.render_template",
      "recorded.append",
      "client.get",
      "flask.template_rendered.disconnect",
      "len"
    ],
    "code_location": {
      "file": "test_signals.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 4,
      "end_line": 22
    },
    "code_snippet": "def test_template_rendered(app, client):\n    @app.route(\"/\")\n    def index():\n        return flask.render_template(\"simple_template.html\", whiskey=42)\n\n    recorded = []\n\n    def record(sender, template, context):\n        recorded.append((template, context))\n\n    flask.template_rendered.connect(record, app)\n    try:\n        client.get(\"/\")\n        assert len(recorded) == 1\n        template, context = recorded[0]\n        assert template.name == \"simple_template.html\"\n        assert context[\"whisk..."
  },
  {
    "name": "test_before_render_template",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [],
    "calls": [
      "flask.Flask",
      "app.route",
      "flask.before_render_template.connect",
      "flask.render_template",
      "recorded.append",
      "get",
      "flask.before_render_template.disconnect",
      "len",
      "app.test_client"
    ],
    "code_location": {
      "file": "test_signals.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 25,
      "end_line": 47
    },
    "code_snippet": "def test_before_render_template():\n    app = flask.Flask(__name__)\n\n    @app.route(\"/\")\n    def index():\n        return flask.render_template(\"simple_template.html\", whiskey=42)\n\n    recorded = []\n\n    def record(sender, template, context):\n        context[\"whiskey\"] = 43\n        recorded.append((template, context))\n\n    flask.before_render_template.connect(record, app)\n    try:\n        rv = app.test_client().get(\"/\")\n        assert len(recorded) == 1\n        template, context = recorded[0]\n    ..."
  },
  {
    "name": "test_request_signals",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [],
    "calls": [
      "flask.Flask",
      "app.route",
      "flask.request_started.connect",
      "flask.request_finished.connect",
      "calls.append",
      "calls.append",
      "calls.append",
      "calls.append",
      "calls.append",
      "get",
      "flask.request_started.disconnect",
      "flask.request_finished.disconnect",
      "app.test_client"
    ],
    "code_location": {
      "file": "test_signals.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 50,
      "end_line": 92
    },
    "code_snippet": "def test_request_signals():\n    app = flask.Flask(__name__)\n    calls = []\n\n    def before_request_signal(sender):\n        calls.append(\"before-signal\")\n\n    def after_request_signal(sender, response):\n        assert response.data == b\"stuff\"\n        calls.append(\"after-signal\")\n\n    @app.before_request\n    def before_request_handler():\n        calls.append(\"before-handler\")\n\n    @app.after_request\n    def after_request_handler(response):\n        calls.append(\"after-handler\")\n        response.da..."
  },
  {
    "name": "test_request_exception_signal",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [],
    "calls": [
      "flask.Flask",
      "app.route",
      "flask.got_request_exception.connect",
      "recorded.append",
      "isinstance",
      "flask.got_request_exception.disconnect",
      "len",
      "get",
      "app.test_client"
    ],
    "code_location": {
      "file": "test_signals.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 95,
      "end_line": 112
    },
    "code_snippet": "def test_request_exception_signal():\n    app = flask.Flask(__name__)\n    recorded = []\n\n    @app.route(\"/\")\n    def index():\n        raise ZeroDivisionError\n\n    def record(sender, exception):\n        recorded.append(exception)\n\n    flask.got_request_exception.connect(record, app)\n    try:\n        assert app.test_client().get(\"/\").status_code == 500\n        assert len(recorded) == 1\n        assert isinstance(recorded[0], ZeroDivisionError)\n    finally:\n        flask.got_request_exception.disconn..."
  },
  {
    "name": "test_appcontext_signals",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "client"
    ],
    "calls": [
      "app.route",
      "flask.appcontext_pushed.connect",
      "flask.appcontext_popped.connect",
      "recorded.append",
      "recorded.append",
      "client.get",
      "flask.appcontext_pushed.disconnect",
      "flask.appcontext_popped.disconnect"
    ],
    "code_location": {
      "file": "test_signals.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 115,
      "end_line": 136
    },
    "code_snippet": "def test_appcontext_signals(app, client):\n    recorded = []\n\n    def record_push(sender, **kwargs):\n        recorded.append(\"push\")\n\n    def record_pop(sender, **kwargs):\n        recorded.append(\"pop\")\n\n    @app.route(\"/\")\n    def index():\n        return \"Hello\"\n\n    flask.appcontext_pushed.connect(record_push, app)\n    flask.appcontext_popped.connect(record_pop, app)\n    try:\n        rv = client.get(\"/\")\n        assert rv.data == b\"Hello\"\n        assert recorded == [\"push\", \"pop\"]\n    finally:\n..."
  },
  {
    "name": "test_flash_signal",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app"
    ],
    "calls": [
      "app.route",
      "flask.message_flashed.connect",
      "flask.flash",
      "flask.redirect",
      "recorded.append",
      "app.test_client",
      "flask.message_flashed.disconnect",
      "client.session_transaction",
      "client.get",
      "len"
    ],
    "code_location": {
      "file": "test_signals.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 139,
      "end_line": 160
    },
    "code_snippet": "def test_flash_signal(app):\n    @app.route(\"/\")\n    def index():\n        flask.flash(\"This is a flash message\", category=\"notice\")\n        return flask.redirect(\"/other\")\n\n    recorded = []\n\n    def record(sender, message, category):\n        recorded.append((message, category))\n\n    flask.message_flashed.connect(record, app)\n    try:\n        client = app.test_client()\n        with client.session_transaction():\n            client.get(\"/\")\n            assert len(recorded) == 1\n            message,..."
  },
  {
    "name": "test_appcontext_tearing_down_signal",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "client"
    ],
    "calls": [
      "app.route",
      "flask.appcontext_tearing_down.connect",
      "recorded.append",
      "client.get",
      "isinstance",
      "flask.appcontext_tearing_down.disconnect",
      "len"
    ],
    "code_location": {
      "file": "test_signals.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 163,
      "end_line": 181
    },
    "code_snippet": "def test_appcontext_tearing_down_signal(app, client):\n    app.testing = False\n    recorded = []\n\n    def record_teardown(sender, exc):\n        recorded.append(exc)\n\n    @app.route(\"/\")\n    def index():\n        raise ZeroDivisionError\n\n    flask.appcontext_tearing_down.connect(record_teardown, app)\n    try:\n        rv = client.get(\"/\")\n        assert rv.status_code == 500\n        assert len(recorded) == 1\n        assert isinstance(recorded[0], ZeroDivisionError)\n    finally:\n        flask.appcont..."
  },
  {
    "name": "test_custom_converters",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "client"
    ],
    "calls": [
      "app.route",
      "join",
      "app.test_request_context",
      "value.split",
      "join",
      "client.get",
      "url_for",
      "super",
      "base_to_url"
    ],
    "code_location": {
      "file": "test_converters.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 8,
      "end_line": 26
    },
    "code_snippet": "def test_custom_converters(app, client):\n    class ListConverter(BaseConverter):\n        def to_python(self, value):\n            return value.split(\",\")\n\n        def to_url(self, value):\n            base_to_url = super().to_url\n            return \",\".join(base_to_url(x) for x in value)\n\n    app.url_map.converters[\"list\"] = ListConverter\n\n    @app.route(\"/<list:args>\")\n    def index(args):\n        return \"|\".join(args)\n\n    assert client.get(\"/1,2,3\").data == b\"1|2|3\"\n\n    with app.test_request_c..."
  },
  {
    "name": "test_context_available",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "client"
    ],
    "calls": [
      "app.get",
      "client.get"
    ],
    "code_location": {
      "file": "test_converters.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 29,
      "end_line": 42
    },
    "code_snippet": "def test_context_available(app, client):\n    class ContextConverter(BaseConverter):\n        def to_python(self, value):\n            assert request is not None\n            assert session is not None\n            return value\n\n    app.url_map.converters[\"ctx\"] = ContextConverter\n\n    @app.get(\"/<ctx:name>\")\n    def index(name):\n        return name\n\n    assert client.get(\"/admin\").data == b\"admin\""
  },
  {
    "name": "test_basic_url_generation",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app"
    ],
    "calls": [
      "app.route",
      "app.app_context",
      "flask.url_for"
    ],
    "code_location": {
      "file": "test_appctx.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 8,
      "end_line": 18
    },
    "code_snippet": "def test_basic_url_generation(app):\n    app.config[\"SERVER_NAME\"] = \"localhost\"\n    app.config[\"PREFERRED_URL_SCHEME\"] = \"https\"\n\n    @app.route(\"/\")\n    def index():\n        pass\n\n    with app.app_context():\n        rv = flask.url_for(\"index\")\n        assert rv == \"https://localhost/\""
  },
  {
    "name": "test_url_generation_requires_server_name",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app"
    ],
    "calls": [
      "app.app_context",
      "pytest.raises",
      "flask.url_for"
    ],
    "code_location": {
      "file": "test_appctx.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 21,
      "end_line": 24
    },
    "code_snippet": "def test_url_generation_requires_server_name(app):\n    with app.app_context():\n        with pytest.raises(RuntimeError):\n            flask.url_for(\"index\")"
  },
  {
    "name": "test_url_generation_without_context_fails",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [],
    "calls": [
      "pytest.raises",
      "flask.url_for"
    ],
    "code_location": {
      "file": "test_appctx.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 27,
      "end_line": 29
    },
    "code_snippet": "def test_url_generation_without_context_fails():\n    with pytest.raises(RuntimeError):\n        flask.url_for(\"index\")"
  },
  {
    "name": "test_request_context_means_app_context",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app"
    ],
    "calls": [
      "app.test_request_context",
      "flask.current_app._get_current_object"
    ],
    "code_location": {
      "file": "test_appctx.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 32,
      "end_line": 35
    },
    "code_snippet": "def test_request_context_means_app_context(app):\n    with app.test_request_context():\n        assert flask.current_app._get_current_object() is app\n    assert not flask.current_app"
  },
  {
    "name": "test_app_context_provides_current_app",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app"
    ],
    "calls": [
      "app.app_context",
      "flask.current_app._get_current_object"
    ],
    "code_location": {
      "file": "test_appctx.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 38,
      "end_line": 41
    },
    "code_snippet": "def test_app_context_provides_current_app(app):\n    with app.app_context():\n        assert flask.current_app._get_current_object() is app\n    assert not flask.current_app"
  },
  {
    "name": "test_app_tearing_down",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app"
    ],
    "calls": [
      "cleanup_stuff.append",
      "app.app_context"
    ],
    "code_location": {
      "file": "test_appctx.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 44,
      "end_line": 54
    },
    "code_snippet": "def test_app_tearing_down(app):\n    cleanup_stuff = []\n\n    @app.teardown_appcontext\n    def cleanup(exception):\n        cleanup_stuff.append(exception)\n\n    with app.app_context():\n        pass\n\n    assert cleanup_stuff == [None]"
  },
  {
    "name": "test_app_tearing_down_with_previous_exception",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app"
    ],
    "calls": [
      "cleanup_stuff.append",
      "Exception",
      "app.app_context"
    ],
    "code_location": {
      "file": "test_appctx.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 57,
      "end_line": 72
    },
    "code_snippet": "def test_app_tearing_down_with_previous_exception(app):\n    cleanup_stuff = []\n\n    @app.teardown_appcontext\n    def cleanup(exception):\n        cleanup_stuff.append(exception)\n\n    try:\n        raise Exception(\"dummy\")\n    except Exception:\n        pass\n\n    with app.app_context():\n        pass\n\n    assert cleanup_stuff == [None]"
  },
  {
    "name": "test_app_tearing_down_with_handled_exception_by_except_block",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app"
    ],
    "calls": [
      "cleanup_stuff.append",
      "app.app_context",
      "Exception"
    ],
    "code_location": {
      "file": "test_appctx.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 75,
      "end_line": 88
    },
    "code_snippet": "def test_app_tearing_down_with_handled_exception_by_except_block(app):\n    cleanup_stuff = []\n\n    @app.teardown_appcontext\n    def cleanup(exception):\n        cleanup_stuff.append(exception)\n\n    with app.app_context():\n        try:\n            raise Exception(\"dummy\")\n        except Exception:\n            pass\n\n    assert cleanup_stuff == [None]"
  },
  {
    "name": "test_app_tearing_down_with_handled_exception_by_app_handler",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "client"
    ],
    "calls": [
      "app.route",
      "app.errorhandler",
      "cleanup_stuff.append",
      "Exception",
      "flask.jsonify",
      "app.app_context",
      "client.get",
      "str"
    ],
    "code_location": {
      "file": "test_appctx.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 91,
      "end_line": 110
    },
    "code_snippet": "def test_app_tearing_down_with_handled_exception_by_app_handler(app, client):\n    app.config[\"PROPAGATE_EXCEPTIONS\"] = True\n    cleanup_stuff = []\n\n    @app.teardown_appcontext\n    def cleanup(exception):\n        cleanup_stuff.append(exception)\n\n    @app.route(\"/\")\n    def index():\n        raise Exception(\"dummy\")\n\n    @app.errorhandler(Exception)\n    def handler(f):\n        return flask.jsonify(str(f))\n\n    with app.app_context():\n        client.get(\"/\")\n\n    assert cleanup_stuff == [None]"
  },
  {
    "name": "test_app_tearing_down_with_unhandled_exception",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "client"
    ],
    "calls": [
      "app.route",
      "isinstance",
      "cleanup_stuff.append",
      "ValueError",
      "pytest.raises",
      "len",
      "str",
      "app.app_context",
      "client.get"
    ],
    "code_location": {
      "file": "test_appctx.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 113,
      "end_line": 131
    },
    "code_snippet": "def test_app_tearing_down_with_unhandled_exception(app, client):\n    app.config[\"PROPAGATE_EXCEPTIONS\"] = True\n    cleanup_stuff = []\n\n    @app.teardown_appcontext\n    def cleanup(exception):\n        cleanup_stuff.append(exception)\n\n    @app.route(\"/\")\n    def index():\n        raise ValueError(\"dummy\")\n\n    with pytest.raises(ValueError, match=\"dummy\"):\n        with app.app_context():\n            client.get(\"/\")\n\n    assert len(cleanup_stuff) == 1\n    assert isinstance(cleanup_stuff[0], ValueErr..."
  },
  {
    "name": "test_app_ctx_globals_methods",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "app_ctx"
    ],
    "calls": [
      "flask.g.setdefault",
      "flask.g.setdefault",
      "flask.g.get",
      "flask.g.get",
      "flask.g.pop",
      "pytest.raises",
      "flask.g.pop",
      "flask.g.pop",
      "list",
      "repr"
    ],
    "code_location": {
      "file": "test_appctx.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 134,
      "end_line": 154
    },
    "code_snippet": "def test_app_ctx_globals_methods(app, app_ctx):\n    # get\n    assert flask.g.get(\"foo\") is None\n    assert flask.g.get(\"foo\", \"bar\") == \"bar\"\n    # __contains__\n    assert \"foo\" not in flask.g\n    flask.g.foo = \"bar\"\n    assert \"foo\" in flask.g\n    # setdefault\n    flask.g.setdefault(\"bar\", \"the cake is a lie\")\n    flask.g.setdefault(\"bar\", \"hello world\")\n    assert flask.g.bar == \"the cake is a lie\"\n    # pop\n    assert flask.g.pop(\"bar\") == \"the cake is a lie\"\n    with pytest.raises(KeyError):..."
  },
  {
    "name": "test_custom_app_ctx_globals_class",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app"
    ],
    "calls": [
      "app.app_context",
      "flask.render_template_string"
    ],
    "code_location": {
      "file": "test_appctx.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 157,
      "end_line": 164
    },
    "code_snippet": "def test_custom_app_ctx_globals_class(app):\n    class CustomRequestGlobals:\n        def __init__(self):\n            self.spam = \"eggs\"\n\n    app.app_ctx_globals_class = CustomRequestGlobals\n    with app.app_context():\n        assert flask.render_template_string(\"{{ g.spam }}\") == \"eggs\""
  },
  {
    "name": "test_context_refcounts",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "client"
    ],
    "calls": [
      "app.route",
      "client.get",
      "called.append",
      "called.append"
    ],
    "code_location": {
      "file": "test_appctx.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 167,
      "end_line": 190
    },
    "code_snippet": "def test_context_refcounts(app, client):\n    called = []\n\n    @app.teardown_request\n    def teardown_req(error=None):\n        called.append(\"request\")\n\n    @app.teardown_appcontext\n    def teardown_app(error=None):\n        called.append(\"app\")\n\n    @app.route(\"/\")\n    def index():\n        with app_ctx:\n            with request_ctx:\n                pass\n\n        assert flask.request.environ[\"werkzeug.request\"] is not None\n        return \"\"\n\n    res = client.get(\"/\")\n    assert res.status_code == ..."
  },
  {
    "name": "test_clean_pop",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app"
    ],
    "calls": [
      "called.append",
      "app.app_context",
      "called.append"
    ],
    "code_location": {
      "file": "test_appctx.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 193,
      "end_line": 209
    },
    "code_snippet": "def test_clean_pop(app):\n    app.testing = False\n    called = []\n\n    @app.teardown_request\n    def teardown_req(error=None):\n        raise ZeroDivisionError\n\n    @app.teardown_appcontext\n    def teardown_app(error=None):\n        called.append(\"TEARDOWN\")\n\n    with app.app_context():\n        called.append(flask.current_app.name)\n\n    assert called == [\"flask_test\", \"TEARDOWN\"]\n    assert not flask.current_app"
  },
  {
    "name": "test_explicit_instance_paths",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "modules_tmp_path"
    ],
    "calls": [
      "flask.Flask",
      "pytest.raises",
      "flask.Flask",
      "os.fspath",
      "os.fspath"
    ],
    "code_location": {
      "file": "test_instance_config.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 8,
      "end_line": 13
    },
    "code_snippet": "def test_explicit_instance_paths(modules_tmp_path):\n    with pytest.raises(ValueError, match=\".*must be absolute\"):\n        flask.Flask(__name__, instance_path=\"instance\")\n\n    app = flask.Flask(__name__, instance_path=os.fspath(modules_tmp_path))\n    assert app.instance_path == os.fspath(modules_tmp_path)"
  },
  {
    "name": "test_uninstalled_module_paths",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "modules_tmp_path",
      "purge_module"
    ],
    "calls": [
      "write_text",
      "purge_module",
      "os.fspath"
    ],
    "code_location": {
      "file": "test_instance_config.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 16,
      "end_line": 27
    },
    "code_snippet": "def test_uninstalled_module_paths(modules_tmp_path, purge_module):\n    (modules_tmp_path / \"config_module_app.py\").write_text(\n        \"import os\\n\"\n        \"import flask\\n\"\n        \"here = os.path.abspath(os.path.dirname(__file__))\\n\"\n        \"app = flask.Flask(__name__)\\n\"\n    )\n    purge_module(\"config_module_app\")\n\n    from config_module_app import app\n\n    assert app.instance_path == os.fspath(modules_tmp_path / \"instance\")"
  },
  {
    "name": "test_uninstalled_package_paths",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "modules_tmp_path",
      "purge_module"
    ],
    "calls": [
      "app.mkdir",
      "write_text",
      "purge_module",
      "os.fspath"
    ],
    "code_location": {
      "file": "test_instance_config.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 30,
      "end_line": 43
    },
    "code_snippet": "def test_uninstalled_package_paths(modules_tmp_path, purge_module):\n    app = modules_tmp_path / \"config_package_app\"\n    app.mkdir()\n    (app / \"__init__.py\").write_text(\n        \"import os\\n\"\n        \"import flask\\n\"\n        \"here = os.path.abspath(os.path.dirname(__file__))\\n\"\n        \"app = flask.Flask(__name__)\\n\"\n    )\n    purge_module(\"config_package_app\")\n\n    from config_package_app import app\n\n    assert app.instance_path == os.fspath(modules_tmp_path / \"instance\")"
  },
  {
    "name": "test_uninstalled_namespace_paths",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "tmp_path",
      "monkeypatch",
      "purge_module"
    ],
    "calls": [
      "create_namespace",
      "create_namespace",
      "purge_module",
      "purge_module",
      "monkeypatch.syspath_prepend",
      "ns.mkdir",
      "write_text",
      "os.fspath",
      "os.fspath"
    ],
    "code_location": {
      "file": "test_instance_config.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 46,
      "end_line": 62
    },
    "code_snippet": "def test_uninstalled_namespace_paths(tmp_path, monkeypatch, purge_module):\n    def create_namespace(package):\n        project = tmp_path / f\"project-{package}\"\n        monkeypatch.syspath_prepend(os.fspath(project))\n        ns = project / \"namespace\" / package\n        ns.mkdir(parents=True)\n        (ns / \"__init__.py\").write_text(\"import flask\\napp = flask.Flask(__name__)\\n\")\n        return project\n\n    _ = create_namespace(\"package1\")\n    project2 = create_namespace(\"package2\")\n    purge_module..."
  },
  {
    "name": "test_installed_module_paths",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "modules_tmp_path",
      "modules_tmp_path_prefix",
      "purge_module",
      "site_packages"
    ],
    "calls": [
      "write_text",
      "purge_module",
      "os.fspath"
    ],
    "code_location": {
      "file": "test_instance_config.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 65,
      "end_line": 77
    },
    "code_snippet": "def test_installed_module_paths(\n    modules_tmp_path, modules_tmp_path_prefix, purge_module, site_packages\n):\n    (site_packages / \"site_app.py\").write_text(\n        \"import flask\\napp = flask.Flask(__name__)\\n\"\n    )\n    purge_module(\"site_app\")\n\n    from site_app import app\n\n    assert app.instance_path == os.fspath(\n        modules_tmp_path / \"var\" / \"site_app-instance\"\n    )"
  },
  {
    "name": "test_installed_package_paths",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "modules_tmp_path",
      "modules_tmp_path_prefix",
      "purge_module",
      "monkeypatch"
    ],
    "calls": [
      "installed_path.mkdir",
      "monkeypatch.syspath_prepend",
      "app.mkdir",
      "write_text",
      "purge_module",
      "os.fspath"
    ],
    "code_location": {
      "file": "test_instance_config.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 80,
      "end_line": 96
    },
    "code_snippet": "def test_installed_package_paths(\n    modules_tmp_path, modules_tmp_path_prefix, purge_module, monkeypatch\n):\n    installed_path = modules_tmp_path / \"path\"\n    installed_path.mkdir()\n    monkeypatch.syspath_prepend(installed_path)\n\n    app = installed_path / \"installed_package\"\n    app.mkdir()\n    (app / \"__init__.py\").write_text(\"import flask\\napp = flask.Flask(__name__)\\n\")\n    purge_module(\"installed_package\")\n\n    from installed_package import app\n\n    assert app.instance_path == os.fspath(..."
  },
  {
    "name": "test_prefix_package_paths",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "modules_tmp_path",
      "modules_tmp_path_prefix",
      "purge_module",
      "site_packages"
    ],
    "calls": [
      "app.mkdir",
      "write_text",
      "purge_module",
      "os.fspath"
    ],
    "code_location": {
      "file": "test_instance_config.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 99,
      "end_line": 111
    },
    "code_snippet": "def test_prefix_package_paths(\n    modules_tmp_path, modules_tmp_path_prefix, purge_module, site_packages\n):\n    app = site_packages / \"site_package\"\n    app.mkdir()\n    (app / \"__init__.py\").write_text(\"import flask\\napp = flask.Flask(__name__)\\n\")\n    purge_module(\"site_package\")\n\n    import site_package\n\n    assert site_package.app.instance_path == os.fspath(\n        modules_tmp_path / \"var\" / \"site_package-instance\"\n    )"
  },
  {
    "name": "test_blueprint_specific_error_handling",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "client"
    ],
    "calls": [
      "flask.Blueprint",
      "flask.Blueprint",
      "flask.Blueprint",
      "frontend.errorhandler",
      "frontend.route",
      "backend.errorhandler",
      "backend.route",
      "sideend.route",
      "app.register_blueprint",
      "app.register_blueprint",
      "app.register_blueprint",
      "app.errorhandler",
      "flask.abort",
      "flask.abort",
      "flask.abort",
      "client.get",
      "client.get",
      "client.get"
    ],
    "code_location": {
      "file": "test_blueprints.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 8,
      "end_line": 43
    },
    "code_snippet": "def test_blueprint_specific_error_handling(app, client):\n    frontend = flask.Blueprint(\"frontend\", __name__)\n    backend = flask.Blueprint(\"backend\", __name__)\n    sideend = flask.Blueprint(\"sideend\", __name__)\n\n    @frontend.errorhandler(403)\n    def frontend_forbidden(e):\n        return \"frontend says no\", 403\n\n    @frontend.route(\"/frontend-no\")\n    def frontend_no():\n        flask.abort(403)\n\n    @backend.errorhandler(403)\n    def backend_forbidden(e):\n        return \"backend says no\", 403\n..."
  },
  {
    "name": "test_blueprint_specific_user_error_handling",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "client"
    ],
    "calls": [
      "flask.Blueprint",
      "blue.errorhandler",
      "blue.register_error_handler",
      "blue.route",
      "blue.route",
      "app.register_blueprint",
      "isinstance",
      "isinstance",
      "MyDecoratorException",
      "MyFunctionException",
      "client.get",
      "client.get"
    ],
    "code_location": {
      "file": "test_blueprints.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 46,
      "end_line": 77
    },
    "code_snippet": "def test_blueprint_specific_user_error_handling(app, client):\n    class MyDecoratorException(Exception):\n        pass\n\n    class MyFunctionException(Exception):\n        pass\n\n    blue = flask.Blueprint(\"blue\", __name__)\n\n    @blue.errorhandler(MyDecoratorException)\n    def my_decorator_exception_handler(e):\n        assert isinstance(e, MyDecoratorException)\n        return \"boom\"\n\n    def my_function_exception_handler(e):\n        assert isinstance(e, MyFunctionException)\n        return \"bam\"\n\n   ..."
  },
  {
    "name": "test_blueprint_app_error_handling",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "client"
    ],
    "calls": [
      "flask.Blueprint",
      "errors.app_errorhandler",
      "app.route",
      "flask.Blueprint",
      "forbidden_bp.route",
      "app.register_blueprint",
      "app.register_blueprint",
      "flask.abort",
      "flask.abort",
      "client.get",
      "client.get"
    ],
    "code_location": {
      "file": "test_blueprints.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 80,
      "end_line": 101
    },
    "code_snippet": "def test_blueprint_app_error_handling(app, client):\n    errors = flask.Blueprint(\"errors\", __name__)\n\n    @errors.app_errorhandler(403)\n    def forbidden_handler(e):\n        return \"you shall not pass\", 403\n\n    @app.route(\"/forbidden\")\n    def app_forbidden():\n        flask.abort(403)\n\n    forbidden_bp = flask.Blueprint(\"forbidden_bp\", __name__)\n\n    @forbidden_bp.route(\"/nope\")\n    def bp_forbidden():\n        flask.abort(403)\n\n    app.register_blueprint(errors)\n    app.register_blueprint(forbi..."
  },
  {
    "name": "test_blueprint_prefix_slash",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "client",
      "prefix",
      "rule",
      "url"
    ],
    "calls": [
      "pytest.mark.parametrize",
      "flask.Blueprint",
      "bp.route",
      "app.register_blueprint",
      "client.get"
    ],
    "code_location": {
      "file": "test_blueprints.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 120,
      "end_line": 128
    },
    "code_snippet": "def test_blueprint_prefix_slash(app, client, prefix, rule, url):\n    bp = flask.Blueprint(\"test\", __name__, url_prefix=prefix)\n\n    @bp.route(rule)\n    def index():\n        return \"\", 204\n\n    app.register_blueprint(bp)\n    assert client.get(url).status_code == 204"
  },
  {
    "name": "test_blueprint_url_defaults",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "client"
    ],
    "calls": [
      "flask.Blueprint",
      "bp.route",
      "bp.route",
      "app.register_blueprint",
      "app.register_blueprint",
      "str",
      "client.get",
      "client.get",
      "client.get",
      "client.get"
    ],
    "code_location": {
      "file": "test_blueprints.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 131,
      "end_line": 148
    },
    "code_snippet": "def test_blueprint_url_defaults(app, client):\n    bp = flask.Blueprint(\"test\", __name__)\n\n    @bp.route(\"/foo\", defaults={\"baz\": 42})\n    def foo(bar, baz):\n        return f\"{bar}/{baz:d}\"\n\n    @bp.route(\"/bar\")\n    def bar(bar):\n        return str(bar)\n\n    app.register_blueprint(bp, url_prefix=\"/1\", url_defaults={\"bar\": 23})\n    app.register_blueprint(bp, name=\"test2\", url_prefix=\"/2\", url_defaults={\"bar\": 19})\n\n    assert client.get(\"/1/foo\").data == b\"23/42\"\n    assert client.get(\"/2/foo\").d..."
  },
  {
    "name": "test_blueprint_url_processors",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "client"
    ],
    "calls": [
      "flask.Blueprint",
      "bp.route",
      "bp.route",
      "app.register_blueprint",
      "values.setdefault",
      "values.pop",
      "flask.url_for",
      "flask.url_for",
      "client.get",
      "client.get"
    ],
    "code_location": {
      "file": "test_blueprints.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 151,
      "end_line": 173
    },
    "code_snippet": "def test_blueprint_url_processors(app, client):\n    bp = flask.Blueprint(\"frontend\", __name__, url_prefix=\"/<lang_code>\")\n\n    @bp.url_defaults\n    def add_language_code(endpoint, values):\n        values.setdefault(\"lang_code\", flask.g.lang_code)\n\n    @bp.url_value_preprocessor\n    def pull_lang_code(endpoint, values):\n        flask.g.lang_code = values.pop(\"lang_code\")\n\n    @bp.route(\"/\")\n    def index():\n        return flask.url_for(\".about\")\n\n    @bp.route(\"/about\")\n    def about():\n        r..."
  },
  {
    "name": "test_templates_and_static",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "test_apps"
    ],
    "calls": [
      "app.test_client",
      "client.get",
      "client.get",
      "client.get",
      "client.get",
      "rv.close",
      "client.get",
      "rv.close",
      "rv.data.strip",
      "rv.data.strip",
      "client.get",
      "parse_cache_control_header",
      "rv.close",
      "app.test_request_context",
      "app.test_request_context",
      "test_request_context",
      "flask.url_for",
      "pytest.raises",
      "flask.render_template",
      "flask.render_template",
      "flask.Flask"
    ],
    "code_location": {
      "file": "test_blueprints.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 176,
      "end_line": 220
    },
    "code_snippet": "def test_templates_and_static(test_apps):\n    from blueprintapp import app\n\n    client = app.test_client()\n\n    rv = client.get(\"/\")\n    assert rv.data == b\"Hello from the Frontend\"\n    rv = client.get(\"/admin/\")\n    assert rv.data == b\"Hello from the Admin\"\n    rv = client.get(\"/admin/index2\")\n    assert rv.data == b\"Hello from the Admin\"\n    rv = client.get(\"/admin/static/test.txt\")\n    assert rv.data.strip() == b\"Admin File\"\n    rv.close()\n    rv = client.get(\"/admin/static/css/test.css\")\n   ..."
  },
  {
    "name": "test_default_static_max_age",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app"
    ],
    "calls": [
      "MyBlueprint",
      "app.register_blueprint",
      "app.test_request_context",
      "blueprint.send_static_file",
      "parse_cache_control_header",
      "rv.close"
    ],
    "code_location": {
      "file": "test_blueprints.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 223,
      "end_line": 244
    },
    "code_snippet": "def test_default_static_max_age(app):\n    class MyBlueprint(flask.Blueprint):\n        def get_send_file_max_age(self, filename):\n            return 100\n\n    blueprint = MyBlueprint(\"blueprint\", __name__, static_folder=\"static\")\n    app.register_blueprint(blueprint)\n\n    # try/finally, in case other tests use this app for Blueprint tests.\n    max_age_default = app.config[\"SEND_FILE_MAX_AGE_DEFAULT\"]\n    try:\n        with app.test_request_context():\n            unexpected_max_age = 3600\n          ..."
  },
  {
    "name": "test_templates_list",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "test_apps"
    ],
    "calls": [
      "sorted",
      "app.jinja_env.list_templates"
    ],
    "code_location": {
      "file": "test_blueprints.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 247,
      "end_line": 251
    },
    "code_snippet": "def test_templates_list(test_apps):\n    from blueprintapp import app\n\n    templates = sorted(app.jinja_env.list_templates())\n    assert templates == [\"admin/index.html\", \"frontend/index.html\"]"
  },
  {
    "name": "test_dotted_name_not_allowed",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "client"
    ],
    "calls": [
      "pytest.raises",
      "flask.Blueprint"
    ],
    "code_location": {
      "file": "test_blueprints.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 254,
      "end_line": 256
    },
    "code_snippet": "def test_dotted_name_not_allowed(app, client):\n    with pytest.raises(ValueError):\n        flask.Blueprint(\"app.ui\", __name__)"
  },
  {
    "name": "test_empty_name_not_allowed",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "client"
    ],
    "calls": [
      "pytest.raises",
      "flask.Blueprint"
    ],
    "code_location": {
      "file": "test_blueprints.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 259,
      "end_line": 261
    },
    "code_snippet": "def test_empty_name_not_allowed(app, client):\n    with pytest.raises(ValueError):\n        flask.Blueprint(\"\", __name__)"
  },
  {
    "name": "test_dotted_names_from_app",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "client"
    ],
    "calls": [
      "flask.Blueprint",
      "app.route",
      "test.route",
      "app.register_blueprint",
      "client.get",
      "flask.url_for",
      "flask.url_for"
    ],
    "code_location": {
      "file": "test_blueprints.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 264,
      "end_line": 278
    },
    "code_snippet": "def test_dotted_names_from_app(app, client):\n    test = flask.Blueprint(\"test\", __name__)\n\n    @app.route(\"/\")\n    def app_index():\n        return flask.url_for(\"test.index\")\n\n    @test.route(\"/test/\")\n    def index():\n        return flask.url_for(\"app_index\")\n\n    app.register_blueprint(test)\n\n    rv = client.get(\"/\")\n    assert rv.data == b\"/test/\""
  },
  {
    "name": "test_empty_url_defaults",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "client"
    ],
    "calls": [
      "flask.Blueprint",
      "bp.route",
      "bp.route",
      "app.register_blueprint",
      "str",
      "client.get",
      "client.get"
    ],
    "code_location": {
      "file": "test_blueprints.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 281,
      "end_line": 292
    },
    "code_snippet": "def test_empty_url_defaults(app, client):\n    bp = flask.Blueprint(\"bp\", __name__)\n\n    @bp.route(\"/\", defaults={\"page\": 1})\n    @bp.route(\"/page/<int:page>\")\n    def something(page):\n        return str(page)\n\n    app.register_blueprint(bp)\n\n    assert client.get(\"/\").data == b\"1\"\n    assert client.get(\"/page/2\").data == b\"2\""
  },
  {
    "name": "test_route_decorator_custom_endpoint",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "client"
    ],
    "calls": [
      "flask.Blueprint",
      "bp.route",
      "bp.route",
      "bp.route",
      "bp.route",
      "app.register_blueprint",
      "app.route",
      "client.get",
      "client.get",
      "client.get",
      "client.get",
      "client.get"
    ],
    "code_location": {
      "file": "test_blueprints.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 295,
      "end_line": 324
    },
    "code_snippet": "def test_route_decorator_custom_endpoint(app, client):\n    bp = flask.Blueprint(\"bp\", __name__)\n\n    @bp.route(\"/foo\")\n    def foo():\n        return flask.request.endpoint\n\n    @bp.route(\"/bar\", endpoint=\"bar\")\n    def foo_bar():\n        return flask.request.endpoint\n\n    @bp.route(\"/bar/123\", endpoint=\"123\")\n    def foo_bar_foo():\n        return flask.request.endpoint\n\n    @bp.route(\"/bar/foo\")\n    def bar_foo():\n        return flask.request.endpoint\n\n    app.register_blueprint(bp, url_prefix=\"..."
  },
  {
    "name": "test_route_decorator_custom_endpoint_with_dots",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "client"
    ],
    "calls": [
      "flask.Blueprint",
      "pytest.raises",
      "pytest.raises",
      "bp.add_url_rule",
      "pytest.raises",
      "bp.add_url_rule",
      "bp.route"
    ],
    "code_location": {
      "file": "test_blueprints.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 327,
      "end_line": 342
    },
    "code_snippet": "def test_route_decorator_custom_endpoint_with_dots(app, client):\n    bp = flask.Blueprint(\"bp\", __name__)\n\n    with pytest.raises(ValueError):\n        bp.route(\"/\", endpoint=\"a.b\")(lambda: \"\")\n\n    with pytest.raises(ValueError):\n        bp.add_url_rule(\"/\", endpoint=\"a.b\")\n\n    def view():\n        return \"\"\n\n    view.__name__ = \"a.b\"\n\n    with pytest.raises(ValueError):\n        bp.add_url_rule(\"/\", view_func=view)"
  },
  {
    "name": "test_endpoint_decorator",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "client"
    ],
    "calls": [
      "app.url_map.add",
      "flask.Blueprint",
      "bp.endpoint",
      "app.register_blueprint",
      "Rule",
      "client.get",
      "client.get"
    ],
    "code_location": {
      "file": "test_blueprints.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 345,
      "end_line": 359
    },
    "code_snippet": "def test_endpoint_decorator(app, client):\n    from werkzeug.routing import Rule\n\n    app.url_map.add(Rule(\"/foo\", endpoint=\"bar\"))\n\n    bp = flask.Blueprint(\"bp\", __name__)\n\n    @bp.endpoint(\"bar\")\n    def foobar():\n        return flask.request.endpoint\n\n    app.register_blueprint(bp, url_prefix=\"/bp_prefix\")\n\n    assert client.get(\"/foo\").data == b\"bar\"\n    assert client.get(\"/bp_prefix/bar\").status_code == 404"
  },
  {
    "name": "test_template_filter",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app"
    ],
    "calls": [
      "flask.Blueprint",
      "bp.app_template_filter",
      "app.register_blueprint",
      "app.jinja_env.filters.keys"
    ],
    "code_location": {
      "file": "test_blueprints.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 362,
      "end_line": 372
    },
    "code_snippet": "def test_template_filter(app):\n    bp = flask.Blueprint(\"bp\", __name__)\n\n    @bp.app_template_filter()\n    def my_reverse(s):\n        return s[::-1]\n\n    app.register_blueprint(bp, url_prefix=\"/py\")\n    assert \"my_reverse\" in app.jinja_env.filters.keys()\n    assert app.jinja_env.filters[\"my_reverse\"] == my_reverse\n    assert app.jinja_env.filters[\"my_reverse\"](\"abcd\") == \"dcba\""
  },
  {
    "name": "test_add_template_filter",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app"
    ],
    "calls": [
      "flask.Blueprint",
      "bp.add_app_template_filter",
      "app.register_blueprint",
      "app.jinja_env.filters.keys"
    ],
    "code_location": {
      "file": "test_blueprints.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 375,
      "end_line": 385
    },
    "code_snippet": "def test_add_template_filter(app):\n    bp = flask.Blueprint(\"bp\", __name__)\n\n    def my_reverse(s):\n        return s[::-1]\n\n    bp.add_app_template_filter(my_reverse)\n    app.register_blueprint(bp, url_prefix=\"/py\")\n    assert \"my_reverse\" in app.jinja_env.filters.keys()\n    assert app.jinja_env.filters[\"my_reverse\"] == my_reverse\n    assert app.jinja_env.filters[\"my_reverse\"](\"abcd\") == \"dcba\""
  },
  {
    "name": "test_template_filter_with_name",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app"
    ],
    "calls": [
      "flask.Blueprint",
      "bp.app_template_filter",
      "app.register_blueprint",
      "app.jinja_env.filters.keys"
    ],
    "code_location": {
      "file": "test_blueprints.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 388,
      "end_line": 398
    },
    "code_snippet": "def test_template_filter_with_name(app):\n    bp = flask.Blueprint(\"bp\", __name__)\n\n    @bp.app_template_filter(\"strrev\")\n    def my_reverse(s):\n        return s[::-1]\n\n    app.register_blueprint(bp, url_prefix=\"/py\")\n    assert \"strrev\" in app.jinja_env.filters.keys()\n    assert app.jinja_env.filters[\"strrev\"] == my_reverse\n    assert app.jinja_env.filters[\"strrev\"](\"abcd\") == \"dcba\""
  },
  {
    "name": "test_add_template_filter_with_name",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app"
    ],
    "calls": [
      "flask.Blueprint",
      "bp.add_app_template_filter",
      "app.register_blueprint",
      "app.jinja_env.filters.keys"
    ],
    "code_location": {
      "file": "test_blueprints.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 401,
      "end_line": 411
    },
    "code_snippet": "def test_add_template_filter_with_name(app):\n    bp = flask.Blueprint(\"bp\", __name__)\n\n    def my_reverse(s):\n        return s[::-1]\n\n    bp.add_app_template_filter(my_reverse, \"strrev\")\n    app.register_blueprint(bp, url_prefix=\"/py\")\n    assert \"strrev\" in app.jinja_env.filters.keys()\n    assert app.jinja_env.filters[\"strrev\"] == my_reverse\n    assert app.jinja_env.filters[\"strrev\"](\"abcd\") == \"dcba\""
  },
  {
    "name": "test_template_filter_with_template",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "client"
    ],
    "calls": [
      "flask.Blueprint",
      "bp.app_template_filter",
      "app.register_blueprint",
      "app.route",
      "client.get",
      "flask.render_template"
    ],
    "code_location": {
      "file": "test_blueprints.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 414,
      "end_line": 428
    },
    "code_snippet": "def test_template_filter_with_template(app, client):\n    bp = flask.Blueprint(\"bp\", __name__)\n\n    @bp.app_template_filter()\n    def super_reverse(s):\n        return s[::-1]\n\n    app.register_blueprint(bp, url_prefix=\"/py\")\n\n    @app.route(\"/\")\n    def index():\n        return flask.render_template(\"template_filter.html\", value=\"abcd\")\n\n    rv = client.get(\"/\")\n    assert rv.data == b\"dcba\""
  },
  {
    "name": "test_template_filter_after_route_with_template",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "client"
    ],
    "calls": [
      "app.route",
      "flask.Blueprint",
      "bp.app_template_filter",
      "app.register_blueprint",
      "client.get",
      "flask.render_template"
    ],
    "code_location": {
      "file": "test_blueprints.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 431,
      "end_line": 444
    },
    "code_snippet": "def test_template_filter_after_route_with_template(app, client):\n    @app.route(\"/\")\n    def index():\n        return flask.render_template(\"template_filter.html\", value=\"abcd\")\n\n    bp = flask.Blueprint(\"bp\", __name__)\n\n    @bp.app_template_filter()\n    def super_reverse(s):\n        return s[::-1]\n\n    app.register_blueprint(bp, url_prefix=\"/py\")\n    rv = client.get(\"/\")\n    assert rv.data == b\"dcba\""
  },
  {
    "name": "test_add_template_filter_with_template",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "client"
    ],
    "calls": [
      "flask.Blueprint",
      "bp.add_app_template_filter",
      "app.register_blueprint",
      "app.route",
      "client.get",
      "flask.render_template"
    ],
    "code_location": {
      "file": "test_blueprints.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 447,
      "end_line": 461
    },
    "code_snippet": "def test_add_template_filter_with_template(app, client):\n    bp = flask.Blueprint(\"bp\", __name__)\n\n    def super_reverse(s):\n        return s[::-1]\n\n    bp.add_app_template_filter(super_reverse)\n    app.register_blueprint(bp, url_prefix=\"/py\")\n\n    @app.route(\"/\")\n    def index():\n        return flask.render_template(\"template_filter.html\", value=\"abcd\")\n\n    rv = client.get(\"/\")\n    assert rv.data == b\"dcba\""
  },
  {
    "name": "test_template_filter_with_name_and_template",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "client"
    ],
    "calls": [
      "flask.Blueprint",
      "bp.app_template_filter",
      "app.register_blueprint",
      "app.route",
      "client.get",
      "flask.render_template"
    ],
    "code_location": {
      "file": "test_blueprints.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 464,
      "end_line": 478
    },
    "code_snippet": "def test_template_filter_with_name_and_template(app, client):\n    bp = flask.Blueprint(\"bp\", __name__)\n\n    @bp.app_template_filter(\"super_reverse\")\n    def my_reverse(s):\n        return s[::-1]\n\n    app.register_blueprint(bp, url_prefix=\"/py\")\n\n    @app.route(\"/\")\n    def index():\n        return flask.render_template(\"template_filter.html\", value=\"abcd\")\n\n    rv = client.get(\"/\")\n    assert rv.data == b\"dcba\""
  },
  {
    "name": "test_add_template_filter_with_name_and_template",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "client"
    ],
    "calls": [
      "flask.Blueprint",
      "bp.add_app_template_filter",
      "app.register_blueprint",
      "app.route",
      "client.get",
      "flask.render_template"
    ],
    "code_location": {
      "file": "test_blueprints.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 481,
      "end_line": 495
    },
    "code_snippet": "def test_add_template_filter_with_name_and_template(app, client):\n    bp = flask.Blueprint(\"bp\", __name__)\n\n    def my_reverse(s):\n        return s[::-1]\n\n    bp.add_app_template_filter(my_reverse, \"super_reverse\")\n    app.register_blueprint(bp, url_prefix=\"/py\")\n\n    @app.route(\"/\")\n    def index():\n        return flask.render_template(\"template_filter.html\", value=\"abcd\")\n\n    rv = client.get(\"/\")\n    assert rv.data == b\"dcba\""
  },
  {
    "name": "test_template_test",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app"
    ],
    "calls": [
      "flask.Blueprint",
      "bp.app_template_test",
      "app.register_blueprint",
      "isinstance",
      "app.jinja_env.tests.keys"
    ],
    "code_location": {
      "file": "test_blueprints.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 498,
      "end_line": 508
    },
    "code_snippet": "def test_template_test(app):\n    bp = flask.Blueprint(\"bp\", __name__)\n\n    @bp.app_template_test()\n    def is_boolean(value):\n        return isinstance(value, bool)\n\n    app.register_blueprint(bp, url_prefix=\"/py\")\n    assert \"is_boolean\" in app.jinja_env.tests.keys()\n    assert app.jinja_env.tests[\"is_boolean\"] == is_boolean\n    assert app.jinja_env.tests[\"is_boolean\"](False)"
  },
  {
    "name": "test_add_template_test",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app"
    ],
    "calls": [
      "flask.Blueprint",
      "bp.add_app_template_test",
      "app.register_blueprint",
      "isinstance",
      "app.jinja_env.tests.keys"
    ],
    "code_location": {
      "file": "test_blueprints.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 511,
      "end_line": 521
    },
    "code_snippet": "def test_add_template_test(app):\n    bp = flask.Blueprint(\"bp\", __name__)\n\n    def is_boolean(value):\n        return isinstance(value, bool)\n\n    bp.add_app_template_test(is_boolean)\n    app.register_blueprint(bp, url_prefix=\"/py\")\n    assert \"is_boolean\" in app.jinja_env.tests.keys()\n    assert app.jinja_env.tests[\"is_boolean\"] == is_boolean\n    assert app.jinja_env.tests[\"is_boolean\"](False)"
  },
  {
    "name": "test_template_test_with_name",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app"
    ],
    "calls": [
      "flask.Blueprint",
      "bp.app_template_test",
      "app.register_blueprint",
      "isinstance",
      "app.jinja_env.tests.keys"
    ],
    "code_location": {
      "file": "test_blueprints.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 524,
      "end_line": 534
    },
    "code_snippet": "def test_template_test_with_name(app):\n    bp = flask.Blueprint(\"bp\", __name__)\n\n    @bp.app_template_test(\"boolean\")\n    def is_boolean(value):\n        return isinstance(value, bool)\n\n    app.register_blueprint(bp, url_prefix=\"/py\")\n    assert \"boolean\" in app.jinja_env.tests.keys()\n    assert app.jinja_env.tests[\"boolean\"] == is_boolean\n    assert app.jinja_env.tests[\"boolean\"](False)"
  },
  {
    "name": "test_add_template_test_with_name",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app"
    ],
    "calls": [
      "flask.Blueprint",
      "bp.add_app_template_test",
      "app.register_blueprint",
      "isinstance",
      "app.jinja_env.tests.keys"
    ],
    "code_location": {
      "file": "test_blueprints.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 537,
      "end_line": 547
    },
    "code_snippet": "def test_add_template_test_with_name(app):\n    bp = flask.Blueprint(\"bp\", __name__)\n\n    def is_boolean(value):\n        return isinstance(value, bool)\n\n    bp.add_app_template_test(is_boolean, \"boolean\")\n    app.register_blueprint(bp, url_prefix=\"/py\")\n    assert \"boolean\" in app.jinja_env.tests.keys()\n    assert app.jinja_env.tests[\"boolean\"] == is_boolean\n    assert app.jinja_env.tests[\"boolean\"](False)"
  },
  {
    "name": "test_template_test_with_template",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "client"
    ],
    "calls": [
      "flask.Blueprint",
      "bp.app_template_test",
      "app.register_blueprint",
      "app.route",
      "client.get",
      "isinstance",
      "flask.render_template"
    ],
    "code_location": {
      "file": "test_blueprints.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 550,
      "end_line": 564
    },
    "code_snippet": "def test_template_test_with_template(app, client):\n    bp = flask.Blueprint(\"bp\", __name__)\n\n    @bp.app_template_test()\n    def boolean(value):\n        return isinstance(value, bool)\n\n    app.register_blueprint(bp, url_prefix=\"/py\")\n\n    @app.route(\"/\")\n    def index():\n        return flask.render_template(\"template_test.html\", value=False)\n\n    rv = client.get(\"/\")\n    assert b\"Success!\" in rv.data"
  },
  {
    "name": "test_template_test_after_route_with_template",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "client"
    ],
    "calls": [
      "app.route",
      "flask.Blueprint",
      "bp.app_template_test",
      "app.register_blueprint",
      "client.get",
      "flask.render_template",
      "isinstance"
    ],
    "code_location": {
      "file": "test_blueprints.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 567,
      "end_line": 580
    },
    "code_snippet": "def test_template_test_after_route_with_template(app, client):\n    @app.route(\"/\")\n    def index():\n        return flask.render_template(\"template_test.html\", value=False)\n\n    bp = flask.Blueprint(\"bp\", __name__)\n\n    @bp.app_template_test()\n    def boolean(value):\n        return isinstance(value, bool)\n\n    app.register_blueprint(bp, url_prefix=\"/py\")\n    rv = client.get(\"/\")\n    assert b\"Success!\" in rv.data"
  },
  {
    "name": "test_add_template_test_with_template",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "client"
    ],
    "calls": [
      "flask.Blueprint",
      "bp.add_app_template_test",
      "app.register_blueprint",
      "app.route",
      "client.get",
      "isinstance",
      "flask.render_template"
    ],
    "code_location": {
      "file": "test_blueprints.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 583,
      "end_line": 597
    },
    "code_snippet": "def test_add_template_test_with_template(app, client):\n    bp = flask.Blueprint(\"bp\", __name__)\n\n    def boolean(value):\n        return isinstance(value, bool)\n\n    bp.add_app_template_test(boolean)\n    app.register_blueprint(bp, url_prefix=\"/py\")\n\n    @app.route(\"/\")\n    def index():\n        return flask.render_template(\"template_test.html\", value=False)\n\n    rv = client.get(\"/\")\n    assert b\"Success!\" in rv.data"
  },
  {
    "name": "test_template_test_with_name_and_template",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "client"
    ],
    "calls": [
      "flask.Blueprint",
      "bp.app_template_test",
      "app.register_blueprint",
      "app.route",
      "client.get",
      "isinstance",
      "flask.render_template"
    ],
    "code_location": {
      "file": "test_blueprints.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 600,
      "end_line": 614
    },
    "code_snippet": "def test_template_test_with_name_and_template(app, client):\n    bp = flask.Blueprint(\"bp\", __name__)\n\n    @bp.app_template_test(\"boolean\")\n    def is_boolean(value):\n        return isinstance(value, bool)\n\n    app.register_blueprint(bp, url_prefix=\"/py\")\n\n    @app.route(\"/\")\n    def index():\n        return flask.render_template(\"template_test.html\", value=False)\n\n    rv = client.get(\"/\")\n    assert b\"Success!\" in rv.data"
  },
  {
    "name": "test_add_template_test_with_name_and_template",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "client"
    ],
    "calls": [
      "flask.Blueprint",
      "bp.add_app_template_test",
      "app.register_blueprint",
      "app.route",
      "client.get",
      "isinstance",
      "flask.render_template"
    ],
    "code_location": {
      "file": "test_blueprints.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 617,
      "end_line": 631
    },
    "code_snippet": "def test_add_template_test_with_name_and_template(app, client):\n    bp = flask.Blueprint(\"bp\", __name__)\n\n    def is_boolean(value):\n        return isinstance(value, bool)\n\n    bp.add_app_template_test(is_boolean, \"boolean\")\n    app.register_blueprint(bp, url_prefix=\"/py\")\n\n    @app.route(\"/\")\n    def index():\n        return flask.render_template(\"template_test.html\", value=False)\n\n    rv = client.get(\"/\")\n    assert b\"Success!\" in rv.data"
  },
  {
    "name": "test_context_processing",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "client"
    ],
    "calls": [
      "flask.Blueprint",
      "answer_bp.route",
      "app.route",
      "app.register_blueprint",
      "flask.render_template_string",
      "template_string",
      "template_string",
      "client.get",
      "client.get"
    ],
    "code_location": {
      "file": "test_blueprints.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 634,
      "end_line": 672
    },
    "code_snippet": "def test_context_processing(app, client):\n    answer_bp = flask.Blueprint(\"answer_bp\", __name__)\n\n    def template_string():\n        return flask.render_template_string(\n            \"{% if notanswer %}{{ notanswer }} is not the answer. {% endif %}\"\n            \"{% if answer %}{{ answer }} is the answer.{% endif %}\"\n        )\n\n    # App global context processor\n    @answer_bp.app_context_processor\n    def not_answer_context_processor():\n        return {\"notanswer\": 43}\n\n    # Blueprint local cont..."
  },
  {
    "name": "test_template_global",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app"
    ],
    "calls": [
      "flask.Blueprint",
      "bp.app_template_global",
      "app.register_blueprint",
      "app.jinja_env.globals.keys",
      "app.jinja_env.globals.keys",
      "app.app_context",
      "flask.render_template_string"
    ],
    "code_location": {
      "file": "test_blueprints.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 675,
      "end_line": 693
    },
    "code_snippet": "def test_template_global(app):\n    bp = flask.Blueprint(\"bp\", __name__)\n\n    @bp.app_template_global()\n    def get_answer():\n        return 42\n\n    # Make sure the function is not in the jinja_env already\n    assert \"get_answer\" not in app.jinja_env.globals.keys()\n    app.register_blueprint(bp)\n\n    # Tests\n    assert \"get_answer\" in app.jinja_env.globals.keys()\n    assert app.jinja_env.globals[\"get_answer\"] is get_answer\n    assert app.jinja_env.globals[\"get_answer\"]() == 42\n\n    with app.app_c..."
  },
  {
    "name": "test_request_processing",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "client"
    ],
    "calls": [
      "flask.Blueprint",
      "bp.route",
      "app.register_blueprint",
      "client.get",
      "evts.append",
      "evts.append",
      "evts.append"
    ],
    "code_location": {
      "file": "test_blueprints.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 696,
      "end_line": 724
    },
    "code_snippet": "def test_request_processing(app, client):\n    bp = flask.Blueprint(\"bp\", __name__)\n    evts = []\n\n    @bp.before_request\n    def before_bp():\n        evts.append(\"before\")\n\n    @bp.after_request\n    def after_bp(response):\n        response.data += b\"|after\"\n        evts.append(\"after\")\n        return response\n\n    @bp.teardown_request\n    def teardown_bp(exc):\n        evts.append(\"teardown\")\n\n    # Setup routes for testing\n    @bp.route(\"/bp\")\n    def bp_endpoint():\n        return \"request\"\n\n   ..."
  },
  {
    "name": "test_app_request_processing",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "client"
    ],
    "calls": [
      "flask.Blueprint",
      "app.register_blueprint",
      "app.route",
      "evts.append",
      "evts.append",
      "evts.append",
      "client.get",
      "client.get"
    ],
    "code_location": {
      "file": "test_blueprints.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 727,
      "end_line": 763
    },
    "code_snippet": "def test_app_request_processing(app, client):\n    bp = flask.Blueprint(\"bp\", __name__)\n    evts = []\n\n    @bp.before_app_request\n    def before_app():\n        evts.append(\"before\")\n\n    @bp.after_app_request\n    def after_app(response):\n        response.data += b\"|after\"\n        evts.append(\"after\")\n        return response\n\n    @bp.teardown_app_request\n    def teardown_app(exc):\n        evts.append(\"teardown\")\n\n    app.register_blueprint(bp)\n\n    # Setup routes for testing\n    @app.route(\"/\")\n  ..."
  },
  {
    "name": "test_app_url_processors",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "client"
    ],
    "calls": [
      "flask.Blueprint",
      "app.route",
      "app.route",
      "app.register_blueprint",
      "values.setdefault",
      "values.pop",
      "flask.url_for",
      "flask.url_for",
      "client.get",
      "client.get"
    ],
    "code_location": {
      "file": "test_blueprints.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 766,
      "end_line": 790
    },
    "code_snippet": "def test_app_url_processors(app, client):\n    bp = flask.Blueprint(\"bp\", __name__)\n\n    # Register app-wide url defaults and preprocessor on blueprint\n    @bp.app_url_defaults\n    def add_language_code(endpoint, values):\n        values.setdefault(\"lang_code\", flask.g.lang_code)\n\n    @bp.app_url_value_preprocessor\n    def pull_lang_code(endpoint, values):\n        flask.g.lang_code = values.pop(\"lang_code\")\n\n    # Register route rules at the app level\n    @app.route(\"/<lang_code>/\")\n    def index(..."
  },
  {
    "name": "test_nested_blueprint",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "client"
    ],
    "calls": [
      "flask.Blueprint",
      "flask.Blueprint",
      "flask.Blueprint",
      "parent.errorhandler",
      "parent.route",
      "parent.route",
      "child.route",
      "child.route",
      "grandchild.errorhandler",
      "grandchild.route",
      "grandchild.route",
      "child.register_blueprint",
      "parent.register_blueprint",
      "app.register_blueprint",
      "flask.abort",
      "flask.abort",
      "flask.abort",
      "client.get",
      "client.get",
      "client.get",
      "client.get",
      "client.get",
      "client.get"
    ],
    "code_location": {
      "file": "test_blueprints.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 793,
      "end_line": 839
    },
    "code_snippet": "def test_nested_blueprint(app, client):\n    parent = flask.Blueprint(\"parent\", __name__)\n    child = flask.Blueprint(\"child\", __name__)\n    grandchild = flask.Blueprint(\"grandchild\", __name__)\n\n    @parent.errorhandler(403)\n    def forbidden(e):\n        return \"Parent no\", 403\n\n    @parent.route(\"/\")\n    def parent_index():\n        return \"Parent yes\"\n\n    @parent.route(\"/no\")\n    def parent_no():\n        flask.abort(403)\n\n    @child.route(\"/\")\n    def child_index():\n        return \"Child yes\"\n\n..."
  },
  {
    "name": "test_nested_callback_order",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "client"
    ],
    "calls": [
      "flask.Blueprint",
      "flask.Blueprint",
      "child.route",
      "child.route",
      "parent.register_blueprint",
      "app.register_blueprint",
      "append",
      "append",
      "dict",
      "append",
      "append",
      "dict",
      "append",
      "append",
      "dict",
      "join",
      "flask.render_template_string",
      "flask.g.seen.pop",
      "flask.g.seen.pop",
      "flask.g.seen.pop",
      "flask.g.seen.pop",
      "flask.g.seen.pop",
      "flask.g.seen.pop",
      "client.get",
      "client.get",
      "flask.g.setdefault",
      "flask.g.setdefault",
      "flask.g.setdefault",
      "flask.g.setdefault",
      "flask.g.setdefault",
      "flask.g.setdefault"
    ],
    "code_location": {
      "file": "test_blueprints.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 842,
      "end_line": 919
    },
    "code_snippet": "def test_nested_callback_order(app, client):\n    parent = flask.Blueprint(\"parent\", __name__)\n    child = flask.Blueprint(\"child\", __name__)\n\n    @app.before_request\n    def app_before1():\n        flask.g.setdefault(\"seen\", []).append(\"app_1\")\n\n    @app.teardown_request\n    def app_teardown1(e=None):\n        assert flask.g.seen.pop() == \"app_1\"\n\n    @app.before_request\n    def app_before2():\n        flask.g.setdefault(\"seen\", []).append(\"app_2\")\n\n    @app.teardown_request\n    def app_teardown2(e..."
  },
  {
    "name": "test_nesting_url_prefixes",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "parent_init",
      "child_init",
      "parent_registration",
      "child_registration",
      "app",
      "client"
    ],
    "calls": [
      "pytest.mark.parametrize",
      "flask.Blueprint",
      "flask.Blueprint",
      "child.route",
      "parent.register_blueprint",
      "app.register_blueprint",
      "client.get"
    ],
    "code_location": {
      "file": "test_blueprints.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 931,
      "end_line": 950
    },
    "code_snippet": "def test_nesting_url_prefixes(\n    parent_init,\n    child_init,\n    parent_registration,\n    child_registration,\n    app,\n    client,\n) -> None:\n    parent = flask.Blueprint(\"parent\", __name__, url_prefix=parent_init)\n    child = flask.Blueprint(\"child\", __name__, url_prefix=child_init)\n\n    @child.route(\"/\")\n    def index():\n        return \"index\"\n\n    parent.register_blueprint(child, url_prefix=child_registration)\n    app.register_blueprint(parent, url_prefix=parent_registration)\n\n    response..."
  },
  {
    "name": "test_nesting_subdomains",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "client"
    ],
    "calls": [
      "flask.Blueprint",
      "flask.Blueprint",
      "child.route",
      "parent.register_blueprint",
      "app.register_blueprint",
      "client.get"
    ],
    "code_location": {
      "file": "test_blueprints.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 953,
      "end_line": 969
    },
    "code_snippet": "def test_nesting_subdomains(app, client) -> None:\n    app.subdomain_matching = True\n    app.config[\"SERVER_NAME\"] = \"example.test\"\n    client.allow_subdomain_redirects = True\n\n    parent = flask.Blueprint(\"parent\", __name__)\n    child = flask.Blueprint(\"child\", __name__)\n\n    @child.route(\"/child/\")\n    def index():\n        return \"child\"\n\n    parent.register_blueprint(child)\n    app.register_blueprint(parent, subdomain=\"api\")\n\n    response = client.get(\"/child/\", base_url=\"http://api.example.te..."
  },
  {
    "name": "test_child_and_parent_subdomain",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "client"
    ],
    "calls": [
      "flask.Blueprint",
      "flask.Blueprint",
      "child.route",
      "parent.register_blueprint",
      "app.register_blueprint",
      "client.get",
      "client.get"
    ],
    "code_location": {
      "file": "test_blueprints.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 972,
      "end_line": 991
    },
    "code_snippet": "def test_child_and_parent_subdomain(app, client) -> None:\n    app.subdomain_matching = True\n    app.config[\"SERVER_NAME\"] = \"example.test\"\n    client.allow_subdomain_redirects = True\n\n    parent = flask.Blueprint(\"parent\", __name__)\n    child = flask.Blueprint(\"child\", __name__, subdomain=\"api\")\n\n    @child.route(\"/\")\n    def index():\n        return \"child\"\n\n    parent.register_blueprint(child)\n    app.register_blueprint(parent, subdomain=\"parent\")\n\n    response = client.get(\"/\", base_url=\"http:..."
  },
  {
    "name": "test_unique_blueprint_names",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "client"
    ],
    "calls": [
      "flask.Blueprint",
      "flask.Blueprint",
      "app.register_blueprint",
      "app.register_blueprint",
      "app.register_blueprint",
      "pytest.raises",
      "app.register_blueprint",
      "pytest.raises",
      "app.register_blueprint"
    ],
    "code_location": {
      "file": "test_blueprints.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 994,
      "end_line": 1008
    },
    "code_snippet": "def test_unique_blueprint_names(app, client) -> None:\n    bp = flask.Blueprint(\"bp\", __name__)\n    bp2 = flask.Blueprint(\"bp\", __name__)\n\n    app.register_blueprint(bp)\n\n    with pytest.raises(ValueError):\n        app.register_blueprint(bp)  # same bp, same name, error\n\n    app.register_blueprint(bp, name=\"again\")  # same bp, different name, ok\n\n    with pytest.raises(ValueError):\n        app.register_blueprint(bp2)  # different bp, same name, error\n\n    app.register_blueprint(bp2, name=\"alt\")"
  },
  {
    "name": "test_self_registration",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "client"
    ],
    "calls": [
      "flask.Blueprint",
      "pytest.raises",
      "bp.register_blueprint"
    ],
    "code_location": {
      "file": "test_blueprints.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 1011,
      "end_line": 1014
    },
    "code_snippet": "def test_self_registration(app, client) -> None:\n    bp = flask.Blueprint(\"bp\", __name__)\n    with pytest.raises(ValueError):\n        bp.register_blueprint(bp)"
  },
  {
    "name": "test_blueprint_renaming",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "client"
    ],
    "calls": [
      "flask.Blueprint",
      "flask.Blueprint",
      "bp.get",
      "bp.get",
      "bp.errorhandler",
      "bp2.get",
      "bp.register_blueprint",
      "app.register_blueprint",
      "app.register_blueprint",
      "flask.abort",
      "client.get",
      "client.get",
      "client.get",
      "client.get",
      "client.get",
      "client.get"
    ],
    "code_location": {
      "file": "test_blueprints.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 1017,
      "end_line": 1046
    },
    "code_snippet": "def test_blueprint_renaming(app, client) -> None:\n    bp = flask.Blueprint(\"bp\", __name__)\n    bp2 = flask.Blueprint(\"bp2\", __name__)\n\n    @bp.get(\"/\")\n    def index():\n        return flask.request.endpoint\n\n    @bp.get(\"/error\")\n    def error():\n        flask.abort(403)\n\n    @bp.errorhandler(403)\n    def forbidden(_: Exception):\n        return \"Error\", 403\n\n    @bp2.get(\"/\")\n    def index2():\n        return flask.request.endpoint\n\n    bp.register_blueprint(bp2, url_prefix=\"/a\", name=\"sub\")\n    ..."
  },
  {
    "name": "reset_logging",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "pytestconfig"
    ],
    "calls": [
      "pytest.fixture",
      "logging.getLogger",
      "logger.setLevel",
      "pytestconfig.pluginmanager.unregister",
      "logging.root.setLevel",
      "logger.setLevel",
      "pytestconfig.pluginmanager.register"
    ],
    "code_location": {
      "file": "test_logging.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 13,
      "end_line": 33
    },
    "code_snippet": "def reset_logging(pytestconfig):\n    root_handlers = logging.root.handlers[:]\n    logging.root.handlers = []\n    root_level = logging.root.level\n\n    logger = logging.getLogger(\"flask_test\")\n    logger.handlers = []\n    logger.setLevel(logging.NOTSET)\n\n    logging_plugin = pytestconfig.pluginmanager.unregister(name=\"logging-plugin\")\n\n    yield\n\n    logging.root.handlers[:] = root_handlers\n    logging.root.setLevel(root_level)\n\n    logger.handlers = []\n    logger.setLevel(logging.NOTSET)\n\n    if ..."
  },
  {
    "name": "test_logger",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app"
    ],
    "calls": [],
    "code_location": {
      "file": "test_logging.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 36,
      "end_line": 39
    },
    "code_snippet": "def test_logger(app):\n    assert app.logger.name == \"flask_test\"\n    assert app.logger.level == logging.NOTSET\n    assert app.logger.handlers == [default_handler]"
  },
  {
    "name": "test_logger_debug",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app"
    ],
    "calls": [],
    "code_location": {
      "file": "test_logging.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 42,
      "end_line": 45
    },
    "code_snippet": "def test_logger_debug(app):\n    app.debug = True\n    assert app.logger.level == logging.DEBUG\n    assert app.logger.handlers == [default_handler]"
  },
  {
    "name": "test_existing_handler",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app"
    ],
    "calls": [
      "logging.root.addHandler",
      "logging.StreamHandler"
    ],
    "code_location": {
      "file": "test_logging.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 48,
      "end_line": 51
    },
    "code_snippet": "def test_existing_handler(app):\n    logging.root.addHandler(logging.StreamHandler())\n    assert app.logger.level == logging.NOTSET\n    assert not app.logger.handlers"
  },
  {
    "name": "test_wsgi_errors_stream",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "client"
    ],
    "calls": [
      "app.route",
      "StringIO",
      "client.get",
      "app.logger.error",
      "stream.getvalue",
      "wsgi_errors_stream._get_current_object",
      "app.test_request_context",
      "wsgi_errors_stream._get_current_object"
    ],
    "code_location": {
      "file": "test_logging.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 54,
      "end_line": 67
    },
    "code_snippet": "def test_wsgi_errors_stream(app, client):\n    @app.route(\"/\")\n    def index():\n        app.logger.error(\"test\")\n        return \"\"\n\n    stream = StringIO()\n    client.get(\"/\", errors_stream=stream)\n    assert \"ERROR in test_logging: test\" in stream.getvalue()\n\n    assert wsgi_errors_stream._get_current_object() is sys.stderr\n\n    with app.test_request_context(errors_stream=stream):\n        assert wsgi_errors_stream._get_current_object() is stream"
  },
  {
    "name": "test_has_level_handler",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [],
    "calls": [
      "logging.getLogger",
      "logging.StreamHandler",
      "logging.root.addHandler",
      "has_level_handler",
      "handler.setLevel",
      "has_level_handler",
      "has_level_handler",
      "has_level_handler"
    ],
    "code_location": {
      "file": "test_logging.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 70,
      "end_line": 83
    },
    "code_snippet": "def test_has_level_handler():\n    logger = logging.getLogger(\"flask.app\")\n    assert not has_level_handler(logger)\n\n    handler = logging.StreamHandler()\n    logging.root.addHandler(handler)\n    assert has_level_handler(logger)\n\n    logger.propagate = False\n    assert not has_level_handler(logger)\n    logger.propagate = True\n\n    handler.setLevel(logging.ERROR)\n    assert not has_level_handler(logger)"
  },
  {
    "name": "test_log_view_exception",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "client"
    ],
    "calls": [
      "app.route",
      "StringIO",
      "client.get",
      "stream.getvalue",
      "Exception"
    ],
    "code_location": {
      "file": "test_logging.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 86,
      "end_line": 98
    },
    "code_snippet": "def test_log_view_exception(app, client):\n    @app.route(\"/\")\n    def index():\n        raise Exception(\"test\")\n\n    app.testing = False\n    stream = StringIO()\n    rv = client.get(\"/\", errors_stream=stream)\n    assert rv.status_code == 500\n    assert rv.data\n    err = stream.getvalue()\n    assert \"Exception on / [GET]\" in err\n    assert \"Exception: test\" in err"
  },
  {
    "name": "test_options_work",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "client"
    ],
    "calls": [
      "app.route",
      "client.open",
      "sorted"
    ],
    "code_location": {
      "file": "test_basic.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 30,
      "end_line": 37
    },
    "code_snippet": "def test_options_work(app, client):\n    @app.route(\"/\", methods=[\"GET\", \"POST\"])\n    def index():\n        return \"Hello World\"\n\n    rv = client.open(\"/\", method=\"OPTIONS\")\n    assert sorted(rv.allow) == [\"GET\", \"HEAD\", \"OPTIONS\", \"POST\"]\n    assert rv.data == b\"\""
  },
  {
    "name": "test_options_on_multiple_rules",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "client"
    ],
    "calls": [
      "app.route",
      "app.route",
      "client.open",
      "sorted"
    ],
    "code_location": {
      "file": "test_basic.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 40,
      "end_line": 50
    },
    "code_snippet": "def test_options_on_multiple_rules(app, client):\n    @app.route(\"/\", methods=[\"GET\", \"POST\"])\n    def index():\n        return \"Hello World\"\n\n    @app.route(\"/\", methods=[\"PUT\"])\n    def index_put():\n        return \"Aha!\"\n\n    rv = client.open(\"/\", method=\"OPTIONS\")\n    assert sorted(rv.allow) == [\"GET\", \"HEAD\", \"OPTIONS\", \"POST\", \"PUT\"]"
  },
  {
    "name": "test_method_route",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "client",
      "method"
    ],
    "calls": [
      "pytest.mark.parametrize",
      "getattr",
      "getattr",
      "method_route",
      "client_method"
    ],
    "code_location": {
      "file": "test_basic.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 54,
      "end_line": 62
    },
    "code_snippet": "def test_method_route(app, client, method):\n    method_route = getattr(app, method)\n    client_method = getattr(client, method)\n\n    @method_route(\"/\")\n    def hello():\n        return \"Hello\"\n\n    assert client_method(\"/\").data == b\"Hello\""
  },
  {
    "name": "test_method_route_no_methods",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app"
    ],
    "calls": [
      "pytest.raises",
      "app.get"
    ],
    "code_location": {
      "file": "test_basic.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 65,
      "end_line": 67
    },
    "code_snippet": "def test_method_route_no_methods(app):\n    with pytest.raises(TypeError):\n        app.get(\"/\", methods=[\"GET\", \"POST\"])"
  },
  {
    "name": "test_provide_automatic_options_attr",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [],
    "calls": [
      "flask.Flask",
      "open",
      "flask.Flask",
      "open",
      "app.route",
      "app.route",
      "sorted",
      "app.test_client",
      "app.test_client"
    ],
    "code_location": {
      "file": "test_basic.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 70,
      "end_line": 89
    },
    "code_snippet": "def test_provide_automatic_options_attr():\n    app = flask.Flask(__name__)\n\n    def index():\n        return \"Hello World!\"\n\n    index.provide_automatic_options = False\n    app.route(\"/\")(index)\n    rv = app.test_client().open(\"/\", method=\"OPTIONS\")\n    assert rv.status_code == 405\n\n    app = flask.Flask(__name__)\n\n    def index2():\n        return \"Hello World!\"\n\n    index2.provide_automatic_options = True\n    app.route(\"/\", methods=[\"OPTIONS\"])(index2)\n    rv = app.test_client().open(\"/\", method..."
  },
  {
    "name": "test_provide_automatic_options_kwarg",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "client"
    ],
    "calls": [
      "app.add_url_rule",
      "app.add_url_rule",
      "client.post",
      "client.open",
      "client.head",
      "client.delete",
      "client.open",
      "sorted",
      "sorted",
      "client.get",
      "client.post",
      "client.get"
    ],
    "code_location": {
      "file": "test_basic.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 92,
      "end_line": 126
    },
    "code_snippet": "def test_provide_automatic_options_kwarg(app, client):\n    def index():\n        return flask.request.method\n\n    def more():\n        return flask.request.method\n\n    app.add_url_rule(\"/\", view_func=index, provide_automatic_options=False)\n    app.add_url_rule(\n        \"/more\",\n        view_func=more,\n        methods=[\"GET\", \"POST\"],\n        provide_automatic_options=False,\n    )\n    assert client.get(\"/\").data == b\"GET\"\n\n    rv = client.post(\"/\")\n    assert rv.status_code == 405\n    assert sorted..."
  },
  {
    "name": "test_request_dispatching",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "client"
    ],
    "calls": [
      "app.route",
      "app.route",
      "client.post",
      "client.head",
      "client.delete",
      "sorted",
      "sorted",
      "client.get",
      "client.post",
      "client.get"
    ],
    "code_location": {
      "file": "test_basic.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 129,
      "end_line": 149
    },
    "code_snippet": "def test_request_dispatching(app, client):\n    @app.route(\"/\")\n    def index():\n        return flask.request.method\n\n    @app.route(\"/more\", methods=[\"GET\", \"POST\"])\n    def more():\n        return flask.request.method\n\n    assert client.get(\"/\").data == b\"GET\"\n    rv = client.post(\"/\")\n    assert rv.status_code == 405\n    assert sorted(rv.allow) == [\"GET\", \"HEAD\", \"OPTIONS\"]\n    rv = client.head(\"/\")\n    assert rv.status_code == 200\n    assert not rv.data  # head truncates\n    assert client.post..."
  },
  {
    "name": "test_disallow_string_for_allowed_methods",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app"
    ],
    "calls": [
      "pytest.raises",
      "app.add_url_rule"
    ],
    "code_location": {
      "file": "test_basic.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 152,
      "end_line": 154
    },
    "code_snippet": "def test_disallow_string_for_allowed_methods(app):\n    with pytest.raises(TypeError):\n        app.add_url_rule(\"/\", methods=\"GET POST\", endpoint=\"test\")"
  },
  {
    "name": "test_url_mapping",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "client"
    ],
    "calls": [
      "app.add_url_rule",
      "app.add_url_rule",
      "app.add_url_rule",
      "client.post",
      "client.head",
      "client.delete",
      "client.open",
      "sorted",
      "sorted",
      "rv.data.decode",
      "client.get",
      "client.post",
      "client.get"
    ],
    "code_location": {
      "file": "test_basic.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 157,
      "end_line": 190
    },
    "code_snippet": "def test_url_mapping(app, client):\n    random_uuid4 = \"7eb41166-9ebf-4d26-b771-ea3f54f8b383\"\n\n    def index():\n        return flask.request.method\n\n    def more():\n        return flask.request.method\n\n    def options():\n        return random_uuid4\n\n    app.add_url_rule(\"/\", \"index\", index)\n    app.add_url_rule(\"/more\", \"more\", more, methods=[\"GET\", \"POST\"])\n\n    # Issue 1288: Test that automatic options are not added\n    #             when non-uppercase 'options' in methods\n    app.add_url_rule(..."
  },
  {
    "name": "test_werkzeug_routing",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "client"
    ],
    "calls": [
      "app.url_map.add",
      "Submount",
      "client.get",
      "client.get",
      "Rule",
      "Rule"
    ],
    "code_location": {
      "file": "test_basic.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 193,
      "end_line": 211
    },
    "code_snippet": "def test_werkzeug_routing(app, client):\n    from werkzeug.routing import Rule\n    from werkzeug.routing import Submount\n\n    app.url_map.add(\n        Submount(\"/foo\", [Rule(\"/bar\", endpoint=\"bar\"), Rule(\"/\", endpoint=\"index\")])\n    )\n\n    def bar():\n        return \"bar\"\n\n    def index():\n        return \"index\"\n\n    app.view_functions[\"bar\"] = bar\n    app.view_functions[\"index\"] = index\n\n    assert client.get(\"/foo/\").data == b\"index\"\n    assert client.get(\"/foo/bar\").data == b\"bar\""
  },
  {
    "name": "test_endpoint_decorator",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "client"
    ],
    "calls": [
      "app.url_map.add",
      "app.endpoint",
      "app.endpoint",
      "Submount",
      "client.get",
      "client.get",
      "Rule",
      "Rule"
    ],
    "code_location": {
      "file": "test_basic.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 214,
      "end_line": 231
    },
    "code_snippet": "def test_endpoint_decorator(app, client):\n    from werkzeug.routing import Rule\n    from werkzeug.routing import Submount\n\n    app.url_map.add(\n        Submount(\"/foo\", [Rule(\"/bar\", endpoint=\"bar\"), Rule(\"/\", endpoint=\"index\")])\n    )\n\n    @app.endpoint(\"bar\")\n    def bar():\n        return \"bar\"\n\n    @app.endpoint(\"index\")\n    def index():\n        return \"index\"\n\n    assert client.get(\"/foo/\").data == b\"index\"\n    assert client.get(\"/foo/bar\").data == b\"bar\""
  },
  {
    "name": "test_session",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "client"
    ],
    "calls": [
      "app.route",
      "app.route",
      "flask.session.get",
      "client.post",
      "client.get"
    ],
    "code_location": {
      "file": "test_basic.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 234,
      "end_line": 254
    },
    "code_snippet": "def test_session(app, client):\n    @app.route(\"/set\", methods=[\"POST\"])\n    def set():\n        assert not flask.session.accessed\n        assert not flask.session.modified\n        flask.session[\"value\"] = flask.request.form[\"value\"]\n        assert flask.session.accessed\n        assert flask.session.modified\n        return \"value set\"\n\n    @app.route(\"/get\")\n    def get():\n        assert not flask.session.accessed\n        assert not flask.session.modified\n        v = flask.session.get(\"value\", \"No..."
  },
  {
    "name": "test_session_path",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "client"
    ],
    "calls": [
      "app.config.update",
      "app.route",
      "client.get",
      "lower"
    ],
    "code_location": {
      "file": "test_basic.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 257,
      "end_line": 266
    },
    "code_snippet": "def test_session_path(app, client):\n    app.config.update(APPLICATION_ROOT=\"/foo\")\n\n    @app.route(\"/\")\n    def index():\n        flask.session[\"testing\"] = 42\n        return \"Hello World\"\n\n    rv = client.get(\"/\", \"http://example.com:8080/foo\")\n    assert \"path=/foo\" in rv.headers[\"set-cookie\"].lower()"
  },
  {
    "name": "test_session_using_application_root",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "client"
    ],
    "calls": [
      "PrefixPathMiddleware",
      "app.config.update",
      "app.route",
      "client.get",
      "lower",
      "self.app"
    ],
    "code_location": {
      "file": "test_basic.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 269,
      "end_line": 288
    },
    "code_snippet": "def test_session_using_application_root(app, client):\n    class PrefixPathMiddleware:\n        def __init__(self, app, prefix):\n            self.app = app\n            self.prefix = prefix\n\n        def __call__(self, environ, start_response):\n            environ[\"SCRIPT_NAME\"] = self.prefix\n            return self.app(environ, start_response)\n\n    app.wsgi_app = PrefixPathMiddleware(app.wsgi_app, \"/bar\")\n    app.config.update(APPLICATION_ROOT=\"/bar\")\n\n    @app.route(\"/\")\n    def index():\n        f..."
  },
  {
    "name": "test_session_using_session_settings",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "client"
    ],
    "calls": [
      "app.config.update",
      "app.route",
      "app.route",
      "client.get",
      "lower",
      "client.get",
      "lower",
      "flask.session.pop"
    ],
    "code_location": {
      "file": "test_basic.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 291,
      "end_line": 331
    },
    "code_snippet": "def test_session_using_session_settings(app, client):\n    app.config.update(\n        SERVER_NAME=\"www.example.com:8080\",\n        APPLICATION_ROOT=\"/test\",\n        SESSION_COOKIE_DOMAIN=\".example.com\",\n        SESSION_COOKIE_HTTPONLY=False,\n        SESSION_COOKIE_SECURE=True,\n        SESSION_COOKIE_PARTITIONED=True,\n        SESSION_COOKIE_SAMESITE=\"Lax\",\n        SESSION_COOKIE_PATH=\"/\",\n    )\n\n    @app.route(\"/\")\n    def index():\n        flask.session[\"testing\"] = 42\n        return \"Hello World\"\n..."
  },
  {
    "name": "test_session_using_samesite_attribute",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "client"
    ],
    "calls": [
      "app.route",
      "app.config.update",
      "app.config.update",
      "client.get",
      "lower",
      "app.config.update",
      "client.get",
      "lower",
      "app.config.update",
      "client.get",
      "lower",
      "pytest.raises",
      "client.get"
    ],
    "code_location": {
      "file": "test_basic.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 334,
      "end_line": 358
    },
    "code_snippet": "def test_session_using_samesite_attribute(app, client):\n    @app.route(\"/\")\n    def index():\n        flask.session[\"testing\"] = 42\n        return \"Hello World\"\n\n    app.config.update(SESSION_COOKIE_SAMESITE=\"invalid\")\n\n    with pytest.raises(ValueError):\n        client.get(\"/\")\n\n    app.config.update(SESSION_COOKIE_SAMESITE=None)\n    rv = client.get(\"/\")\n    cookie = rv.headers[\"set-cookie\"].lower()\n    assert \"samesite\" not in cookie\n\n    app.config.update(SESSION_COOKIE_SAMESITE=\"Strict\")\n    ..."
  },
  {
    "name": "test_missing_session",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app"
    ],
    "calls": [
      "pytest.raises",
      "app.test_request_context",
      "expect_exception",
      "expect_exception",
      "flask.session.get"
    ],
    "code_location": {
      "file": "test_basic.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 361,
      "end_line": 371
    },
    "code_snippet": "def test_missing_session(app):\n    app.secret_key = None\n\n    def expect_exception(f, *args, **kwargs):\n        e = pytest.raises(RuntimeError, f, *args, **kwargs)\n        assert e.value.args and \"session is unavailable\" in e.value.args[0]\n\n    with app.test_request_context():\n        assert flask.session.get(\"missing_key\") is None\n        expect_exception(flask.session.__setitem__, \"foo\", 42)\n        expect_exception(flask.session.pop, \"foo\")"
  },
  {
    "name": "test_session_secret_key_fallbacks",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "client"
    ],
    "calls": [
      "app.post",
      "app.get",
      "client.post",
      "dict",
      "client.get",
      "client.get",
      "client.get"
    ],
    "code_location": {
      "file": "test_basic.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 374,
      "end_line": 399
    },
    "code_snippet": "def test_session_secret_key_fallbacks(app, client) -> None:\n    @app.post(\"/\")\n    def set_session() -> str:\n        flask.session[\"a\"] = 1\n        return \"\"\n\n    @app.get(\"/\")\n    def get_session() -> dict[str, t.Any]:\n        return dict(flask.session)\n\n    # Set session with initial secret key, and two valid expiring keys\n    app.secret_key, app.config[\"SECRET_KEY_FALLBACKS\"] = (\n        \"0 key\",\n        [\"-1 key\", \"-2 key\"],\n    )\n    client.post()\n    assert client.get().json == {\"a\": 1}\n  ..."
  },
  {
    "name": "test_session_expiration",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "client"
    ],
    "calls": [
      "app.route",
      "app.route",
      "client.get",
      "re.search",
      "parse_date",
      "client.get",
      "client.get",
      "re.search",
      "str",
      "match.group",
      "datetime.now"
    ],
    "code_location": {
      "file": "test_basic.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 402,
      "end_line": 431
    },
    "code_snippet": "def test_session_expiration(app, client):\n    permanent = True\n\n    @app.route(\"/\")\n    def index():\n        flask.session[\"test\"] = 42\n        flask.session.permanent = permanent\n        return \"\"\n\n    @app.route(\"/test\")\n    def test():\n        return str(flask.session.permanent)\n\n    rv = client.get(\"/\")\n    assert \"set-cookie\" in rv.headers\n    match = re.search(r\"(?i)\\bexpires=([^;]+)\", rv.headers[\"set-cookie\"])\n    expires = parse_date(match.group())\n    expected = datetime.now(timezone.ut..."
  },
  {
    "name": "test_session_stored_last",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "client"
    ],
    "calls": [
      "app.route",
      "repr",
      "flask.session.get",
      "client.get",
      "client.get"
    ],
    "code_location": {
      "file": "test_basic.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 434,
      "end_line": 445
    },
    "code_snippet": "def test_session_stored_last(app, client):\n    @app.after_request\n    def modify_session(response):\n        flask.session[\"foo\"] = 42\n        return response\n\n    @app.route(\"/\")\n    def dump_session_contents():\n        return repr(flask.session.get(\"foo\"))\n\n    assert client.get(\"/\").data == b\"None\"\n    assert client.get(\"/\").data == b\"42\""
  },
  {
    "name": "test_session_special_types",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "client"
    ],
    "calls": [
      "replace",
      "uuid.uuid4",
      "app.route",
      "Markup",
      "client.get",
      "datetime.now",
      "type",
      "type",
      "Markup"
    ],
    "code_location": {
      "file": "test_basic.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 448,
      "end_line": 476
    },
    "code_snippet": "def test_session_special_types(app, client):\n    now = datetime.now(timezone.utc).replace(microsecond=0)\n    the_uuid = uuid.uuid4()\n\n    @app.route(\"/\")\n    def dump_session_contents():\n        flask.session[\"t\"] = (1, 2, 3)\n        flask.session[\"b\"] = b\"\\xff\"\n        flask.session[\"m\"] = Markup(\"<html>\")\n        flask.session[\"u\"] = the_uuid\n        flask.session[\"d\"] = now\n        flask.session[\"t_tag\"] = {\" t\": \"not-a-tuple\"}\n        flask.session[\"di_t_tag\"] = {\" t__\": \"not-a-tuple\"}\n     ..."
  },
  {
    "name": "test_session_cookie_setting",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app"
    ],
    "calls": [
      "app.route",
      "app.route",
      "run_test",
      "run_test",
      "run_test",
      "run_test",
      "str",
      "str",
      "flask.session.get",
      "flask.session.get",
      "app.test_client",
      "c.get",
      "rv.headers.get",
      "c.get",
      "c.get",
      "c.get"
    ],
    "code_location": {
      "file": "test_basic.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 479,
      "end_line": 517
    },
    "code_snippet": "def test_session_cookie_setting(app):\n    is_permanent = True\n\n    @app.route(\"/bump\")\n    def bump():\n        rv = flask.session[\"foo\"] = flask.session.get(\"foo\", 0) + 1\n        flask.session.permanent = is_permanent\n        return str(rv)\n\n    @app.route(\"/read\")\n    def read():\n        return str(flask.session.get(\"foo\", 0))\n\n    def run_test(expect_header):\n        with app.test_client() as c:\n            assert c.get(\"/bump\").data == b\"1\"\n            assert c.get(\"/bump\").data == b\"2\"\n     ..."
  },
  {
    "name": "test_session_vary_cookie",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "client"
    ],
    "calls": [
      "app.route",
      "app.route",
      "app.route",
      "app.route",
      "app.route",
      "app.route",
      "app.route",
      "app.route",
      "expect",
      "expect",
      "expect",
      "expect",
      "expect",
      "expect",
      "expect",
      "expect",
      "flask.session.get",
      "flask.session.setdefault",
      "flask.session.clear",
      "flask.Response",
      "response.vary.add",
      "flask.Response",
      "response.vary.update",
      "client.get",
      "len",
      "rv.headers.get_all"
    ],
    "code_location": {
      "file": "test_basic.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 520,
      "end_line": 578
    },
    "code_snippet": "def test_session_vary_cookie(app, client):\n    @app.route(\"/set\")\n    def set_session():\n        flask.session[\"test\"] = \"test\"\n        return \"\"\n\n    @app.route(\"/get\")\n    def get():\n        return flask.session.get(\"test\")\n\n    @app.route(\"/getitem\")\n    def getitem():\n        return flask.session[\"test\"]\n\n    @app.route(\"/setdefault\")\n    def setdefault():\n        return flask.session.setdefault(\"test\", \"default\")\n\n    @app.route(\"/clear\")\n    def clear():\n        flask.session.clear()\n     ..."
  },
  {
    "name": "test_session_refresh_vary",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "client"
    ],
    "calls": [
      "app.get",
      "app.get",
      "client.get",
      "client.get"
    ],
    "code_location": {
      "file": "test_basic.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 581,
      "end_line": 595
    },
    "code_snippet": "def test_session_refresh_vary(app, client):\n    @app.get(\"/login\")\n    def login():\n        flask.session[\"user_id\"] = 1\n        flask.session.permanent = True\n        return \"\"\n\n    @app.get(\"/ignored\")\n    def ignored():\n        return \"\"\n\n    rv = client.get(\"/login\")\n    assert rv.headers[\"Vary\"] == \"Cookie\"\n    rv = client.get(\"/ignored\")\n    assert rv.headers[\"Vary\"] == \"Cookie\""
  },
  {
    "name": "test_flashes",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "req_ctx"
    ],
    "calls": [
      "flask.flash",
      "flask.flash",
      "list",
      "flask.get_flashed_messages"
    ],
    "code_location": {
      "file": "test_basic.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 598,
      "end_line": 604
    },
    "code_snippet": "def test_flashes(app, req_ctx):\n    assert not flask.session.modified\n    flask.flash(\"Zap\")\n    flask.session.modified = False\n    flask.flash(\"Zip\")\n    assert flask.session.modified\n    assert list(flask.get_flashed_messages()) == [\"Zap\", \"Zip\"]"
  },
  {
    "name": "test_extended_flashing",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app"
    ],
    "calls": [
      "app.route",
      "app.route",
      "app.route",
      "app.route",
      "app.route",
      "app.route",
      "app.test_client",
      "client.get",
      "client.get",
      "app.test_client",
      "client.get",
      "client.get",
      "app.test_client",
      "client.get",
      "client.get",
      "app.test_client",
      "client.get",
      "client.get",
      "flask.flash",
      "flask.flash",
      "flask.flash",
      "flask.get_flashed_messages",
      "flask.get_flashed_messages",
      "flask.get_flashed_messages",
      "flask.get_flashed_messages",
      "flask.get_flashed_messages",
      "Markup",
      "list",
      "len",
      "list",
      "list",
      "list",
      "len",
      "Markup",
      "Markup",
      "Markup",
      "Markup"
    ],
    "code_location": {
      "file": "test_basic.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 607,
      "end_line": 685
    },
    "code_snippet": "def test_extended_flashing(app):\n    # Be sure app.testing=True below, else tests can fail silently.\n    #\n    # Specifically, if app.testing is not set to True, the AssertionErrors\n    # in the view functions will cause a 500 response to the test client\n    # instead of propagating exceptions.\n\n    @app.route(\"/\")\n    def index():\n        flask.flash(\"Hello World\")\n        flask.flash(\"Hello World\", \"error\")\n        flask.flash(Markup(\"<em>Testing</em>\"), \"warning\")\n        return \"\"\n\n    @app...."
  },
  {
    "name": "test_request_processing",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "client"
    ],
    "calls": [
      "app.route",
      "evts.append",
      "evts.append",
      "client.get"
    ],
    "code_location": {
      "file": "test_basic.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 688,
      "end_line": 710
    },
    "code_snippet": "def test_request_processing(app, client):\n    evts = []\n\n    @app.before_request\n    def before_request():\n        evts.append(\"before\")\n\n    @app.after_request\n    def after_request(response):\n        response.data += b\"|after\"\n        evts.append(\"after\")\n        return response\n\n    @app.route(\"/\")\n    def index():\n        assert \"before\" in evts\n        assert \"after\" not in evts\n        return \"request\"\n\n    assert \"after\" not in evts\n    rv = client.get(\"/\").data\n    assert \"after\" in evts..."
  },
  {
    "name": "test_request_preprocessing_early_return",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "client"
    ],
    "calls": [
      "app.route",
      "data.strip",
      "evts.append",
      "evts.append",
      "evts.append",
      "evts.append",
      "client.get"
    ],
    "code_location": {
      "file": "test_basic.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 713,
      "end_line": 737
    },
    "code_snippet": "def test_request_preprocessing_early_return(app, client):\n    evts = []\n\n    @app.before_request\n    def before_request1():\n        evts.append(1)\n\n    @app.before_request\n    def before_request2():\n        evts.append(2)\n        return \"hello\"\n\n    @app.before_request\n    def before_request3():\n        evts.append(3)\n        return \"bye\"\n\n    @app.route(\"/\")\n    def index():\n        evts.append(\"index\")\n        return \"damnit\"\n\n    rv = client.get(\"/\").data.strip()\n    assert rv == b\"hello\"\n   ..."
  },
  {
    "name": "test_after_request_processing",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "client"
    ],
    "calls": [
      "app.route",
      "client.get"
    ],
    "code_location": {
      "file": "test_basic.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 740,
      "end_line": 752
    },
    "code_snippet": "def test_after_request_processing(app, client):\n    @app.route(\"/\")\n    def index():\n        @flask.after_this_request\n        def foo(response):\n            response.headers[\"X-Foo\"] = \"a header\"\n            return response\n\n        return \"Test\"\n\n    resp = client.get(\"/\")\n    assert resp.status_code == 200\n    assert resp.headers[\"X-Foo\"] == \"a header\""
  },
  {
    "name": "test_teardown_request_handler",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "client"
    ],
    "calls": [
      "app.route",
      "client.get",
      "called.append",
      "len"
    ],
    "code_location": {
      "file": "test_basic.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 755,
      "end_line": 770
    },
    "code_snippet": "def test_teardown_request_handler(app, client):\n    called = []\n\n    @app.teardown_request\n    def teardown_request(exc):\n        called.append(True)\n        return \"Ignored\"\n\n    @app.route(\"/\")\n    def root():\n        return \"Response\"\n\n    rv = client.get(\"/\")\n    assert rv.status_code == 200\n    assert b\"Response\" in rv.data\n    assert len(called) == 1"
  },
  {
    "name": "test_teardown_request_handler_debug_mode",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "client"
    ],
    "calls": [
      "app.route",
      "client.get",
      "called.append",
      "len"
    ],
    "code_location": {
      "file": "test_basic.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 773,
      "end_line": 788
    },
    "code_snippet": "def test_teardown_request_handler_debug_mode(app, client):\n    called = []\n\n    @app.teardown_request\n    def teardown_request(exc):\n        called.append(True)\n        return \"Ignored\"\n\n    @app.route(\"/\")\n    def root():\n        return \"Response\"\n\n    rv = client.get(\"/\")\n    assert rv.status_code == 200\n    assert b\"Response\" in rv.data\n    assert len(called) == 1"
  },
  {
    "name": "test_teardown_request_handler_error",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "client"
    ],
    "calls": [
      "app.route",
      "client.get",
      "called.append",
      "called.append",
      "len",
      "type",
      "TypeError",
      "type",
      "TypeError"
    ],
    "code_location": {
      "file": "test_basic.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 791,
      "end_line": 826
    },
    "code_snippet": "def test_teardown_request_handler_error(app, client):\n    called = []\n    app.testing = False\n\n    @app.teardown_request\n    def teardown_request1(exc):\n        assert type(exc) is ZeroDivisionError\n        called.append(True)\n        # This raises a new error and blows away sys.exc_info(), so we can\n        # test that all teardown_requests get passed the same original\n        # exception.\n        try:\n            raise TypeError()\n        except Exception:\n            pass\n\n    @app.teardown_r..."
  },
  {
    "name": "test_before_after_request_order",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "client"
    ],
    "calls": [
      "app.route",
      "client.get",
      "called.append",
      "called.append",
      "called.append",
      "called.append",
      "called.append",
      "called.append"
    ],
    "code_location": {
      "file": "test_basic.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 829,
      "end_line": 864
    },
    "code_snippet": "def test_before_after_request_order(app, client):\n    called = []\n\n    @app.before_request\n    def before1():\n        called.append(1)\n\n    @app.before_request\n    def before2():\n        called.append(2)\n\n    @app.after_request\n    def after1(response):\n        called.append(4)\n        return response\n\n    @app.after_request\n    def after2(response):\n        called.append(3)\n        return response\n\n    @app.teardown_request\n    def finish1(exc):\n        called.append(6)\n\n    @app.teardown_reque..."
  },
  {
    "name": "test_error_handling",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "client"
    ],
    "calls": [
      "app.errorhandler",
      "app.errorhandler",
      "app.errorhandler",
      "app.route",
      "app.route",
      "app.route",
      "client.get",
      "client.get",
      "client.get",
      "flask.abort",
      "flask.abort"
    ],
    "code_location": {
      "file": "test_basic.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 867,
      "end_line": 902
    },
    "code_snippet": "def test_error_handling(app, client):\n    app.testing = False\n\n    @app.errorhandler(404)\n    def not_found(e):\n        return \"not found\", 404\n\n    @app.errorhandler(500)\n    def internal_server_error(e):\n        return \"internal server error\", 500\n\n    @app.errorhandler(Forbidden)\n    def forbidden(e):\n        return \"forbidden\", 403\n\n    @app.route(\"/\")\n    def index():\n        flask.abort(404)\n\n    @app.route(\"/error\")\n    def error():\n        raise ZeroDivisionError\n\n    @app.route(\"/forbid..."
  },
  {
    "name": "test_error_handling_processing",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "client"
    ],
    "calls": [
      "app.errorhandler",
      "app.route",
      "client.get"
    ],
    "code_location": {
      "file": "test_basic.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 905,
      "end_line": 923
    },
    "code_snippet": "def test_error_handling_processing(app, client):\n    app.testing = False\n\n    @app.errorhandler(500)\n    def internal_server_error(e):\n        return \"internal server error\", 500\n\n    @app.route(\"/\")\n    def broken_func():\n        raise ZeroDivisionError\n\n    @app.after_request\n    def after_request(resp):\n        resp.mimetype = \"text/x-special\"\n        return resp\n\n    resp = client.get(\"/\")\n    assert resp.mimetype == \"text/x-special\"\n    assert resp.data == b\"internal server error\""
  },
  {
    "name": "test_baseexception_error_handling",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "client"
    ],
    "calls": [
      "app.route",
      "KeyboardInterrupt",
      "pytest.raises",
      "client.get"
    ],
    "code_location": {
      "file": "test_basic.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 926,
      "end_line": 934
    },
    "code_snippet": "def test_baseexception_error_handling(app, client):\n    app.testing = False\n\n    @app.route(\"/\")\n    def broken_func():\n        raise KeyboardInterrupt()\n\n    with pytest.raises(KeyboardInterrupt):\n        client.get(\"/\")"
  },
  {
    "name": "test_before_request_and_routing_errors",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "client"
    ],
    "calls": [
      "app.errorhandler",
      "client.get"
    ],
    "code_location": {
      "file": "test_basic.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 937,
      "end_line": 948
    },
    "code_snippet": "def test_before_request_and_routing_errors(app, client):\n    @app.before_request\n    def attach_something():\n        flask.g.something = \"value\"\n\n    @app.errorhandler(404)\n    def return_something(error):\n        return flask.g.something, 404\n\n    rv = client.get(\"/\")\n    assert rv.status_code == 404\n    assert rv.data == b\"value\""
  },
  {
    "name": "test_user_error_handling",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "client"
    ],
    "calls": [
      "app.errorhandler",
      "app.route",
      "isinstance",
      "MyException",
      "client.get"
    ],
    "code_location": {
      "file": "test_basic.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 951,
      "end_line": 964
    },
    "code_snippet": "def test_user_error_handling(app, client):\n    class MyException(Exception):\n        pass\n\n    @app.errorhandler(MyException)\n    def handle_my_exception(e):\n        assert isinstance(e, MyException)\n        return \"42\"\n\n    @app.route(\"/\")\n    def index():\n        raise MyException()\n\n    assert client.get(\"/\").data == b\"42\""
  },
  {
    "name": "test_http_error_subclass_handling",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "client"
    ],
    "calls": [
      "app.errorhandler",
      "app.errorhandler",
      "app.route",
      "app.route",
      "app.route",
      "isinstance",
      "isinstance",
      "ForbiddenSubclass",
      "flask.abort",
      "Forbidden",
      "isinstance",
      "client.get",
      "client.get",
      "client.get"
    ],
    "code_location": {
      "file": "test_basic.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 967,
      "end_line": 996
    },
    "code_snippet": "def test_http_error_subclass_handling(app, client):\n    class ForbiddenSubclass(Forbidden):\n        pass\n\n    @app.errorhandler(ForbiddenSubclass)\n    def handle_forbidden_subclass(e):\n        assert isinstance(e, ForbiddenSubclass)\n        return \"banana\"\n\n    @app.errorhandler(403)\n    def handle_403(e):\n        assert not isinstance(e, ForbiddenSubclass)\n        assert isinstance(e, Forbidden)\n        return \"apple\"\n\n    @app.route(\"/1\")\n    def index1():\n        raise ForbiddenSubclass()\n\n  ..."
  },
  {
    "name": "test_errorhandler_precedence",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "client"
    ],
    "calls": [
      "app.errorhandler",
      "app.errorhandler",
      "app.route",
      "app.route",
      "client.get",
      "client.get"
    ],
    "code_location": {
      "file": "test_basic.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 999,
      "end_line": 1029
    },
    "code_snippet": "def test_errorhandler_precedence(app, client):\n    class E1(Exception):\n        pass\n\n    class E2(Exception):\n        pass\n\n    class E3(E1, E2):\n        pass\n\n    @app.errorhandler(E2)\n    def handle_e2(e):\n        return \"E2\"\n\n    @app.errorhandler(Exception)\n    def handle_exception(e):\n        return \"Exception\"\n\n    @app.route(\"/E1\")\n    def raise_e1():\n        raise E1\n\n    @app.route(\"/E3\")\n    def raise_e3():\n        raise E3\n\n    rv = client.get(\"/E1\")\n    assert rv.data == b\"Exception..."
  },
  {
    "name": "test_trap_bad_request_key_error",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "client",
      "debug",
      "trap",
      "expect_key",
      "expect_abort"
    ],
    "calls": [
      "pytest.mark.parametrize",
      "app.route",
      "app.route",
      "flask.abort",
      "client.get",
      "exc_info.errisinstance",
      "client.get",
      "pytest.raises",
      "client.get",
      "exc_info.value.get_description",
      "pytest.raises",
      "client.get"
    ],
    "code_location": {
      "file": "test_basic.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 1036,
      "end_line": 1064
    },
    "code_snippet": "def test_trap_bad_request_key_error(app, client, debug, trap, expect_key, expect_abort):\n    app.config[\"DEBUG\"] = debug\n    app.config[\"TRAP_BAD_REQUEST_ERRORS\"] = trap\n\n    @app.route(\"/key\")\n    def fail():\n        flask.request.form[\"missing_key\"]\n\n    @app.route(\"/abort\")\n    def allow_abort():\n        flask.abort(400)\n\n    if expect_key:\n        rv = client.get(\"/key\")\n        assert rv.status_code == 400\n        assert b\"missing_key\" not in rv.data\n    else:\n        with pytest.raises(Key..."
  },
  {
    "name": "test_trapping_of_all_http_exceptions",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "client"
    ],
    "calls": [
      "app.route",
      "flask.abort",
      "pytest.raises",
      "client.get"
    ],
    "code_location": {
      "file": "test_basic.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 1067,
      "end_line": 1075
    },
    "code_snippet": "def test_trapping_of_all_http_exceptions(app, client):\n    app.config[\"TRAP_HTTP_EXCEPTIONS\"] = True\n\n    @app.route(\"/fail\")\n    def fail():\n        flask.abort(404)\n\n    with pytest.raises(NotFound):\n        client.get(\"/fail\")"
  },
  {
    "name": "test_error_handler_after_processor_error",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "client"
    ],
    "calls": [
      "app.route",
      "app.errorhandler",
      "client.get"
    ],
    "code_location": {
      "file": "test_basic.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 1078,
      "end_line": 1104
    },
    "code_snippet": "def test_error_handler_after_processor_error(app, client):\n    app.testing = False\n\n    @app.before_request\n    def before_request():\n        if _trigger == \"before\":\n            raise ZeroDivisionError\n\n    @app.after_request\n    def after_request(response):\n        if _trigger == \"after\":\n            raise ZeroDivisionError\n\n        return response\n\n    @app.route(\"/\")\n    def index():\n        return \"Foo\"\n\n    @app.errorhandler(500)\n    def internal_server_error(e):\n        return \"Hello Serv..."
  },
  {
    "name": "test_enctype_debug_helper",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "client"
    ],
    "calls": [
      "app.route",
      "pytest.raises",
      "client.post",
      "str",
      "str"
    ],
    "code_location": {
      "file": "test_basic.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 1107,
      "end_line": 1119
    },
    "code_snippet": "def test_enctype_debug_helper(app, client):\n    from flask.debughelpers import DebugFilesKeyError\n\n    app.debug = True\n\n    @app.route(\"/fail\", methods=[\"POST\"])\n    def index():\n        return flask.request.files[\"foo\"].filename\n\n    with pytest.raises(DebugFilesKeyError) as e:\n        client.post(\"/fail\", data={\"foo\": \"index.txt\"})\n    assert \"no file contents were transmitted\" in str(e.value)\n    assert \"This was submitted: 'index.txt'\" in str(e.value)"
  },
  {
    "name": "test_response_types",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "client"
    ],
    "calls": [
      "app.route",
      "app.route",
      "app.route",
      "app.route",
      "app.route",
      "app.route",
      "app.route",
      "app.route",
      "app.route",
      "app.route",
      "client.get",
      "client.get",
      "client.get",
      "client.get",
      "client.get",
      "client.get",
      "client.get",
      "client.get",
      "encode",
      "NotFound",
      "encode",
      "encode",
      "rv.headers.getlist",
      "flask.Response",
      "app.response_class",
      "client.get",
      "client.get"
    ],
    "code_location": {
      "file": "test_basic.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 1122,
      "end_line": 1213
    },
    "code_snippet": "def test_response_types(app, client):\n    @app.route(\"/text\")\n    def from_text():\n        return \"Hällo Wörld\"\n\n    @app.route(\"/bytes\")\n    def from_bytes():\n        return \"Hällo Wörld\".encode()\n\n    @app.route(\"/full_tuple\")\n    def from_full_tuple():\n        return (\n            \"Meh\",\n            400,\n            {\"X-Foo\": \"Testing\", \"Content-Type\": \"text/plain; charset=utf-8\"},\n        )\n\n    @app.route(\"/text_headers\")\n    def from_text_headers():\n        return \"Hello\", {\"X-Foo\": \"Test\"..."
  },
  {
    "name": "test_response_type_errors",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [],
    "calls": [
      "flask.Flask",
      "app.route",
      "app.route",
      "app.route",
      "app.route",
      "app.route",
      "app.test_client",
      "pytest.raises",
      "c.get",
      "str",
      "str",
      "pytest.raises",
      "c.get",
      "str",
      "pytest.raises",
      "c.get",
      "pytest.raises",
      "c.get",
      "str",
      "pytest.raises",
      "c.get"
    ],
    "code_location": {
      "file": "test_basic.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 1216,
      "end_line": 1262
    },
    "code_snippet": "def test_response_type_errors():\n    app = flask.Flask(__name__)\n    app.testing = True\n\n    @app.route(\"/none\")\n    def from_none():\n        pass\n\n    @app.route(\"/small_tuple\")\n    def from_small_tuple():\n        return (\"Hello\",)\n\n    @app.route(\"/large_tuple\")\n    def from_large_tuple():\n        return \"Hello\", 234, {\"X-Foo\": \"Bar\"}, \"???\"\n\n    @app.route(\"/bad_type\")\n    def from_bad_type():\n        return True\n\n    @app.route(\"/bad_wsgi\")\n    def from_bad_wsgi():\n        return lambda: Non..."
  },
  {
    "name": "test_make_response",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "req_ctx"
    ],
    "calls": [
      "flask.make_response",
      "flask.make_response",
      "flask.make_response",
      "flask.make_response"
    ],
    "code_location": {
      "file": "test_basic.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 1265,
      "end_line": 1284
    },
    "code_snippet": "def test_make_response(app, req_ctx):\n    rv = flask.make_response()\n    assert rv.status_code == 200\n    assert rv.data == b\"\"\n    assert rv.mimetype == \"text/html\"\n\n    rv = flask.make_response(\"Awesome\")\n    assert rv.status_code == 200\n    assert rv.data == b\"Awesome\"\n    assert rv.mimetype == \"text/html\"\n\n    rv = flask.make_response(\"W00t\", 404)\n    assert rv.status_code == 404\n    assert rv.data == b\"W00t\"\n    assert rv.mimetype == \"text/html\"\n\n    rv = flask.make_response(c for c in \"Hel..."
  },
  {
    "name": "test_make_response_with_response_instance",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "req_ctx"
    ],
    "calls": [
      "flask.make_response",
      "flask.make_response",
      "flask.make_response",
      "flask.jsonify",
      "flask.Response",
      "flask.Response"
    ],
    "code_location": {
      "file": "test_basic.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 1287,
      "end_line": 1305
    },
    "code_snippet": "def test_make_response_with_response_instance(app, req_ctx):\n    rv = flask.make_response(flask.jsonify({\"msg\": \"W00t\"}), 400)\n    assert rv.status_code == 400\n    assert rv.data == b'{\"msg\":\"W00t\"}\\n'\n    assert rv.mimetype == \"application/json\"\n\n    rv = flask.make_response(flask.Response(\"\"), 400)\n    assert rv.status_code == 400\n    assert rv.data == b\"\"\n    assert rv.mimetype == \"text/html\"\n\n    rv = flask.make_response(\n        flask.Response(\"\", headers={\"Content-Type\": \"text/html\"}),\n   ..."
  },
  {
    "name": "test_jsonify_no_prettyprint",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "compact"
    ],
    "calls": [
      "pytest.mark.parametrize",
      "app.json.response",
      "rv.data.strip"
    ],
    "code_location": {
      "file": "test_basic.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 1309,
      "end_line": 1314
    },
    "code_snippet": "def test_jsonify_no_prettyprint(app, compact):\n    app.json.compact = compact\n    rv = app.json.response({\"msg\": {\"submsg\": \"W00t\"}, \"msg2\": \"foobar\"})\n    data = rv.data.strip()\n    assert (b\" \" not in data) is compact\n    assert (b\"\\n\" not in data) is compact"
  },
  {
    "name": "test_jsonify_mimetype",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "req_ctx"
    ],
    "calls": [
      "flask.make_response",
      "flask.jsonify"
    ],
    "code_location": {
      "file": "test_basic.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 1317,
      "end_line": 1321
    },
    "code_snippet": "def test_jsonify_mimetype(app, req_ctx):\n    app.json.mimetype = \"application/vnd.api+json\"\n    msg = {\"msg\": {\"submsg\": \"W00t\"}}\n    rv = flask.make_response(flask.jsonify(msg), 200)\n    assert rv.mimetype == \"application/vnd.api+json\""
  },
  {
    "name": "test_json_dump_dataclass",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "req_ctx"
    ],
    "calls": [
      "make_dataclass",
      "app.json.dumps",
      "app.json.loads",
      "Data"
    ],
    "code_location": {
      "file": "test_basic.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 1324,
      "end_line": 1330
    },
    "code_snippet": "def test_json_dump_dataclass(app, req_ctx):\n    from dataclasses import make_dataclass\n\n    Data = make_dataclass(\"Data\", [(\"name\", str)])\n    value = app.json.dumps(Data(\"Flask\"))\n    value = app.json.loads(value)\n    assert value == {\"name\": \"Flask\"}"
  },
  {
    "name": "test_jsonify_args_and_kwargs_check",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "req_ctx"
    ],
    "calls": [
      "pytest.raises",
      "flask.jsonify",
      "str"
    ],
    "code_location": {
      "file": "test_basic.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 1333,
      "end_line": 1336
    },
    "code_snippet": "def test_jsonify_args_and_kwargs_check(app, req_ctx):\n    with pytest.raises(TypeError) as e:\n        flask.jsonify(\"fake args\", kwargs=\"fake\")\n    assert \"args or kwargs\" in str(e.value)"
  },
  {
    "name": "test_url_generation",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "req_ctx"
    ],
    "calls": [
      "app.route",
      "flask.url_for",
      "flask.url_for"
    ],
    "code_location": {
      "file": "test_basic.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 1339,
      "end_line": 1348
    },
    "code_snippet": "def test_url_generation(app, req_ctx):\n    @app.route(\"/hello/<name>\", methods=[\"POST\"])\n    def hello():\n        pass\n\n    assert flask.url_for(\"hello\", name=\"test x\") == \"/hello/test%20x\"\n    assert (\n        flask.url_for(\"hello\", name=\"test x\", _external=True)\n        == \"http://localhost/hello/test%20x\"\n    )"
  },
  {
    "name": "test_build_error_handler",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app"
    ],
    "calls": [
      "app.url_build_error_handlers.append",
      "app.test_request_context",
      "pytest.raises",
      "RuntimeError",
      "app.test_request_context",
      "app.test_request_context",
      "flask.url_for",
      "pytest.raises",
      "flask.url_for"
    ],
    "code_location": {
      "file": "test_basic.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 1351,
      "end_line": 1374
    },
    "code_snippet": "def test_build_error_handler(app):\n    # Test base case, a URL which results in a BuildError.\n    with app.test_request_context():\n        pytest.raises(BuildError, flask.url_for, \"spam\")\n\n    # Verify the error is re-raised if not the current exception.\n    try:\n        with app.test_request_context():\n            flask.url_for(\"spam\")\n    except BuildError as err:\n        error = err\n    try:\n        raise RuntimeError(\"Test case where BuildError is not current.\")\n    except RuntimeError:\n    ..."
  },
  {
    "name": "test_build_error_handler_reraise",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app"
    ],
    "calls": [
      "app.url_build_error_handlers.append",
      "app.test_request_context",
      "pytest.raises"
    ],
    "code_location": {
      "file": "test_basic.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 1377,
      "end_line": 1385
    },
    "code_snippet": "def test_build_error_handler_reraise(app):\n    # Test a custom handler which reraises the BuildError\n    def handler_raises_build_error(error, endpoint, values):\n        raise error\n\n    app.url_build_error_handlers.append(handler_raises_build_error)\n\n    with app.test_request_context():\n        pytest.raises(BuildError, flask.url_for, \"not.existing\")"
  },
  {
    "name": "test_url_for_passes_special_values_to_build_error_handler",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app"
    ],
    "calls": [
      "app.test_request_context",
      "flask.url_for"
    ],
    "code_location": {
      "file": "test_basic.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 1388,
      "end_line": 1400
    },
    "code_snippet": "def test_url_for_passes_special_values_to_build_error_handler(app):\n    @app.url_build_error_handlers.append\n    def handler(error, endpoint, values):\n        assert values == {\n            \"_external\": False,\n            \"_anchor\": None,\n            \"_method\": None,\n            \"_scheme\": None,\n        }\n        return \"handled\"\n\n    with app.test_request_context():\n        flask.url_for(\"/\")"
  },
  {
    "name": "test_static_files",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "client"
    ],
    "calls": [
      "client.get",
      "rv.close",
      "rv.data.strip",
      "app.test_request_context",
      "flask.url_for"
    ],
    "code_location": {
      "file": "test_basic.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 1403,
      "end_line": 1409
    },
    "code_snippet": "def test_static_files(app, client):\n    rv = client.get(\"/static/index.html\")\n    assert rv.status_code == 200\n    assert rv.data.strip() == b\"<h1>Hello World!</h1>\"\n    with app.test_request_context():\n        assert flask.url_for(\"static\", filename=\"index.html\") == \"/static/index.html\"\n    rv.close()"
  },
  {
    "name": "test_static_url_path",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [],
    "calls": [
      "flask.Flask",
      "get",
      "rv.close",
      "app.test_request_context",
      "app.test_client",
      "flask.url_for"
    ],
    "code_location": {
      "file": "test_basic.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 1412,
      "end_line": 1420
    },
    "code_snippet": "def test_static_url_path():\n    app = flask.Flask(__name__, static_url_path=\"/foo\")\n    app.testing = True\n    rv = app.test_client().get(\"/foo/index.html\")\n    assert rv.status_code == 200\n    rv.close()\n\n    with app.test_request_context():\n        assert flask.url_for(\"static\", filename=\"index.html\") == \"/foo/index.html\""
  },
  {
    "name": "test_static_url_path_with_ending_slash",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [],
    "calls": [
      "flask.Flask",
      "get",
      "rv.close",
      "app.test_request_context",
      "app.test_client",
      "flask.url_for"
    ],
    "code_location": {
      "file": "test_basic.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 1423,
      "end_line": 1431
    },
    "code_snippet": "def test_static_url_path_with_ending_slash():\n    app = flask.Flask(__name__, static_url_path=\"/foo/\")\n    app.testing = True\n    rv = app.test_client().get(\"/foo/index.html\")\n    assert rv.status_code == 200\n    rv.close()\n\n    with app.test_request_context():\n        assert flask.url_for(\"static\", filename=\"index.html\") == \"/foo/index.html\""
  },
  {
    "name": "test_static_url_empty_path",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app"
    ],
    "calls": [
      "flask.Flask",
      "open",
      "rv.close",
      "app.test_client"
    ],
    "code_location": {
      "file": "test_basic.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 1434,
      "end_line": 1438
    },
    "code_snippet": "def test_static_url_empty_path(app):\n    app = flask.Flask(__name__, static_folder=\"\", static_url_path=\"\")\n    rv = app.test_client().open(\"/static/index.html\", method=\"GET\")\n    assert rv.status_code == 200\n    rv.close()"
  },
  {
    "name": "test_static_url_empty_path_default",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app"
    ],
    "calls": [
      "flask.Flask",
      "open",
      "rv.close",
      "app.test_client"
    ],
    "code_location": {
      "file": "test_basic.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 1441,
      "end_line": 1445
    },
    "code_snippet": "def test_static_url_empty_path_default(app):\n    app = flask.Flask(__name__, static_folder=\"\")\n    rv = app.test_client().open(\"/static/index.html\", method=\"GET\")\n    assert rv.status_code == 200\n    rv.close()"
  },
  {
    "name": "test_static_folder_with_pathlib_path",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app"
    ],
    "calls": [
      "flask.Flask",
      "open",
      "rv.close",
      "Path",
      "app.test_client"
    ],
    "code_location": {
      "file": "test_basic.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 1448,
      "end_line": 1454
    },
    "code_snippet": "def test_static_folder_with_pathlib_path(app):\n    from pathlib import Path\n\n    app = flask.Flask(__name__, static_folder=Path(\"static\"))\n    rv = app.test_client().open(\"/static/index.html\", method=\"GET\")\n    assert rv.status_code == 200\n    rv.close()"
  },
  {
    "name": "test_static_folder_with_ending_slash",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [],
    "calls": [
      "flask.Flask",
      "app.route",
      "get",
      "app.test_client"
    ],
    "code_location": {
      "file": "test_basic.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 1457,
      "end_line": 1465
    },
    "code_snippet": "def test_static_folder_with_ending_slash():\n    app = flask.Flask(__name__, static_folder=\"static/\")\n\n    @app.route(\"/<path:path>\")\n    def catch_all(path):\n        return path\n\n    rv = app.test_client().get(\"/catch/all\")\n    assert rv.data == b\"catch/all\""
  },
  {
    "name": "test_static_route_with_host_matching",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [],
    "calls": [
      "flask.Flask",
      "app.test_client",
      "c.get",
      "rv.close",
      "flask.Flask",
      "app.test_request_context",
      "flask.url_for",
      "pytest.raises",
      "flask.Flask",
      "pytest.raises",
      "flask.Flask"
    ],
    "code_location": {
      "file": "test_basic.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 1468,
      "end_line": 1486
    },
    "code_snippet": "def test_static_route_with_host_matching():\n    app = flask.Flask(__name__, host_matching=True, static_host=\"example.com\")\n    c = app.test_client()\n    rv = c.get(\"http://example.com/static/index.html\")\n    assert rv.status_code == 200\n    rv.close()\n    with app.test_request_context():\n        rv = flask.url_for(\"static\", filename=\"index.html\", _external=True)\n        assert rv == \"http://example.com/static/index.html\"\n    # Providing static_host without host_matching=True should error.\n    wi..."
  },
  {
    "name": "test_request_locals",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [],
    "calls": [
      "repr"
    ],
    "code_location": {
      "file": "test_basic.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 1489,
      "end_line": 1491
    },
    "code_snippet": "def test_request_locals():\n    assert repr(flask.g) == \"<LocalProxy unbound>\"\n    assert not flask.g"
  },
  {
    "name": "test_server_name_matching",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "subdomain_matching",
      "host_matching",
      "expect_base",
      "expect_abc",
      "expect_xyz"
    ],
    "calls": [
      "pytest.mark.parametrize",
      "flask.Flask",
      "app.route",
      "app.route",
      "app.test_client",
      "client.get",
      "client.get",
      "client.get",
      "pytest.warns",
      "nullcontext"
    ],
    "code_location": {
      "file": "test_basic.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 1502,
      "end_line": 1533
    },
    "code_snippet": "def test_server_name_matching(\n    subdomain_matching: bool,\n    host_matching: bool,\n    expect_base: str,\n    expect_abc: str,\n    expect_xyz: str,\n) -> None:\n    app = flask.Flask(\n        __name__,\n        subdomain_matching=subdomain_matching,\n        host_matching=host_matching,\n        static_host=\"example.test\" if host_matching else None,\n    )\n    app.config[\"SERVER_NAME\"] = \"example.test\"\n\n    @app.route(\"/\", defaults={\"name\": \"default\"}, host=\"<name>\")\n    @app.route(\"/\", subdomain=\"<..."
  },
  {
    "name": "test_server_name_subdomain",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [],
    "calls": [
      "flask.Flask",
      "app.test_client",
      "app.route",
      "app.route",
      "client.get",
      "client.get",
      "client.get",
      "client.get",
      "client.get",
      "client.get",
      "warnings.catch_warnings",
      "warnings.filterwarnings",
      "client.get"
    ],
    "code_location": {
      "file": "test_basic.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 1536,
      "end_line": 1578
    },
    "code_snippet": "def test_server_name_subdomain():\n    app = flask.Flask(__name__, subdomain_matching=True)\n    client = app.test_client()\n\n    @app.route(\"/\")\n    def index():\n        return \"default\"\n\n    @app.route(\"/\", subdomain=\"foo\")\n    def subdomain():\n        return \"subdomain\"\n\n    app.config[\"SERVER_NAME\"] = \"dev.local:5000\"\n    rv = client.get(\"/\")\n    assert rv.data == b\"default\"\n\n    rv = client.get(\"/\", \"http://dev.local:5000\")\n    assert rv.data == b\"default\"\n\n    rv = client.get(\"/\", \"https://de..."
  },
  {
    "name": "test_exception_propagation",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "client",
      "key"
    ],
    "calls": [
      "pytest.mark.parametrize",
      "app.route",
      "pytest.raises",
      "client.get",
      "client.get"
    ],
    "code_location": {
      "file": "test_basic.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 1582,
      "end_line": 1595
    },
    "code_snippet": "def test_exception_propagation(app, client, key):\n    app.testing = False\n\n    @app.route(\"/\")\n    def index():\n        raise ZeroDivisionError\n\n    if key is not None:\n        app.config[key] = True\n\n        with pytest.raises(ZeroDivisionError):\n            client.get(\"/\")\n    else:\n        assert client.get(\"/\").status_code == 500"
  },
  {
    "name": "test_werkzeug_passthrough_errors",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "monkeypatch",
      "debug",
      "use_debugger",
      "use_reloader",
      "propagate_exceptions",
      "app"
    ],
    "calls": [
      "pytest.mark.parametrize",
      "pytest.mark.parametrize",
      "pytest.mark.parametrize",
      "pytest.mark.parametrize",
      "monkeypatch.setattr",
      "app.run",
      "kwargs.get"
    ],
    "code_location": {
      "file": "test_basic.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 1602,
      "end_line": 1613
    },
    "code_snippet": "def test_werkzeug_passthrough_errors(\n    monkeypatch, debug, use_debugger, use_reloader, propagate_exceptions, app\n):\n    rv = {}\n\n    # Mocks werkzeug.serving.run_simple method\n    def run_simple_mock(*args, **kwargs):\n        rv[\"passthrough_errors\"] = kwargs.get(\"passthrough_errors\")\n\n    monkeypatch.setattr(werkzeug.serving, \"run_simple\", run_simple_mock)\n    app.config[\"PROPAGATE_EXCEPTIONS\"] = propagate_exceptions\n    app.run(debug=debug, use_debugger=use_debugger, use_reloader=use_reload..."
  },
  {
    "name": "test_url_processors",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "client"
    ],
    "calls": [
      "app.route",
      "app.route",
      "app.route",
      "values.pop",
      "flask.url_for",
      "flask.url_for",
      "flask.url_for",
      "app.url_map.is_endpoint_expecting",
      "values.setdefault",
      "client.get",
      "client.get",
      "client.get"
    ],
    "code_location": {
      "file": "test_basic.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 1616,
      "end_line": 1642
    },
    "code_snippet": "def test_url_processors(app, client):\n    @app.url_defaults\n    def add_language_code(endpoint, values):\n        if flask.g.lang_code is not None and app.url_map.is_endpoint_expecting(\n            endpoint, \"lang_code\"\n        ):\n            values.setdefault(\"lang_code\", flask.g.lang_code)\n\n    @app.url_value_preprocessor\n    def pull_lang_code(endpoint, values):\n        flask.g.lang_code = values.pop(\"lang_code\", None)\n\n    @app.route(\"/<lang_code>/\")\n    def index():\n        return flask.url_..."
  },
  {
    "name": "test_inject_blueprint_url_defaults",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app"
    ],
    "calls": [
      "flask.Blueprint",
      "bp.route",
      "app.register_blueprint",
      "dict",
      "app.inject_url_defaults",
      "dict",
      "app.test_request_context",
      "flask.url_for"
    ],
    "code_location": {
      "file": "test_basic.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 1645,
      "end_line": 1666
    },
    "code_snippet": "def test_inject_blueprint_url_defaults(app):\n    bp = flask.Blueprint(\"foo\", __name__, template_folder=\"template\")\n\n    @bp.url_defaults\n    def bp_defaults(endpoint, values):\n        values[\"page\"] = \"login\"\n\n    @bp.route(\"/<page>\")\n    def view(page):\n        pass\n\n    app.register_blueprint(bp)\n\n    values = dict()\n    app.inject_url_defaults(\"foo.view\", values)\n    expected = dict(page=\"login\")\n    assert values == expected\n\n    with app.test_request_context(\"/somepage\"):\n        url = flas..."
  },
  {
    "name": "test_nonascii_pathinfo",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "client"
    ],
    "calls": [
      "app.route",
      "client.get"
    ],
    "code_location": {
      "file": "test_basic.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 1669,
      "end_line": 1675
    },
    "code_snippet": "def test_nonascii_pathinfo(app, client):\n    @app.route(\"/киртест\")\n    def index():\n        return \"Hello World!\"\n\n    rv = client.get(\"/киртест\")\n    assert rv.data == b\"Hello World!\""
  },
  {
    "name": "test_no_setup_after_first_request",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "client"
    ],
    "calls": [
      "app.route",
      "pytest.raises",
      "app.add_url_rule",
      "str",
      "client.get"
    ],
    "code_location": {
      "file": "test_basic.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 1678,
      "end_line": 1690
    },
    "code_snippet": "def test_no_setup_after_first_request(app, client):\n    app.debug = True\n\n    @app.route(\"/\")\n    def index():\n        return \"Awesome\"\n\n    assert client.get(\"/\").data == b\"Awesome\"\n\n    with pytest.raises(AssertionError) as exc_info:\n        app.add_url_rule(\"/foo\", endpoint=\"late\")\n\n    assert \"setup method 'add_url_rule'\" in str(exc_info.value)"
  },
  {
    "name": "test_routing_redirect_debugging",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "monkeypatch",
      "app",
      "client"
    ],
    "calls": [
      "app.route",
      "client.post",
      "monkeypatch.setattr",
      "pytest.raises",
      "client.post",
      "str"
    ],
    "code_location": {
      "file": "test_basic.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 1693,
      "end_line": 1710
    },
    "code_snippet": "def test_routing_redirect_debugging(monkeypatch, app, client):\n    app.config[\"DEBUG\"] = True\n\n    @app.route(\"/user/\", methods=[\"GET\", \"POST\"])\n    def user():\n        return flask.request.form[\"status\"]\n\n    # default redirect code preserves form data\n    rv = client.post(\"/user\", data={\"status\": \"success\"}, follow_redirects=True)\n    assert rv.data == b\"success\"\n\n    # 301 and 302 raise error\n    monkeypatch.setattr(RequestRedirect, \"code\", 301)\n\n    with client, pytest.raises(AssertionError)..."
  },
  {
    "name": "test_route_decorator_custom_endpoint",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "client"
    ],
    "calls": [
      "app.route",
      "app.route",
      "app.route",
      "app.test_request_context",
      "flask.url_for",
      "flask.url_for",
      "flask.url_for",
      "client.get",
      "client.get",
      "client.get"
    ],
    "code_location": {
      "file": "test_basic.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 1713,
      "end_line": 1735
    },
    "code_snippet": "def test_route_decorator_custom_endpoint(app, client):\n    app.debug = True\n\n    @app.route(\"/foo/\")\n    def foo():\n        return flask.request.endpoint\n\n    @app.route(\"/bar/\", endpoint=\"bar\")\n    def for_bar():\n        return flask.request.endpoint\n\n    @app.route(\"/bar/123\", endpoint=\"123\")\n    def for_bar_foo():\n        return flask.request.endpoint\n\n    with app.test_request_context():\n        assert flask.url_for(\"foo\") == \"/foo/\"\n        assert flask.url_for(\"bar\") == \"/bar/\"\n        ass..."
  },
  {
    "name": "test_get_method_on_g",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app_ctx"
    ],
    "calls": [
      "flask.g.get",
      "flask.g.get",
      "flask.g.get"
    ],
    "code_location": {
      "file": "test_basic.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 1738,
      "end_line": 1743
    },
    "code_snippet": "def test_get_method_on_g(app_ctx):\n    assert flask.g.get(\"x\") is None\n    assert flask.g.get(\"x\", 11) == 11\n    flask.g.x = 42\n    assert flask.g.get(\"x\") == 42\n    assert flask.g.x == 42"
  },
  {
    "name": "test_g_iteration_protocol",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app_ctx"
    ],
    "calls": [
      "sorted"
    ],
    "code_location": {
      "file": "test_basic.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 1746,
      "end_line": 1751
    },
    "code_snippet": "def test_g_iteration_protocol(app_ctx):\n    flask.g.foo = 23\n    flask.g.bar = 42\n    assert \"foo\" in flask.g\n    assert \"foos\" not in flask.g\n    assert sorted(flask.g) == [\"bar\", \"foo\"]"
  },
  {
    "name": "test_subdomain_basic_support",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [],
    "calls": [
      "flask.Flask",
      "app.test_client",
      "app.route",
      "app.route",
      "client.get",
      "client.get"
    ],
    "code_location": {
      "file": "test_basic.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 1754,
      "end_line": 1771
    },
    "code_snippet": "def test_subdomain_basic_support():\n    app = flask.Flask(__name__, subdomain_matching=True)\n    app.config[\"SERVER_NAME\"] = \"localhost.localdomain\"\n    client = app.test_client()\n\n    @app.route(\"/\")\n    def normal_index():\n        return \"normal index\"\n\n    @app.route(\"/\", subdomain=\"test\")\n    def test_index():\n        return \"test index\"\n\n    rv = client.get(\"/\", \"http://localhost.localdomain/\")\n    assert rv.data == b\"normal index\"\n\n    rv = client.get(\"/\", \"http://test.localhost.localdomai..."
  },
  {
    "name": "test_subdomain_matching",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [],
    "calls": [
      "flask.Flask",
      "app.test_client",
      "app.route",
      "client.get"
    ],
    "code_location": {
      "file": "test_basic.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 1774,
      "end_line": 1784
    },
    "code_snippet": "def test_subdomain_matching():\n    app = flask.Flask(__name__, subdomain_matching=True)\n    client = app.test_client()\n    app.config[\"SERVER_NAME\"] = \"localhost.localdomain\"\n\n    @app.route(\"/\", subdomain=\"<user>\")\n    def index(user):\n        return f\"index for {user}\"\n\n    rv = client.get(\"/\", \"http://mitsuhiko.localhost.localdomain/\")\n    assert rv.data == b\"index for mitsuhiko\""
  },
  {
    "name": "test_subdomain_matching_with_ports",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [],
    "calls": [
      "flask.Flask",
      "app.test_client",
      "app.route",
      "client.get"
    ],
    "code_location": {
      "file": "test_basic.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 1787,
      "end_line": 1797
    },
    "code_snippet": "def test_subdomain_matching_with_ports():\n    app = flask.Flask(__name__, subdomain_matching=True)\n    app.config[\"SERVER_NAME\"] = \"localhost.localdomain:3000\"\n    client = app.test_client()\n\n    @app.route(\"/\", subdomain=\"<user>\")\n    def index(user):\n        return f\"index for {user}\"\n\n    rv = client.get(\"/\", \"http://mitsuhiko.localhost.localdomain:3000/\")\n    assert rv.data == b\"index for mitsuhiko\""
  },
  {
    "name": "test_subdomain_matching_other_name",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "matching"
    ],
    "calls": [
      "pytest.mark.parametrize",
      "flask.Flask",
      "app.test_client",
      "app.route",
      "client.get",
      "warnings.catch_warnings",
      "warnings.filterwarnings",
      "client.get"
    ],
    "code_location": {
      "file": "test_basic.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 1801,
      "end_line": 1821
    },
    "code_snippet": "def test_subdomain_matching_other_name(matching):\n    app = flask.Flask(__name__, subdomain_matching=matching)\n    app.config[\"SERVER_NAME\"] = \"localhost.localdomain:3000\"\n    client = app.test_client()\n\n    @app.route(\"/\")\n    def index():\n        return \"\", 204\n\n    # suppress Werkzeug 0.15 warning about name mismatch\n    with warnings.catch_warnings():\n        warnings.filterwarnings(\n            \"ignore\", \"Current server name\", UserWarning, \"flask.app\"\n        )\n        # ip address can't ma..."
  },
  {
    "name": "test_multi_route_rules",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "client"
    ],
    "calls": [
      "app.route",
      "app.route",
      "client.open",
      "client.open"
    ],
    "code_location": {
      "file": "test_basic.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 1824,
      "end_line": 1833
    },
    "code_snippet": "def test_multi_route_rules(app, client):\n    @app.route(\"/\")\n    @app.route(\"/<test>/\")\n    def index(test=\"a\"):\n        return test\n\n    rv = client.open(\"/\")\n    assert rv.data == b\"a\"\n    rv = client.open(\"/b/\")\n    assert rv.data == b\"b\""
  },
  {
    "name": "test_multi_route_class_views",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "client"
    ],
    "calls": [
      "View",
      "client.open",
      "client.open",
      "app.add_url_rule",
      "app.add_url_rule"
    ],
    "code_location": {
      "file": "test_basic.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 1836,
      "end_line": 1849
    },
    "code_snippet": "def test_multi_route_class_views(app, client):\n    class View:\n        def __init__(self, app):\n            app.add_url_rule(\"/\", \"index\", self.index)\n            app.add_url_rule(\"/<test>/\", \"index\", self.index)\n\n        def index(self, test=\"a\"):\n            return test\n\n    _ = View(app)\n    rv = client.open(\"/\")\n    assert rv.data == b\"a\"\n    rv = client.open(\"/b/\")\n    assert rv.data == b\"b\""
  },
  {
    "name": "test_run_defaults",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "monkeypatch",
      "app"
    ],
    "calls": [
      "monkeypatch.setattr",
      "app.run"
    ],
    "code_location": {
      "file": "test_basic.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 1852,
      "end_line": 1861
    },
    "code_snippet": "def test_run_defaults(monkeypatch, app):\n    rv = {}\n\n    # Mocks werkzeug.serving.run_simple method\n    def run_simple_mock(*args, **kwargs):\n        rv[\"result\"] = \"running...\"\n\n    monkeypatch.setattr(werkzeug.serving, \"run_simple\", run_simple_mock)\n    app.run()\n    assert rv[\"result\"] == \"running...\""
  },
  {
    "name": "test_run_server_port",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "monkeypatch",
      "app"
    ],
    "calls": [
      "monkeypatch.setattr",
      "app.run"
    ],
    "code_location": {
      "file": "test_basic.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 1864,
      "end_line": 1874
    },
    "code_snippet": "def test_run_server_port(monkeypatch, app):\n    rv = {}\n\n    # Mocks werkzeug.serving.run_simple method\n    def run_simple_mock(hostname, port, application, *args, **kwargs):\n        rv[\"result\"] = f\"running on {hostname}:{port} ...\"\n\n    monkeypatch.setattr(werkzeug.serving, \"run_simple\", run_simple_mock)\n    hostname, port = \"localhost\", 8000\n    app.run(hostname, port, debug=True)\n    assert rv[\"result\"] == f\"running on {hostname}:{port} ...\""
  },
  {
    "name": "test_run_from_config",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "monkeypatch",
      "host",
      "port",
      "server_name",
      "expect_host",
      "expect_port",
      "app"
    ],
    "calls": [
      "pytest.mark.parametrize",
      "monkeypatch.setattr",
      "app.run"
    ],
    "code_location": {
      "file": "test_basic.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 1889,
      "end_line": 1898
    },
    "code_snippet": "def test_run_from_config(\n    monkeypatch, host, port, server_name, expect_host, expect_port, app\n):\n    def run_simple_mock(hostname, port, *args, **kwargs):\n        assert hostname == expect_host\n        assert port == expect_port\n\n    monkeypatch.setattr(werkzeug.serving, \"run_simple\", run_simple_mock)\n    app.config[\"SERVER_NAME\"] = server_name\n    app.run(host, port)"
  },
  {
    "name": "test_max_cookie_size",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "client",
      "recwarn"
    ],
    "calls": [
      "flask.Response",
      "app.route",
      "client.get",
      "recwarn.pop",
      "client.get",
      "app.app_context",
      "flask.Response",
      "r.set_cookie",
      "len",
      "str",
      "len",
      "flask.Response"
    ],
    "code_location": {
      "file": "test_basic.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 1901,
      "end_line": 1928
    },
    "code_snippet": "def test_max_cookie_size(app, client, recwarn):\n    app.config[\"MAX_COOKIE_SIZE\"] = 100\n\n    # outside app context, default to Werkzeug static value,\n    # which is also the default config\n    response = flask.Response()\n    default = flask.Flask.default_config[\"MAX_COOKIE_SIZE\"]\n    assert response.max_cookie_size == default\n\n    # inside app context, use app config\n    with app.app_context():\n        assert flask.Response().max_cookie_size == 100\n\n    @app.route(\"/\")\n    def index():\n        r..."
  },
  {
    "name": "test_app_freed_on_zero_refcount",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [],
    "calls": [
      "gc.disable",
      "flask.Flask",
      "weakref.ref",
      "gc.enable",
      "weak",
      "weak"
    ],
    "code_location": {
      "file": "test_basic.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 1932,
      "end_line": 1944
    },
    "code_snippet": "def test_app_freed_on_zero_refcount():\n    # A Flask instance should not create a reference cycle that prevents CPython\n    # from freeing it when all external references to it are released (see #3761).\n    gc.disable()\n    try:\n        app = flask.Flask(__name__)\n        assert app.view_functions[\"static\"]\n        weak = weakref.ref(app)\n        assert weak() is not None\n        del app\n        assert weak() is None\n    finally:\n        gc.enable()"
  },
  {
    "name": "test_context_processing",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "client"
    ],
    "calls": [
      "app.route",
      "client.get",
      "flask.render_template"
    ],
    "code_location": {
      "file": "test_templating.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 11,
      "end_line": 21
    },
    "code_snippet": "def test_context_processing(app, client):\n    @app.context_processor\n    def context_processor():\n        return {\"injected_value\": 42}\n\n    @app.route(\"/\")\n    def index():\n        return flask.render_template(\"context_template.html\", value=23)\n\n    rv = client.get(\"/\")\n    assert rv.data == b\"<p>23|42\""
  },
  {
    "name": "test_original_win",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "client"
    ],
    "calls": [
      "app.route",
      "client.get",
      "flask.render_template_string"
    ],
    "code_location": {
      "file": "test_templating.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 24,
      "end_line": 30
    },
    "code_snippet": "def test_original_win(app, client):\n    @app.route(\"/\")\n    def index():\n        return flask.render_template_string(\"{{ config }}\", config=42)\n\n    rv = client.get(\"/\")\n    assert rv.data == b\"42\""
  },
  {
    "name": "test_simple_stream",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "client"
    ],
    "calls": [
      "app.route",
      "client.get",
      "flask.stream_template_string"
    ],
    "code_location": {
      "file": "test_templating.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 33,
      "end_line": 39
    },
    "code_snippet": "def test_simple_stream(app, client):\n    @app.route(\"/\")\n    def index():\n        return flask.stream_template_string(\"{{ config }}\", config=42)\n\n    rv = client.get(\"/\")\n    assert rv.data == b\"42\""
  },
  {
    "name": "test_request_less_rendering",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "app_ctx"
    ],
    "calls": [
      "flask.render_template_string",
      "dict"
    ],
    "code_location": {
      "file": "test_templating.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 42,
      "end_line": 50
    },
    "code_snippet": "def test_request_less_rendering(app, app_ctx):\n    app.config[\"WORLD_NAME\"] = \"Special World\"\n\n    @app.context_processor\n    def context_processor():\n        return dict(foo=42)\n\n    rv = flask.render_template_string(\"Hello {{ config.WORLD_NAME }} {{ foo }}\")\n    assert rv == \"Hello Special World 42\""
  },
  {
    "name": "test_standard_context",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "client"
    ],
    "calls": [
      "app.route",
      "client.get",
      "flask.render_template_string",
      "rv.data.split"
    ],
    "code_location": {
      "file": "test_templating.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 53,
      "end_line": 68
    },
    "code_snippet": "def test_standard_context(app, client):\n    @app.route(\"/\")\n    def index():\n        flask.g.foo = 23\n        flask.session[\"test\"] = \"aha\"\n        return flask.render_template_string(\n            \"\"\"\n            {{ request.args.foo }}\n            {{ g.foo }}\n            {{ config.DEBUG }}\n            {{ session.test }}\n        \"\"\"\n        )\n\n    rv = client.get(\"/?foo=42\")\n    assert rv.data.split() == [b\"42\", b\"23\", b\"False\", b\"aha\"]"
  },
  {
    "name": "test_escaping",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "client"
    ],
    "calls": [
      "app.route",
      "data.splitlines",
      "flask.render_template",
      "Markup",
      "client.get"
    ],
    "code_location": {
      "file": "test_templating.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 71,
      "end_line": 88
    },
    "code_snippet": "def test_escaping(app, client):\n    text = \"<p>Hello World!\"\n\n    @app.route(\"/\")\n    def index():\n        return flask.render_template(\n            \"escaping_template.html\", text=text, html=Markup(text)\n        )\n\n    lines = client.get(\"/\").data.splitlines()\n    assert lines == [\n        b\"&lt;p&gt;Hello World!\",\n        b\"<p>Hello World!\",\n        b\"<p>Hello World!\",\n        b\"<p>Hello World!\",\n        b\"&lt;p&gt;Hello World!\",\n        b\"<p>Hello World!\",\n    ]"
  },
  {
    "name": "test_no_escaping",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "client"
    ],
    "calls": [
      "app.route",
      "data.splitlines",
      "flask.render_template",
      "Markup",
      "client.get"
    ],
    "code_location": {
      "file": "test_templating.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 91,
      "end_line": 110
    },
    "code_snippet": "def test_no_escaping(app, client):\n    text = \"<p>Hello World!\"\n\n    @app.route(\"/\")\n    def index():\n        return flask.render_template(\n            \"non_escaping_template.txt\", text=text, html=Markup(text)\n        )\n\n    lines = client.get(\"/\").data.splitlines()\n    assert lines == [\n        b\"<p>Hello World!\",\n        b\"<p>Hello World!\",\n        b\"<p>Hello World!\",\n        b\"<p>Hello World!\",\n        b\"&lt;p&gt;Hello World!\",\n        b\"<p>Hello World!\",\n        b\"<p>Hello World!\",\n        b..."
  },
  {
    "name": "test_escaping_without_template_filename",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "client",
      "req_ctx"
    ],
    "calls": [
      "flask.render_template_string",
      "flask.render_template"
    ],
    "code_location": {
      "file": "test_templating.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 113,
      "end_line": 115
    },
    "code_snippet": "def test_escaping_without_template_filename(app, client, req_ctx):\n    assert flask.render_template_string(\"{{ foo }}\", foo=\"<test>\") == \"&lt;test&gt;\"\n    assert flask.render_template(\"mail.txt\", foo=\"<test>\") == \"<test> Mail\""
  },
  {
    "name": "test_macros",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "req_ctx"
    ],
    "calls": [
      "flask.get_template_attribute",
      "macro"
    ],
    "code_location": {
      "file": "test_templating.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 118,
      "end_line": 120
    },
    "code_snippet": "def test_macros(app, req_ctx):\n    macro = flask.get_template_attribute(\"_macro.html\", \"hello\")\n    assert macro(\"World\") == \"Hello World!\""
  },
  {
    "name": "test_template_filter",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app"
    ],
    "calls": [
      "app.template_filter",
      "app.jinja_env.filters.keys"
    ],
    "code_location": {
      "file": "test_templating.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 123,
      "end_line": 130
    },
    "code_snippet": "def test_template_filter(app):\n    @app.template_filter()\n    def my_reverse(s):\n        return s[::-1]\n\n    assert \"my_reverse\" in app.jinja_env.filters.keys()\n    assert app.jinja_env.filters[\"my_reverse\"] == my_reverse\n    assert app.jinja_env.filters[\"my_reverse\"](\"abcd\") == \"dcba\""
  },
  {
    "name": "test_add_template_filter",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app"
    ],
    "calls": [
      "app.add_template_filter",
      "app.jinja_env.filters.keys"
    ],
    "code_location": {
      "file": "test_templating.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 133,
      "end_line": 140
    },
    "code_snippet": "def test_add_template_filter(app):\n    def my_reverse(s):\n        return s[::-1]\n\n    app.add_template_filter(my_reverse)\n    assert \"my_reverse\" in app.jinja_env.filters.keys()\n    assert app.jinja_env.filters[\"my_reverse\"] == my_reverse\n    assert app.jinja_env.filters[\"my_reverse\"](\"abcd\") == \"dcba\""
  },
  {
    "name": "test_template_filter_with_name",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app"
    ],
    "calls": [
      "app.template_filter",
      "app.jinja_env.filters.keys"
    ],
    "code_location": {
      "file": "test_templating.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 143,
      "end_line": 150
    },
    "code_snippet": "def test_template_filter_with_name(app):\n    @app.template_filter(\"strrev\")\n    def my_reverse(s):\n        return s[::-1]\n\n    assert \"strrev\" in app.jinja_env.filters.keys()\n    assert app.jinja_env.filters[\"strrev\"] == my_reverse\n    assert app.jinja_env.filters[\"strrev\"](\"abcd\") == \"dcba\""
  },
  {
    "name": "test_add_template_filter_with_name",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app"
    ],
    "calls": [
      "app.add_template_filter",
      "app.jinja_env.filters.keys"
    ],
    "code_location": {
      "file": "test_templating.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 153,
      "end_line": 160
    },
    "code_snippet": "def test_add_template_filter_with_name(app):\n    def my_reverse(s):\n        return s[::-1]\n\n    app.add_template_filter(my_reverse, \"strrev\")\n    assert \"strrev\" in app.jinja_env.filters.keys()\n    assert app.jinja_env.filters[\"strrev\"] == my_reverse\n    assert app.jinja_env.filters[\"strrev\"](\"abcd\") == \"dcba\""
  },
  {
    "name": "test_template_filter_with_template",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "client"
    ],
    "calls": [
      "app.template_filter",
      "app.route",
      "client.get",
      "flask.render_template"
    ],
    "code_location": {
      "file": "test_templating.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 163,
      "end_line": 173
    },
    "code_snippet": "def test_template_filter_with_template(app, client):\n    @app.template_filter()\n    def super_reverse(s):\n        return s[::-1]\n\n    @app.route(\"/\")\n    def index():\n        return flask.render_template(\"template_filter.html\", value=\"abcd\")\n\n    rv = client.get(\"/\")\n    assert rv.data == b\"dcba\""
  },
  {
    "name": "test_add_template_filter_with_template",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "client"
    ],
    "calls": [
      "app.add_template_filter",
      "app.route",
      "client.get",
      "flask.render_template"
    ],
    "code_location": {
      "file": "test_templating.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 176,
      "end_line": 187
    },
    "code_snippet": "def test_add_template_filter_with_template(app, client):\n    def super_reverse(s):\n        return s[::-1]\n\n    app.add_template_filter(super_reverse)\n\n    @app.route(\"/\")\n    def index():\n        return flask.render_template(\"template_filter.html\", value=\"abcd\")\n\n    rv = client.get(\"/\")\n    assert rv.data == b\"dcba\""
  },
  {
    "name": "test_template_filter_with_name_and_template",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "client"
    ],
    "calls": [
      "app.template_filter",
      "app.route",
      "client.get",
      "flask.render_template"
    ],
    "code_location": {
      "file": "test_templating.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 190,
      "end_line": 200
    },
    "code_snippet": "def test_template_filter_with_name_and_template(app, client):\n    @app.template_filter(\"super_reverse\")\n    def my_reverse(s):\n        return s[::-1]\n\n    @app.route(\"/\")\n    def index():\n        return flask.render_template(\"template_filter.html\", value=\"abcd\")\n\n    rv = client.get(\"/\")\n    assert rv.data == b\"dcba\""
  },
  {
    "name": "test_add_template_filter_with_name_and_template",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "client"
    ],
    "calls": [
      "app.add_template_filter",
      "app.route",
      "client.get",
      "flask.render_template"
    ],
    "code_location": {
      "file": "test_templating.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 203,
      "end_line": 214
    },
    "code_snippet": "def test_add_template_filter_with_name_and_template(app, client):\n    def my_reverse(s):\n        return s[::-1]\n\n    app.add_template_filter(my_reverse, \"super_reverse\")\n\n    @app.route(\"/\")\n    def index():\n        return flask.render_template(\"template_filter.html\", value=\"abcd\")\n\n    rv = client.get(\"/\")\n    assert rv.data == b\"dcba\""
  },
  {
    "name": "test_template_test",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app"
    ],
    "calls": [
      "app.template_test",
      "isinstance",
      "app.jinja_env.tests.keys"
    ],
    "code_location": {
      "file": "test_templating.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 217,
      "end_line": 224
    },
    "code_snippet": "def test_template_test(app):\n    @app.template_test()\n    def boolean(value):\n        return isinstance(value, bool)\n\n    assert \"boolean\" in app.jinja_env.tests.keys()\n    assert app.jinja_env.tests[\"boolean\"] == boolean\n    assert app.jinja_env.tests[\"boolean\"](False)"
  },
  {
    "name": "test_add_template_test",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app"
    ],
    "calls": [
      "app.add_template_test",
      "isinstance",
      "app.jinja_env.tests.keys"
    ],
    "code_location": {
      "file": "test_templating.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 227,
      "end_line": 234
    },
    "code_snippet": "def test_add_template_test(app):\n    def boolean(value):\n        return isinstance(value, bool)\n\n    app.add_template_test(boolean)\n    assert \"boolean\" in app.jinja_env.tests.keys()\n    assert app.jinja_env.tests[\"boolean\"] == boolean\n    assert app.jinja_env.tests[\"boolean\"](False)"
  },
  {
    "name": "test_template_test_with_name",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app"
    ],
    "calls": [
      "app.template_test",
      "isinstance",
      "app.jinja_env.tests.keys"
    ],
    "code_location": {
      "file": "test_templating.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 237,
      "end_line": 244
    },
    "code_snippet": "def test_template_test_with_name(app):\n    @app.template_test(\"boolean\")\n    def is_boolean(value):\n        return isinstance(value, bool)\n\n    assert \"boolean\" in app.jinja_env.tests.keys()\n    assert app.jinja_env.tests[\"boolean\"] == is_boolean\n    assert app.jinja_env.tests[\"boolean\"](False)"
  },
  {
    "name": "test_add_template_test_with_name",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app"
    ],
    "calls": [
      "app.add_template_test",
      "isinstance",
      "app.jinja_env.tests.keys"
    ],
    "code_location": {
      "file": "test_templating.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 247,
      "end_line": 254
    },
    "code_snippet": "def test_add_template_test_with_name(app):\n    def is_boolean(value):\n        return isinstance(value, bool)\n\n    app.add_template_test(is_boolean, \"boolean\")\n    assert \"boolean\" in app.jinja_env.tests.keys()\n    assert app.jinja_env.tests[\"boolean\"] == is_boolean\n    assert app.jinja_env.tests[\"boolean\"](False)"
  },
  {
    "name": "test_template_test_with_template",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "client"
    ],
    "calls": [
      "app.template_test",
      "app.route",
      "client.get",
      "isinstance",
      "flask.render_template"
    ],
    "code_location": {
      "file": "test_templating.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 257,
      "end_line": 267
    },
    "code_snippet": "def test_template_test_with_template(app, client):\n    @app.template_test()\n    def boolean(value):\n        return isinstance(value, bool)\n\n    @app.route(\"/\")\n    def index():\n        return flask.render_template(\"template_test.html\", value=False)\n\n    rv = client.get(\"/\")\n    assert b\"Success!\" in rv.data"
  },
  {
    "name": "test_add_template_test_with_template",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "client"
    ],
    "calls": [
      "app.add_template_test",
      "app.route",
      "client.get",
      "isinstance",
      "flask.render_template"
    ],
    "code_location": {
      "file": "test_templating.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 270,
      "end_line": 281
    },
    "code_snippet": "def test_add_template_test_with_template(app, client):\n    def boolean(value):\n        return isinstance(value, bool)\n\n    app.add_template_test(boolean)\n\n    @app.route(\"/\")\n    def index():\n        return flask.render_template(\"template_test.html\", value=False)\n\n    rv = client.get(\"/\")\n    assert b\"Success!\" in rv.data"
  },
  {
    "name": "test_template_test_with_name_and_template",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "client"
    ],
    "calls": [
      "app.template_test",
      "app.route",
      "client.get",
      "isinstance",
      "flask.render_template"
    ],
    "code_location": {
      "file": "test_templating.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 284,
      "end_line": 294
    },
    "code_snippet": "def test_template_test_with_name_and_template(app, client):\n    @app.template_test(\"boolean\")\n    def is_boolean(value):\n        return isinstance(value, bool)\n\n    @app.route(\"/\")\n    def index():\n        return flask.render_template(\"template_test.html\", value=False)\n\n    rv = client.get(\"/\")\n    assert b\"Success!\" in rv.data"
  },
  {
    "name": "test_add_template_test_with_name_and_template",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "client"
    ],
    "calls": [
      "app.add_template_test",
      "app.route",
      "client.get",
      "isinstance",
      "flask.render_template"
    ],
    "code_location": {
      "file": "test_templating.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 297,
      "end_line": 308
    },
    "code_snippet": "def test_add_template_test_with_name_and_template(app, client):\n    def is_boolean(value):\n        return isinstance(value, bool)\n\n    app.add_template_test(is_boolean, \"boolean\")\n\n    @app.route(\"/\")\n    def index():\n        return flask.render_template(\"template_test.html\", value=False)\n\n    rv = client.get(\"/\")\n    assert b\"Success!\" in rv.data"
  },
  {
    "name": "test_add_template_global",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "app_ctx"
    ],
    "calls": [
      "app.template_global",
      "flask.render_template_string",
      "app.jinja_env.globals.keys"
    ],
    "code_location": {
      "file": "test_templating.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 311,
      "end_line": 321
    },
    "code_snippet": "def test_add_template_global(app, app_ctx):\n    @app.template_global()\n    def get_stuff():\n        return 42\n\n    assert \"get_stuff\" in app.jinja_env.globals.keys()\n    assert app.jinja_env.globals[\"get_stuff\"] == get_stuff\n    assert app.jinja_env.globals[\"get_stuff\"](), 42\n\n    rv = flask.render_template_string(\"{{ get_stuff() }}\")\n    assert rv == \"42\""
  },
  {
    "name": "test_custom_template_loader",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "client"
    ],
    "calls": [
      "MyFlask",
      "app.route",
      "app.test_client",
      "c.get",
      "flask.render_template",
      "DictLoader"
    ],
    "code_location": {
      "file": "test_templating.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 324,
      "end_line": 339
    },
    "code_snippet": "def test_custom_template_loader(client):\n    class MyFlask(flask.Flask):\n        def create_global_jinja_loader(self):\n            from jinja2 import DictLoader\n\n            return DictLoader({\"index.html\": \"Hello Custom World!\"})\n\n    app = MyFlask(__name__)\n\n    @app.route(\"/\")\n    def index():\n        return flask.render_template(\"index.html\")\n\n    c = app.test_client()\n    rv = c.get(\"/\")\n    assert rv.data == b\"Hello Custom World!\""
  },
  {
    "name": "test_iterable_loader",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "client"
    ],
    "calls": [
      "app.route",
      "client.get",
      "flask.render_template"
    ],
    "code_location": {
      "file": "test_templating.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 342,
      "end_line": 359
    },
    "code_snippet": "def test_iterable_loader(app, client):\n    @app.context_processor\n    def context_processor():\n        return {\"whiskey\": \"Jameson\"}\n\n    @app.route(\"/\")\n    def index():\n        return flask.render_template(\n            [\n                \"no_template.xml\",  # should skip this one\n                \"simple_template.html\",  # should render this\n                \"context_template.html\",\n            ],\n            value=23,\n        )\n\n    rv = client.get(\"/\")\n    assert rv.data == b\"<h1>Jameson</h1>\""
  },
  {
    "name": "test_templates_auto_reload",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app"
    ],
    "calls": [
      "flask.Flask",
      "flask.Flask",
      "flask.Flask",
      "flask.Flask",
      "flask.Flask"
    ],
    "code_location": {
      "file": "test_templating.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 362,
      "end_line": 391
    },
    "code_snippet": "def test_templates_auto_reload(app):\n    # debug is False, config option is None\n    assert app.debug is False\n    assert app.config[\"TEMPLATES_AUTO_RELOAD\"] is None\n    assert app.jinja_env.auto_reload is False\n    # debug is False, config option is False\n    app = flask.Flask(__name__)\n    app.config[\"TEMPLATES_AUTO_RELOAD\"] = False\n    assert app.debug is False\n    assert app.jinja_env.auto_reload is False\n    # debug is False, config option is True\n    app = flask.Flask(__name__)\n    app.con..."
  },
  {
    "name": "test_templates_auto_reload_debug_run",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "monkeypatch"
    ],
    "calls": [
      "monkeypatch.setattr",
      "app.run",
      "app.run"
    ],
    "code_location": {
      "file": "test_templating.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 394,
      "end_line": 404
    },
    "code_snippet": "def test_templates_auto_reload_debug_run(app, monkeypatch):\n    def run_simple_mock(*args, **kwargs):\n        pass\n\n    monkeypatch.setattr(werkzeug.serving, \"run_simple\", run_simple_mock)\n\n    app.run()\n    assert not app.jinja_env.auto_reload\n\n    app.run(debug=True)\n    assert app.jinja_env.auto_reload"
  },
  {
    "name": "test_template_loader_debugging",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "test_apps",
      "monkeypatch"
    ],
    "calls": [
      "app.test_client",
      "monkeypatch.setitem",
      "monkeypatch.setattr",
      "len",
      "called.append",
      "str",
      "logging.getLogger",
      "pytest.raises",
      "c.get",
      "str",
      "_TestHandler"
    ],
    "code_location": {
      "file": "test_templating.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 407,
      "end_line": 440
    },
    "code_snippet": "def test_template_loader_debugging(test_apps, monkeypatch):\n    from blueprintapp import app\n\n    called = []\n\n    class _TestHandler(logging.Handler):\n        def handle(self, record):\n            called.append(True)\n            text = str(record.msg)\n            assert \"1: trying loader of application 'blueprintapp'\" in text\n            assert (\n                \"2: trying loader of blueprint 'admin' (blueprintapp.apps.admin)\"\n            ) in text\n            assert (\n                \"trying l..."
  },
  {
    "name": "test_custom_jinja_env",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [],
    "calls": [
      "CustomFlask",
      "isinstance"
    ],
    "code_location": {
      "file": "test_templating.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 443,
      "end_line": 451
    },
    "code_snippet": "def test_custom_jinja_env():\n    class CustomEnvironment(flask.templating.Environment):\n        pass\n\n    class CustomFlask(flask.Flask):\n        jinja_environment = CustomEnvironment\n\n    app = CustomFlask(__name__)\n    assert isinstance(app.jinja_env, CustomEnvironment)"
  },
  {
    "name": "runner",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [],
    "calls": [
      "CliRunner"
    ],
    "code_location": {
      "file": "test_cli.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 37,
      "end_line": 38
    },
    "code_snippet": "def runner():\n    return CliRunner()"
  },
  {
    "name": "test_cli_name",
    "docstring": "Make sure the CLI object's name is the app's name and not the app itself",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "test_apps"
    ],
    "calls": [],
    "code_location": {
      "file": "test_cli.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 41,
      "end_line": 45
    },
    "code_snippet": "def test_cli_name(test_apps):\n    \"\"\"Make sure the CLI object's name is the app's name and not the app itself\"\"\"\n    from cliapp.app import testapp\n\n    assert testapp.cli.name == testapp.name"
  },
  {
    "name": "test_find_best_app",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "test_apps"
    ],
    "calls": [
      "find_best_app",
      "isinstance",
      "find_best_app",
      "isinstance",
      "find_best_app",
      "isinstance",
      "pytest.raises",
      "pytest.raises",
      "pytest.raises",
      "pytest.raises",
      "Flask",
      "find_best_app",
      "Flask",
      "find_best_app",
      "Flask",
      "find_best_app",
      "Flask",
      "find_best_app",
      "Flask",
      "find_best_app",
      "Flask",
      "Flask",
      "Flask",
      "Flask",
      "Flask",
      "Flask",
      "Flask",
      "Flask",
      "TypeError"
    ],
    "code_location": {
      "file": "test_cli.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 48,
      "end_line": 132
    },
    "code_snippet": "def test_find_best_app(test_apps):\n    class Module:\n        app = Flask(\"appname\")\n\n    assert find_best_app(Module) == Module.app\n\n    class Module:\n        application = Flask(\"appname\")\n\n    assert find_best_app(Module) == Module.application\n\n    class Module:\n        myapp = Flask(\"appname\")\n\n    assert find_best_app(Module) == Module.myapp\n\n    class Module:\n        @staticmethod\n        def create_app():\n            return Flask(\"appname\")\n\n    app = find_best_app(Module)\n    assert isins..."
  },
  {
    "name": "test_prepare_import",
    "docstring": "Expect the correct path to be set and the correct import and app names\nto be returned.\n\n:func:`prepare_exec_for_file` has a side effect where the parent directory\nof the given import is added to :data:`sys.path`. This is reset after the\ntest runs.",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "request",
      "value",
      "path",
      "result"
    ],
    "calls": [
      "pytest.mark.parametrize",
      "request.addfinalizer",
      "prepare_import",
      "str"
    ],
    "code_location": {
      "file": "test_cli.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 161,
      "end_line": 177
    },
    "code_snippet": "def test_prepare_import(request, value, path, result):\n    \"\"\"Expect the correct path to be set and the correct import and app names\n    to be returned.\n\n    :func:`prepare_exec_for_file` has a side effect where the parent directory\n    of the given import is added to :data:`sys.path`. This is reset after the\n    test runs.\n    \"\"\"\n    original_path = sys.path[:]\n\n    def reset_path():\n        sys.path[:] = original_path\n\n    request.addfinalizer(reset_path)\n\n    assert prepare_import(value) == ..."
  },
  {
    "name": "test_locate_app",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "test_apps",
      "iname",
      "aname",
      "result"
    ],
    "calls": [
      "pytest.mark.parametrize",
      "locate_app"
    ],
    "code_location": {
      "file": "test_cli.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 195,
      "end_line": 196
    },
    "code_snippet": "def test_locate_app(test_apps, iname, aname, result):\n    assert locate_app(iname, aname).name == result"
  },
  {
    "name": "test_locate_app_raises",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "test_apps",
      "iname",
      "aname"
    ],
    "calls": [
      "pytest.mark.parametrize",
      "pytest.raises",
      "locate_app"
    ],
    "code_location": {
      "file": "test_cli.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 217,
      "end_line": 219
    },
    "code_snippet": "def test_locate_app_raises(test_apps, iname, aname):\n    with pytest.raises(NoAppException):\n        locate_app(iname, aname)"
  },
  {
    "name": "test_locate_app_suppress_raise",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "test_apps"
    ],
    "calls": [
      "locate_app",
      "pytest.raises",
      "locate_app"
    ],
    "code_location": {
      "file": "test_cli.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 222,
      "end_line": 228
    },
    "code_snippet": "def test_locate_app_suppress_raise(test_apps):\n    app = locate_app(\"notanapp.py\", None, raise_if_not_found=False)\n    assert app is None\n\n    # only direct import error is suppressed\n    with pytest.raises(NoAppException):\n        locate_app(\"cliapp.importerrorapp\", None, raise_if_not_found=False)"
  },
  {
    "name": "test_get_version",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "test_apps",
      "capsys"
    ],
    "calls": [
      "MockCtx",
      "get_version",
      "capsys.readouterr",
      "platform.python_version",
      "importlib.metadata.version",
      "importlib.metadata.version"
    ],
    "code_location": {
      "file": "test_cli.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 231,
      "end_line": 244
    },
    "code_snippet": "def test_get_version(test_apps, capsys):\n    class MockCtx:\n        resilient_parsing = False\n        color = None\n\n        def exit(self):\n            return\n\n    ctx = MockCtx()\n    get_version(ctx, None, \"test\")\n    out, err = capsys.readouterr()\n    assert f\"Python {platform.python_version()}\" in out\n    assert f\"Flask {importlib.metadata.version('flask')}\" in out\n    assert f\"Werkzeug {importlib.metadata.version('werkzeug')}\" in out"
  },
  {
    "name": "test_scriptinfo",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "test_apps",
      "monkeypatch"
    ],
    "calls": [
      "ScriptInfo",
      "obj.load_app",
      "str",
      "ScriptInfo",
      "obj.load_app",
      "ScriptInfo",
      "obj.load_app",
      "ScriptInfo",
      "obj.load_app",
      "ScriptInfo",
      "pytest.raises",
      "monkeypatch.chdir",
      "ScriptInfo",
      "obj.load_app",
      "monkeypatch.chdir",
      "ScriptInfo",
      "obj.load_app",
      "obj.load_app",
      "obj.load_app",
      "obj.load_app",
      "Flask",
      "obj.load_app"
    ],
    "code_location": {
      "file": "test_cli.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 247,
      "end_line": 286
    },
    "code_snippet": "def test_scriptinfo(test_apps, monkeypatch):\n    obj = ScriptInfo(app_import_path=\"cliapp.app:testapp\")\n    app = obj.load_app()\n    assert app.name == \"testapp\"\n    assert obj.load_app() is app\n\n    # import app with module's absolute path\n    cli_app_path = str(test_path / \"cliapp\" / \"app.py\")\n\n    obj = ScriptInfo(app_import_path=cli_app_path)\n    app = obj.load_app()\n    assert app.name == \"testapp\"\n    assert obj.load_app() is app\n    obj = ScriptInfo(app_import_path=f\"{cli_app_path}:testap..."
  },
  {
    "name": "test_app_cli_has_app_context",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "runner"
    ],
    "calls": [
      "app.cli.command",
      "click.argument",
      "FlaskGroup",
      "runner.invoke",
      "bool",
      "obj.load_app",
      "current_app._get_current_object",
      "click.get_current_context"
    ],
    "code_location": {
      "file": "test_cli.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 289,
      "end_line": 304
    },
    "code_snippet": "def test_app_cli_has_app_context(app, runner):\n    def _param_cb(ctx, param, value):\n        # current_app should be available in parameter callbacks\n        return bool(current_app)\n\n    @app.cli.command()\n    @click.argument(\"value\", callback=_param_cb)\n    def check(value):\n        app = click.get_current_context().obj.load_app()\n        # the loaded app should be the same as current_app\n        same_app = current_app._get_current_object() is app\n        return same_app, value\n\n    cli = Flas..."
  },
  {
    "name": "test_with_appcontext",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "runner"
    ],
    "calls": [
      "click.command",
      "ScriptInfo",
      "runner.invoke",
      "click.echo",
      "Flask"
    ],
    "code_location": {
      "file": "test_cli.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 307,
      "end_line": 317
    },
    "code_snippet": "def test_with_appcontext(runner):\n    @click.command()\n    @with_appcontext\n    def testcmd():\n        click.echo(current_app.name)\n\n    obj = ScriptInfo(create_app=lambda: Flask(\"testapp\"))\n\n    result = runner.invoke(testcmd, obj=obj)\n    assert result.exit_code == 0\n    assert result.output == \"testapp\\n\""
  },
  {
    "name": "test_appgroup_app_context",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "runner"
    ],
    "calls": [
      "click.group",
      "cli.command",
      "cli.group",
      "subgroup.command",
      "ScriptInfo",
      "runner.invoke",
      "runner.invoke",
      "click.echo",
      "click.echo",
      "Flask"
    ],
    "code_location": {
      "file": "test_cli.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 320,
      "end_line": 345
    },
    "code_snippet": "def test_appgroup_app_context(runner):\n    @click.group(cls=AppGroup)\n    def cli():\n        pass\n\n    @cli.command()\n    def test():\n        click.echo(current_app.name)\n\n    @cli.group()\n    def subgroup():\n        pass\n\n    @subgroup.command()\n    def test2():\n        click.echo(current_app.name)\n\n    obj = ScriptInfo(create_app=lambda: Flask(\"testappgroup\"))\n\n    result = runner.invoke(cli, [\"test\"], obj=obj)\n    assert result.exit_code == 0\n    assert result.output == \"testappgroup\\n\"\n\n    ..."
  },
  {
    "name": "test_flaskgroup_app_context",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "runner"
    ],
    "calls": [
      "click.group",
      "cli.command",
      "runner.invoke",
      "Flask",
      "click.echo"
    ],
    "code_location": {
      "file": "test_cli.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 348,
      "end_line": 362
    },
    "code_snippet": "def test_flaskgroup_app_context(runner):\n    def create_app():\n        return Flask(\"flaskgroup\")\n\n    @click.group(cls=FlaskGroup, create_app=create_app)\n    def cli(**params):\n        pass\n\n    @cli.command()\n    def test():\n        click.echo(current_app.name)\n\n    result = runner.invoke(cli, [\"test\"])\n    assert result.exit_code == 0\n    assert result.output == \"flaskgroup\\n\""
  },
  {
    "name": "test_flaskgroup_debug",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "runner",
      "set_debug_flag"
    ],
    "calls": [
      "pytest.mark.parametrize",
      "click.group",
      "cli.command",
      "runner.invoke",
      "Flask",
      "click.echo",
      "str"
    ],
    "code_location": {
      "file": "test_cli.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 366,
      "end_line": 382
    },
    "code_snippet": "def test_flaskgroup_debug(runner, set_debug_flag):\n    def create_app():\n        app = Flask(\"flaskgroup\")\n        app.debug = True\n        return app\n\n    @click.group(cls=FlaskGroup, create_app=create_app, set_debug_flag=set_debug_flag)\n    def cli(**params):\n        pass\n\n    @cli.command()\n    def test():\n        click.echo(str(current_app.debug))\n\n    result = runner.invoke(cli, [\"test\"])\n    assert result.exit_code == 0\n    assert result.output == f\"{not set_debug_flag}\\n\""
  },
  {
    "name": "test_flaskgroup_nested",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "runner"
    ],
    "calls": [
      "click.Group",
      "FlaskGroup",
      "cli.add_command",
      "flask_group.command",
      "runner.invoke",
      "click.echo"
    ],
    "code_location": {
      "file": "test_cli.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 385,
      "end_line": 395
    },
    "code_snippet": "def test_flaskgroup_nested(app, runner):\n    cli = click.Group(\"cli\")\n    flask_group = FlaskGroup(name=\"flask\", create_app=lambda: app)\n    cli.add_command(flask_group)\n\n    @flask_group.command()\n    def show():\n        click.echo(current_app.name)\n\n    result = runner.invoke(cli, [\"flask\", \"show\"])\n    assert result.output == \"flask_test\\n\""
  },
  {
    "name": "test_no_command_echo_loading_error",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [],
    "calls": [
      "runner.invoke",
      "CliRunner",
      "CliRunner"
    ],
    "code_location": {
      "file": "test_cli.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 398,
      "end_line": 410
    },
    "code_snippet": "def test_no_command_echo_loading_error():\n    from flask.cli import cli\n\n    try:\n        runner = CliRunner(mix_stderr=False)\n    except (DeprecationWarning, TypeError):\n        # Click >= 8.2\n        runner = CliRunner()\n\n    result = runner.invoke(cli, [\"missing\"])\n    assert result.exit_code == 2\n    assert \"FLASK_APP\" in result.stderr\n    assert \"Usage:\" in result.stderr"
  },
  {
    "name": "test_help_echo_loading_error",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [],
    "calls": [
      "runner.invoke",
      "CliRunner",
      "CliRunner"
    ],
    "code_location": {
      "file": "test_cli.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 413,
      "end_line": 425
    },
    "code_snippet": "def test_help_echo_loading_error():\n    from flask.cli import cli\n\n    try:\n        runner = CliRunner(mix_stderr=False)\n    except (DeprecationWarning, TypeError):\n        # Click >= 8.2\n        runner = CliRunner()\n\n    result = runner.invoke(cli, [\"--help\"])\n    assert result.exit_code == 0\n    assert \"FLASK_APP\" in result.stderr\n    assert \"Usage:\" in result.stdout"
  },
  {
    "name": "test_help_echo_exception",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [],
    "calls": [
      "FlaskGroup",
      "runner.invoke",
      "Exception",
      "CliRunner",
      "CliRunner"
    ],
    "code_location": {
      "file": "test_cli.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 428,
      "end_line": 443
    },
    "code_snippet": "def test_help_echo_exception():\n    def create_app():\n        raise Exception(\"oh no\")\n\n    cli = FlaskGroup(create_app=create_app)\n\n    try:\n        runner = CliRunner(mix_stderr=False)\n    except (DeprecationWarning, TypeError):\n        # Click >= 8.2\n        runner = CliRunner()\n\n    result = runner.invoke(cli, [\"--help\"])\n    assert result.exit_code == 0\n    assert \"Exception: oh no\" in result.stderr\n    assert \"Usage:\" in result.stdout"
  },
  {
    "name": "app",
    "docstring": "",
    "is_method": true,
    "class_name": "TestRoutes",
    "parameters": [
      "self"
    ],
    "calls": [
      "Flask",
      "app.add_url_rule",
      "app.add_url_rule"
    ],
    "code_location": {
      "file": "test_cli.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 448,
      "end_line": 456
    },
    "code_snippet": "def app(self):\n        app = Flask(__name__)\n        app.add_url_rule(\n            \"/get_post/<int:x>/<int:y>\",\n            methods=[\"GET\", \"POST\"],\n            endpoint=\"yyy_get_post\",\n        )\n        app.add_url_rule(\"/zzz_post\", methods=[\"POST\"], endpoint=\"aaa_post\")\n        return app"
  },
  {
    "name": "invoke",
    "docstring": "",
    "is_method": true,
    "class_name": "TestRoutes",
    "parameters": [
      "self",
      "app",
      "runner"
    ],
    "calls": [
      "FlaskGroup",
      "partial"
    ],
    "code_location": {
      "file": "test_cli.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 459,
      "end_line": 461
    },
    "code_snippet": "def invoke(self, app, runner):\n        cli = FlaskGroup(create_app=lambda: app)\n        return partial(runner.invoke, cli)"
  },
  {
    "name": "expect_order",
    "docstring": "",
    "is_method": true,
    "class_name": "TestRoutes",
    "parameters": [
      "self",
      "order",
      "output"
    ],
    "calls": [
      "zip",
      "output.splitlines",
      "len"
    ],
    "code_location": {
      "file": "test_cli.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 463,
      "end_line": 467
    },
    "code_snippet": "def expect_order(self, order, output):\n        # skip the header and match the start of each row\n        for expect, line in zip(order, output.splitlines()[2:], strict=False):\n            # do this instead of startswith for nicer pytest output\n            assert line[: len(expect)] == expect"
  },
  {
    "name": "test_simple",
    "docstring": "",
    "is_method": true,
    "class_name": "TestRoutes",
    "parameters": [
      "self",
      "invoke"
    ],
    "calls": [
      "invoke",
      "self.expect_order"
    ],
    "code_location": {
      "file": "test_cli.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 469,
      "end_line": 472
    },
    "code_snippet": "def test_simple(self, invoke):\n        result = invoke([\"routes\"])\n        assert result.exit_code == 0\n        self.expect_order([\"aaa_post\", \"static\", \"yyy_get_post\"], result.output)"
  },
  {
    "name": "test_sort",
    "docstring": "",
    "is_method": true,
    "class_name": "TestRoutes",
    "parameters": [
      "self",
      "app",
      "invoke"
    ],
    "calls": [
      "self.expect_order",
      "self.expect_order",
      "self.expect_order",
      "invoke",
      "invoke",
      "invoke",
      "invoke",
      "app.url_map.iter_rules",
      "invoke"
    ],
    "code_location": {
      "file": "test_cli.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 474,
      "end_line": 487
    },
    "code_snippet": "def test_sort(self, app, invoke):\n        default_output = invoke([\"routes\"]).output\n        endpoint_output = invoke([\"routes\", \"-s\", \"endpoint\"]).output\n        assert default_output == endpoint_output\n        self.expect_order(\n            [\"static\", \"yyy_get_post\", \"aaa_post\"],\n            invoke([\"routes\", \"-s\", \"methods\"]).output,\n        )\n        self.expect_order(\n            [\"yyy_get_post\", \"static\", \"aaa_post\"],\n            invoke([\"routes\", \"-s\", \"rule\"]).output,\n        )\n        m..."
  },
  {
    "name": "test_all_methods",
    "docstring": "",
    "is_method": true,
    "class_name": "TestRoutes",
    "parameters": [
      "self",
      "invoke"
    ],
    "calls": [
      "invoke",
      "invoke"
    ],
    "code_location": {
      "file": "test_cli.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 489,
      "end_line": 493
    },
    "code_snippet": "def test_all_methods(self, invoke):\n        output = invoke([\"routes\"]).output\n        assert \"GET, HEAD, OPTIONS, POST\" not in output\n        output = invoke([\"routes\", \"--all-methods\"]).output\n        assert \"GET, HEAD, OPTIONS, POST\" in output"
  },
  {
    "name": "test_no_routes",
    "docstring": "",
    "is_method": true,
    "class_name": "TestRoutes",
    "parameters": [
      "self",
      "runner"
    ],
    "calls": [
      "Flask",
      "FlaskGroup",
      "runner.invoke"
    ],
    "code_location": {
      "file": "test_cli.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 495,
      "end_line": 500
    },
    "code_snippet": "def test_no_routes(self, runner):\n        app = Flask(__name__, static_folder=None)\n        cli = FlaskGroup(create_app=lambda: app)\n        result = runner.invoke(cli, [\"routes\"])\n        assert result.exit_code == 0\n        assert \"No routes were registered.\" in result.output"
  },
  {
    "name": "test_subdomain",
    "docstring": "",
    "is_method": true,
    "class_name": "TestRoutes",
    "parameters": [
      "self",
      "runner"
    ],
    "calls": [
      "Flask",
      "app.add_url_rule",
      "app.add_url_rule",
      "FlaskGroup",
      "runner.invoke"
    ],
    "code_location": {
      "file": "test_cli.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 502,
      "end_line": 509
    },
    "code_snippet": "def test_subdomain(self, runner):\n        app = Flask(__name__, static_folder=None)\n        app.add_url_rule(\"/a\", subdomain=\"a\", endpoint=\"a\")\n        app.add_url_rule(\"/b\", subdomain=\"b\", endpoint=\"b\")\n        cli = FlaskGroup(create_app=lambda: app)\n        result = runner.invoke(cli, [\"routes\"])\n        assert result.exit_code == 0\n        assert \"Subdomain\" in result.output"
  },
  {
    "name": "test_host",
    "docstring": "",
    "is_method": true,
    "class_name": "TestRoutes",
    "parameters": [
      "self",
      "runner"
    ],
    "calls": [
      "Flask",
      "app.add_url_rule",
      "app.add_url_rule",
      "FlaskGroup",
      "runner.invoke"
    ],
    "code_location": {
      "file": "test_cli.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 511,
      "end_line": 518
    },
    "code_snippet": "def test_host(self, runner):\n        app = Flask(__name__, static_folder=None, host_matching=True)\n        app.add_url_rule(\"/a\", host=\"a\", endpoint=\"a\")\n        app.add_url_rule(\"/b\", host=\"b\", endpoint=\"b\")\n        cli = FlaskGroup(create_app=lambda: app)\n        result = runner.invoke(cli, [\"routes\"])\n        assert result.exit_code == 0\n        assert \"Host\" in result.output"
  },
  {
    "name": "dotenv_not_available",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [],
    "calls": [],
    "code_location": {
      "file": "test_cli.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 521,
      "end_line": 527
    },
    "code_snippet": "def dotenv_not_available():\n    try:\n        import dotenv  # noqa: F401\n    except ImportError:\n        return True\n\n    return False"
  },
  {
    "name": "test_load_dotenv",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "monkeypatch"
    ],
    "calls": [
      "monkeypatch.setenv",
      "monkeypatch.chdir",
      "load_dotenv",
      "monkeypatch._setitem.append",
      "Path.cwd",
      "load_dotenv"
    ],
    "code_location": {
      "file": "test_cli.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 536,
      "end_line": 556
    },
    "code_snippet": "def test_load_dotenv(monkeypatch):\n    # can't use monkeypatch.delitem since the keys don't exist yet\n    for item in (\"FOO\", \"BAR\", \"SPAM\", \"HAM\"):\n        monkeypatch._setitem.append((os.environ, item, notset))\n\n    monkeypatch.setenv(\"EGGS\", \"3\")\n    monkeypatch.chdir(test_path)\n    assert load_dotenv()\n    assert Path.cwd() == test_path\n    # .flaskenv doesn't overwrite .env\n    assert os.environ[\"FOO\"] == \"env\"\n    # set only in .flaskenv\n    assert os.environ[\"BAR\"] == \"bar\"\n    # set only..."
  },
  {
    "name": "test_dotenv_path",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "monkeypatch"
    ],
    "calls": [
      "load_dotenv",
      "monkeypatch._setitem.append",
      "Path.cwd"
    ],
    "code_location": {
      "file": "test_cli.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 560,
      "end_line": 566
    },
    "code_snippet": "def test_dotenv_path(monkeypatch):\n    for item in (\"FOO\", \"BAR\", \"EGGS\"):\n        monkeypatch._setitem.append((os.environ, item, notset))\n\n    load_dotenv(test_path / \".flaskenv\")\n    assert Path.cwd() == cwd\n    assert \"FOO\" in os.environ"
  },
  {
    "name": "test_dotenv_optional",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "monkeypatch"
    ],
    "calls": [
      "monkeypatch.setitem",
      "monkeypatch.chdir",
      "load_dotenv"
    ],
    "code_location": {
      "file": "test_cli.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 569,
      "end_line": 573
    },
    "code_snippet": "def test_dotenv_optional(monkeypatch):\n    monkeypatch.setitem(sys.modules, \"dotenv\", None)\n    monkeypatch.chdir(test_path)\n    load_dotenv()\n    assert \"FOO\" not in os.environ"
  },
  {
    "name": "test_disable_dotenv_from_env",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "monkeypatch",
      "runner"
    ],
    "calls": [
      "monkeypatch.chdir",
      "monkeypatch.setitem",
      "runner.invoke",
      "FlaskGroup"
    ],
    "code_location": {
      "file": "test_cli.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 577,
      "end_line": 581
    },
    "code_snippet": "def test_disable_dotenv_from_env(monkeypatch, runner):\n    monkeypatch.chdir(test_path)\n    monkeypatch.setitem(os.environ, \"FLASK_SKIP_DOTENV\", \"1\")\n    runner.invoke(FlaskGroup())\n    assert \"FOO\" not in os.environ"
  },
  {
    "name": "test_run_cert_path",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [],
    "calls": [
      "run_command.make_context",
      "run_command.make_context",
      "pytest.raises",
      "run_command.make_context",
      "pytest.raises",
      "run_command.make_context"
    ],
    "code_location": {
      "file": "test_cli.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 584,
      "end_line": 599
    },
    "code_snippet": "def test_run_cert_path():\n    # no key\n    with pytest.raises(click.BadParameter):\n        run_command.make_context(\"run\", [\"--cert\", __file__])\n\n    # no cert\n    with pytest.raises(click.BadParameter):\n        run_command.make_context(\"run\", [\"--key\", __file__])\n\n    # cert specified first\n    ctx = run_command.make_context(\"run\", [\"--cert\", __file__, \"--key\", __file__])\n    assert ctx.params[\"cert\"] == (__file__, __file__)\n\n    # key specified first\n    ctx = run_command.make_context(\"run\", [..."
  },
  {
    "name": "test_run_cert_adhoc",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "monkeypatch"
    ],
    "calls": [
      "monkeypatch.setitem",
      "monkeypatch.setitem",
      "run_command.make_context",
      "pytest.raises",
      "run_command.make_context",
      "types.ModuleType",
      "pytest.raises",
      "run_command.make_context"
    ],
    "code_location": {
      "file": "test_cli.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 602,
      "end_line": 616
    },
    "code_snippet": "def test_run_cert_adhoc(monkeypatch):\n    monkeypatch.setitem(sys.modules, \"cryptography\", None)\n\n    # cryptography not installed\n    with pytest.raises(click.BadParameter):\n        run_command.make_context(\"run\", [\"--cert\", \"adhoc\"])\n\n    # cryptography installed\n    monkeypatch.setitem(sys.modules, \"cryptography\", types.ModuleType(\"cryptography\"))\n    ctx = run_command.make_context(\"run\", [\"--cert\", \"adhoc\"])\n    assert ctx.params[\"cert\"] == \"adhoc\"\n\n    # no key with adhoc\n    with pytest.ra..."
  },
  {
    "name": "test_run_cert_import",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "monkeypatch"
    ],
    "calls": [
      "monkeypatch.setitem",
      "ssl.SSLContext",
      "monkeypatch.setitem",
      "run_command.make_context",
      "pytest.raises",
      "run_command.make_context",
      "pytest.raises",
      "run_command.make_context",
      "pytest.raises",
      "run_command.make_context"
    ],
    "code_location": {
      "file": "test_cli.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 619,
      "end_line": 638
    },
    "code_snippet": "def test_run_cert_import(monkeypatch):\n    monkeypatch.setitem(sys.modules, \"not_here\", None)\n\n    # ImportError\n    with pytest.raises(click.BadParameter):\n        run_command.make_context(\"run\", [\"--cert\", \"not_here\"])\n\n    with pytest.raises(click.BadParameter):\n        run_command.make_context(\"run\", [\"--cert\", \"flask\"])\n\n    # SSLContext\n    ssl_context = ssl.SSLContext(ssl.PROTOCOL_TLS_SERVER)\n\n    monkeypatch.setitem(sys.modules, \"ssl_context\", ssl_context)\n    ctx = run_command.make_cont..."
  },
  {
    "name": "test_run_cert_no_ssl",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "monkeypatch"
    ],
    "calls": [
      "monkeypatch.setitem",
      "pytest.raises",
      "run_command.make_context"
    ],
    "code_location": {
      "file": "test_cli.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 641,
      "end_line": 645
    },
    "code_snippet": "def test_run_cert_no_ssl(monkeypatch):\n    monkeypatch.setitem(sys.modules, \"ssl\", None)\n\n    with pytest.raises(click.BadParameter):\n        run_command.make_context(\"run\", [\"--cert\", \"not_here\"])"
  },
  {
    "name": "test_cli_blueprints",
    "docstring": "Test blueprint commands register correctly to the application",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app"
    ],
    "calls": [
      "Blueprint",
      "Blueprint",
      "Blueprint",
      "Blueprint",
      "custom.cli.command",
      "nested.cli.command",
      "merged.cli.command",
      "late.cli.command",
      "app.register_blueprint",
      "app.register_blueprint",
      "app.register_blueprint",
      "app.register_blueprint",
      "app.test_cli_runner",
      "app_runner.invoke",
      "app_runner.invoke",
      "app_runner.invoke",
      "app_runner.invoke",
      "click.echo",
      "click.echo",
      "click.echo",
      "click.echo"
    ],
    "code_location": {
      "file": "test_cli.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 648,
      "end_line": 688
    },
    "code_snippet": "def test_cli_blueprints(app):\n    \"\"\"Test blueprint commands register correctly to the application\"\"\"\n    custom = Blueprint(\"custom\", __name__, cli_group=\"customized\")\n    nested = Blueprint(\"nested\", __name__)\n    merged = Blueprint(\"merged\", __name__, cli_group=None)\n    late = Blueprint(\"late\", __name__)\n\n    @custom.cli.command(\"custom\")\n    def custom_command():\n        click.echo(\"custom_result\")\n\n    @nested.cli.command(\"nested\")\n    def nested_command():\n        click.echo(\"nested_resul..."
  },
  {
    "name": "test_cli_empty",
    "docstring": "If a Blueprint's CLI group is empty, do not register it.",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app"
    ],
    "calls": [
      "Blueprint",
      "app.register_blueprint",
      "invoke",
      "app.test_cli_runner"
    ],
    "code_location": {
      "file": "test_cli.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 691,
      "end_line": 697
    },
    "code_snippet": "def test_cli_empty(app):\n    \"\"\"If a Blueprint's CLI group is empty, do not register it.\"\"\"\n    bp = Blueprint(\"blue\", __name__, cli_group=\"blue\")\n    app.register_blueprint(bp)\n\n    result = app.test_cli_runner().invoke(args=[\"blue\", \"--help\"])\n    assert result.exit_code == 2, f\"Unexpected success:\\n\\n{result.output}\""
  },
  {
    "name": "test_run_exclude_patterns",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [],
    "calls": [
      "run_command.make_context"
    ],
    "code_location": {
      "file": "test_cli.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 700,
      "end_line": 702
    },
    "code_snippet": "def test_run_exclude_patterns():\n    ctx = run_command.make_context(\"run\", [\"--exclude-patterns\", __file__])\n    assert ctx.params[\"exclude_patterns\"] == [__file__]"
  },
  {
    "name": "common_test",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app"
    ],
    "calls": [
      "app.test_client",
      "parse_set_header",
      "sorted",
      "c.get",
      "c.post",
      "c.put",
      "c.open"
    ],
    "code_location": {
      "file": "test_views.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 7,
      "end_line": 14
    },
    "code_snippet": "def common_test(app):\n    c = app.test_client()\n\n    assert c.get(\"/\").data == b\"GET\"\n    assert c.post(\"/\").data == b\"POST\"\n    assert c.put(\"/\").status_code == 405\n    meths = parse_set_header(c.open(\"/\", method=\"OPTIONS\").headers[\"Allow\"])\n    assert sorted(meths) == [\"GET\", \"HEAD\", \"OPTIONS\", \"POST\"]"
  },
  {
    "name": "test_basic_view",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app"
    ],
    "calls": [
      "app.add_url_rule",
      "common_test",
      "Index.as_view"
    ],
    "code_location": {
      "file": "test_views.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 17,
      "end_line": 25
    },
    "code_snippet": "def test_basic_view(app):\n    class Index(flask.views.View):\n        methods = [\"GET\", \"POST\"]\n\n        def dispatch_request(self):\n            return flask.request.method\n\n    app.add_url_rule(\"/\", view_func=Index.as_view(\"index\"))\n    common_test(app)"
  },
  {
    "name": "test_method_based_view",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app"
    ],
    "calls": [
      "app.add_url_rule",
      "common_test",
      "Index.as_view"
    ],
    "code_location": {
      "file": "test_views.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 28,
      "end_line": 38
    },
    "code_snippet": "def test_method_based_view(app):\n    class Index(flask.views.MethodView):\n        def get(self):\n            return \"GET\"\n\n        def post(self):\n            return \"POST\"\n\n    app.add_url_rule(\"/\", view_func=Index.as_view(\"index\"))\n\n    common_test(app)"
  },
  {
    "name": "test_view_patching",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app"
    ],
    "calls": [
      "Index.as_view",
      "app.add_url_rule",
      "common_test"
    ],
    "code_location": {
      "file": "test_views.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 41,
      "end_line": 59
    },
    "code_snippet": "def test_view_patching(app):\n    class Index(flask.views.MethodView):\n        def get(self):\n            raise ZeroDivisionError\n\n        def post(self):\n            raise ZeroDivisionError\n\n    class Other(Index):\n        def get(self):\n            return \"GET\"\n\n        def post(self):\n            return \"POST\"\n\n    view = Index.as_view(\"index\")\n    view.view_class = Other\n    app.add_url_rule(\"/\", view_func=view)\n    common_test(app)"
  },
  {
    "name": "test_view_inheritance",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "client"
    ],
    "calls": [
      "app.add_url_rule",
      "parse_set_header",
      "sorted",
      "BetterIndex.as_view",
      "client.open"
    ],
    "code_location": {
      "file": "test_views.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 62,
      "end_line": 77
    },
    "code_snippet": "def test_view_inheritance(app, client):\n    class Index(flask.views.MethodView):\n        def get(self):\n            return \"GET\"\n\n        def post(self):\n            return \"POST\"\n\n    class BetterIndex(Index):\n        def delete(self):\n            return \"DELETE\"\n\n    app.add_url_rule(\"/\", view_func=BetterIndex.as_view(\"index\"))\n\n    meths = parse_set_header(client.open(\"/\", method=\"OPTIONS\").headers[\"Allow\"])\n    assert sorted(meths) == [\"DELETE\", \"GET\", \"HEAD\", \"OPTIONS\", \"POST\"]"
  },
  {
    "name": "test_view_decorators",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "client"
    ],
    "calls": [
      "app.add_url_rule",
      "client.get",
      "flask.make_response",
      "Index.as_view",
      "f"
    ],
    "code_location": {
      "file": "test_views.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 80,
      "end_line": 98
    },
    "code_snippet": "def test_view_decorators(app, client):\n    def add_x_parachute(f):\n        def new_function(*args, **kwargs):\n            resp = flask.make_response(f(*args, **kwargs))\n            resp.headers[\"X-Parachute\"] = \"awesome\"\n            return resp\n\n        return new_function\n\n    class Index(flask.views.View):\n        decorators = [add_x_parachute]\n\n        def dispatch_request(self):\n            return \"Awesome\"\n\n    app.add_url_rule(\"/\", view_func=Index.as_view(\"index\"))\n    rv = client.get(\"/\")..."
  },
  {
    "name": "test_view_provide_automatic_options_attr",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [],
    "calls": [
      "flask.Flask",
      "app.add_url_rule",
      "app.test_client",
      "c.open",
      "flask.Flask",
      "app.add_url_rule",
      "app.test_client",
      "c.open",
      "flask.Flask",
      "app.add_url_rule",
      "app.test_client",
      "c.open",
      "sorted",
      "Index1.as_view",
      "Index2.as_view",
      "Index3.as_view"
    ],
    "code_location": {
      "file": "test_views.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 101,
      "end_line": 138
    },
    "code_snippet": "def test_view_provide_automatic_options_attr():\n    app = flask.Flask(__name__)\n\n    class Index1(flask.views.View):\n        provide_automatic_options = False\n\n        def dispatch_request(self):\n            return \"Hello World!\"\n\n    app.add_url_rule(\"/\", view_func=Index1.as_view(\"index\"))\n    c = app.test_client()\n    rv = c.open(\"/\", method=\"OPTIONS\")\n    assert rv.status_code == 405\n\n    app = flask.Flask(__name__)\n\n    class Index2(flask.views.View):\n        methods = [\"OPTIONS\"]\n        pr..."
  },
  {
    "name": "test_implicit_head",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "client"
    ],
    "calls": [
      "app.add_url_rule",
      "client.get",
      "client.head",
      "flask.Response",
      "Index.as_view"
    ],
    "code_location": {
      "file": "test_views.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 141,
      "end_line": 152
    },
    "code_snippet": "def test_implicit_head(app, client):\n    class Index(flask.views.MethodView):\n        def get(self):\n            return flask.Response(\"Blub\", headers={\"X-Method\": flask.request.method})\n\n    app.add_url_rule(\"/\", view_func=Index.as_view(\"index\"))\n    rv = client.get(\"/\")\n    assert rv.data == b\"Blub\"\n    assert rv.headers[\"X-Method\"] == \"GET\"\n    rv = client.head(\"/\")\n    assert rv.data == b\"\"\n    assert rv.headers[\"X-Method\"] == \"HEAD\""
  },
  {
    "name": "test_explicit_head",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "client"
    ],
    "calls": [
      "app.add_url_rule",
      "client.get",
      "client.head",
      "flask.Response",
      "Index.as_view"
    ],
    "code_location": {
      "file": "test_views.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 155,
      "end_line": 168
    },
    "code_snippet": "def test_explicit_head(app, client):\n    class Index(flask.views.MethodView):\n        def get(self):\n            return \"GET\"\n\n        def head(self):\n            return flask.Response(\"\", headers={\"X-Method\": \"HEAD\"})\n\n    app.add_url_rule(\"/\", view_func=Index.as_view(\"index\"))\n    rv = client.get(\"/\")\n    assert rv.data == b\"GET\"\n    rv = client.head(\"/\")\n    assert rv.data == b\"\"\n    assert rv.headers[\"X-Method\"] == \"HEAD\""
  },
  {
    "name": "test_endpoint_override",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app"
    ],
    "calls": [
      "app.add_url_rule",
      "common_test",
      "pytest.raises",
      "app.add_url_rule",
      "Index.as_view",
      "Index.as_view"
    ],
    "code_location": {
      "file": "test_views.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 171,
      "end_line": 186
    },
    "code_snippet": "def test_endpoint_override(app):\n    app.debug = True\n\n    class Index(flask.views.View):\n        methods = [\"GET\", \"POST\"]\n\n        def dispatch_request(self):\n            return flask.request.method\n\n    app.add_url_rule(\"/\", view_func=Index.as_view(\"index\"))\n\n    with pytest.raises(AssertionError):\n        app.add_url_rule(\"/\", view_func=Index.as_view(\"index\"))\n\n    # But these tests should still pass. We just log a warning.\n    common_test(app)"
  },
  {
    "name": "test_methods_var_inheritance",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "client"
    ],
    "calls": [
      "app.add_url_rule",
      "ChildView.as_view",
      "client.get",
      "client.open"
    ],
    "code_location": {
      "file": "test_views.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 189,
      "end_line": 204
    },
    "code_snippet": "def test_methods_var_inheritance(app, client):\n    class BaseView(flask.views.MethodView):\n        methods = [\"GET\", \"PROPFIND\"]\n\n    class ChildView(BaseView):\n        def get(self):\n            return \"GET\"\n\n        def propfind(self):\n            return \"PROPFIND\"\n\n    app.add_url_rule(\"/\", view_func=ChildView.as_view(\"index\"))\n\n    assert client.get(\"/\").data == b\"GET\"\n    assert client.open(\"/\", method=\"PROPFIND\").data == b\"PROPFIND\"\n    assert ChildView.methods == {\"PROPFIND\", \"GET\"}"
  },
  {
    "name": "test_multiple_inheritance",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "client"
    ],
    "calls": [
      "app.add_url_rule",
      "sorted",
      "GetDeleteView.as_view",
      "client.get",
      "client.delete"
    ],
    "code_location": {
      "file": "test_views.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 207,
      "end_line": 223
    },
    "code_snippet": "def test_multiple_inheritance(app, client):\n    class GetView(flask.views.MethodView):\n        def get(self):\n            return \"GET\"\n\n    class DeleteView(flask.views.MethodView):\n        def delete(self):\n            return \"DELETE\"\n\n    class GetDeleteView(GetView, DeleteView):\n        pass\n\n    app.add_url_rule(\"/\", view_func=GetDeleteView.as_view(\"index\"))\n\n    assert client.get(\"/\").data == b\"GET\"\n    assert client.delete(\"/\").data == b\"DELETE\"\n    assert sorted(GetDeleteView.methods) == ..."
  },
  {
    "name": "test_remove_method_from_parent",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "client"
    ],
    "calls": [
      "app.add_url_rule",
      "sorted",
      "View.as_view",
      "client.get",
      "client.post"
    ],
    "code_location": {
      "file": "test_views.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 226,
      "end_line": 242
    },
    "code_snippet": "def test_remove_method_from_parent(app, client):\n    class GetView(flask.views.MethodView):\n        def get(self):\n            return \"GET\"\n\n    class OtherView(flask.views.MethodView):\n        def post(self):\n            return \"POST\"\n\n    class View(GetView, OtherView):\n        methods = [\"GET\"]\n\n    app.add_url_rule(\"/\", view_func=View.as_view(\"index\"))\n\n    assert client.get(\"/\").data == b\"GET\"\n    assert client.post(\"/\").status_code == 405\n    assert sorted(View.methods) == [\"GET\"]"
  },
  {
    "name": "test_init_once",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app",
      "client"
    ],
    "calls": [
      "app.add_url_rule",
      "str",
      "CountInit.as_view",
      "client.get",
      "client.get"
    ],
    "code_location": {
      "file": "test_views.py",
      "path": "/data3/pwh/flask/tests",
      "start_line": 245,
      "end_line": 260
    },
    "code_snippet": "def test_init_once(app, client):\n    n = 0\n\n    class CountInit(flask.views.View):\n        init_every_request = False\n\n        def __init__(self):\n            nonlocal n\n            n += 1\n\n        def dispatch_request(self):\n            return str(n)\n\n    app.add_url_rule(\"/\", view_func=CountInit.as_view(\"index\"))\n    assert client.get(\"/\").data == b\"1\"\n    assert client.get(\"/\").data == b\"1\""
  },
  {
    "name": "after_sync",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "response"
    ],
    "calls": [
      "Response"
    ],
    "code_location": {
      "file": "typing_app_decorators.py",
      "path": "/data3/pwh/flask/tests/type_check",
      "start_line": 10,
      "end_line": 11
    },
    "code_snippet": "def after_sync(response: Response) -> Response:\n    return Response()"
  },
  {
    "name": "before_sync",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [],
    "calls": [],
    "code_location": {
      "file": "typing_app_decorators.py",
      "path": "/data3/pwh/flask/tests/type_check",
      "start_line": 20,
      "end_line": 20
    },
    "code_snippet": "def before_sync() -> None: ..."
  },
  {
    "name": "teardown_sync",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "exc"
    ],
    "calls": [],
    "code_location": {
      "file": "typing_app_decorators.py",
      "path": "/data3/pwh/flask/tests/type_check",
      "start_line": 28,
      "end_line": 28
    },
    "code_snippet": "def teardown_sync(exc: BaseException | None) -> None: ..."
  },
  {
    "name": "handle_400",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "e"
    ],
    "calls": [
      "app.errorhandler",
      "app.errorhandler",
      "app.errorhandler"
    ],
    "code_location": {
      "file": "typing_error_handler.py",
      "path": "/data3/pwh/flask/tests/type_check",
      "start_line": 16,
      "end_line": 17
    },
    "code_snippet": "def handle_400(e: BadRequest) -> str:\n    return \"\""
  },
  {
    "name": "handle_custom",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "e"
    ],
    "calls": [
      "app.errorhandler"
    ],
    "code_location": {
      "file": "typing_error_handler.py",
      "path": "/data3/pwh/flask/tests/type_check",
      "start_line": 21,
      "end_line": 22
    },
    "code_snippet": "def handle_custom(e: ValueError) -> str:\n    return \"\""
  },
  {
    "name": "handle_accept_base",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "e"
    ],
    "calls": [
      "app.errorhandler"
    ],
    "code_location": {
      "file": "typing_error_handler.py",
      "path": "/data3/pwh/flask/tests/type_check",
      "start_line": 26,
      "end_line": 27
    },
    "code_snippet": "def handle_accept_base(e: Exception) -> str:\n    return \"\""
  },
  {
    "name": "handle_multiple",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "e"
    ],
    "calls": [
      "app.errorhandler",
      "app.errorhandler"
    ],
    "code_location": {
      "file": "typing_error_handler.py",
      "path": "/data3/pwh/flask/tests/type_check",
      "start_line": 32,
      "end_line": 33
    },
    "code_snippet": "def handle_multiple(e: BadRequest | NotFound) -> str:\n    return \"\""
  },
  {
    "name": "hello_str",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [],
    "calls": [
      "app.route"
    ],
    "code_location": {
      "file": "typing_route.py",
      "path": "/data3/pwh/flask/tests/type_check",
      "start_line": 17,
      "end_line": 18
    },
    "code_snippet": "def hello_str() -> str:\n    return \"<p>Hello, World!</p>\""
  },
  {
    "name": "hello_bytes",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [],
    "calls": [
      "app.route"
    ],
    "code_location": {
      "file": "typing_route.py",
      "path": "/data3/pwh/flask/tests/type_check",
      "start_line": 22,
      "end_line": 23
    },
    "code_snippet": "def hello_bytes() -> bytes:\n    return b\"<p>Hello, World!</p>\""
  },
  {
    "name": "hello_json",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [],
    "calls": [
      "app.route",
      "jsonify"
    ],
    "code_location": {
      "file": "typing_route.py",
      "path": "/data3/pwh/flask/tests/type_check",
      "start_line": 27,
      "end_line": 28
    },
    "code_snippet": "def hello_json() -> Response:\n    return jsonify(\"Hello, World!\")"
  },
  {
    "name": "hello_json_dict",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [],
    "calls": [
      "app.route"
    ],
    "code_location": {
      "file": "typing_route.py",
      "path": "/data3/pwh/flask/tests/type_check",
      "start_line": 32,
      "end_line": 33
    },
    "code_snippet": "def hello_json_dict() -> dict[str, t.Any]:\n    return {\"response\": \"Hello, World!\"}"
  },
  {
    "name": "hello_json_list",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [],
    "calls": [
      "app.route"
    ],
    "code_location": {
      "file": "typing_route.py",
      "path": "/data3/pwh/flask/tests/type_check",
      "start_line": 37,
      "end_line": 38
    },
    "code_snippet": "def hello_json_list() -> list[t.Any]:\n    return [{\"message\": \"Hello\"}, {\"message\": \"World\"}]"
  },
  {
    "name": "typed_dict",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [],
    "calls": [
      "app.route"
    ],
    "code_location": {
      "file": "typing_route.py",
      "path": "/data3/pwh/flask/tests/type_check",
      "start_line": 46,
      "end_line": 47
    },
    "code_snippet": "def typed_dict() -> StatusJSON:\n    return {\"status\": \"ok\"}"
  },
  {
    "name": "hello_generator",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [],
    "calls": [
      "app.route",
      "show",
      "range"
    ],
    "code_location": {
      "file": "typing_route.py",
      "path": "/data3/pwh/flask/tests/type_check",
      "start_line": 51,
      "end_line": 56
    },
    "code_snippet": "def hello_generator() -> t.Generator[str, None, None]:\n    def show() -> t.Generator[str, None, None]:\n        for x in range(100):\n            yield f\"data:{x}\\n\\n\"\n\n    return show()"
  },
  {
    "name": "hello_generator_expression",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [],
    "calls": [
      "app.route",
      "encode",
      "range"
    ],
    "code_location": {
      "file": "typing_route.py",
      "path": "/data3/pwh/flask/tests/type_check",
      "start_line": 60,
      "end_line": 61
    },
    "code_snippet": "def hello_generator_expression() -> t.Iterator[bytes]:\n    return (f\"data:{x}\\n\\n\".encode() for x in range(100))"
  },
  {
    "name": "hello_iterator",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [],
    "calls": [
      "app.route",
      "iter",
      "range"
    ],
    "code_location": {
      "file": "typing_route.py",
      "path": "/data3/pwh/flask/tests/type_check",
      "start_line": 65,
      "end_line": 66
    },
    "code_snippet": "def hello_iterator() -> t.Iterator[str]:\n    return iter([f\"data:{x}\\n\\n\" for x in range(100)])"
  },
  {
    "name": "tuple_status",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "code"
    ],
    "calls": [
      "app.route",
      "app.route"
    ],
    "code_location": {
      "file": "typing_route.py",
      "path": "/data3/pwh/flask/tests/type_check",
      "start_line": 71,
      "end_line": 72
    },
    "code_snippet": "def tuple_status(code: int = 200) -> tuple[str, int]:\n    return \"hello\", code"
  },
  {
    "name": "tuple_status_enum",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [],
    "calls": [
      "app.route"
    ],
    "code_location": {
      "file": "typing_route.py",
      "path": "/data3/pwh/flask/tests/type_check",
      "start_line": 76,
      "end_line": 77
    },
    "code_snippet": "def tuple_status_enum() -> tuple[str, int]:\n    return \"hello\", HTTPStatus.OK"
  },
  {
    "name": "tuple_headers",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [],
    "calls": [
      "app.route"
    ],
    "code_location": {
      "file": "typing_route.py",
      "path": "/data3/pwh/flask/tests/type_check",
      "start_line": 81,
      "end_line": 82
    },
    "code_snippet": "def tuple_headers() -> tuple[str, dict[str, str]]:\n    return \"Hello, World!\", {\"Content-Type\": \"text/plain\"}"
  },
  {
    "name": "return_template",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "name"
    ],
    "calls": [
      "app.route",
      "app.route",
      "render_template"
    ],
    "code_location": {
      "file": "typing_route.py",
      "path": "/data3/pwh/flask/tests/type_check",
      "start_line": 87,
      "end_line": 88
    },
    "code_snippet": "def return_template(name: str | None = None) -> str:\n    return render_template(\"index.html\", name=name)"
  },
  {
    "name": "return_template_stream",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [],
    "calls": [
      "app.route",
      "stream_template"
    ],
    "code_location": {
      "file": "typing_route.py",
      "path": "/data3/pwh/flask/tests/type_check",
      "start_line": 92,
      "end_line": 93
    },
    "code_snippet": "def return_template_stream() -> t.Iterator[str]:\n    return stream_template(\"index.html\", name=\"Hello\")"
  },
  {
    "name": "__init__",
    "docstring": "",
    "is_method": true,
    "class_name": "RenderTemplateView",
    "parameters": [
      "self",
      "template_name"
    ],
    "calls": [],
    "code_location": {
      "file": "typing_route.py",
      "path": "/data3/pwh/flask/tests/type_check",
      "start_line": 102,
      "end_line": 103
    },
    "code_snippet": "def __init__(self: RenderTemplateView, template_name: str) -> None:\n        self.template_name = template_name"
  },
  {
    "name": "dispatch_request",
    "docstring": "",
    "is_method": true,
    "class_name": "RenderTemplateView",
    "parameters": [
      "self"
    ],
    "calls": [
      "render_template"
    ],
    "code_location": {
      "file": "typing_route.py",
      "path": "/data3/pwh/flask/tests/type_check",
      "start_line": 105,
      "end_line": 106
    },
    "code_snippet": "def dispatch_request(self: RenderTemplateView) -> str:\n        return render_template(self.template_name)"
  },
  {
    "name": "index",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [],
    "calls": [
      "admin.route",
      "render_template"
    ],
    "code_location": {
      "file": "__init__.py",
      "path": "/data3/pwh/flask/tests/test_apps/blueprintapp/apps/admin",
      "start_line": 14,
      "end_line": 15
    },
    "code_snippet": "def index():\n    return render_template(\"admin/index.html\")"
  },
  {
    "name": "index2",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [],
    "calls": [
      "admin.route",
      "render_template"
    ],
    "code_location": {
      "file": "__init__.py",
      "path": "/data3/pwh/flask/tests/test_apps/blueprintapp/apps/admin",
      "start_line": 19,
      "end_line": 20
    },
    "code_snippet": "def index2():\n    return render_template(\"./admin/index.html\")"
  },
  {
    "name": "index",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [],
    "calls": [
      "frontend.route",
      "render_template"
    ],
    "code_location": {
      "file": "__init__.py",
      "path": "/data3/pwh/flask/tests/test_apps/blueprintapp/apps/frontend",
      "start_line": 8,
      "end_line": 9
    },
    "code_snippet": "def index():\n    return render_template(\"frontend/index.html\")"
  },
  {
    "name": "missing_template",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [],
    "calls": [
      "frontend.route",
      "render_template"
    ],
    "code_location": {
      "file": "__init__.py",
      "path": "/data3/pwh/flask/tests/test_apps/blueprintapp/apps/frontend",
      "start_line": 13,
      "end_line": 14
    },
    "code_snippet": "def missing_template():\n    return render_template(\"missing_template.html\")"
  },
  {
    "name": "hello",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [],
    "calls": [
      "app.route"
    ],
    "code_location": {
      "file": "hello.py",
      "path": "/data3/pwh/flask/tests/test_apps/helloworld",
      "start_line": 7,
      "end_line": 8
    },
    "code_snippet": "def hello():\n    return \"Hello World!\""
  },
  {
    "name": "create_app",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [],
    "calls": [
      "Flask"
    ],
    "code_location": {
      "file": "factory.py",
      "path": "/data3/pwh/flask/tests/test_apps/cliapp",
      "start_line": 4,
      "end_line": 5
    },
    "code_snippet": "def create_app():\n    return Flask(\"app\")"
  },
  {
    "name": "create_app2",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "foo",
      "bar"
    ],
    "calls": [
      "Flask",
      "join"
    ],
    "code_location": {
      "file": "factory.py",
      "path": "/data3/pwh/flask/tests/test_apps/cliapp",
      "start_line": 8,
      "end_line": 9
    },
    "code_snippet": "def create_app2(foo, bar):\n    return Flask(\"_\".join([\"app2\", foo, bar]))"
  },
  {
    "name": "no_app",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [],
    "calls": [],
    "code_location": {
      "file": "factory.py",
      "path": "/data3/pwh/flask/tests/test_apps/cliapp",
      "start_line": 12,
      "end_line": 13
    },
    "code_snippet": "def no_app():\n    pass"
  },
  {
    "name": "github_link",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "name",
      "rawtext",
      "text",
      "lineno",
      "inliner",
      "options",
      "content"
    ],
    "calls": [
      "text.endswith",
      "set_classes",
      "reference",
      "rsplit",
      "words.strip",
      "packaging.version.parse"
    ],
    "code_location": {
      "file": "conf.py",
      "path": "/data3/pwh/flask/docs",
      "start_line": 72,
      "end_line": 97
    },
    "code_snippet": "def github_link(name, rawtext, text, lineno, inliner, options=None, content=None):\n    app = inliner.document.settings.env.app\n    release = app.config.release\n    base_url = \"https://github.com/pallets/flask/tree/\"\n\n    if text.endswith(\">\"):\n        words, text = text[:-1].rsplit(\"<\", 1)\n        words = words.strip()\n    else:\n        words = None\n\n    if packaging.version.parse(release).is_devrelease:\n        url = f\"{base_url}main/{text}\"\n    else:\n        url = f\"{base_url}{release}/{text}\"..."
  },
  {
    "name": "setup",
    "docstring": "",
    "is_method": false,
    "class_name": null,
    "parameters": [
      "app"
    ],
    "calls": [
      "app.add_role"
    ],
    "code_location": {
      "file": "conf.py",
      "path": "/data3/pwh/flask/docs",
      "start_line": 100,
      "end_line": 101
    },
    "code_snippet": "def setup(app):\n    app.add_role(\"gh\", github_link)"
  }
]